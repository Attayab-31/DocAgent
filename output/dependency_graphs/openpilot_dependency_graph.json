{
  "conftest.pytest_sessionstart": {
    "id": "conftest.pytest_sessionstart",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\conftest.py",
    "relative_path": "conftest.py",
    "depends_on": [],
    "start_line": 24,
    "end_line": 27,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "conftest.pytest_runtest_call": {
    "id": "conftest.pytest_runtest_call",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\conftest.py",
    "relative_path": "conftest.py",
    "depends_on": [],
    "start_line": 31,
    "end_line": 38,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "conftest.clean_env": {
    "id": "conftest.clean_env",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\conftest.py",
    "relative_path": "conftest.py",
    "depends_on": [],
    "start_line": 42,
    "end_line": 46,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "conftest.openpilot_function_fixture": {
    "id": "conftest.openpilot_function_fixture",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\conftest.py",
    "relative_path": "conftest.py",
    "depends_on": [
      "conftest.clean_env"
    ],
    "start_line": 50,
    "end_line": 69,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "conftest.openpilot_class_fixture": {
    "id": "conftest.openpilot_class_fixture",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\conftest.py",
    "relative_path": "conftest.py",
    "depends_on": [
      "conftest.clean_env"
    ],
    "start_line": 74,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "conftest.tici_setup_fixture": {
    "id": "conftest.tici_setup_fixture",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\conftest.py",
    "relative_path": "conftest.py",
    "depends_on": [],
    "start_line": 80,
    "end_line": 86,
    "has_docstring": true,
    "docstring": "Ensure a consistent state for tests on-device. Needs the openpilot function fixture to run first.",
    "language": "python"
  },
  "conftest.pytest_collection_modifyitems": {
    "id": "conftest.pytest_collection_modifyitems",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\conftest.py",
    "relative_path": "conftest.py",
    "depends_on": [],
    "start_line": 90,
    "end_line": 102,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "conftest.pytest_configure": {
    "id": "conftest.pytest_configure",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\conftest.py",
    "relative_path": "conftest.py",
    "depends_on": [],
    "start_line": 106,
    "end_line": 114,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.services.Service": {
    "id": "cereal.services.Service",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\services.py",
    "relative_path": "cereal\\services.py",
    "depends_on": [],
    "start_line": 5,
    "end_line": 9,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.services.Service.__init__": {
    "id": "cereal.services.Service.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\services.py",
    "relative_path": "cereal\\services.py",
    "depends_on": [],
    "start_line": 6,
    "end_line": 9,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.services.build_header": {
    "id": "cereal.services.build_header",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\services.py",
    "relative_path": "cereal\\services.py",
    "depends_on": [],
    "start_line": 100,
    "end_line": 119,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.bridge.get_services": {
    "id": "cereal.messaging.bridge.get_services",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\bridge.cc",
    "relative_path": "cereal\\messaging\\bridge.cc",
    "depends_on": [],
    "start_line": 9,
    "end_line": 20,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static std::vector<std::string> get_services(const std::string &whitelist_str, bool zmq_to_msgq) {\n  std::vector<std::string> service_list;\n  for (const auto& it : services) {\n    std::string name = it.second.name;\n    bool in_whitelist = whitelist_str.find(name) != std::string::npos;\n    if (zmq_to_msgq && !in_whitelist) {\n      continue;\n    }\n    service_list.push_back(name);\n  }\n  return service_list;\n}\n"
  },
  "cereal.messaging.bridge.msgq_to_zmq": {
    "id": "cereal.messaging.bridge.msgq_to_zmq",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\bridge.cc",
    "relative_path": "cereal\\messaging\\bridge.cc",
    "depends_on": [],
    "start_line": 22,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void msgq_to_zmq(const std::vector<std::string> &endpoints, const std::string &ip) {\n  MsgqToZmq bridge;\n  bridge.run(endpoints, ip);\n}\n"
  },
  "cereal.messaging.bridge.zmq_to_msgq": {
    "id": "cereal.messaging.bridge.zmq_to_msgq",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\bridge.cc",
    "relative_path": "cereal\\messaging\\bridge.cc",
    "depends_on": [],
    "start_line": 27,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void zmq_to_msgq(const std::vector<std::string> &endpoints, const std::string &ip) {\n  auto poller = std::make_unique<ZMQPoller>();\n  auto pub_context = std::make_unique<MSGQContext>();\n  auto sub_context = std::make_unique<ZMQContext>();\n  std::map<SubSocket *, PubSocket *> sub2pub;\n\n  for (auto endpoint : endpoints) {\n    auto pub_sock = new MSGQPubSocket();\n    auto sub_sock = new ZMQSubSocket();\n    pub_sock->connect(pub_context.get(), endpoint);\n    sub_sock->connect(sub_context.get(), endpoint, ip, false);\n\n    poller->registerSocket(sub_sock);\n    sub2pub[sub_sock] = pub_sock;\n  }\n\n  while (!do_exit) {\n    for (auto sub_sock : poller->poll(100)) {\n      std::unique_ptr<Message> msg(sub_sock->receive(true));\n      if (msg) {\n        sub2pub[sub_sock]->sendMessage(msg.get());\n      }\n    }\n  }\n\n  // Clean up allocated sockets\n  for (auto &[sub_sock, pub_sock] : sub2pub) {\n    delete sub_sock;\n    delete pub_sock;\n  }\n}\n"
  },
  "cereal.messaging.bridge.main": {
    "id": "cereal.messaging.bridge.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\bridge.cc",
    "relative_path": "cereal\\messaging\\bridge.cc",
    "depends_on": [],
    "start_line": 59,
    "end_line": 71,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int main(int argc, char **argv) {\n  bool is_zmq_to_msgq = argc > 2;\n  std::string ip = is_zmq_to_msgq ? argv[1] : \"127.0.0.1\";\n  std::string whitelist_str = is_zmq_to_msgq ? std::string(argv[2]) : \"\";\n  std::vector<std::string> endpoints = get_services(whitelist_str, is_zmq_to_msgq);\n\n  if (is_zmq_to_msgq) {\n    zmq_to_msgq(endpoints, ip);\n  } else {\n    msgq_to_zmq(endpoints, ip);\n  }\n  return 0;\n}\n"
  },
  "cereal.messaging.messaging.SubMaster": {
    "id": "cereal.messaging.messaging.SubMaster",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\messaging.h",
    "relative_path": "cereal\\messaging\\messaging.h",
    "depends_on": [],
    "start_line": 15,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class SubMaster {\npublic:\n  SubMaster(const std::vector<const char *> &service_list, const std::vector<const char *> &poll = {},\n            const char *address = nullptr, const std::vector<const char *> &ignore_alive = {});\n  void update(int timeout = 1000);\n  void update_msgs(uint64_t current_time, const std::vector<std::pair<std::string, cereal::Event::Reader>> &messages);\n  inline bool allAlive(const std::vector<const char *> &service_list = {}) { return all_(service_list, false, true); }\n  inline bool allValid(const std::vector<const char *> &service_list = {}) { return all_(service_list, true, false); }\n  inline bool allAliveAndValid(const std::vector<const char *> &service_list = {}) { return all_(service_list, true, true); }\n  void drain();\n  ~SubMaster();\n\n  uint64_t frame = 0;\n  bool updated(const char *name) const;\n  bool alive(const char *name) const;\n  bool valid(const char *name) const;\n  uint64_t rcv_frame(const char *name) const;\n  uint64_t rcv_time(const char *name) const;\n  cereal::Event::Reader &operator[](const char *name) const;\n\nprivate:\n  bool all_(const std::vector<const char *> &service_list, bool valid, bool alive);\n  Poller *poller_ = nullptr;\n  struct SubMessage;\n  std::map<SubSocket *, SubMessage *> messages_;\n  std::map<std::string, SubMessage *> services_;\n};\n"
  },
  "cereal.messaging.messaging.MessageBuilder": {
    "id": "cereal.messaging.messaging.MessageBuilder",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\messaging.h",
    "relative_path": "cereal\\messaging\\messaging.h",
    "depends_on": [],
    "start_line": 43,
    "end_line": 73,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class MessageBuilder : public capnp::MallocMessageBuilder {\npublic:\n  MessageBuilder() = default;\n\n  cereal::Event::Builder initEvent(bool valid = true) {\n    cereal::Event::Builder event = initRoot<cereal::Event>();\n    event.setLogMonoTime(nanos_since_boot());\n    event.setValid(valid);\n    return event;\n  }\n\n  kj::ArrayPtr<capnp::byte> toBytes() {\n    heapArray_ = capnp::messageToFlatArray(*this);\n    return heapArray_.asBytes();\n  }\n\n  size_t getSerializedSize() {\n    return capnp::computeSerializedSizeInWords(*this) * sizeof(capnp::word);\n  }\n\n  int serializeToBuffer(unsigned char *buffer, size_t buffer_size) {\n    size_t serialized_size = getSerializedSize();\n    if (serialized_size > buffer_size) { return -1; }\n    kj::ArrayOutputStream out(kj::ArrayPtr<capnp::byte>(buffer, buffer_size));\n    capnp::writeMessage(out, *this);\n    return serialized_size;\n  }\n\nprivate:\n  kj::Array<capnp::word> heapArray_;\n};\n"
  },
  "cereal.messaging.messaging.MessageBuilder.initEvent": {
    "id": "cereal.messaging.messaging.MessageBuilder.initEvent",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\messaging.h",
    "relative_path": "cereal\\messaging\\messaging.h",
    "depends_on": [],
    "start_line": 47,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  cereal::Event::Builder initEvent(bool valid = true) {\n    cereal::Event::Builder event = initRoot<cereal::Event>();\n    event.setLogMonoTime(nanos_since_boot());\n    event.setValid(valid);\n    return event;\n  }\n"
  },
  "cereal.messaging.messaging.MessageBuilder.toBytes": {
    "id": "cereal.messaging.messaging.MessageBuilder.toBytes",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\messaging.h",
    "relative_path": "cereal\\messaging\\messaging.h",
    "depends_on": [],
    "start_line": 54,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  kj::ArrayPtr<capnp::byte> toBytes() {\n    heapArray_ = capnp::messageToFlatArray(*this);\n    return heapArray_.asBytes();\n  }\n"
  },
  "cereal.messaging.messaging.MessageBuilder.getSerializedSize": {
    "id": "cereal.messaging.messaging.MessageBuilder.getSerializedSize",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\messaging.h",
    "relative_path": "cereal\\messaging\\messaging.h",
    "depends_on": [],
    "start_line": 59,
    "end_line": 61,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  size_t getSerializedSize() {\n    return capnp::computeSerializedSizeInWords(*this) * sizeof(capnp::word);\n  }\n"
  },
  "cereal.messaging.messaging.MessageBuilder.serializeToBuffer": {
    "id": "cereal.messaging.messaging.MessageBuilder.serializeToBuffer",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\messaging.h",
    "relative_path": "cereal\\messaging\\messaging.h",
    "depends_on": [],
    "start_line": 63,
    "end_line": 69,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  int serializeToBuffer(unsigned char *buffer, size_t buffer_size) {\n    size_t serialized_size = getSerializedSize();\n    if (serialized_size > buffer_size) { return -1; }\n    kj::ArrayOutputStream out(kj::ArrayPtr<capnp::byte>(buffer, buffer_size));\n    capnp::writeMessage(out, *this);\n    return serialized_size;\n  }\n"
  },
  "cereal.messaging.messaging.PubMaster": {
    "id": "cereal.messaging.messaging.PubMaster",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\messaging.h",
    "relative_path": "cereal\\messaging\\messaging.h",
    "depends_on": [],
    "start_line": 75,
    "end_line": 84,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class PubMaster {\npublic:\n  PubMaster(const std::vector<const char *> &service_list);\n  inline int send(const char *name, capnp::byte *data, size_t size) { return sockets_.at(name)->send((char *)data, size); }\n  int send(const char *name, MessageBuilder &msg);\n  ~PubMaster();\n\nprivate:\n  std::map<std::string, PubSocket *> sockets_;\n};\n"
  },
  "cereal.messaging.messaging.AlignedBuffer": {
    "id": "cereal.messaging.messaging.AlignedBuffer",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\messaging.h",
    "relative_path": "cereal\\messaging\\messaging.h",
    "depends_on": [],
    "start_line": 86,
    "end_line": 102,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class AlignedBuffer {\npublic:\n  kj::ArrayPtr<const capnp::word> align(const char *data, const size_t size) {\n    words_size = size / sizeof(capnp::word) + 1;\n    if (aligned_buf.size() < words_size) {\n      aligned_buf = kj::heapArray<capnp::word>(words_size < 512 ? 512 : words_size);\n    }\n    memcpy(aligned_buf.begin(), data, size);\n    return aligned_buf.slice(0, words_size);\n  }\n  inline kj::ArrayPtr<const capnp::word> align(Message *m) {\n    return align(m->getData(), m->getSize());\n  }\nprivate:\n  kj::Array<capnp::word> aligned_buf;\n  size_t words_size;\n};\n"
  },
  "cereal.messaging.messaging.AlignedBuffer.align": {
    "id": "cereal.messaging.messaging.AlignedBuffer.align",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\messaging.h",
    "relative_path": "cereal\\messaging\\messaging.h",
    "depends_on": [],
    "start_line": 96,
    "end_line": 98,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  inline kj::ArrayPtr<const capnp::word> align(Message *m) {\n    return align(m->getData(), m->getSize());\n  }\n"
  },
  "cereal.messaging.msgq_to_zmq.recv_zmq_msg": {
    "id": "cereal.messaging.msgq_to_zmq.recv_zmq_msg",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\msgq_to_zmq.cc",
    "relative_path": "cereal\\messaging\\msgq_to_zmq.cc",
    "depends_on": [],
    "start_line": 12,
    "end_line": 21,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static std::string recv_zmq_msg(void *sock) {\n  zmq_msg_t msg;\n  zmq_msg_init(&msg);\n  std::string ret;\n  if (zmq_msg_recv(&msg, sock, 0) > 0) {\n    ret.assign((char *)zmq_msg_data(&msg), zmq_msg_size(&msg));\n  }\n  zmq_msg_close(&msg);\n  return ret;\n}\n"
  },
  "cereal.messaging.msgq_to_zmq.MsgqToZmq": {
    "id": "cereal.messaging.msgq_to_zmq.MsgqToZmq",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\msgq_to_zmq.h",
    "relative_path": "cereal\\messaging\\msgq_to_zmq.h",
    "depends_on": [],
    "start_line": 14,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class MsgqToZmq {\npublic:\n  MsgqToZmq() {}\n  void run(const std::vector<std::string> &endpoints, const std::string &ip);\n\nprotected:\n  void registerSockets();\n  void zmqMonitorThread();\n\n  struct SocketPair {\n    std::string endpoint;\n    std::unique_ptr<ZMQPubSocket> pub_sock;\n    std::unique_ptr<MSGQSubSocket> sub_sock;\n    int connected_clients = 0;\n  };\n\n  std::unique_ptr<MSGQContext> msgq_context;\n  std::unique_ptr<ZMQContext> zmq_context;\n  std::mutex mutex;\n  std::condition_variable cv;\n  std::unique_ptr<MSGQPoller> msgq_poller;\n  std::map<SubSocket *, ZMQPubSocket *> sub2pub;\n  std::vector<SocketPair> socket_pairs;\n};\n"
  },
  "cereal.messaging.socketmaster.inList": {
    "id": "cereal.messaging.socketmaster.inList",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\socketmaster.cc",
    "relative_path": "cereal\\messaging\\socketmaster.cc",
    "depends_on": [],
    "start_line": 11,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline bool inList(const std::vector<const char *> &list, const char *value) {\n  for (auto &v : list) {\n    if (strcmp(value, v) == 0) return true;\n  }\n  return false;\n}\n"
  },
  "cereal.messaging.socketmaster.MessageContext": {
    "id": "cereal.messaging.socketmaster.MessageContext",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\socketmaster.cc",
    "relative_path": "cereal\\messaging\\socketmaster.cc",
    "depends_on": [],
    "start_line": 18,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class MessageContext {\npublic:\n  MessageContext() : ctx_(nullptr) {}\n  ~MessageContext() { delete ctx_; }\n  inline Context *context() {\n    std::call_once(init_flag, [=]() { ctx_ = Context::create(); });\n    return ctx_;\n  }\nprivate:\n  Context *ctx_;\n  std::once_flag init_flag;\n};\n"
  },
  "cereal.messaging.socketmaster.MessageContext.context": {
    "id": "cereal.messaging.socketmaster.MessageContext.context",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\socketmaster.cc",
    "relative_path": "cereal\\messaging\\socketmaster.cc",
    "depends_on": [],
    "start_line": 22,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  inline Context *context() {\n    std::call_once(init_flag, [=]() { ctx_ = Context::create(); });\n    return ctx_;\n  }\n"
  },
  "cereal.messaging.__init__.reset_context": {
    "id": "cereal.messaging.__init__.reset_context",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [],
    "start_line": 14,
    "end_line": 18,
    "has_docstring": true,
    "docstring": "\n    No docstring provided.\n    ",
    "language": "python"
  },
  "cereal.messaging.__init__.log_from_bytes": {
    "id": "cereal.messaging.__init__.log_from_bytes",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 25,
    "has_docstring": true,
    "docstring": "\n    No docstring provided.\n    ",
    "language": "python"
  },
  "cereal.messaging.__init__.new_message": {
    "id": "cereal.messaging.__init__.new_message",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [],
    "start_line": 27,
    "end_line": 38,
    "has_docstring": true,
    "docstring": "\n    No docstring provided.\n    ",
    "language": "python"
  },
  "cereal.messaging.__init__.drain_sock": {
    "id": "cereal.messaging.__init__.drain_sock",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [
      "cereal.messaging.__init__.log_from_bytes"
    ],
    "start_line": 40,
    "end_line": 45,
    "has_docstring": true,
    "docstring": "\n    No docstring provided.\n    ",
    "language": "python"
  },
  "cereal.messaging.__init__.recv_sock": {
    "id": "cereal.messaging.__init__.recv_sock",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [
      "cereal.messaging.__init__.log_from_bytes"
    ],
    "start_line": 47,
    "end_line": 62,
    "has_docstring": true,
    "docstring": "\n    No docstring provided.\n    ",
    "language": "python"
  },
  "cereal.messaging.__init__.recv_one": {
    "id": "cereal.messaging.__init__.recv_one",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [
      "cereal.messaging.__init__.log_from_bytes"
    ],
    "start_line": 64,
    "end_line": 71,
    "has_docstring": true,
    "docstring": "\n    No docstring provided.\n    ",
    "language": "python"
  },
  "cereal.messaging.__init__.recv_one_or_none": {
    "id": "cereal.messaging.__init__.recv_one_or_none",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [
      "cereal.messaging.__init__.log_from_bytes"
    ],
    "start_line": 73,
    "end_line": 80,
    "has_docstring": true,
    "docstring": "\n    No docstring provided.\n    ",
    "language": "python"
  },
  "cereal.messaging.__init__.recv_one_retry": {
    "id": "cereal.messaging.__init__.recv_one_retry",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [
      "cereal.messaging.__init__.log_from_bytes"
    ],
    "start_line": 82,
    "end_line": 89,
    "has_docstring": true,
    "docstring": "\n    No docstring provided.\n    ",
    "language": "python"
  },
  "cereal.messaging.__init__.FrequencyTracker": {
    "id": "cereal.messaging.__init__.FrequencyTracker",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [],
    "start_line": 91,
    "end_line": 135,
    "has_docstring": true,
    "docstring": "\n    No docstring provided.\n    ",
    "language": "python"
  },
  "cereal.messaging.__init__.FrequencyTracker.__init__": {
    "id": "cereal.messaging.__init__.FrequencyTracker.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [],
    "start_line": 96,
    "end_line": 112,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.__init__.FrequencyTracker.record_recv_time": {
    "id": "cereal.messaging.__init__.FrequencyTracker.record_recv_time",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [],
    "start_line": 114,
    "end_line": 122,
    "has_docstring": true,
    "docstring": "\n        No docstring provided.\n        ",
    "language": "python"
  },
  "cereal.messaging.__init__.FrequencyTracker.valid": {
    "id": "cereal.messaging.__init__.FrequencyTracker.valid",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [],
    "start_line": 125,
    "end_line": 135,
    "has_docstring": true,
    "docstring": "\n        No docstring provided.\n        ",
    "language": "python"
  },
  "cereal.messaging.__init__.SubMaster": {
    "id": "cereal.messaging.__init__.SubMaster",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [
      "cereal.messaging.__init__.new_message",
      "cereal.messaging.__init__.recv_one_or_none",
      "cereal.messaging.__init__.FrequencyTracker"
    ],
    "start_line": 137,
    "end_line": 244,
    "has_docstring": true,
    "docstring": "\n    No docstring provided.\n    ",
    "language": "python"
  },
  "cereal.messaging.__init__.SubMaster.__init__": {
    "id": "cereal.messaging.__init__.SubMaster.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [
      "cereal.messaging.__init__.new_message",
      "cereal.messaging.__init__.FrequencyTracker"
    ],
    "start_line": 142,
    "end_line": 175,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.__init__.SubMaster.__getitem__": {
    "id": "cereal.messaging.__init__.SubMaster.__getitem__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [],
    "start_line": 177,
    "end_line": 181,
    "has_docstring": true,
    "docstring": "\n        No docstring provided.\n        ",
    "language": "python"
  },
  "cereal.messaging.__init__.SubMaster._check_avg_freq": {
    "id": "cereal.messaging.__init__.SubMaster._check_avg_freq",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [],
    "start_line": 183,
    "end_line": 187,
    "has_docstring": true,
    "docstring": "\n        No docstring provided.\n        ",
    "language": "python"
  },
  "cereal.messaging.__init__.SubMaster.update": {
    "id": "cereal.messaging.__init__.SubMaster.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [
      "cereal.messaging.__init__.recv_one_or_none"
    ],
    "start_line": 189,
    "end_line": 198,
    "has_docstring": true,
    "docstring": "\n        No docstring provided.\n        ",
    "language": "python"
  },
  "cereal.messaging.__init__.SubMaster.update_msgs": {
    "id": "cereal.messaging.__init__.SubMaster.update_msgs",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [],
    "start_line": 200,
    "end_line": 220,
    "has_docstring": true,
    "docstring": "\n        No docstring provided.\n        ",
    "language": "python"
  },
  "cereal.messaging.__init__.SubMaster.all_alive": {
    "id": "cereal.messaging.__init__.SubMaster.all_alive",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [],
    "start_line": 222,
    "end_line": 226,
    "has_docstring": true,
    "docstring": "\n        No docstring provided.\n        ",
    "language": "python"
  },
  "cereal.messaging.__init__.SubMaster.all_freq_ok": {
    "id": "cereal.messaging.__init__.SubMaster.all_freq_ok",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [],
    "start_line": 228,
    "end_line": 232,
    "has_docstring": true,
    "docstring": "\n        No docstring provided.\n        ",
    "language": "python"
  },
  "cereal.messaging.__init__.SubMaster.all_valid": {
    "id": "cereal.messaging.__init__.SubMaster.all_valid",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [],
    "start_line": 234,
    "end_line": 238,
    "has_docstring": true,
    "docstring": "\n        No docstring provided.\n        ",
    "language": "python"
  },
  "cereal.messaging.__init__.SubMaster.all_checks": {
    "id": "cereal.messaging.__init__.SubMaster.all_checks",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [],
    "start_line": 240,
    "end_line": 244,
    "has_docstring": true,
    "docstring": "\n        No docstring provided.\n        ",
    "language": "python"
  },
  "cereal.messaging.__init__.PubMaster": {
    "id": "cereal.messaging.__init__.PubMaster",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [],
    "start_line": 246,
    "end_line": 278,
    "has_docstring": true,
    "docstring": "\n    No docstring provided.\n    ",
    "language": "python"
  },
  "cereal.messaging.__init__.PubMaster.__init__": {
    "id": "cereal.messaging.__init__.PubMaster.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [],
    "start_line": 251,
    "end_line": 254,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.__init__.PubMaster.send": {
    "id": "cereal.messaging.__init__.PubMaster.send",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [],
    "start_line": 256,
    "end_line": 262,
    "has_docstring": true,
    "docstring": "\n        No docstring provided.\n        ",
    "language": "python"
  },
  "cereal.messaging.__init__.PubMaster.wait_for_readers_to_update": {
    "id": "cereal.messaging.__init__.PubMaster.wait_for_readers_to_update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [],
    "start_line": 264,
    "end_line": 272,
    "has_docstring": true,
    "docstring": "\n        No docstring provided.\n        ",
    "language": "python"
  },
  "cereal.messaging.__init__.PubMaster.all_readers_updated": {
    "id": "cereal.messaging.__init__.PubMaster.all_readers_updated",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\__init__.py",
    "relative_path": "cereal\\messaging\\__init__.py",
    "depends_on": [],
    "start_line": 274,
    "end_line": 278,
    "has_docstring": true,
    "docstring": "\n        No docstring provided.\n        ",
    "language": "python"
  },
  "cereal.messaging.tests.test_messaging.random_sock": {
    "id": "cereal.messaging.tests.test_messaging.random_sock",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_messaging.py",
    "relative_path": "cereal\\messaging\\tests\\test_messaging.py",
    "depends_on": [],
    "start_line": 15,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_messaging.random_socks": {
    "id": "cereal.messaging.tests.test_messaging.random_socks",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_messaging.py",
    "relative_path": "cereal\\messaging\\tests\\test_messaging.py",
    "depends_on": [
      "cereal.messaging.tests.test_messaging.random_sock"
    ],
    "start_line": 18,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_messaging.random_bytes": {
    "id": "cereal.messaging.tests.test_messaging.random_bytes",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_messaging.py",
    "relative_path": "cereal\\messaging\\tests\\test_messaging.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_messaging.zmq_sleep": {
    "id": "cereal.messaging.tests.test_messaging.zmq_sleep",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_messaging.py",
    "relative_path": "cereal\\messaging\\tests\\test_messaging.py",
    "depends_on": [],
    "start_line": 24,
    "end_line": 29,
    "has_docstring": true,
    "docstring": "\n    No docstring provided.\n    ",
    "language": "python"
  },
  "cereal.messaging.tests.test_messaging.random_carstate": {
    "id": "cereal.messaging.tests.test_messaging.random_carstate",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_messaging.py",
    "relative_path": "cereal\\messaging\\tests\\test_messaging.py",
    "depends_on": [],
    "start_line": 31,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_messaging.assert_carstate": {
    "id": "cereal.messaging.tests.test_messaging.assert_carstate",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_messaging.py",
    "relative_path": "cereal\\messaging\\tests\\test_messaging.py",
    "depends_on": [],
    "start_line": 39,
    "end_line": 43,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_messaging.delayed_send": {
    "id": "cereal.messaging.tests.test_messaging.delayed_send",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_messaging.py",
    "relative_path": "cereal\\messaging\\tests\\test_messaging.py",
    "depends_on": [],
    "start_line": 45,
    "end_line": 49,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_messaging.TestMessaging": {
    "id": "cereal.messaging.tests.test_messaging.TestMessaging",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_messaging.py",
    "relative_path": "cereal\\messaging\\tests\\test_messaging.py",
    "depends_on": [
      "cereal.messaging.tests.test_messaging.random_carstate",
      "cereal.messaging.tests.test_messaging.assert_carstate",
      "cereal.messaging.tests.test_messaging.delayed_send",
      "cereal.messaging.tests.test_messaging.zmq_sleep"
    ],
    "start_line": 51,
    "end_line": 162,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_messaging.TestMessaging.setUp": {
    "id": "cereal.messaging.tests.test_messaging.TestMessaging.setUp",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_messaging.py",
    "relative_path": "cereal\\messaging\\tests\\test_messaging.py",
    "depends_on": [
      "cereal.messaging.tests.test_messaging.zmq_sleep"
    ],
    "start_line": 53,
    "end_line": 59,
    "has_docstring": true,
    "docstring": "\n        No docstring provided.\n        ",
    "language": "python"
  },
  "cereal.messaging.tests.test_messaging.TestMessaging.test_new_message": {
    "id": "cereal.messaging.tests.test_messaging.TestMessaging.test_new_message",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_messaging.py",
    "relative_path": "cereal\\messaging\\tests\\test_messaging.py",
    "depends_on": [],
    "start_line": 62,
    "end_line": 72,
    "has_docstring": true,
    "docstring": "\n        No docstring provided.\n        ",
    "language": "python"
  },
  "cereal.messaging.tests.test_messaging.TestMessaging.test_pub_sock": {
    "id": "cereal.messaging.tests.test_messaging.TestMessaging.test_pub_sock",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_messaging.py",
    "relative_path": "cereal\\messaging\\tests\\test_messaging.py",
    "depends_on": [],
    "start_line": 75,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_messaging.TestMessaging.test_sub_sock": {
    "id": "cereal.messaging.tests.test_messaging.TestMessaging.test_sub_sock",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_messaging.py",
    "relative_path": "cereal\\messaging\\tests\\test_messaging.py",
    "depends_on": [],
    "start_line": 79,
    "end_line": 80,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_messaging.TestMessaging.test_drain_sock": {
    "id": "cereal.messaging.tests.test_messaging.TestMessaging.test_drain_sock",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_messaging.py",
    "relative_path": "cereal\\messaging\\tests\\test_messaging.py",
    "depends_on": [
      "cereal.messaging.tests.test_messaging.zmq_sleep"
    ],
    "start_line": 83,
    "end_line": 101,
    "has_docstring": true,
    "docstring": "\n        No docstring provided.\n        ",
    "language": "python"
  },
  "cereal.messaging.tests.test_messaging.TestMessaging.test_recv_sock": {
    "id": "cereal.messaging.tests.test_messaging.TestMessaging.test_recv_sock",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_messaging.py",
    "relative_path": "cereal\\messaging\\tests\\test_messaging.py",
    "depends_on": [
      "cereal.messaging.tests.test_messaging.random_carstate",
      "cereal.messaging.tests.test_messaging.assert_carstate",
      "cereal.messaging.tests.test_messaging.zmq_sleep"
    ],
    "start_line": 103,
    "end_line": 115,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_messaging.TestMessaging.test_recv_one": {
    "id": "cereal.messaging.tests.test_messaging.TestMessaging.test_recv_one",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_messaging.py",
    "relative_path": "cereal\\messaging\\tests\\test_messaging.py",
    "depends_on": [
      "cereal.messaging.tests.test_messaging.random_carstate",
      "cereal.messaging.tests.test_messaging.assert_carstate",
      "cereal.messaging.tests.test_messaging.zmq_sleep"
    ],
    "start_line": 117,
    "end_line": 128,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_messaging.TestMessaging.test_recv_one_or_none": {
    "id": "cereal.messaging.tests.test_messaging.TestMessaging.test_recv_one_or_none",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_messaging.py",
    "relative_path": "cereal\\messaging\\tests\\test_messaging.py",
    "depends_on": [
      "cereal.messaging.tests.test_messaging.random_carstate",
      "cereal.messaging.tests.test_messaging.assert_carstate",
      "cereal.messaging.tests.test_messaging.zmq_sleep"
    ],
    "start_line": 131,
    "end_line": 142,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_messaging.TestMessaging.test_recv_one_retry": {
    "id": "cereal.messaging.tests.test_messaging.TestMessaging.test_recv_one_retry",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_messaging.py",
    "relative_path": "cereal\\messaging\\tests\\test_messaging.py",
    "depends_on": [
      "cereal.messaging.tests.test_messaging.random_carstate",
      "cereal.messaging.tests.test_messaging.assert_carstate",
      "cereal.messaging.tests.test_messaging.delayed_send",
      "cereal.messaging.tests.test_messaging.zmq_sleep"
    ],
    "start_line": 144,
    "end_line": 162,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_pub_sub_master.TestSubMaster": {
    "id": "cereal.messaging.tests.test_pub_sub_master.TestSubMaster",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_pub_sub_master.py",
    "relative_path": "cereal\\messaging\\tests\\test_pub_sub_master.py",
    "depends_on": [],
    "start_line": 12,
    "end_line": 122,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_pub_sub_master.TestSubMaster.setup_method": {
    "id": "cereal.messaging.tests.test_pub_sub_master.TestSubMaster.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_pub_sub_master.py",
    "relative_path": "cereal\\messaging\\tests\\test_pub_sub_master.py",
    "depends_on": [],
    "start_line": 14,
    "end_line": 17,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_pub_sub_master.TestSubMaster.test_init": {
    "id": "cereal.messaging.tests.test_pub_sub_master.TestSubMaster.test_init",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_pub_sub_master.py",
    "relative_path": "cereal\\messaging\\tests\\test_pub_sub_master.py",
    "depends_on": [],
    "start_line": 19,
    "end_line": 23,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_pub_sub_master.TestSubMaster.test_init_state": {
    "id": "cereal.messaging.tests.test_pub_sub_master.TestSubMaster.test_init_state",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_pub_sub_master.py",
    "relative_path": "cereal\\messaging\\tests\\test_pub_sub_master.py",
    "depends_on": [],
    "start_line": 25,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_pub_sub_master.TestSubMaster.test_getitem": {
    "id": "cereal.messaging.tests.test_pub_sub_master.TestSubMaster.test_getitem",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_pub_sub_master.py",
    "relative_path": "cereal\\messaging\\tests\\test_pub_sub_master.py",
    "depends_on": [],
    "start_line": 41,
    "end_line": 50,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_pub_sub_master.TestSubMaster.test_update": {
    "id": "cereal.messaging.tests.test_pub_sub_master.TestSubMaster.test_update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_pub_sub_master.py",
    "relative_path": "cereal\\messaging\\tests\\test_pub_sub_master.py",
    "depends_on": [],
    "start_line": 53,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_pub_sub_master.TestSubMaster.test_update_timeout": {
    "id": "cereal.messaging.tests.test_pub_sub_master.TestSubMaster.test_update_timeout",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_pub_sub_master.py",
    "relative_path": "cereal\\messaging\\tests\\test_pub_sub_master.py",
    "depends_on": [],
    "start_line": 66,
    "end_line": 75,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_pub_sub_master.TestSubMaster.test_avg_frequency_checks": {
    "id": "cereal.messaging.tests.test_pub_sub_master.TestSubMaster.test_avg_frequency_checks",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_pub_sub_master.py",
    "relative_path": "cereal\\messaging\\tests\\test_pub_sub_master.py",
    "depends_on": [],
    "start_line": 77,
    "end_line": 98,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_pub_sub_master.TestSubMaster.test_alive": {
    "id": "cereal.messaging.tests.test_pub_sub_master.TestSubMaster.test_alive",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_pub_sub_master.py",
    "relative_path": "cereal\\messaging\\tests\\test_pub_sub_master.py",
    "depends_on": [],
    "start_line": 100,
    "end_line": 101,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_pub_sub_master.TestSubMaster.test_ignore_alive": {
    "id": "cereal.messaging.tests.test_pub_sub_master.TestSubMaster.test_ignore_alive",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_pub_sub_master.py",
    "relative_path": "cereal\\messaging\\tests\\test_pub_sub_master.py",
    "depends_on": [],
    "start_line": 103,
    "end_line": 104,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_pub_sub_master.TestSubMaster.test_valid": {
    "id": "cereal.messaging.tests.test_pub_sub_master.TestSubMaster.test_valid",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_pub_sub_master.py",
    "relative_path": "cereal\\messaging\\tests\\test_pub_sub_master.py",
    "depends_on": [],
    "start_line": 106,
    "end_line": 107,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_pub_sub_master.TestSubMaster.test_conflate": {
    "id": "cereal.messaging.tests.test_pub_sub_master.TestSubMaster.test_conflate",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_pub_sub_master.py",
    "relative_path": "cereal\\messaging\\tests\\test_pub_sub_master.py",
    "depends_on": [],
    "start_line": 110,
    "end_line": 122,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_pub_sub_master.TestPubMaster": {
    "id": "cereal.messaging.tests.test_pub_sub_master.TestPubMaster",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_pub_sub_master.py",
    "relative_path": "cereal\\messaging\\tests\\test_pub_sub_master.py",
    "depends_on": [],
    "start_line": 125,
    "end_line": 160,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_pub_sub_master.TestPubMaster.setup_method": {
    "id": "cereal.messaging.tests.test_pub_sub_master.TestPubMaster.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_pub_sub_master.py",
    "relative_path": "cereal\\messaging\\tests\\test_pub_sub_master.py",
    "depends_on": [],
    "start_line": 127,
    "end_line": 130,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_pub_sub_master.TestPubMaster.test_init": {
    "id": "cereal.messaging.tests.test_pub_sub_master.TestPubMaster.test_init",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_pub_sub_master.py",
    "relative_path": "cereal\\messaging\\tests\\test_pub_sub_master.py",
    "depends_on": [],
    "start_line": 132,
    "end_line": 133,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_pub_sub_master.TestPubMaster.test_send": {
    "id": "cereal.messaging.tests.test_pub_sub_master.TestPubMaster.test_send",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_pub_sub_master.py",
    "relative_path": "cereal\\messaging\\tests\\test_pub_sub_master.py",
    "depends_on": [],
    "start_line": 135,
    "end_line": 160,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_services.TestServices": {
    "id": "cereal.messaging.tests.test_services.TestServices",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_services.py",
    "relative_path": "cereal\\messaging\\tests\\test_services.py",
    "depends_on": [],
    "start_line": 10,
    "end_line": 21,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_services.TestServices.test_services": {
    "id": "cereal.messaging.tests.test_services.TestServices.test_services",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_services.py",
    "relative_path": "cereal\\messaging\\tests\\test_services.py",
    "depends_on": [],
    "start_line": 13,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "cereal.messaging.tests.test_services.TestServices.test_generated_header": {
    "id": "cereal.messaging.tests.test_services.TestServices.test_generated_header",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\cereal\\messaging\\tests\\test_services.py",
    "relative_path": "cereal\\messaging\\tests\\test_services.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 21,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.api.Api": {
    "id": "common.api.Api",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\api.py",
    "relative_path": "common\\api.py",
    "depends_on": [
      "common.api.api_get"
    ],
    "start_line": 10,
    "end_line": 36,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.api.Api.__init__": {
    "id": "common.api.Api.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\api.py",
    "relative_path": "common\\api.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 14,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.api.Api.get": {
    "id": "common.api.Api.get",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\api.py",
    "relative_path": "common\\api.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 17,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.api.Api.post": {
    "id": "common.api.Api.post",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\api.py",
    "relative_path": "common\\api.py",
    "depends_on": [],
    "start_line": 19,
    "end_line": 20,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.api.Api.request": {
    "id": "common.api.Api.request",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\api.py",
    "relative_path": "common\\api.py",
    "depends_on": [
      "common.api.api_get"
    ],
    "start_line": 22,
    "end_line": 23,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.api.Api.get_token": {
    "id": "common.api.Api.get_token",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\api.py",
    "relative_path": "common\\api.py",
    "depends_on": [],
    "start_line": 25,
    "end_line": 36,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.api.api_get": {
    "id": "common.api.api_get",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\api.py",
    "relative_path": "common\\api.py",
    "depends_on": [],
    "start_line": 39,
    "end_line": 46,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.clutil.cl_print_info": {
    "id": "common.clutil.cl_print_info",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\clutil.cc",
    "relative_path": "common\\clutil.cc",
    "depends_on": [],
    "start_line": 23,
    "end_line": 43,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void cl_print_info(cl_platform_id platform, cl_device_id device) {\n  size_t work_group_size = 0;\n  cl_device_type device_type = 0;\n  clGetDeviceInfo(device, CL_DEVICE_MAX_WORK_GROUP_SIZE, sizeof(work_group_size), &work_group_size, NULL);\n  clGetDeviceInfo(device, CL_DEVICE_TYPE, sizeof(device_type), &device_type, NULL);\n  const char *type_str = \"Other...\";\n  switch (device_type) {\n    case CL_DEVICE_TYPE_CPU: type_str =\"CL_DEVICE_TYPE_CPU\"; break;\n    case CL_DEVICE_TYPE_GPU: type_str = \"CL_DEVICE_TYPE_GPU\"; break;\n    case CL_DEVICE_TYPE_ACCELERATOR: type_str = \"CL_DEVICE_TYPE_ACCELERATOR\"; break;\n  }\n\n  LOGD(\"vendor: %s\", get_platform_info(platform, CL_PLATFORM_VENDOR).c_str());\n  LOGD(\"platform version: %s\", get_platform_info(platform, CL_PLATFORM_VERSION).c_str());\n  LOGD(\"profile: %s\", get_platform_info(platform, CL_PLATFORM_PROFILE).c_str());\n  LOGD(\"extensions: %s\", get_platform_info(platform, CL_PLATFORM_EXTENSIONS).c_str());\n  LOGD(\"name: %s\", get_device_info(device, CL_DEVICE_NAME).c_str());\n  LOGD(\"device version: %s\", get_device_info(device, CL_DEVICE_VERSION).c_str());\n  LOGD(\"max work group size: %zu\", work_group_size);\n  LOGD(\"type = %d, %s\", (int)device_type, type_str);\n}\n"
  },
  "common.clutil.cl_print_build_errors": {
    "id": "common.clutil.cl_print_build_errors",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\clutil.cc",
    "relative_path": "common\\clutil.cc",
    "depends_on": [],
    "start_line": 45,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void cl_print_build_errors(cl_program program, cl_device_id device) {\n  cl_build_status status;\n  clGetProgramBuildInfo(program, device, CL_PROGRAM_BUILD_STATUS, sizeof(status), &status, NULL);\n  size_t log_size;\n  clGetProgramBuildInfo(program, device, CL_PROGRAM_BUILD_LOG, 0, NULL, &log_size);\n  std::string log(log_size, '\\0');\n  clGetProgramBuildInfo(program, device, CL_PROGRAM_BUILD_LOG, log_size, &log[0], NULL);\n\n  LOGE(\"build failed; status=%d, log: %s\", status, log.c_str());\n}\n"
  },
  "common.clutil.cl_get_device_id": {
    "id": "common.clutil.cl_get_device_id",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\clutil.cc",
    "relative_path": "common\\clutil.cc",
    "depends_on": [],
    "start_line": 58,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "cl_device_id cl_get_device_id(cl_device_type device_type) {\n  cl_uint num_platforms = 0;\n  CL_CHECK(clGetPlatformIDs(0, NULL, &num_platforms));\n  std::unique_ptr<cl_platform_id[]> platform_ids = std::make_unique<cl_platform_id[]>(num_platforms);\n  CL_CHECK(clGetPlatformIDs(num_platforms, &platform_ids[0], NULL));\n\n  for (size_t i = 0; i < num_platforms; ++i) {\n    LOGD(\"platform[%zu] CL_PLATFORM_NAME: %s\", i, get_platform_info(platform_ids[i], CL_PLATFORM_NAME).c_str());\n\n    // Get first device\n    if (cl_device_id device_id = NULL; clGetDeviceIDs(platform_ids[i], device_type, 1, &device_id, NULL) == 0 && device_id) {\n      cl_print_info(platform_ids[i], device_id);\n      return device_id;\n    }\n  }\n  LOGE(\"No valid openCL platform found\");\n  assert(0);\n  return nullptr;\n}\n"
  },
  "common.clutil.cl_create_context": {
    "id": "common.clutil.cl_create_context",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\clutil.cc",
    "relative_path": "common\\clutil.cc",
    "depends_on": [],
    "start_line": 78,
    "end_line": 80,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "cl_context cl_create_context(cl_device_id device_id) {\n  return CL_CHECK_ERR(clCreateContext(NULL, 1, &device_id, NULL, NULL, &err));\n}\n"
  },
  "common.clutil.cl_release_context": {
    "id": "common.clutil.cl_release_context",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\clutil.cc",
    "relative_path": "common\\clutil.cc",
    "depends_on": [],
    "start_line": 82,
    "end_line": 84,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void cl_release_context(cl_context context) {\n  clReleaseContext(context);\n}\n"
  },
  "common.clutil.cl_program_from_file": {
    "id": "common.clutil.cl_program_from_file",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\clutil.cc",
    "relative_path": "common\\clutil.cc",
    "depends_on": [],
    "start_line": 86,
    "end_line": 88,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "cl_program cl_program_from_file(cl_context ctx, cl_device_id device_id, const char* path, const char* args) {\n  return cl_program_from_source(ctx, device_id, util::read_file(path), args);\n}\n"
  },
  "common.clutil.cl_program_from_source": {
    "id": "common.clutil.cl_program_from_source",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\clutil.cc",
    "relative_path": "common\\clutil.cc",
    "depends_on": [],
    "start_line": 90,
    "end_line": 98,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "cl_program cl_program_from_source(cl_context ctx, cl_device_id device_id, const std::string& src, const char* args) {\n  const char *csrc = src.c_str();\n  cl_program prg = CL_CHECK_ERR(clCreateProgramWithSource(ctx, 1, &csrc, NULL, &err));\n  if (int err = clBuildProgram(prg, 1, &device_id, args, NULL, NULL); err != 0) {\n    cl_print_build_errors(prg, device_id);\n    assert(0);\n  }\n  return prg;\n}\n"
  },
  "common.conversions.Conversions": {
    "id": "common.conversions.Conversions",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\conversions.py",
    "relative_path": "common\\conversions.py",
    "depends_on": [],
    "start_line": 3,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.dict_helpers.strip_deprecated_keys": {
    "id": "common.dict_helpers.strip_deprecated_keys",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\dict_helpers.py",
    "relative_path": "common\\dict_helpers.py",
    "depends_on": [
      "common.dict_helpers.strip_deprecated_keys"
    ],
    "start_line": 2,
    "end_line": 9,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.ffi_wrapper.suffix": {
    "id": "common.ffi_wrapper.suffix",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\ffi_wrapper.py",
    "relative_path": "common\\ffi_wrapper.py",
    "depends_on": [],
    "start_line": 4,
    "end_line": 8,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.file_helpers.CallbackReader": {
    "id": "common.file_helpers.CallbackReader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\file_helpers.py",
    "relative_path": "common\\file_helpers.py",
    "depends_on": [],
    "start_line": 10,
    "end_line": 26,
    "has_docstring": true,
    "docstring": "Wraps a file, but overrides the read method to also\n  call a callback function with the number of bytes read so far.",
    "language": "python"
  },
  "common.file_helpers.CallbackReader.__init__": {
    "id": "common.file_helpers.CallbackReader.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\file_helpers.py",
    "relative_path": "common\\file_helpers.py",
    "depends_on": [],
    "start_line": 13,
    "end_line": 17,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.file_helpers.CallbackReader.__getattr__": {
    "id": "common.file_helpers.CallbackReader.__getattr__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\file_helpers.py",
    "relative_path": "common\\file_helpers.py",
    "depends_on": [],
    "start_line": 19,
    "end_line": 20,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.file_helpers.CallbackReader.read": {
    "id": "common.file_helpers.CallbackReader.read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\file_helpers.py",
    "relative_path": "common\\file_helpers.py",
    "depends_on": [],
    "start_line": 22,
    "end_line": 26,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.file_helpers.atomic_write_in_dir": {
    "id": "common.file_helpers.atomic_write_in_dir",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\file_helpers.py",
    "relative_path": "common\\file_helpers.py",
    "depends_on": [],
    "start_line": 30,
    "end_line": 41,
    "has_docstring": true,
    "docstring": "Write to a file atomically using a temporary file in the same directory as the destination file.",
    "language": "python"
  },
  "common.file_helpers.get_upload_stream": {
    "id": "common.file_helpers.get_upload_stream",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\file_helpers.py",
    "relative_path": "common\\file_helpers.py",
    "depends_on": [],
    "start_line": 44,
    "end_line": 58,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.filter_simple.FirstOrderFilter": {
    "id": "common.filter_simple.FirstOrderFilter",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\filter_simple.py",
    "relative_path": "common\\filter_simple.py",
    "depends_on": [],
    "start_line": 1,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.filter_simple.FirstOrderFilter.__init__": {
    "id": "common.filter_simple.FirstOrderFilter.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\filter_simple.py",
    "relative_path": "common\\filter_simple.py",
    "depends_on": [],
    "start_line": 3,
    "end_line": 7,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.filter_simple.FirstOrderFilter.update_alpha": {
    "id": "common.filter_simple.FirstOrderFilter.update_alpha",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\filter_simple.py",
    "relative_path": "common\\filter_simple.py",
    "depends_on": [],
    "start_line": 9,
    "end_line": 10,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.filter_simple.FirstOrderFilter.update": {
    "id": "common.filter_simple.FirstOrderFilter.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\filter_simple.py",
    "relative_path": "common\\filter_simple.py",
    "depends_on": [],
    "start_line": 12,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.git.get_commit": {
    "id": "common.git.get_commit",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\git.py",
    "relative_path": "common\\git.py",
    "depends_on": [],
    "start_line": 7,
    "end_line": 8,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.git.get_commit_date": {
    "id": "common.git.get_commit_date",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\git.py",
    "relative_path": "common\\git.py",
    "depends_on": [],
    "start_line": 12,
    "end_line": 13,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.git.get_short_branch": {
    "id": "common.git.get_short_branch",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\git.py",
    "relative_path": "common\\git.py",
    "depends_on": [],
    "start_line": 17,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.git.get_branch": {
    "id": "common.git.get_branch",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\git.py",
    "relative_path": "common\\git.py",
    "depends_on": [],
    "start_line": 22,
    "end_line": 23,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.git.get_origin": {
    "id": "common.git.get_origin",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\git.py",
    "relative_path": "common\\git.py",
    "depends_on": [],
    "start_line": 27,
    "end_line": 33,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.git.get_normalized_origin": {
    "id": "common.git.get_normalized_origin",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\git.py",
    "relative_path": "common\\git.py",
    "depends_on": [
      "common.git.get_origin"
    ],
    "start_line": 37,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.gpio.gpio_init": {
    "id": "common.gpio.gpio_init",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\gpio.py",
    "relative_path": "common\\gpio.py",
    "depends_on": [],
    "start_line": 4,
    "end_line": 9,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.gpio.gpio_set": {
    "id": "common.gpio.gpio_set",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\gpio.py",
    "relative_path": "common\\gpio.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.gpio.gpiochip_get_ro_value_fd": {
    "id": "common.gpio.gpiochip_get_ro_value_fd",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\gpio.cc",
    "relative_path": "common\\gpio.cc",
    "depends_on": [],
    "start_line": 51,
    "end_line": 82,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int gpiochip_get_ro_value_fd(const char* consumer_label, int gpiochiop_id, int pin_nr) {\n\n  // Assumed that all interrupt pins are unexported and rights are given to\n  // read from gpiochip0.\n  std::string gpiochip_path = \"/dev/gpiochip\" + std::to_string(gpiochiop_id);\n  int fd = open(gpiochip_path.c_str(), O_RDONLY);\n  if (fd < 0) {\n    LOGE(\"Error opening gpiochip0 fd\");\n    return -1;\n  }\n\n  // Setup event\n  struct gpioevent_request rq;\n  rq.lineoffset = pin_nr;\n  rq.handleflags = GPIOHANDLE_REQUEST_INPUT;\n\n  /* Requesting both edges as the data ready pulse from the lsm6ds sensor is\n     very short(75us) and is mostly detected as falling edge instead of rising.\n     So if it is detected as rising the following falling edge is skipped. */\n  rq.eventflags = GPIOEVENT_REQUEST_BOTH_EDGES;\n\n  strncpy(rq.consumer_label, consumer_label, std::size(rq.consumer_label) - 1);\n  int ret = util::safe_ioctl(fd, GPIO_GET_LINEEVENT_IOCTL, &rq);\n  if (ret == -1) {\n    LOGE(\"Unable to get line event from ioctl : %s\", strerror(errno));\n    close(fd);\n    return -1;\n  }\n\n  close(fd);\n  return rq.fd;\n}\n"
  },
  "common.gpio.gpio_read": {
    "id": "common.gpio.gpio_read",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\gpio.py",
    "relative_path": "common\\gpio.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 26,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.gpio.gpio_export": {
    "id": "common.gpio.gpio_export",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\gpio.py",
    "relative_path": "common\\gpio.py",
    "depends_on": [],
    "start_line": 28,
    "end_line": 36,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.gpio.get_irq_action": {
    "id": "common.gpio.get_irq_action",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\gpio.py",
    "relative_path": "common\\gpio.py",
    "depends_on": [],
    "start_line": 39,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.gpio.get_irqs_for_action": {
    "id": "common.gpio.get_irqs_for_action",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\gpio.py",
    "relative_path": "common\\gpio.py",
    "depends_on": [
      "common.gpio.get_irq_action"
    ],
    "start_line": 47,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.gps.get_gps_location_service": {
    "id": "common.gps.get_gps_location_service",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\gps.py",
    "relative_path": "common\\gps.py",
    "depends_on": [],
    "start_line": 4,
    "end_line": 8,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.i2c.I2CBus": {
    "id": "common.i2c.I2CBus",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\i2c.h",
    "relative_path": "common\\i2c.h",
    "depends_on": [],
    "start_line": 8,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class I2CBus {\n  private:\n    int i2c_fd;\n    std::mutex m;\n\n  public:\n    I2CBus(uint8_t bus_id);\n    ~I2CBus();\n\n    int read_register(uint8_t device_address, uint register_address, uint8_t *buffer, uint8_t len);\n    int set_register(uint8_t device_address, uint register_address, uint8_t data);\n};\n"
  },
  "common.logging_extra.json_handler": {
    "id": "common.logging_extra.json_handler",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 23,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.logging_extra.json_robust_dumps": {
    "id": "common.logging_extra.json_robust_dumps",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [
      "common.logging_extra.json_handler"
    ],
    "start_line": 25,
    "end_line": 26,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.logging_extra.NiceOrderedDict": {
    "id": "common.logging_extra.NiceOrderedDict",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [
      "common.logging_extra.json_robust_dumps"
    ],
    "start_line": 28,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.logging_extra.NiceOrderedDict.__str__": {
    "id": "common.logging_extra.NiceOrderedDict.__str__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [
      "common.logging_extra.json_robust_dumps"
    ],
    "start_line": 29,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.logging_extra.SwagFormatter": {
    "id": "common.logging_extra.SwagFormatter",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [
      "common.logging_extra.NiceOrderedDict",
      "common.logging_extra.json_robust_dumps"
    ],
    "start_line": 32,
    "end_line": 74,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.logging_extra.SwagFormatter.__init__": {
    "id": "common.logging_extra.SwagFormatter.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [],
    "start_line": 33,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.logging_extra.SwagFormatter.format_dict": {
    "id": "common.logging_extra.SwagFormatter.format_dict",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [
      "common.logging_extra.NiceOrderedDict"
    ],
    "start_line": 39,
    "end_line": 69,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.logging_extra.SwagFormatter.format": {
    "id": "common.logging_extra.SwagFormatter.format",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [
      "common.logging_extra.json_robust_dumps"
    ],
    "start_line": 71,
    "end_line": 74,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.logging_extra.SwagLogFileFormatter": {
    "id": "common.logging_extra.SwagLogFileFormatter",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [
      "common.logging_extra.json_robust_dumps",
      "common.logging_extra.SwagFormatter"
    ],
    "start_line": 76,
    "end_line": 112,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.logging_extra.SwagLogFileFormatter.fix_kv": {
    "id": "common.logging_extra.SwagLogFileFormatter.fix_kv",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [],
    "start_line": 77,
    "end_line": 99,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.logging_extra.SwagLogFileFormatter.format": {
    "id": "common.logging_extra.SwagLogFileFormatter.format",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [
      "common.logging_extra.json_robust_dumps"
    ],
    "start_line": 101,
    "end_line": 112,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.logging_extra.SwagErrorFilter": {
    "id": "common.logging_extra.SwagErrorFilter",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [],
    "start_line": 114,
    "end_line": 116,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.logging_extra.SwagErrorFilter.filter": {
    "id": "common.logging_extra.SwagErrorFilter.filter",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [],
    "start_line": 115,
    "end_line": 116,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.logging_extra._tmpfunc": {
    "id": "common.logging_extra._tmpfunc",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [],
    "start_line": 118,
    "end_line": 119,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.logging_extra._srcfile": {
    "id": "common.logging_extra._srcfile",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [
      "common.logging_extra._tmpfunc"
    ],
    "start_line": 121,
    "end_line": 122,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.logging_extra.SwagLogger": {
    "id": "common.logging_extra.SwagLogger",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [
      "common.logging_extra.NiceOrderedDict",
      "common.logging_extra._srcfile"
    ],
    "start_line": 124,
    "end_line": 217,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.logging_extra.SwagLogger.__init__": {
    "id": "common.logging_extra.SwagLogger.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [],
    "start_line": 125,
    "end_line": 131,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.logging_extra.SwagLogger.local_ctx": {
    "id": "common.logging_extra.SwagLogger.local_ctx",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [],
    "start_line": 133,
    "end_line": 138,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.logging_extra.SwagLogger.get_ctx": {
    "id": "common.logging_extra.SwagLogger.get_ctx",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [],
    "start_line": 140,
    "end_line": 141,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.logging_extra.SwagLogger.ctx": {
    "id": "common.logging_extra.SwagLogger.ctx",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [],
    "start_line": 144,
    "end_line": 151,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.logging_extra.SwagLogger.bind": {
    "id": "common.logging_extra.SwagLogger.bind",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [],
    "start_line": 153,
    "end_line": 154,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.logging_extra.SwagLogger.bind_global": {
    "id": "common.logging_extra.SwagLogger.bind_global",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [],
    "start_line": 156,
    "end_line": 157,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.logging_extra.SwagLogger.event": {
    "id": "common.logging_extra.SwagLogger.event",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [
      "common.logging_extra.NiceOrderedDict"
    ],
    "start_line": 159,
    "end_line": 170,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.logging_extra.SwagLogger.timestamp": {
    "id": "common.logging_extra.SwagLogger.timestamp",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [
      "common.logging_extra.NiceOrderedDict"
    ],
    "start_line": 172,
    "end_line": 179,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.logging_extra.SwagLogger.findCaller": {
    "id": "common.logging_extra.SwagLogger.findCaller",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\logging_extra.py",
    "relative_path": "common\\logging_extra.py",
    "depends_on": [
      "common.logging_extra._srcfile"
    ],
    "start_line": 181,
    "end_line": 217,
    "has_docstring": true,
    "docstring": "\n    Find the stack frame of the caller so that we can note the source\n    file name, line number and function name.\n    ",
    "language": "python"
  },
  "common.markdown.parse_markdown": {
    "id": "common.markdown.parse_markdown",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\markdown.py",
    "relative_path": "common\\markdown.py",
    "depends_on": [],
    "start_line": 6,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.mat.matmul3": {
    "id": "common.mat.matmul3",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\mat.h",
    "relative_path": "common\\mat.h",
    "depends_on": [],
    "start_line": 19,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline mat3 matmul3(const mat3 &a, const mat3 &b) {\n  mat3 ret = {{0.0}};\n  for (int r=0; r<3; r++) {\n    for (int c=0; c<3; c++) {\n      float v = 0.0;\n      for (int k=0; k<3; k++) {\n        v += a.v[r*3+k] * b.v[k*3+c];\n      }\n      ret.v[r*3+c] = v;\n    }\n  }\n  return ret;\n}\n"
  },
  "common.mat.matvecmul3": {
    "id": "common.mat.matvecmul3",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\mat.h",
    "relative_path": "common\\mat.h",
    "depends_on": [],
    "start_line": 33,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline vec3 matvecmul3(const mat3 &a, const vec3 &b) {\n  vec3 ret = {{0.0}};\n  for (int r=0; r<3; r++) {\n    for (int c=0; c<3; c++) {\n      ret.v[r] += a.v[r*3+c] * b.v[c];\n    }\n  }\n  return ret;\n}\n"
  },
  "common.mat.matmul": {
    "id": "common.mat.matmul",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\mat.h",
    "relative_path": "common\\mat.h",
    "depends_on": [],
    "start_line": 43,
    "end_line": 55,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline mat4 matmul(const mat4 &a, const mat4 &b) {\n  mat4 ret = {{0.0}};\n  for (int r=0; r<4; r++) {\n    for (int c=0; c<4; c++) {\n      float v = 0.0;\n      for (int k=0; k<4; k++) {\n        v += a.v[r*4+k] * b.v[k*4+c];\n      }\n      ret.v[r*4+c] = v;\n    }\n  }\n  return ret;\n}\n"
  },
  "common.mat.matvecmul": {
    "id": "common.mat.matvecmul",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\mat.h",
    "relative_path": "common\\mat.h",
    "depends_on": [],
    "start_line": 57,
    "end_line": 65,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline vec4 matvecmul(const mat4 &a, const vec4 &b) {\n  vec4 ret = {{0.0}};\n  for (int r=0; r<4; r++) {\n    for (int c=0; c<4; c++) {\n      ret.v[r] += a.v[r*4+c] * b.v[c];\n    }\n  }\n  return ret;\n}\n"
  },
  "common.mat.transform_scale_buffer": {
    "id": "common.mat.transform_scale_buffer",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\mat.h",
    "relative_path": "common\\mat.h",
    "depends_on": [],
    "start_line": 69,
    "end_line": 85,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline mat3 transform_scale_buffer(const mat3 &in, float s) {\n  // in_pt = ( transform(out_pt/s + 0.5) - 0.5) * s\n\n  mat3 transform_out = {{\n    1.0f/s, 0.0f, 0.5f,\n    0.0f, 1.0f/s, 0.5f,\n    0.0f, 0.0f, 1.0f,\n  }};\n\n  mat3 transform_in = {{\n    s,  0.0f, -0.5f*s,\n    0.0f, s, -0.5f*s,\n    0.0f, 0.0f, 1.0f,\n  }};\n\n  return matmul3(transform_in, matmul3(in, transform_out));\n}\n"
  },
  "common.params.params_sig_handler": {
    "id": "common.params.params_sig_handler",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\params.cc",
    "relative_path": "common\\params.cc",
    "depends_on": [],
    "start_line": 20,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void params_sig_handler(int signal) {\n  params_do_exit = 1;\n}\n"
  },
  "common.params.fsync_dir": {
    "id": "common.params.fsync_dir",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\params.cc",
    "relative_path": "common\\params.cc",
    "depends_on": [],
    "start_line": 24,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int fsync_dir(const std::string &path) {\n  int result = -1;\n  int fd = HANDLE_EINTR(open(path.c_str(), O_RDONLY, 0755));\n  if (fd >= 0) {\n    result = HANDLE_EINTR(fsync(fd));\n    HANDLE_EINTR(close(fd));\n  }\n  return result;\n}\n"
  },
  "common.params.create_params_path": {
    "id": "common.params.create_params_path",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\params.cc",
    "relative_path": "common\\params.cc",
    "depends_on": [],
    "start_line": 34,
    "end_line": 65,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "bool create_params_path(const std::string &param_path, const std::string &key_path) {\n  // Make sure params path exists\n  if (!util::file_exists(param_path) && !util::create_directories(param_path, 0775)) {\n    return false;\n  }\n\n  // See if the symlink exists, otherwise create it\n  if (!util::file_exists(key_path)) {\n    // 1) Create temp folder\n    // 2) Symlink it to temp link\n    // 3) Move symlink to <params>/d\n\n    std::string tmp_path = param_path + \"/.tmp_XXXXXX\";\n    // this should be OK since mkdtemp just replaces characters in place\n    char *tmp_dir = mkdtemp((char *)tmp_path.c_str());\n    if (tmp_dir == NULL) {\n      return false;\n    }\n\n    std::string link_path = std::string(tmp_dir) + \".link\";\n    if (symlink(tmp_dir, link_path.c_str()) != 0) {\n      return false;\n    }\n\n    // don't return false if it has been created by other\n    if (rename(link_path.c_str(), key_path.c_str()) != 0 && errno != EEXIST) {\n      return false;\n    }\n  }\n\n  return true;\n}\n"
  },
  "common.params.ensure_params_path": {
    "id": "common.params.ensure_params_path",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\params.cc",
    "relative_path": "common\\params.cc",
    "depends_on": [],
    "start_line": 67,
    "end_line": 75,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string ensure_params_path(const std::string &prefix, const std::string &path = {}) {\n  std::string params_path = path.empty() ? Path::params() : path;\n  if (!create_params_path(params_path, params_path + prefix)) {\n    throw std::runtime_error(util::string_format(\n        \"Failed to ensure params path, errno=%d, path=%s, param_prefix=%s\",\n        errno, params_path.c_str(), prefix.c_str()));\n  }\n  return params_path;\n}\n"
  },
  "common.params.FileLock": {
    "id": "common.params.FileLock",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\params.cc",
    "relative_path": "common\\params.cc",
    "depends_on": [],
    "start_line": 77,
    "end_line": 89,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class FileLock {\npublic:\n  FileLock(const std::string &fn) {\n    fd_ = HANDLE_EINTR(open(fn.c_str(), O_CREAT, 0775));\n    if (fd_ < 0 || HANDLE_EINTR(flock(fd_, LOCK_EX)) < 0) {\n      LOGE(\"Failed to lock file %s, errno=%d\", fn.c_str(), errno);\n    }\n  }\n  ~FileLock() { close(fd_); }\n\nprivate:\n  int fd_ = -1;\n};\n"
  },
  "common.params.Params": {
    "id": "common.params.Params",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\params.h",
    "relative_path": "common\\params.h",
    "depends_on": [],
    "start_line": 22,
    "end_line": 70,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class Params {\npublic:\n  explicit Params(const std::string &path = {});\n  ~Params();\n  // Not copyable.\n  Params(const Params&) = delete;\n  Params& operator=(const Params&) = delete;\n\n  std::vector<std::string> allKeys() const;\n  bool checkKey(const std::string &key);\n  ParamKeyType getKeyType(const std::string &key);\n  inline std::string getParamPath(const std::string &key = {}) {\n    return params_path + params_prefix + (key.empty() ? \"\" : \"/\" + key);\n  }\n\n  // Delete a value\n  int remove(const std::string &key);\n  void clearAll(ParamKeyType type);\n\n  // helpers for reading values\n  std::string get(const std::string &key, bool block = false);\n  inline bool getBool(const std::string &key, bool block = false) {\n    return get(key, block) == \"1\";\n  }\n  std::map<std::string, std::string> readAll();\n\n  // helpers for writing values\n  int put(const char *key, const char *val, size_t value_size);\n  inline int put(const std::string &key, const std::string &val) {\n    return put(key.c_str(), val.data(), val.size());\n  }\n  inline int putBool(const std::string &key, bool val) {\n    return put(key.c_str(), val ? \"1\" : \"0\", 1);\n  }\n  void putNonBlocking(const std::string &key, const std::string &val);\n  inline void putBoolNonBlocking(const std::string &key, bool val) {\n    putNonBlocking(key, val ? \"1\" : \"0\");\n  }\n\nprivate:\n  void asyncWriteThread();\n\n  std::string params_path;\n  std::string params_prefix;\n\n  // for nonblocking write\n  std::future<void> future;\n  SafeQueue<std::pair<std::string, std::string>> queue;\n};\n"
  },
  "common.params.Params.getParamPath": {
    "id": "common.params.Params.getParamPath",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\params.h",
    "relative_path": "common\\params.h",
    "depends_on": [],
    "start_line": 33,
    "end_line": 35,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  inline std::string getParamPath(const std::string &key = {}) {\n    return params_path + params_prefix + (key.empty() ? \"\" : \"/\" + key);\n  }\n"
  },
  "common.params.Params.getBool": {
    "id": "common.params.Params.getBool",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\params.h",
    "relative_path": "common\\params.h",
    "depends_on": [],
    "start_line": 43,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  inline bool getBool(const std::string &key, bool block = false) {\n    return get(key, block) == \"1\";\n  }\n"
  },
  "common.params.Params.put": {
    "id": "common.params.Params.put",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\params.h",
    "relative_path": "common\\params.h",
    "depends_on": [],
    "start_line": 50,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  inline int put(const std::string &key, const std::string &val) {\n    return put(key.c_str(), val.data(), val.size());\n  }\n"
  },
  "common.params.Params.putBool": {
    "id": "common.params.Params.putBool",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\params.h",
    "relative_path": "common\\params.h",
    "depends_on": [],
    "start_line": 53,
    "end_line": 55,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  inline int putBool(const std::string &key, bool val) {\n    return put(key.c_str(), val ? \"1\" : \"0\", 1);\n  }\n"
  },
  "common.params.Params.putBoolNonBlocking": {
    "id": "common.params.Params.putBoolNonBlocking",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\params.h",
    "relative_path": "common\\params.h",
    "depends_on": [],
    "start_line": 57,
    "end_line": 59,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  inline void putBoolNonBlocking(const std::string &key, bool val) {\n    putNonBlocking(key, val ? \"1\" : \"0\");\n  }\n"
  },
  "common.pid.PIDController": {
    "id": "common.pid.PIDController",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\pid.py",
    "relative_path": "common\\pid.py",
    "depends_on": [],
    "start_line": 4,
    "end_line": 70,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.pid.PIDController.__init__": {
    "id": "common.pid.PIDController.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\pid.py",
    "relative_path": "common\\pid.py",
    "depends_on": [],
    "start_line": 5,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.pid.PIDController.k_p": {
    "id": "common.pid.PIDController.k_p",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\pid.py",
    "relative_path": "common\\pid.py",
    "depends_on": [],
    "start_line": 27,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.pid.PIDController.k_i": {
    "id": "common.pid.PIDController.k_i",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\pid.py",
    "relative_path": "common\\pid.py",
    "depends_on": [],
    "start_line": 31,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.pid.PIDController.k_d": {
    "id": "common.pid.PIDController.k_d",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\pid.py",
    "relative_path": "common\\pid.py",
    "depends_on": [],
    "start_line": 35,
    "end_line": 36,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.pid.PIDController.error_integral": {
    "id": "common.pid.PIDController.error_integral",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\pid.py",
    "relative_path": "common\\pid.py",
    "depends_on": [],
    "start_line": 39,
    "end_line": 40,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.pid.PIDController.reset": {
    "id": "common.pid.PIDController.reset",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\pid.py",
    "relative_path": "common\\pid.py",
    "depends_on": [],
    "start_line": 42,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.pid.PIDController.update": {
    "id": "common.pid.PIDController.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\pid.py",
    "relative_path": "common\\pid.py",
    "depends_on": [],
    "start_line": 49,
    "end_line": 70,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.prefix.OpenpilotPrefix": {
    "id": "common.prefix.OpenpilotPrefix",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\prefix.py",
    "relative_path": "common\\prefix.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 53,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.prefix.OpenpilotPrefix.__init__": {
    "id": "common.prefix.OpenpilotPrefix.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\prefix.py",
    "relative_path": "common\\prefix.py",
    "depends_on": [],
    "start_line": 12,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.prefix.OpenpilotPrefix.__enter__": {
    "id": "common.prefix.OpenpilotPrefix.__enter__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\prefix.py",
    "relative_path": "common\\prefix.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.prefix.OpenpilotPrefix.__exit__": {
    "id": "common.prefix.OpenpilotPrefix.__exit__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\prefix.py",
    "relative_path": "common\\prefix.py",
    "depends_on": [],
    "start_line": 32,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.prefix.OpenpilotPrefix.clean_dirs": {
    "id": "common.prefix.OpenpilotPrefix.clean_dirs",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\prefix.py",
    "relative_path": "common\\prefix.py",
    "depends_on": [],
    "start_line": 43,
    "end_line": 53,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.ratekeeper.RateKeeper": {
    "id": "common.ratekeeper.RateKeeper",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\ratekeeper.h",
    "relative_path": "common\\ratekeeper.h",
    "depends_on": [],
    "start_line": 6,
    "end_line": 23,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class RateKeeper {\npublic:\n  RateKeeper(const std::string &name, float rate, float print_delay_threshold = 0);\n  ~RateKeeper() {}\n  bool keepTime();\n  bool monitorTime();\n  inline uint64_t frame() const { return frame_; }\n  inline double remaining() const { return remaining_; }\n\nprivate:\n  double interval;\n  double next_frame_time;\n  double last_monitor_time;\n  double remaining_ = 0;\n  float print_delay_threshold = 0;\n  uint64_t frame_ = 0;\n  std::string name;\n};\n"
  },
  "common.realtime.Priority": {
    "id": "common.realtime.Priority",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\realtime.py",
    "relative_path": "common\\realtime.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.realtime.set_core_affinity": {
    "id": "common.realtime.set_core_affinity",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\realtime.py",
    "relative_path": "common\\realtime.py",
    "depends_on": [],
    "start_line": 31,
    "end_line": 33,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.realtime.config_realtime_process": {
    "id": "common.realtime.config_realtime_process",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\realtime.py",
    "relative_path": "common\\realtime.py",
    "depends_on": [
      "common.realtime.set_core_affinity"
    ],
    "start_line": 36,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.realtime.Ratekeeper": {
    "id": "common.realtime.Ratekeeper",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\realtime.py",
    "relative_path": "common\\realtime.py",
    "depends_on": [],
    "start_line": 44,
    "end_line": 96,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.realtime.Ratekeeper.__init__": {
    "id": "common.realtime.Ratekeeper.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\realtime.py",
    "relative_path": "common\\realtime.py",
    "depends_on": [],
    "start_line": 45,
    "end_line": 56,
    "has_docstring": true,
    "docstring": "Rate in Hz for ratekeeping. print_delay_threshold must be nonnegative.",
    "language": "python"
  },
  "common.realtime.Ratekeeper.frame": {
    "id": "common.realtime.Ratekeeper.frame",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\realtime.py",
    "relative_path": "common\\realtime.py",
    "depends_on": [],
    "start_line": 59,
    "end_line": 60,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.realtime.Ratekeeper.remaining": {
    "id": "common.realtime.Ratekeeper.remaining",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\realtime.py",
    "relative_path": "common\\realtime.py",
    "depends_on": [],
    "start_line": 63,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.realtime.Ratekeeper.lagging": {
    "id": "common.realtime.Ratekeeper.lagging",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\realtime.py",
    "relative_path": "common\\realtime.py",
    "depends_on": [],
    "start_line": 67,
    "end_line": 69,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.realtime.Ratekeeper.keep_time": {
    "id": "common.realtime.Ratekeeper.keep_time",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\realtime.py",
    "relative_path": "common\\realtime.py",
    "depends_on": [],
    "start_line": 72,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.realtime.Ratekeeper.monitor_time": {
    "id": "common.realtime.Ratekeeper.monitor_time",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\realtime.py",
    "relative_path": "common\\realtime.py",
    "depends_on": [],
    "start_line": 79,
    "end_line": 96,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.retry.retry": {
    "id": "common.retry.retry",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\retry.py",
    "relative_path": "common\\retry.py",
    "depends_on": [],
    "start_line": 7,
    "end_line": 23,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.run.run_cmd": {
    "id": "common.run.run_cmd",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\run.py",
    "relative_path": "common\\run.py",
    "depends_on": [],
    "start_line": 4,
    "end_line": 5,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.run.run_cmd_default": {
    "id": "common.run.run_cmd_default",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\run.py",
    "relative_path": "common\\run.py",
    "depends_on": [
      "common.run.run_cmd"
    ],
    "start_line": 8,
    "end_line": 12,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.simple_kalman.get_kalman_gain": {
    "id": "common.simple_kalman.get_kalman_gain",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\simple_kalman.py",
    "relative_path": "common\\simple_kalman.py",
    "depends_on": [],
    "start_line": 4,
    "end_line": 11,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.simple_kalman.KF1D": {
    "id": "common.simple_kalman.KF1D",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\simple_kalman.py",
    "relative_path": "common\\simple_kalman.py",
    "depends_on": [],
    "start_line": 14,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.simple_kalman.KF1D.__init__": {
    "id": "common.simple_kalman.KF1D.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\simple_kalman.py",
    "relative_path": "common\\simple_kalman.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 33,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.simple_kalman.KF1D.update": {
    "id": "common.simple_kalman.KF1D.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\simple_kalman.py",
    "relative_path": "common\\simple_kalman.py",
    "depends_on": [],
    "start_line": 40,
    "end_line": 46,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.simple_kalman.KF1D.x": {
    "id": "common.simple_kalman.KF1D.x",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\simple_kalman.py",
    "relative_path": "common\\simple_kalman.py",
    "depends_on": [],
    "start_line": 49,
    "end_line": 50,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.simple_kalman.KF1D.set_x": {
    "id": "common.simple_kalman.KF1D.set_x",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\simple_kalman.py",
    "relative_path": "common\\simple_kalman.py",
    "depends_on": [],
    "start_line": 52,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.stat_live.RunningStat": {
    "id": "common.stat_live.RunningStat",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\stat_live.py",
    "relative_path": "common\\stat_live.py",
    "depends_on": [],
    "start_line": 3,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.stat_live.RunningStat.__init__": {
    "id": "common.stat_live.RunningStat.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\stat_live.py",
    "relative_path": "common\\stat_live.py",
    "depends_on": [],
    "start_line": 5,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.stat_live.RunningStat.reset": {
    "id": "common.stat_live.RunningStat.reset",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\stat_live.py",
    "relative_path": "common\\stat_live.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 23,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.stat_live.RunningStat.push_data": {
    "id": "common.stat_live.RunningStat.push_data",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\stat_live.py",
    "relative_path": "common\\stat_live.py",
    "depends_on": [],
    "start_line": 25,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.stat_live.RunningStat.mean": {
    "id": "common.stat_live.RunningStat.mean",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\stat_live.py",
    "relative_path": "common\\stat_live.py",
    "depends_on": [],
    "start_line": 39,
    "end_line": 40,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.stat_live.RunningStat.variance": {
    "id": "common.stat_live.RunningStat.variance",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\stat_live.py",
    "relative_path": "common\\stat_live.py",
    "depends_on": [],
    "start_line": 42,
    "end_line": 46,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.stat_live.RunningStat.std": {
    "id": "common.stat_live.RunningStat.std",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\stat_live.py",
    "relative_path": "common\\stat_live.py",
    "depends_on": [],
    "start_line": 48,
    "end_line": 49,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.stat_live.RunningStat.params_to_save": {
    "id": "common.stat_live.RunningStat.params_to_save",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\stat_live.py",
    "relative_path": "common\\stat_live.py",
    "depends_on": [],
    "start_line": 51,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.stat_live.RunningStatFilter": {
    "id": "common.stat_live.RunningStatFilter",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\stat_live.py",
    "relative_path": "common\\stat_live.py",
    "depends_on": [
      "common.stat_live.RunningStat"
    ],
    "start_line": 54,
    "end_line": 70,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.stat_live.RunningStatFilter.__init__": {
    "id": "common.stat_live.RunningStatFilter.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\stat_live.py",
    "relative_path": "common\\stat_live.py",
    "depends_on": [
      "common.stat_live.RunningStat"
    ],
    "start_line": 55,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.stat_live.RunningStatFilter.reset": {
    "id": "common.stat_live.RunningStatFilter.reset",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\stat_live.py",
    "relative_path": "common\\stat_live.py",
    "depends_on": [],
    "start_line": 59,
    "end_line": 61,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.stat_live.RunningStatFilter.push_and_update": {
    "id": "common.stat_live.RunningStatFilter.push_and_update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\stat_live.py",
    "relative_path": "common\\stat_live.py",
    "depends_on": [],
    "start_line": 63,
    "end_line": 70,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.swaglog.SwaglogState": {
    "id": "common.swaglog.SwaglogState",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\swaglog.cc",
    "relative_path": "common\\swaglog.cc",
    "depends_on": [],
    "start_line": 18,
    "end_line": 82,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class SwaglogState {\npublic:\n  SwaglogState() {\n    zctx = zmq_ctx_new();\n    sock = zmq_socket(zctx, ZMQ_PUSH);\n\n    // Timeout on shutdown for messages to be received by the logging process\n    int timeout = 100;\n    zmq_setsockopt(sock, ZMQ_LINGER, &timeout, sizeof(timeout));\n    zmq_connect(sock, Path::swaglog_ipc().c_str());\n\n    // workaround for https://github.com/dropbox/json11/issues/38\n    setlocale(LC_NUMERIC, \"C\");\n\n    print_level = CLOUDLOG_WARNING;\n    if (const char* print_lvl = getenv(\"LOGPRINT\")) {\n      if (strcmp(print_lvl, \"debug\") == 0) {\n        print_level = CLOUDLOG_DEBUG;\n      } else if (strcmp(print_lvl, \"info\") == 0) {\n        print_level = CLOUDLOG_INFO;\n      } else if (strcmp(print_lvl, \"warning\") == 0) {\n        print_level = CLOUDLOG_WARNING;\n      }\n    }\n\n    ctx_j = json11::Json::object{};\n    if (char* dongle_id = getenv(\"DONGLE_ID\")) {\n      ctx_j[\"dongle_id\"] = dongle_id;\n    }\n    if (char* git_origin = getenv(\"GIT_ORIGIN\")) {\n      ctx_j[\"origin\"] = git_origin;\n    }\n    if (char* git_branch = getenv(\"GIT_BRANCH\")) {\n      ctx_j[\"branch\"] = git_branch;\n    }\n    if (char* git_commit = getenv(\"GIT_COMMIT\")) {\n      ctx_j[\"commit\"] = git_commit;\n    }\n    if (char* daemon_name = getenv(\"MANAGER_DAEMON\")) {\n      ctx_j[\"daemon\"] = daemon_name;\n    }\n    ctx_j[\"version\"] = COMMA_VERSION;\n    ctx_j[\"dirty\"] = !getenv(\"CLEAN\");\n    ctx_j[\"device\"] = Hardware::get_name();\n  }\n\n  ~SwaglogState() {\n    zmq_close(sock);\n    zmq_ctx_destroy(zctx);\n  }\n\n  void log(int levelnum, const char* filename, int lineno, const char* func, const char* msg, const std::string& log_s) {\n    std::lock_guard lk(lock);\n    if (levelnum >= print_level) {\n      printf(\"%s: %s\\n\", filename, msg);\n    }\n    zmq_send(sock, log_s.data(), log_s.length(), ZMQ_NOBLOCK);\n  }\n\n  std::mutex lock;\n  void* zctx = nullptr;\n  void* sock = nullptr;\n  int print_level;\n  json11::Json::object ctx_j;\n};\n"
  },
  "common.swaglog.SwaglogState.log": {
    "id": "common.swaglog.SwaglogState.log",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\swaglog.cc",
    "relative_path": "common\\swaglog.cc",
    "depends_on": [],
    "start_line": 69,
    "end_line": 75,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  void log(int levelnum, const char* filename, int lineno, const char* func, const char* msg, const std::string& log_s) {\n    std::lock_guard lk(lock);\n    if (levelnum >= print_level) {\n      printf(\"%s: %s\\n\", filename, msg);\n    }\n    zmq_send(sock, log_s.data(), log_s.length(), ZMQ_NOBLOCK);\n  }\n"
  },
  "common.swaglog.cloudlog_common": {
    "id": "common.swaglog.cloudlog_common",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\swaglog.cc",
    "relative_path": "common\\swaglog.cc",
    "depends_on": [],
    "start_line": 87,
    "end_line": 111,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static void cloudlog_common(int levelnum, const char* filename, int lineno, const char* func,\n                            char* msg_buf, const json11::Json::object &msg_j={}) {\n  static SwaglogState s;\n\n  json11::Json::object log_j = json11::Json::object {\n    {\"ctx\", s.ctx_j},\n    {\"levelnum\", levelnum},\n    {\"filename\", filename},\n    {\"lineno\", lineno},\n    {\"funcname\", func},\n    {\"created\", seconds_since_epoch()}\n  };\n  if (msg_j.empty()) {\n    log_j[\"msg\"] = msg_buf;\n  } else {\n    log_j[\"msg\"] = msg_j;\n  }\n\n  std::string log_s;\n  log_s += (char)levelnum;\n  ((json11::Json)log_j).dump(log_s);\n  s.log(levelnum, filename, lineno, func, msg_buf, log_s);\n\n  free(msg_buf);\n}\n"
  },
  "common.swaglog.cloudlog_e": {
    "id": "common.swaglog.cloudlog_e",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\swaglog.cc",
    "relative_path": "common\\swaglog.cc",
    "depends_on": [],
    "start_line": 113,
    "end_line": 122,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void cloudlog_e(int levelnum, const char* filename, int lineno, const char* func,\n                const char* fmt, ...) {\n  va_list args;\n  va_start(args, fmt);\n  char* msg_buf = nullptr;\n  int ret = vasprintf(&msg_buf, fmt, args);\n  va_end(args);\n  if (ret <= 0 || !msg_buf) return;\n  cloudlog_common(levelnum, filename, lineno, func, msg_buf);\n}\n"
  },
  "common.swaglog.cloudlog_t_common": {
    "id": "common.swaglog.cloudlog_t_common",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\swaglog.cc",
    "relative_path": "common\\swaglog.cc",
    "depends_on": [],
    "start_line": 124,
    "end_line": 139,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void cloudlog_t_common(int levelnum, const char* filename, int lineno, const char* func,\n                       uint32_t frame_id, const char* fmt, va_list args) {\n  if (!LOG_TIMESTAMPS) return;\n  char* msg_buf = nullptr;\n  int ret = vasprintf(&msg_buf, fmt, args);\n  if (ret <= 0 || !msg_buf) return;\n  json11::Json::object tspt_j = json11::Json::object{\n    {\"event\", msg_buf},\n    {\"time\", std::to_string(nanos_since_boot())}\n  };\n  if (frame_id < NO_FRAME_ID) {\n    tspt_j[\"frame_id\"] = std::to_string(frame_id);\n  }\n  tspt_j = json11::Json::object{{\"timestamp\", tspt_j}};\n  cloudlog_common(levelnum, filename, lineno, func, msg_buf, tspt_j);\n}\n"
  },
  "common.swaglog.cloudlog_te": {
    "id": "common.swaglog.cloudlog_te",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\swaglog.cc",
    "relative_path": "common\\swaglog.cc",
    "depends_on": [],
    "start_line": 149,
    "end_line": 155,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void cloudlog_te(int levelnum, const char* filename, int lineno, const char* func,\n                 uint32_t frame_id, const char* fmt, ...) {\n  va_list args;\n  va_start(args, fmt);\n  cloudlog_t_common(levelnum, filename, lineno, func, frame_id, fmt, args);\n  va_end(args);\n}\n"
  },
  "common.swaglog.get_file_handler": {
    "id": "common.swaglog.get_file_handler",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\swaglog.py",
    "relative_path": "common\\swaglog.py",
    "depends_on": [
      "common.swaglog.SwaglogRotatingFileHandler"
    ],
    "start_line": 14,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.swaglog.SwaglogRotatingFileHandler": {
    "id": "common.swaglog.SwaglogRotatingFileHandler",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\swaglog.py",
    "relative_path": "common\\swaglog.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.swaglog.SwaglogRotatingFileHandler.__init__": {
    "id": "common.swaglog.SwaglogRotatingFileHandler.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\swaglog.py",
    "relative_path": "common\\swaglog.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.swaglog.SwaglogRotatingFileHandler._open": {
    "id": "common.swaglog.SwaglogRotatingFileHandler._open",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\swaglog.py",
    "relative_path": "common\\swaglog.py",
    "depends_on": [],
    "start_line": 33,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.swaglog.SwaglogRotatingFileHandler.get_existing_logfiles": {
    "id": "common.swaglog.SwaglogRotatingFileHandler.get_existing_logfiles",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\swaglog.py",
    "relative_path": "common\\swaglog.py",
    "depends_on": [],
    "start_line": 41,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.swaglog.SwaglogRotatingFileHandler.shouldRollover": {
    "id": "common.swaglog.SwaglogRotatingFileHandler.shouldRollover",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\swaglog.py",
    "relative_path": "common\\swaglog.py",
    "depends_on": [],
    "start_line": 50,
    "end_line": 53,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.swaglog.SwaglogRotatingFileHandler.doRollover": {
    "id": "common.swaglog.SwaglogRotatingFileHandler.doRollover",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\swaglog.py",
    "relative_path": "common\\swaglog.py",
    "depends_on": [],
    "start_line": 55,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.swaglog.UnixDomainSocketHandler": {
    "id": "common.swaglog.UnixDomainSocketHandler",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\swaglog.py",
    "relative_path": "common\\swaglog.py",
    "depends_on": [],
    "start_line": 66,
    "end_line": 104,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.swaglog.UnixDomainSocketHandler.__init__": {
    "id": "common.swaglog.UnixDomainSocketHandler.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\swaglog.py",
    "relative_path": "common\\swaglog.py",
    "depends_on": [],
    "start_line": 67,
    "end_line": 73,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.swaglog.UnixDomainSocketHandler.__del__": {
    "id": "common.swaglog.UnixDomainSocketHandler.__del__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\swaglog.py",
    "relative_path": "common\\swaglog.py",
    "depends_on": [],
    "start_line": 75,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.swaglog.UnixDomainSocketHandler.close": {
    "id": "common.swaglog.UnixDomainSocketHandler.close",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\swaglog.py",
    "relative_path": "common\\swaglog.py",
    "depends_on": [],
    "start_line": 78,
    "end_line": 82,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.swaglog.UnixDomainSocketHandler.connect": {
    "id": "common.swaglog.UnixDomainSocketHandler.connect",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\swaglog.py",
    "relative_path": "common\\swaglog.py",
    "depends_on": [],
    "start_line": 84,
    "end_line": 89,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.swaglog.UnixDomainSocketHandler.emit": {
    "id": "common.swaglog.UnixDomainSocketHandler.emit",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\swaglog.py",
    "relative_path": "common\\swaglog.py",
    "depends_on": [],
    "start_line": 91,
    "end_line": 104,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.swaglog.ForwardingHandler": {
    "id": "common.swaglog.ForwardingHandler",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\swaglog.py",
    "relative_path": "common\\swaglog.py",
    "depends_on": [],
    "start_line": 107,
    "end_line": 113,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.swaglog.ForwardingHandler.__init__": {
    "id": "common.swaglog.ForwardingHandler.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\swaglog.py",
    "relative_path": "common\\swaglog.py",
    "depends_on": [],
    "start_line": 108,
    "end_line": 110,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.swaglog.ForwardingHandler.emit": {
    "id": "common.swaglog.ForwardingHandler.emit",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\swaglog.py",
    "relative_path": "common\\swaglog.py",
    "depends_on": [],
    "start_line": 112,
    "end_line": 113,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.swaglog.add_file_handler": {
    "id": "common.swaglog.add_file_handler",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\swaglog.py",
    "relative_path": "common\\swaglog.py",
    "depends_on": [
      "common.swaglog.get_file_handler"
    ],
    "start_line": 116,
    "end_line": 123,
    "has_docstring": true,
    "docstring": "\n  Function to add the file log handler to swaglog.\n  This can be used to store logs when logmessaged is not running.\n  ",
    "language": "python"
  },
  "common.timeout.TimeoutException": {
    "id": "common.timeout.TimeoutException",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\timeout.py",
    "relative_path": "common\\timeout.py",
    "depends_on": [],
    "start_line": 3,
    "end_line": 4,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.timeout.Timeout": {
    "id": "common.timeout.Timeout",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\timeout.py",
    "relative_path": "common\\timeout.py",
    "depends_on": [
      "common.timeout.TimeoutException"
    ],
    "start_line": 6,
    "end_line": 27,
    "has_docstring": true,
    "docstring": "\n  Timeout context manager.\n  For example this code will raise a TimeoutException:\n  with Timeout(seconds=5, error_msg=\"Sleep was too long\"):\n    time.sleep(10)\n  ",
    "language": "python"
  },
  "common.timeout.Timeout.__init__": {
    "id": "common.timeout.Timeout.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\timeout.py",
    "relative_path": "common\\timeout.py",
    "depends_on": [],
    "start_line": 13,
    "end_line": 17,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.timeout.Timeout.handle_timeout": {
    "id": "common.timeout.Timeout.handle_timeout",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\timeout.py",
    "relative_path": "common\\timeout.py",
    "depends_on": [
      "common.timeout.TimeoutException"
    ],
    "start_line": 19,
    "end_line": 20,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.timeout.Timeout.__enter__": {
    "id": "common.timeout.Timeout.__enter__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\timeout.py",
    "relative_path": "common\\timeout.py",
    "depends_on": [],
    "start_line": 22,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.timeout.Timeout.__exit__": {
    "id": "common.timeout.Timeout.__exit__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\timeout.py",
    "relative_path": "common\\timeout.py",
    "depends_on": [],
    "start_line": 26,
    "end_line": 27,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.time_helpers.min_date": {
    "id": "common.time_helpers.min_date",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\time_helpers.py",
    "relative_path": "common\\time_helpers.py",
    "depends_on": [],
    "start_line": 6,
    "end_line": 12,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.time_helpers.system_time_valid": {
    "id": "common.time_helpers.system_time_valid",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\time_helpers.py",
    "relative_path": "common\\time_helpers.py",
    "depends_on": [
      "common.time_helpers.min_date"
    ],
    "start_line": 14,
    "end_line": 15,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.timing.nanos_since_boot": {
    "id": "common.timing.nanos_since_boot",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\timing.h",
    "relative_path": "common\\timing.h",
    "depends_on": [],
    "start_line": 10,
    "end_line": 14,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline uint64_t nanos_since_boot() {\n  struct timespec t;\n  clock_gettime(CLOCK_BOOTTIME, &t);\n  return t.tv_sec * 1000000000ULL + t.tv_nsec;\n}\n"
  },
  "common.timing.millis_since_boot": {
    "id": "common.timing.millis_since_boot",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\timing.h",
    "relative_path": "common\\timing.h",
    "depends_on": [],
    "start_line": 16,
    "end_line": 20,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline double millis_since_boot() {\n  struct timespec t;\n  clock_gettime(CLOCK_BOOTTIME, &t);\n  return t.tv_sec * 1000.0 + t.tv_nsec * 1e-6;\n}\n"
  },
  "common.timing.seconds_since_boot": {
    "id": "common.timing.seconds_since_boot",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\timing.h",
    "relative_path": "common\\timing.h",
    "depends_on": [],
    "start_line": 22,
    "end_line": 26,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline double seconds_since_boot() {\n  struct timespec t;\n  clock_gettime(CLOCK_BOOTTIME, &t);\n  return (double)t.tv_sec + t.tv_nsec * 1e-9;\n}\n"
  },
  "common.timing.nanos_since_epoch": {
    "id": "common.timing.nanos_since_epoch",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\timing.h",
    "relative_path": "common\\timing.h",
    "depends_on": [],
    "start_line": 28,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline uint64_t nanos_since_epoch() {\n  struct timespec t;\n  clock_gettime(CLOCK_REALTIME, &t);\n  return t.tv_sec * 1000000000ULL + t.tv_nsec;\n}\n"
  },
  "common.timing.seconds_since_epoch": {
    "id": "common.timing.seconds_since_epoch",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\timing.h",
    "relative_path": "common\\timing.h",
    "depends_on": [],
    "start_line": 34,
    "end_line": 38,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline double seconds_since_epoch() {\n  struct timespec t;\n  clock_gettime(CLOCK_REALTIME, &t);\n  return (double)t.tv_sec + t.tv_nsec * 1e-9;\n}\n"
  },
  "common.timing.nanos_monotonic": {
    "id": "common.timing.nanos_monotonic",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\timing.h",
    "relative_path": "common\\timing.h",
    "depends_on": [],
    "start_line": 41,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline uint64_t nanos_monotonic() {\n  struct timespec t;\n  clock_gettime(CLOCK_MONOTONIC, &t);\n  return t.tv_sec * 1000000000ULL + t.tv_nsec;\n}\n"
  },
  "common.timing.nanos_monotonic_raw": {
    "id": "common.timing.nanos_monotonic_raw",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\timing.h",
    "relative_path": "common\\timing.h",
    "depends_on": [],
    "start_line": 47,
    "end_line": 51,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline uint64_t nanos_monotonic_raw() {\n  struct timespec t;\n  clock_gettime(CLOCK_MONOTONIC_RAW, &t);\n  return t.tv_sec * 1000000000ULL + t.tv_nsec;\n}\n"
  },
  "common.util.set_thread_name": {
    "id": "common.util.set_thread_name",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.cc",
    "relative_path": "common\\util.cc",
    "depends_on": [],
    "start_line": 27,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void set_thread_name(const char* name) {\n#ifdef __linux__\n  // pthread_setname_np is dumb (fails instead of truncates)\n  prctl(PR_SET_NAME, (unsigned long)name, 0, 0, 0);\n#endif\n}\n"
  },
  "common.util.set_realtime_priority": {
    "id": "common.util.set_realtime_priority",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.cc",
    "relative_path": "common\\util.cc",
    "depends_on": [],
    "start_line": 34,
    "end_line": 46,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int set_realtime_priority(int level) {\n#ifdef __linux__\n  long tid = syscall(SYS_gettid);\n\n  // should match python using chrt\n  struct sched_param sa;\n  memset(&sa, 0, sizeof(sa));\n  sa.sched_priority = level;\n  return sched_setscheduler(tid, SCHED_FIFO, &sa);\n#else\n  return -1;\n#endif\n}\n"
  },
  "common.util.set_file_descriptor_limit": {
    "id": "common.util.set_file_descriptor_limit",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.cc",
    "relative_path": "common\\util.cc",
    "depends_on": [],
    "start_line": 63,
    "end_line": 75,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int set_file_descriptor_limit(uint64_t limit_val) {\n  struct rlimit limit;\n  int status;\n\n  if ((status = getrlimit(RLIMIT_NOFILE, &limit)) < 0)\n    return status;\n\n  limit.rlim_cur = limit_val;\n  if ((status = setrlimit(RLIMIT_NOFILE, &limit)) < 0)\n    return status;\n\n  return 0;\n}\n"
  },
  "common.util.read_file": {
    "id": "common.util.read_file",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.cc",
    "relative_path": "common\\util.cc",
    "depends_on": [],
    "start_line": 77,
    "end_line": 98,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string read_file(const std::string& fn) {\n  std::ifstream f(fn, std::ios::binary | std::ios::in);\n  if (f.is_open()) {\n    f.seekg(0, std::ios::end);\n    int size = f.tellg();\n    if (f.good() && size > 0) {\n      std::string result(size, '\\0');\n      f.seekg(0, std::ios::beg);\n      f.read(result.data(), size);\n      // return either good() or has reached end-of-file (e.g. /sys/power/wakeup_count)\n      if (f.good() || f.eof()) {\n        result.resize(f.gcount());\n        return result;\n      }\n    }\n    // fallback for files created on read, e.g. procfs\n    std::stringstream buffer;\n    buffer << f.rdbuf();\n    return buffer.str();\n  }\n  return std::string();\n}\n"
  },
  "common.util.read_files_in_dir": {
    "id": "common.util.read_files_in_dir",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.cc",
    "relative_path": "common\\util.cc",
    "depends_on": [],
    "start_line": 100,
    "end_line": 114,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::map<std::string, std::string> read_files_in_dir(const std::string &path) {\n  std::map<std::string, std::string> ret;\n  DIR *d = opendir(path.c_str());\n  if (!d) return ret;\n\n  struct dirent *de = NULL;\n  while ((de = readdir(d))) {\n    if (de->d_type != DT_DIR) {\n      ret[de->d_name] = util::read_file(path + \"/\" + de->d_name);\n    }\n  }\n\n  closedir(d);\n  return ret;\n}\n"
  },
  "common.util.write_file": {
    "id": "common.util.write_file",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.cc",
    "relative_path": "common\\util.cc",
    "depends_on": [],
    "start_line": 116,
    "end_line": 124,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int write_file(const char* path, const void* data, size_t size, int flags, mode_t mode) {\n  int fd = HANDLE_EINTR(open(path, flags, mode));\n  if (fd == -1) {\n    return -1;\n  }\n  ssize_t n = HANDLE_EINTR(write(fd, data, size));\n  close(fd);\n  return (n >= 0 && (size_t)n == size) ? 0 : -1;\n}\n"
  },
  "common.util.safe_fopen": {
    "id": "common.util.safe_fopen",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.cc",
    "relative_path": "common\\util.cc",
    "depends_on": [],
    "start_line": 126,
    "end_line": 132,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "FILE* safe_fopen(const char* filename, const char* mode) {\n  FILE* fp = NULL;\n  do {\n    fp = fopen(filename, mode);\n  } while ((nullptr == fp) && (errno == EINTR));\n  return fp;\n}\n"
  },
  "common.util.safe_fwrite": {
    "id": "common.util.safe_fwrite",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.cc",
    "relative_path": "common\\util.cc",
    "depends_on": [],
    "start_line": 134,
    "end_line": 142,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "size_t safe_fwrite(const void* ptr, size_t size, size_t count, FILE* stream) {\n  size_t written = 0;\n  do {\n    size_t ret = ::fwrite((void*)((char *)ptr + written * size), size, count - written, stream);\n    if (ret == 0 && errno != EINTR) break;\n    written += ret;\n  } while (written != count);\n  return written;\n}\n"
  },
  "common.util.safe_fflush": {
    "id": "common.util.safe_fflush",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.cc",
    "relative_path": "common\\util.cc",
    "depends_on": [],
    "start_line": 144,
    "end_line": 150,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int safe_fflush(FILE *stream) {\n  int ret = EOF;\n  do {\n    ret = fflush(stream);\n  } while ((EOF == ret) && (errno == EINTR));\n  return ret;\n}\n"
  },
  "common.util.safe_ioctl": {
    "id": "common.util.safe_ioctl",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.cc",
    "relative_path": "common\\util.cc",
    "depends_on": [],
    "start_line": 152,
    "end_line": 158,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int safe_ioctl(int fd, unsigned long request, void *argp) {\n  int ret;\n  do {\n    ret = ioctl(fd, request, argp);\n  } while ((ret == -1) && (errno == EINTR));\n  return ret;\n}\n"
  },
  "common.util.readlink": {
    "id": "common.util.readlink",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.cc",
    "relative_path": "common\\util.cc",
    "depends_on": [],
    "start_line": 160,
    "end_line": 168,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string readlink(const std::string &path) {\n  char buff[4096];\n  ssize_t len = ::readlink(path.c_str(), buff, sizeof(buff)-1);\n  if (len != -1) {\n    buff[len] = '\\0';\n    return std::string(buff);\n  }\n  return \"\";\n}\n"
  },
  "common.util.file_exists": {
    "id": "common.util.file_exists",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.cc",
    "relative_path": "common\\util.cc",
    "depends_on": [],
    "start_line": 170,
    "end_line": 173,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "bool file_exists(const std::string& fn) {\n  struct stat st = {};\n  return stat(fn.c_str(), &st) != -1;\n}\n"
  },
  "common.util.createDirectory": {
    "id": "common.util.createDirectory",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.cc",
    "relative_path": "common\\util.cc",
    "depends_on": [],
    "start_line": 175,
    "end_line": 199,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static bool createDirectory(std::string dir, mode_t mode) {\n  auto verify_dir = [](const std::string& dir) -> bool {\n    struct stat st = {};\n    return (stat(dir.c_str(), &st) == 0 && (st.st_mode & S_IFMT) == S_IFDIR);\n  };\n  // remove trailing /'s\n  while (dir.size() > 1 && dir.back() == '/') {\n    dir.pop_back();\n  }\n  // try to mkdir this directory\n  if (mkdir(dir.c_str(), mode) == 0) return true;\n  if (errno == EEXIST) return verify_dir(dir);\n  if (errno != ENOENT) return false;\n\n  // mkdir failed because the parent dir doesn't exist, so try to create it\n  size_t slash = dir.rfind('/');\n  if ((slash == std::string::npos || slash < 1) ||\n      !createDirectory(dir.substr(0, slash), mode)) {\n    return false;\n  }\n\n  // try again\n  if (mkdir(dir.c_str(), mode) == 0) return true;\n  return errno == EEXIST && verify_dir(dir);\n}\n"
  },
  "common.util.create_directories": {
    "id": "common.util.create_directories",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.cc",
    "relative_path": "common\\util.cc",
    "depends_on": [],
    "start_line": 201,
    "end_line": 204,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "bool create_directories(const std::string& dir, mode_t mode) {\n  if (dir.empty()) return false;\n  return createDirectory(dir, mode);\n}\n"
  },
  "common.util.getenv": {
    "id": "common.util.getenv",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.cc",
    "relative_path": "common\\util.cc",
    "depends_on": [],
    "start_line": 216,
    "end_line": 219,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "float getenv(const char* key, float default_val) {\n  const char* val = ::getenv(key);\n  return val ? atof(val) : default_val;\n}\n"
  },
  "common.util.hexdump": {
    "id": "common.util.hexdump",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.cc",
    "relative_path": "common\\util.cc",
    "depends_on": [],
    "start_line": 221,
    "end_line": 228,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string hexdump(const uint8_t* in, const size_t size) {\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n  for (size_t i = 0; i < size; i++) {\n    ss << std::setw(2) << static_cast<unsigned int>(in[i]);\n  }\n  return ss.str();\n}\n"
  },
  "common.util.random_int": {
    "id": "common.util.random_int",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.cc",
    "relative_path": "common\\util.cc",
    "depends_on": [],
    "start_line": 230,
    "end_line": 235,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int random_int(int min, int max) {\n  std::random_device dev;\n  std::mt19937 rng(dev());\n  std::uniform_int_distribution<std::mt19937::result_type> dist(min, max);\n  return dist(rng);\n}\n"
  },
  "common.util.random_string": {
    "id": "common.util.random_string",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.cc",
    "relative_path": "common\\util.cc",
    "depends_on": [],
    "start_line": 237,
    "end_line": 247,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string random_string(std::string::size_type length) {\n  const std::string chrs = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  std::mt19937 rg{std::random_device{}()};\n  std::uniform_int_distribution<std::string::size_type> pick(0, chrs.length() - 1);\n  std::string s;\n  s.reserve(length);\n  while (length--) {\n    s += chrs[pick(rg)];\n  }\n  return s;\n}\n"
  },
  "common.util.starts_with": {
    "id": "common.util.starts_with",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.cc",
    "relative_path": "common\\util.cc",
    "depends_on": [],
    "start_line": 249,
    "end_line": 251,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "bool starts_with(const std::string &s1, const std::string &s2) {\n  return strncmp(s1.c_str(), s2.c_str(), s2.size()) == 0;\n}\n"
  },
  "common.util.ends_with": {
    "id": "common.util.ends_with",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.cc",
    "relative_path": "common\\util.cc",
    "depends_on": [],
    "start_line": 253,
    "end_line": 256,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "bool ends_with(const std::string& s, const std::string& suffix) {\n  return s.size() >= suffix.size() &&\n         strcmp(s.c_str() + (s.size() - suffix.size()), suffix.c_str()) == 0;\n}\n"
  },
  "common.util.strip": {
    "id": "common.util.strip",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.cc",
    "relative_path": "common\\util.cc",
    "depends_on": [],
    "start_line": 258,
    "end_line": 278,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string strip(const std::string &str) {\n  auto should_trim = [](unsigned char ch) {\n    return std::isspace(ch) || ch == '\\0';\n  };\n\n  size_t start = 0;\n  while (start < str.size() && should_trim(static_cast<unsigned char>(str[start]))) {\n    start++;\n  }\n\n  if (start == str.size()) {\n    return \"\";\n  }\n\n  size_t end = str.size() - 1;\n  while (end > 0 && should_trim(static_cast<unsigned char>(str[end]))) {\n    end--;\n  }\n\n  return str.substr(start, end - start + 1);\n}\n"
  },
  "common.util.check_output": {
    "id": "common.util.check_output",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.cc",
    "relative_path": "common\\util.cc",
    "depends_on": [],
    "start_line": 280,
    "end_line": 294,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string check_output(const std::string& command) {\n  char buffer[128];\n  std::string result;\n  std::unique_ptr<FILE, decltype(&pclose)> pipe(popen(command.c_str(), \"r\"), pclose);\n\n  if (!pipe) {\n    return \"\";\n  }\n\n  while (fgets(buffer, std::size(buffer), pipe.get()) != nullptr) {\n    result += std::string(buffer);\n  }\n\n  return result;\n}\n"
  },
  "common.util.system_time_valid": {
    "id": "common.util.system_time_valid",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.cc",
    "relative_path": "common\\util.cc",
    "depends_on": [],
    "start_line": 296,
    "end_line": 307,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "bool system_time_valid() {\n  // Default to August 26, 2024\n  tm min_tm = {.tm_year = 2024 - 1900, .tm_mon = 7, .tm_mday = 26};\n  time_t min_date = mktime(&min_tm);\n\n  struct stat st;\n  if (stat(\"/lib/systemd/systemd\", &st) == 0) {\n    min_date = std::max(min_date, st.st_mtime + 86400);  // Add 1 day (86400 seconds)\n  }\n\n  return time(nullptr) > min_date;\n}\n"
  },
  "common.util.sleep_for": {
    "id": "common.util.sleep_for",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.h",
    "relative_path": "common\\util.h",
    "depends_on": [],
    "start_line": 101,
    "end_line": 105,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "inline void sleep_for(const int milliseconds) {\n  if (milliseconds > 0) {\n    std::this_thread::sleep_for(std::chrono::milliseconds(milliseconds));\n  }\n}\n"
  },
  "common.util.ExitHandler": {
    "id": "common.util.ExitHandler",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.h",
    "relative_path": "common\\util.h",
    "depends_on": [],
    "start_line": 109,
    "end_line": 136,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ExitHandler {\npublic:\n  ExitHandler() {\n    std::signal(SIGINT, (sighandler_t)set_do_exit);\n    std::signal(SIGTERM, (sighandler_t)set_do_exit);\n\n#ifndef __APPLE__\n    std::signal(SIGPWR, (sighandler_t)set_do_exit);\n#endif\n  }\n  inline static std::atomic<bool> power_failure = false;\n  inline static std::atomic<int> signal = 0;\n  inline operator bool() { return do_exit; }\n  inline ExitHandler& operator=(bool v) {\n    signal = 0;\n    do_exit = v;\n    return *this;\n  }\nprivate:\n  static void set_do_exit(int sig) {\n#ifndef __APPLE__\n    power_failure = (sig == SIGPWR);\n#endif\n    signal = sig;\n    do_exit = true;\n  }\n  inline static std::atomic<bool> do_exit = false;\n};\n"
  },
  "common.util.ExitHandler.operator=": {
    "id": "common.util.ExitHandler.operator=",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.h",
    "relative_path": "common\\util.h",
    "depends_on": [],
    "start_line": 122,
    "end_line": 126,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  inline ExitHandler& operator=(bool v) {\n    signal = 0;\n    do_exit = v;\n    return *this;\n  }\n"
  },
  "common.util.ExitHandler.set_do_exit": {
    "id": "common.util.ExitHandler.set_do_exit",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.h",
    "relative_path": "common\\util.h",
    "depends_on": [],
    "start_line": 128,
    "end_line": 134,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  static void set_do_exit(int sig) {\n#ifndef __APPLE__\n    power_failure = (sig == SIGPWR);\n#endif\n    signal = sig;\n    do_exit = true;\n  }\n"
  },
  "common.util.unique_fd.operator=": {
    "id": "common.util.unique_fd.operator=",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.h",
    "relative_path": "common\\util.h",
    "depends_on": [],
    "start_line": 140,
    "end_line": 144,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  unique_fd& operator=(unique_fd&& uf) {\n    fd_ = uf.fd_;\n    uf.fd_ = -1;\n    return *this;\n  }\n"
  },
  "common.util.FirstOrderFilter": {
    "id": "common.util.FirstOrderFilter",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.h",
    "relative_path": "common\\util.h",
    "depends_on": [],
    "start_line": 152,
    "end_line": 174,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class FirstOrderFilter {\npublic:\n  FirstOrderFilter(float x0, float ts, float dt, bool initialized = true) {\n    k_ = (dt / ts) / (1.0 + dt / ts);\n    x_ = x0;\n    initialized_ = initialized;\n  }\n  inline float update(float x) {\n    if (initialized_) {\n      x_ = (1. - k_) * x_ + k_ * x;\n    } else {\n      initialized_ = true;\n      x_ = x;\n    }\n    return x_;\n  }\n  inline void reset(float x) { x_ = x; }\n  inline float x(){ return x_; }\n\nprivate:\n  float x_, k_;\n  bool initialized_;\n};\n"
  },
  "common.util.FirstOrderFilter.update": {
    "id": "common.util.FirstOrderFilter.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.h",
    "relative_path": "common\\util.h",
    "depends_on": [],
    "start_line": 159,
    "end_line": 167,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  inline float update(float x) {\n    if (initialized_) {\n      x_ = (1. - k_) * x_ + k_ * x;\n    } else {\n      initialized_ = true;\n      x_ = x;\n    }\n    return x_;\n  }\n"
  },
  "common.util.MovingAverage": {
    "id": "common.util.MovingAverage",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.py",
    "relative_path": "common\\util.py",
    "depends_on": [],
    "start_line": 1,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.util.MovingAverage.__init__": {
    "id": "common.util.MovingAverage.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.py",
    "relative_path": "common\\util.py",
    "depends_on": [],
    "start_line": 2,
    "end_line": 7,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.util.MovingAverage.add_value": {
    "id": "common.util.MovingAverage.add_value",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.py",
    "relative_path": "common\\util.py",
    "depends_on": [],
    "start_line": 9,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.util.MovingAverage.get_average": {
    "id": "common.util.MovingAverage.get_average",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\util.py",
    "relative_path": "common\\util.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.watchdog.watchdog_kick": {
    "id": "common.watchdog.watchdog_kick",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\watchdog.cc",
    "relative_path": "common\\watchdog.cc",
    "depends_on": [],
    "start_line": 9,
    "end_line": 12,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "bool watchdog_kick(uint64_t ts) {\n  static std::string fn = watchdog_fn_prefix + std::to_string(getpid());\n  return util::write_file(fn.c_str(), &ts, sizeof(ts), O_WRONLY | O_CREAT) > 0;\n}\n"
  },
  "common.mock.generators.generate_livePose": {
    "id": "common.mock.generators.generate_livePose",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\mock\\generators.py",
    "relative_path": "common\\mock\\generators.py",
    "depends_on": [],
    "start_line": 4,
    "end_line": 14,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.mock.__init__.generate_messages_loop": {
    "id": "common.mock.__init__.generate_messages_loop",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\mock\\__init__.py",
    "relative_path": "common\\mock\\__init__.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.mock.__init__.mock_messages": {
    "id": "common.mock.__init__.mock_messages",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\mock\\__init__.py",
    "relative_path": "common\\mock\\__init__.py",
    "depends_on": [
      "common.mock.__init__.generate_messages_loop"
    ],
    "start_line": 34,
    "end_line": 50,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.tests.test_file_helpers.TestFileHelpers": {
    "id": "common.tests.test_file_helpers.TestFileHelpers",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_file_helpers.py",
    "relative_path": "common\\tests\\test_file_helpers.py",
    "depends_on": [],
    "start_line": 7,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.tests.test_file_helpers.TestFileHelpers.run_atomic_write_func": {
    "id": "common.tests.test_file_helpers.TestFileHelpers.run_atomic_write_func",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_file_helpers.py",
    "relative_path": "common\\tests\\test_file_helpers.py",
    "depends_on": [],
    "start_line": 8,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.tests.test_file_helpers.TestFileHelpers.test_atomic_write_in_dir": {
    "id": "common.tests.test_file_helpers.TestFileHelpers.test_atomic_write_in_dir",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_file_helpers.py",
    "relative_path": "common\\tests\\test_file_helpers.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.tests.test_markdown.TestMarkdown": {
    "id": "common.tests.test_markdown.TestMarkdown",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_markdown.py",
    "relative_path": "common\\tests\\test_markdown.py",
    "depends_on": [],
    "start_line": 7,
    "end_line": 15,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.tests.test_markdown.TestMarkdown.test_all_release_notes": {
    "id": "common.tests.test_markdown.TestMarkdown.test_all_release_notes",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_markdown.py",
    "relative_path": "common\\tests\\test_markdown.py",
    "depends_on": [],
    "start_line": 8,
    "end_line": 15,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.tests.test_params.TestParams": {
    "id": "common.tests.test_params.TestParams",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_params.py",
    "relative_path": "common\\tests\\test_params.py",
    "depends_on": [],
    "start_line": 9,
    "end_line": 109,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.tests.test_params.TestParams.setup_method": {
    "id": "common.tests.test_params.TestParams.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_params.py",
    "relative_path": "common\\tests\\test_params.py",
    "depends_on": [],
    "start_line": 10,
    "end_line": 11,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.tests.test_params.TestParams.test_params_put_and_get": {
    "id": "common.tests.test_params.TestParams.test_params_put_and_get",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_params.py",
    "relative_path": "common\\tests\\test_params.py",
    "depends_on": [],
    "start_line": 13,
    "end_line": 15,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.tests.test_params.TestParams.test_params_non_ascii": {
    "id": "common.tests.test_params.TestParams.test_params_non_ascii",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_params.py",
    "relative_path": "common\\tests\\test_params.py",
    "depends_on": [],
    "start_line": 17,
    "end_line": 20,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.tests.test_params.TestParams.test_params_get_cleared_manager_start": {
    "id": "common.tests.test_params.TestParams.test_params_get_cleared_manager_start",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_params.py",
    "relative_path": "common\\tests\\test_params.py",
    "depends_on": [],
    "start_line": 22,
    "end_line": 35,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.tests.test_params.TestParams.test_params_two_things": {
    "id": "common.tests.test_params.TestParams.test_params_two_things",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_params.py",
    "relative_path": "common\\tests\\test_params.py",
    "depends_on": [],
    "start_line": 37,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.tests.test_params.TestParams.test_params_get_block": {
    "id": "common.tests.test_params.TestParams.test_params_get_block",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_params.py",
    "relative_path": "common\\tests\\test_params.py",
    "depends_on": [],
    "start_line": 43,
    "end_line": 49,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.tests.test_params.TestParams.test_params_unknown_key_fails": {
    "id": "common.tests.test_params.TestParams.test_params_unknown_key_fails",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_params.py",
    "relative_path": "common\\tests\\test_params.py",
    "depends_on": [],
    "start_line": 51,
    "end_line": 62,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.tests.test_params.TestParams.test_remove_not_there": {
    "id": "common.tests.test_params.TestParams.test_remove_not_there",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_params.py",
    "relative_path": "common\\tests\\test_params.py",
    "depends_on": [],
    "start_line": 64,
    "end_line": 67,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.tests.test_params.TestParams.test_get_bool": {
    "id": "common.tests.test_params.TestParams.test_get_bool",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_params.py",
    "relative_path": "common\\tests\\test_params.py",
    "depends_on": [],
    "start_line": 69,
    "end_line": 83,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.tests.test_params.TestParams.test_put_non_blocking_with_get_block": {
    "id": "common.tests.test_params.TestParams.test_put_non_blocking_with_get_block",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_params.py",
    "relative_path": "common\\tests\\test_params.py",
    "depends_on": [],
    "start_line": 85,
    "end_line": 92,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.tests.test_params.TestParams.test_put_bool_non_blocking_with_get_block": {
    "id": "common.tests.test_params.TestParams.test_put_bool_non_blocking_with_get_block",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_params.py",
    "relative_path": "common\\tests\\test_params.py",
    "depends_on": [],
    "start_line": 94,
    "end_line": 101,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.tests.test_params.TestParams.test_params_all_keys": {
    "id": "common.tests.test_params.TestParams.test_params_all_keys",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_params.py",
    "relative_path": "common\\tests\\test_params.py",
    "depends_on": [],
    "start_line": 103,
    "end_line": 109,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.tests.test_simple_kalman.TestSimpleKalman": {
    "id": "common.tests.test_simple_kalman.TestSimpleKalman",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_simple_kalman.py",
    "relative_path": "common\\tests\\test_simple_kalman.py",
    "depends_on": [],
    "start_line": 4,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.tests.test_simple_kalman.TestSimpleKalman.setup_method": {
    "id": "common.tests.test_simple_kalman.TestSimpleKalman.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_simple_kalman.py",
    "relative_path": "common\\tests\\test_simple_kalman.py",
    "depends_on": [],
    "start_line": 5,
    "end_line": 21,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.tests.test_simple_kalman.TestSimpleKalman.test_getter_setter": {
    "id": "common.tests.test_simple_kalman.TestSimpleKalman.test_getter_setter",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_simple_kalman.py",
    "relative_path": "common\\tests\\test_simple_kalman.py",
    "depends_on": [],
    "start_line": 23,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.tests.test_simple_kalman.TestSimpleKalman.test_update_returns_state": {
    "id": "common.tests.test_simple_kalman.TestSimpleKalman.test_update_returns_state",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_simple_kalman.py",
    "relative_path": "common\\tests\\test_simple_kalman.py",
    "depends_on": [],
    "start_line": 27,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.tests.test_swaglog.log_thread": {
    "id": "common.tests.test_swaglog.log_thread",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_swaglog.cc",
    "relative_path": "common\\tests\\test_swaglog.cc",
    "depends_on": [],
    "start_line": 16,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void log_thread(int thread_id, int msg_cnt) {\n  for (int i = 0; i < msg_cnt; ++i) {\n    LOGD(\"%d\", thread_id);\n    LINE_NO = __LINE__ - 1;\n    usleep(1);\n  }\n}\n"
  },
  "common.tests.test_swaglog.recv_log": {
    "id": "common.tests.test_swaglog.recv_log",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_swaglog.cc",
    "relative_path": "common\\tests\\test_swaglog.cc",
    "depends_on": [],
    "start_line": 24,
    "end_line": 72,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void recv_log(int thread_cnt, int thread_msg_cnt) {\n  void *zctx = zmq_ctx_new();\n  void *sock = zmq_socket(zctx, ZMQ_PULL);\n  zmq_bind(sock, Path::swaglog_ipc().c_str());\n  std::vector<int> thread_msgs(thread_cnt);\n  int total_count = 0;\n\n  for (auto start = std::chrono::steady_clock::now(), now = start;\n       now < start + std::chrono::seconds{1} && total_count < (thread_cnt * thread_msg_cnt);\n       now = std::chrono::steady_clock::now()) {\n    char buf[4096] = {};\n    if (zmq_recv(sock, buf, sizeof(buf), ZMQ_DONTWAIT) <= 0) {\n      if (errno == EAGAIN || errno == EINTR || errno == EFSM) continue;\n      break;\n    }\n\n    REQUIRE(buf[0] == CLOUDLOG_DEBUG);\n    std::string err;\n    auto msg = json11::Json::parse(buf + 1, err);\n    REQUIRE(!msg.is_null());\n\n    REQUIRE(msg[\"levelnum\"].int_value() == CLOUDLOG_DEBUG);\n    REQUIRE_THAT(msg[\"filename\"].string_value(), Catch::Contains(\"test_swaglog.cc\"));\n    REQUIRE(msg[\"funcname\"].string_value() == \"log_thread\");\n    REQUIRE(msg[\"lineno\"].int_value() == LINE_NO);\n\n    auto ctx = msg[\"ctx\"];\n\n    REQUIRE(ctx[\"daemon\"].string_value() == daemon_name);\n    REQUIRE(ctx[\"dongle_id\"].string_value() == dongle_id);\n    REQUIRE(ctx[\"dirty\"].bool_value() == true);\n\n    REQUIRE(ctx[\"version\"].string_value() == COMMA_VERSION);\n\n    std::string device = Hardware::get_name();\n    REQUIRE(ctx[\"device\"].string_value() == device);\n\n    int thread_id = atoi(msg[\"msg\"].string_value().c_str());\n    REQUIRE((thread_id >= 0 && thread_id < thread_cnt));\n    thread_msgs[thread_id]++;\n    total_count++;\n  }\n  for (int i = 0; i < thread_cnt; ++i) {\n    INFO(\"thread :\" << i);\n    REQUIRE(thread_msgs[i] == thread_msg_cnt);\n  }\n  zmq_close(sock);\n  zmq_ctx_destroy(zctx);\n}\n"
  },
  "common.tests.test_util.random_bytes": {
    "id": "common.tests.test_util.random_bytes",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\tests\\test_util.cc",
    "relative_path": "common\\tests\\test_util.cc",
    "depends_on": [],
    "start_line": 15,
    "end_line": 21,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string random_bytes(int size) {\n  std::random_device rd;\n  std::independent_bits_engine<std::default_random_engine, CHAR_BIT, unsigned char> rbe(rd());\n  std::string bytes(size + 1, '\\0');\n  std::generate(bytes.begin(), bytes.end(), std::ref(rbe));\n  return bytes;\n}\n"
  },
  "common.transformations.camera.CameraConfig": {
    "id": "common.transformations.camera.CameraConfig",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\camera.py",
    "relative_path": "common\\transformations\\camera.py",
    "depends_on": [],
    "start_line": 9,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.camera.CameraConfig.size": {
    "id": "common.transformations.camera.CameraConfig.size",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\camera.py",
    "relative_path": "common\\transformations\\camera.py",
    "depends_on": [],
    "start_line": 15,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.camera.CameraConfig.intrinsics": {
    "id": "common.transformations.camera.CameraConfig.intrinsics",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\camera.py",
    "relative_path": "common\\transformations\\camera.py",
    "depends_on": [],
    "start_line": 19,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.camera.CameraConfig.intrinsics_inv": {
    "id": "common.transformations.camera.CameraConfig.intrinsics_inv",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\camera.py",
    "relative_path": "common\\transformations\\camera.py",
    "depends_on": [],
    "start_line": 28,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.camera._NoneCameraConfig": {
    "id": "common.transformations.camera._NoneCameraConfig",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\camera.py",
    "relative_path": "common\\transformations\\camera.py",
    "depends_on": [
      "common.transformations.camera.CameraConfig"
    ],
    "start_line": 33,
    "end_line": 36,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.camera.DeviceCameraConfig": {
    "id": "common.transformations.camera.DeviceCameraConfig",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\camera.py",
    "relative_path": "common\\transformations\\camera.py",
    "depends_on": [
      "common.transformations.camera._NoneCameraConfig",
      "common.transformations.camera.CameraConfig"
    ],
    "start_line": 39,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.camera.DeviceCameraConfig.all_cams": {
    "id": "common.transformations.camera.DeviceCameraConfig.all_cams",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\camera.py",
    "relative_path": "common\\transformations\\camera.py",
    "depends_on": [
      "common.transformations.camera._NoneCameraConfig"
    ],
    "start_line": 44,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.camera.get_view_frame_from_road_frame": {
    "id": "common.transformations.camera.get_view_frame_from_road_frame",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\camera.py",
    "relative_path": "common\\transformations\\camera.py",
    "depends_on": [],
    "start_line": 85,
    "end_line": 88,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.camera.get_view_frame_from_calib_frame": {
    "id": "common.transformations.camera.get_view_frame_from_calib_frame",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\camera.py",
    "relative_path": "common\\transformations\\camera.py",
    "depends_on": [],
    "start_line": 93,
    "end_line": 96,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.camera.vp_from_ke": {
    "id": "common.transformations.camera.vp_from_ke",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\camera.py",
    "relative_path": "common\\transformations\\camera.py",
    "depends_on": [],
    "start_line": 99,
    "end_line": 106,
    "has_docstring": true,
    "docstring": "\n  Computes the vanishing point from the product of the intrinsic and extrinsic\n  matrices C = KE.\n\n  The vanishing point is defined as lim x->infinity C (x, 0, 0, 1).T\n  ",
    "language": "python"
  },
  "common.transformations.camera.roll_from_ke": {
    "id": "common.transformations.camera.roll_from_ke",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\camera.py",
    "relative_path": "common\\transformations\\camera.py",
    "depends_on": [],
    "start_line": 109,
    "end_line": 112,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.camera.normalize": {
    "id": "common.transformations.camera.normalize",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\camera.py",
    "relative_path": "common\\transformations\\camera.py",
    "depends_on": [],
    "start_line": 115,
    "end_line": 125,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.camera.denormalize": {
    "id": "common.transformations.camera.denormalize",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\camera.py",
    "relative_path": "common\\transformations\\camera.py",
    "depends_on": [],
    "start_line": 128,
    "end_line": 142,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.camera.get_calib_from_vp": {
    "id": "common.transformations.camera.get_calib_from_vp",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\camera.py",
    "relative_path": "common\\transformations\\camera.py",
    "depends_on": [
      "common.transformations.camera.normalize"
    ],
    "start_line": 145,
    "end_line": 150,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.camera.device_from_ecef": {
    "id": "common.transformations.camera.device_from_ecef",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\camera.py",
    "relative_path": "common\\transformations\\camera.py",
    "depends_on": [],
    "start_line": 153,
    "end_line": 163,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.camera.img_from_device": {
    "id": "common.transformations.camera.img_from_device",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\camera.py",
    "relative_path": "common\\transformations\\camera.py",
    "depends_on": [],
    "start_line": 166,
    "end_line": 178,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.coordinates.to_degrees": {
    "id": "common.transformations.coordinates.to_degrees",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\coordinates.cc",
    "relative_path": "common\\transformations\\coordinates.cc",
    "depends_on": [],
    "start_line": 15,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static Geodetic to_degrees(Geodetic geodetic){\n  geodetic.lat = RAD2DEG(geodetic.lat);\n  geodetic.lon = RAD2DEG(geodetic.lon);\n  return geodetic;\n}\n"
  },
  "common.transformations.coordinates.to_radians": {
    "id": "common.transformations.coordinates.to_radians",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\coordinates.cc",
    "relative_path": "common\\transformations\\coordinates.cc",
    "depends_on": [],
    "start_line": 21,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static Geodetic to_radians(Geodetic geodetic){\n  geodetic.lat = DEG2RAD(geodetic.lat);\n  geodetic.lon = DEG2RAD(geodetic.lon);\n  return geodetic;\n}\n"
  },
  "common.transformations.coordinates.geodetic2ecef": {
    "id": "common.transformations.coordinates.geodetic2ecef",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\coordinates.cc",
    "relative_path": "common\\transformations\\coordinates.cc",
    "depends_on": [],
    "start_line": 28,
    "end_line": 35,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "ECEF geodetic2ecef(const Geodetic &geodetic) {\n  auto g = to_radians(geodetic);\n  double xi = sqrt(1.0 - esq * pow(sin(g.lat), 2));\n  double x = (a / xi + g.alt) * cos(g.lat) * cos(g.lon);\n  double y = (a / xi + g.alt) * cos(g.lat) * sin(g.lon);\n  double z = (a / xi * (1.0 - esq) + g.alt) * sin(g.lat);\n  return {x, y, z};\n}\n"
  },
  "common.transformations.coordinates.ecef2geodetic": {
    "id": "common.transformations.coordinates.ecef2geodetic",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\coordinates.cc",
    "relative_path": "common\\transformations\\coordinates.cc",
    "depends_on": [],
    "start_line": 37,
    "end_line": 62,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "Geodetic ecef2geodetic(const ECEF &e) {\n  // Convert from ECEF to geodetic using Ferrari's methods\n  // https://en.wikipedia.org/wiki/Geographic_coordinate_conversion#Ferrari.27s_solution\n  double x = e.x;\n  double y = e.y;\n  double z = e.z;\n\n  double r = sqrt(x * x + y * y);\n  double Esq = a * a - b * b;\n  double F = 54 * b * b * z * z;\n  double G = r * r + (1 - esq) * z * z - esq * Esq;\n  double C = (esq * esq * F * r * r) / (pow(G, 3));\n  double S = cbrt(1 + C + sqrt(C * C + 2 * C));\n  double P = F / (3 * pow((S + 1 / S + 1), 2) * G * G);\n  double Q = sqrt(1 + 2 * esq * esq * P);\n  double r_0 = -(P * esq * r) / (1 + Q) + sqrt(0.5 * a * a*(1 + 1.0 / Q) - P * (1 - esq) * z * z / (Q * (1 + Q)) - 0.5 * P * r * r);\n  double U = sqrt(pow((r - esq * r_0), 2) + z * z);\n  double V = sqrt(pow((r - esq * r_0), 2) + (1 - esq) * z * z);\n  double Z_0 = b * b * z / (a * V);\n  double h = U * (1 - b * b / (a * V));\n\n  double lat = atan((z + e1sq * Z_0) / r);\n  double lon = atan2(y, x);\n\n  return to_degrees({lat, lon, h});\n}\n"
  },
  "common.transformations.coordinates.ECEF.to_vector": {
    "id": "common.transformations.coordinates.ECEF.to_vector",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\coordinates.hpp",
    "relative_path": "common\\transformations\\coordinates.hpp",
    "depends_on": [],
    "start_line": 10,
    "end_line": 12,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  Eigen::Vector3d to_vector() const {\n    return Eigen::Vector3d(x, y, z);\n  }\n"
  },
  "common.transformations.coordinates.NED.to_vector": {
    "id": "common.transformations.coordinates.NED.to_vector",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\coordinates.hpp",
    "relative_path": "common\\transformations\\coordinates.hpp",
    "depends_on": [],
    "start_line": 17,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  Eigen::Vector3d to_vector() const {\n    return Eigen::Vector3d(n, e, d);\n  }\n"
  },
  "common.transformations.coordinates.LocalCoord": {
    "id": "common.transformations.coordinates.LocalCoord",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\coordinates.py",
    "relative_path": "common\\transformations\\coordinates.py",
    "depends_on": [],
    "start_line": 7,
    "end_line": 11,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.model.get_warp_matrix": {
    "id": "common.transformations.model.get_warp_matrix",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\model.py",
    "relative_path": "common\\transformations\\model.py",
    "depends_on": [],
    "start_line": 65,
    "end_line": 70,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.orientation.ensure_unique": {
    "id": "common.transformations.orientation.ensure_unique",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\orientation.cc",
    "relative_path": "common\\transformations\\orientation.cc",
    "depends_on": [],
    "start_line": 10,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "Eigen::Quaterniond ensure_unique(const Eigen::Quaterniond &quat) {\n  if (quat.w() > 0){\n    return quat;\n  } else {\n    return Eigen::Quaterniond(-quat.w(), -quat.x(), -quat.y(), -quat.z());\n  }\n}\n"
  },
  "common.transformations.orientation.euler2quat": {
    "id": "common.transformations.orientation.euler2quat",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\orientation.cc",
    "relative_path": "common\\transformations\\orientation.cc",
    "depends_on": [],
    "start_line": 18,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "Eigen::Quaterniond euler2quat(const Eigen::Vector3d &euler) {\n  Eigen::Quaterniond q;\n\n  q = Eigen::AngleAxisd(euler(2), Eigen::Vector3d::UnitZ())\n    * Eigen::AngleAxisd(euler(1), Eigen::Vector3d::UnitY())\n    * Eigen::AngleAxisd(euler(0), Eigen::Vector3d::UnitX());\n  return ensure_unique(q);\n}\n"
  },
  "common.transformations.orientation.quat2euler": {
    "id": "common.transformations.orientation.quat2euler",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\orientation.cc",
    "relative_path": "common\\transformations\\orientation.cc",
    "depends_on": [],
    "start_line": 28,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "Eigen::Vector3d quat2euler(const Eigen::Quaterniond &quat) {\n  // TODO: switch to eigen implementation if the range of the Euler angles doesn't matter anymore\n  // Eigen::Vector3d euler = quat.toRotationMatrix().eulerAngles(2, 1, 0);\n  // return {euler(2), euler(1), euler(0)};\n  double gamma = atan2(2 * (quat.w() * quat.x() + quat.y() * quat.z()), 1 - 2 * (quat.x()*quat.x() + quat.y()*quat.y()));\n  double asin_arg_clipped = std::clamp(2 * (quat.w() * quat.y() - quat.z() * quat.x()), -1.0, 1.0);\n  double theta = asin(asin_arg_clipped);\n  double psi = atan2(2 * (quat.w() * quat.z() + quat.x() * quat.y()), 1 - 2 * (quat.y()*quat.y() + quat.z()*quat.z()));\n  return {gamma, theta, psi};\n}\n"
  },
  "common.transformations.orientation.quat2rot": {
    "id": "common.transformations.orientation.quat2rot",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\orientation.cc",
    "relative_path": "common\\transformations\\orientation.cc",
    "depends_on": [],
    "start_line": 39,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "Eigen::Matrix3d quat2rot(const Eigen::Quaterniond &quat) {\n  return quat.toRotationMatrix();\n}\n"
  },
  "common.transformations.orientation.rot2quat": {
    "id": "common.transformations.orientation.rot2quat",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\orientation.cc",
    "relative_path": "common\\transformations\\orientation.cc",
    "depends_on": [],
    "start_line": 43,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "Eigen::Quaterniond rot2quat(const Eigen::Matrix3d &rot) {\n  return ensure_unique(Eigen::Quaterniond(rot));\n}\n"
  },
  "common.transformations.orientation.euler2rot": {
    "id": "common.transformations.orientation.euler2rot",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\orientation.cc",
    "relative_path": "common\\transformations\\orientation.cc",
    "depends_on": [],
    "start_line": 47,
    "end_line": 49,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "Eigen::Matrix3d euler2rot(const Eigen::Vector3d &euler) {\n  return quat2rot(euler2quat(euler));\n}\n"
  },
  "common.transformations.orientation.rot2euler": {
    "id": "common.transformations.orientation.rot2euler",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\orientation.cc",
    "relative_path": "common\\transformations\\orientation.cc",
    "depends_on": [],
    "start_line": 51,
    "end_line": 53,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "Eigen::Vector3d rot2euler(const Eigen::Matrix3d &rot) {\n  return quat2euler(rot2quat(rot));\n}\n"
  },
  "common.transformations.orientation.rot_matrix": {
    "id": "common.transformations.orientation.rot_matrix",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\orientation.cc",
    "relative_path": "common\\transformations\\orientation.cc",
    "depends_on": [],
    "start_line": 55,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "Eigen::Matrix3d rot_matrix(double roll, double pitch, double yaw) {\n  return euler2rot({roll, pitch, yaw});\n}\n"
  },
  "common.transformations.orientation.rot": {
    "id": "common.transformations.orientation.rot",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\orientation.cc",
    "relative_path": "common\\transformations\\orientation.cc",
    "depends_on": [],
    "start_line": 59,
    "end_line": 63,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "Eigen::Matrix3d rot(const Eigen::Vector3d &axis, double angle) {\n  Eigen::Quaterniond q;\n  q = Eigen::AngleAxisd(angle, axis);\n  return q.toRotationMatrix();\n}\n"
  },
  "common.transformations.orientation.ecef_euler_from_ned": {
    "id": "common.transformations.orientation.ecef_euler_from_ned",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\orientation.cc",
    "relative_path": "common\\transformations\\orientation.cc",
    "depends_on": [],
    "start_line": 66,
    "end_line": 104,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "Eigen::Vector3d ecef_euler_from_ned(const ECEF &ecef_init, const Eigen::Vector3d &ned_pose) {\n  /*\n    Using Rotations to Build Aerospace Coordinate Systems\n    Don Koks\n    https://apps.dtic.mil/dtic/tr/fulltext/u2/a484864.pdf\n  */\n  LocalCoord converter = LocalCoord(ecef_init);\n  Eigen::Vector3d zero = ecef_init.to_vector();\n\n  Eigen::Vector3d x0 = converter.ned2ecef({1, 0, 0}).to_vector() - zero;\n  Eigen::Vector3d y0 = converter.ned2ecef({0, 1, 0}).to_vector() - zero;\n  Eigen::Vector3d z0 = converter.ned2ecef({0, 0, 1}).to_vector() - zero;\n\n  Eigen::Vector3d x1 = rot(z0, ned_pose(2)) * x0;\n  Eigen::Vector3d y1 = rot(z0, ned_pose(2)) * y0;\n  Eigen::Vector3d z1 = rot(z0, ned_pose(2)) * z0;\n\n  Eigen::Vector3d x2 = rot(y1, ned_pose(1)) * x1;\n  Eigen::Vector3d y2 = rot(y1, ned_pose(1)) * y1;\n  Eigen::Vector3d z2 = rot(y1, ned_pose(1)) * z1;\n\n  Eigen::Vector3d x3 = rot(x2, ned_pose(0)) * x2;\n  Eigen::Vector3d y3 = rot(x2, ned_pose(0)) * y2;\n\n\n  x0 = Eigen::Vector3d(1, 0, 0);\n  y0 = Eigen::Vector3d(0, 1, 0);\n  z0 = Eigen::Vector3d(0, 0, 1);\n\n  double psi = atan2(x3.dot(y0), x3.dot(x0));\n  double theta = atan2(-x3.dot(z0), sqrt(pow(x3.dot(x0), 2) + pow(x3.dot(y0), 2)));\n\n  y2 = rot(z0, psi) * y0;\n  z2 = rot(y2, theta) * z0;\n\n  double phi = atan2(y3.dot(z2), y3.dot(y2));\n\n  return {phi, theta, psi};\n}\n"
  },
  "common.transformations.orientation.ned_euler_from_ecef": {
    "id": "common.transformations.orientation.ned_euler_from_ecef",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\orientation.cc",
    "relative_path": "common\\transformations\\orientation.cc",
    "depends_on": [],
    "start_line": 106,
    "end_line": 143,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "Eigen::Vector3d ned_euler_from_ecef(const ECEF &ecef_init, const Eigen::Vector3d &ecef_pose) {\n  /*\n    Using Rotations to Build Aerospace Coordinate Systems\n    Don Koks\n    https://apps.dtic.mil/dtic/tr/fulltext/u2/a484864.pdf\n  */\n  LocalCoord converter = LocalCoord(ecef_init);\n\n  Eigen::Vector3d x0 = Eigen::Vector3d(1, 0, 0);\n  Eigen::Vector3d y0 = Eigen::Vector3d(0, 1, 0);\n  Eigen::Vector3d z0 = Eigen::Vector3d(0, 0, 1);\n\n  Eigen::Vector3d x1 = rot(z0, ecef_pose(2)) * x0;\n  Eigen::Vector3d y1 = rot(z0, ecef_pose(2)) * y0;\n  Eigen::Vector3d z1 = rot(z0, ecef_pose(2)) * z0;\n\n  Eigen::Vector3d x2 = rot(y1, ecef_pose(1)) * x1;\n  Eigen::Vector3d y2 = rot(y1, ecef_pose(1)) * y1;\n  Eigen::Vector3d z2 = rot(y1, ecef_pose(1)) * z1;\n\n  Eigen::Vector3d x3 = rot(x2, ecef_pose(0)) * x2;\n  Eigen::Vector3d y3 = rot(x2, ecef_pose(0)) * y2;\n\n  Eigen::Vector3d zero = ecef_init.to_vector();\n  x0 = converter.ned2ecef({1, 0, 0}).to_vector() - zero;\n  y0 = converter.ned2ecef({0, 1, 0}).to_vector() - zero;\n  z0 = converter.ned2ecef({0, 0, 1}).to_vector() - zero;\n\n  double psi = atan2(x3.dot(y0), x3.dot(x0));\n  double theta = atan2(-x3.dot(z0), sqrt(pow(x3.dot(x0), 2) + pow(x3.dot(y0), 2)));\n\n  y2 = rot(z0, psi) * y0;\n  z2 = rot(y2, theta) * z0;\n\n  double phi = atan2(y3.dot(z2), y3.dot(y2));\n\n  return {phi, theta, psi};\n}\n"
  },
  "common.transformations.orientation.numpy_wrap": {
    "id": "common.transformations.orientation.numpy_wrap",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\orientation.py",
    "relative_path": "common\\transformations\\orientation.py",
    "depends_on": [],
    "start_line": 14,
    "end_line": 33,
    "has_docstring": true,
    "docstring": "Wrap a function to take either an input or list of inputs and return the correct shape",
    "language": "python"
  },
  "common.transformations.tests.test_coordinates.TestNED": {
    "id": "common.transformations.tests.test_coordinates.TestNED",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\tests\\test_coordinates.py",
    "relative_path": "common\\transformations\\tests\\test_coordinates.py",
    "depends_on": [],
    "start_line": 44,
    "end_line": 104,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.tests.test_coordinates.TestNED.test_small_distances": {
    "id": "common.transformations.tests.test_coordinates.TestNED.test_small_distances",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\tests\\test_coordinates.py",
    "relative_path": "common\\transformations\\tests\\test_coordinates.py",
    "depends_on": [],
    "start_line": 45,
    "end_line": 60,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.tests.test_coordinates.TestNED.test_ecef_geodetic": {
    "id": "common.transformations.tests.test_coordinates.TestNED.test_ecef_geodetic",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\tests\\test_coordinates.py",
    "relative_path": "common\\transformations\\tests\\test_coordinates.py",
    "depends_on": [],
    "start_line": 62,
    "end_line": 70,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.tests.test_coordinates.TestNED.test_ned": {
    "id": "common.transformations.tests.test_coordinates.TestNED.test_ned",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\tests\\test_coordinates.py",
    "relative_path": "common\\transformations\\tests\\test_coordinates.py",
    "depends_on": [],
    "start_line": 73,
    "end_line": 85,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.tests.test_coordinates.TestNED.test_ned_saved_results": {
    "id": "common.transformations.tests.test_coordinates.TestNED.test_ned_saved_results",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\tests\\test_coordinates.py",
    "relative_path": "common\\transformations\\tests\\test_coordinates.py",
    "depends_on": [],
    "start_line": 87,
    "end_line": 95,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.tests.test_coordinates.TestNED.test_ned_batch": {
    "id": "common.transformations.tests.test_coordinates.TestNED.test_ned_batch",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\tests\\test_coordinates.py",
    "relative_path": "common\\transformations\\tests\\test_coordinates.py",
    "depends_on": [],
    "start_line": 97,
    "end_line": 104,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.tests.test_orientation.TestOrientation": {
    "id": "common.transformations.tests.test_orientation.TestOrientation",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\tests\\test_orientation.py",
    "relative_path": "common\\transformations\\tests\\test_orientation.py",
    "depends_on": [],
    "start_line": 32,
    "end_line": 59,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.tests.test_orientation.TestOrientation.test_quat_euler": {
    "id": "common.transformations.tests.test_orientation.TestOrientation.test_quat_euler",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\tests\\test_orientation.py",
    "relative_path": "common\\transformations\\tests\\test_orientation.py",
    "depends_on": [],
    "start_line": 33,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.tests.test_orientation.TestOrientation.test_rot_euler": {
    "id": "common.transformations.tests.test_orientation.TestOrientation.test_rot_euler",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\tests\\test_orientation.py",
    "relative_path": "common\\transformations\\tests\\test_orientation.py",
    "depends_on": [],
    "start_line": 43,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.tests.test_orientation.TestOrientation.test_rot_quat": {
    "id": "common.transformations.tests.test_orientation.TestOrientation.test_rot_quat",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\tests\\test_orientation.py",
    "relative_path": "common\\transformations\\tests\\test_orientation.py",
    "depends_on": [],
    "start_line": 50,
    "end_line": 55,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "common.transformations.tests.test_orientation.TestOrientation.test_euler_ned": {
    "id": "common.transformations.tests.test_orientation.TestOrientation.test_euler_ned",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\common\\transformations\\tests\\test_orientation.py",
    "relative_path": "common\\transformations\\tests\\test_orientation.py",
    "depends_on": [],
    "start_line": 57,
    "end_line": 59,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "docs.hooks.glossary.load_glossary": {
    "id": "docs.hooks.glossary.load_glossary",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\docs\\hooks\\glossary.py",
    "relative_path": "docs\\hooks\\glossary.py",
    "depends_on": [],
    "start_line": 4,
    "end_line": 7,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "docs.hooks.glossary.generate_anchor_id": {
    "id": "docs.hooks.glossary.generate_anchor_id",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\docs\\hooks\\glossary.py",
    "relative_path": "docs\\hooks\\glossary.py",
    "depends_on": [],
    "start_line": 9,
    "end_line": 10,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "docs.hooks.glossary.format_markdown_term": {
    "id": "docs.hooks.glossary.format_markdown_term",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\docs\\hooks\\glossary.py",
    "relative_path": "docs\\hooks\\glossary.py",
    "depends_on": [
      "docs.hooks.glossary.generate_anchor_id"
    ],
    "start_line": 12,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "docs.hooks.glossary.glossary_markdown": {
    "id": "docs.hooks.glossary.glossary_markdown",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\docs\\hooks\\glossary.py",
    "relative_path": "docs\\hooks\\glossary.py",
    "depends_on": [
      "docs.hooks.glossary.format_markdown_term"
    ],
    "start_line": 21,
    "end_line": 27,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "docs.hooks.glossary.format_tooltip_html": {
    "id": "docs.hooks.glossary.format_tooltip_html",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\docs\\hooks\\glossary.py",
    "relative_path": "docs\\hooks\\glossary.py",
    "depends_on": [],
    "start_line": 29,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "docs.hooks.glossary.apply_tooltip": {
    "id": "docs.hooks.glossary.apply_tooltip",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\docs\\hooks\\glossary.py",
    "relative_path": "docs\\hooks\\glossary.py",
    "depends_on": [
      "docs.hooks.glossary.format_tooltip_html"
    ],
    "start_line": 43,
    "end_line": 49,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "docs.hooks.glossary.tooltip_html": {
    "id": "docs.hooks.glossary.tooltip_html",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\docs\\hooks\\glossary.py",
    "relative_path": "docs\\hooks\\glossary.py",
    "depends_on": [
      "docs.hooks.glossary.apply_tooltip"
    ],
    "start_line": 51,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "docs.hooks.glossary.on_page_markdown": {
    "id": "docs.hooks.glossary.on_page_markdown",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\docs\\hooks\\glossary.py",
    "relative_path": "docs\\hooks\\glossary.py",
    "depends_on": [
      "docs.hooks.glossary.glossary_markdown",
      "docs.hooks.glossary.load_glossary"
    ],
    "start_line": 60,
    "end_line": 62,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "docs.hooks.glossary.on_page_content": {
    "id": "docs.hooks.glossary.on_page_content",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\docs\\hooks\\glossary.py",
    "relative_path": "docs\\hooks\\glossary.py",
    "depends_on": [
      "docs.hooks.glossary.load_glossary",
      "docs.hooks.glossary.tooltip_html"
    ],
    "start_line": 64,
    "end_line": 68,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "release.pack.copy": {
    "id": "release.pack.copy",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\release\\pack.py",
    "relative_path": "release\\pack.py",
    "depends_on": [],
    "start_line": 19,
    "end_line": 21,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "scripts.reporter.get_checkpoint": {
    "id": "scripts.reporter.get_checkpoint",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\scripts\\reporter.py",
    "relative_path": "scripts\\reporter.py",
    "depends_on": [],
    "start_line": 10,
    "end_line": 13,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "scripts.waste.waste": {
    "id": "scripts.waste.waste",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\scripts\\waste.py",
    "relative_path": "scripts\\waste.py",
    "depends_on": [],
    "start_line": 8,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "scripts.waste.main": {
    "id": "scripts.waste.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\scripts\\waste.py",
    "relative_path": "scripts\\waste.py",
    "depends_on": [
      "scripts.waste.waste"
    ],
    "start_line": 26,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.card.obd_callback": {
    "id": "selfdrive.car.card.obd_callback",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\card.py",
    "relative_path": "selfdrive\\car\\card.py",
    "depends_on": [],
    "start_line": 32,
    "end_line": 40,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.card.can_comm_callbacks": {
    "id": "selfdrive.car.card.can_comm_callbacks",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\card.py",
    "relative_path": "selfdrive\\car\\card.py",
    "depends_on": [],
    "start_line": 43,
    "end_line": 58,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.card.Car": {
    "id": "selfdrive.car.card.Car",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\card.py",
    "relative_path": "selfdrive\\car\\card.py",
    "depends_on": [
      "selfdrive.car.card.can_comm_callbacks",
      "selfdrive.car.card.obd_callback"
    ],
    "start_line": 61,
    "end_line": 273,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.card.Car.__init__": {
    "id": "selfdrive.car.card.Car.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\card.py",
    "relative_path": "selfdrive\\car\\card.py",
    "depends_on": [
      "selfdrive.car.card.can_comm_callbacks",
      "selfdrive.car.card.obd_callback"
    ],
    "start_line": 66,
    "end_line": 158,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.card.Car.state_update": {
    "id": "selfdrive.car.card.Car.state_update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\card.py",
    "relative_path": "selfdrive\\car\\card.py",
    "depends_on": [],
    "start_line": 160,
    "end_line": 194,
    "has_docstring": true,
    "docstring": "carState update loop, driven by can",
    "language": "python"
  },
  "selfdrive.car.card.Car.state_publish": {
    "id": "selfdrive.car.card.Car.state_publish",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\card.py",
    "relative_path": "selfdrive\\car\\card.py",
    "depends_on": [],
    "start_line": 196,
    "end_line": 224,
    "has_docstring": true,
    "docstring": "carState and carParams publish loop",
    "language": "python"
  },
  "selfdrive.car.card.Car.controls_update": {
    "id": "selfdrive.car.card.Car.controls_update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\card.py",
    "relative_path": "selfdrive\\car\\card.py",
    "depends_on": [],
    "start_line": 226,
    "end_line": 242,
    "has_docstring": true,
    "docstring": "control update loop, driven by carControl",
    "language": "python"
  },
  "selfdrive.car.card.Car.step": {
    "id": "selfdrive.car.card.Car.step",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\card.py",
    "relative_path": "selfdrive\\car\\card.py",
    "depends_on": [],
    "start_line": 244,
    "end_line": 255,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.card.Car.params_thread": {
    "id": "selfdrive.car.card.Car.params_thread",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\card.py",
    "relative_path": "selfdrive\\car\\card.py",
    "depends_on": [],
    "start_line": 257,
    "end_line": 261,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.card.Car.card_thread": {
    "id": "selfdrive.car.card.Car.card_thread",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\card.py",
    "relative_path": "selfdrive\\car\\card.py",
    "depends_on": [],
    "start_line": 263,
    "end_line": 273,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.card.main": {
    "id": "selfdrive.car.card.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\card.py",
    "relative_path": "selfdrive\\car\\card.py",
    "depends_on": [
      "selfdrive.car.card.Car"
    ],
    "start_line": 276,
    "end_line": 279,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.car_specific.MockCarState": {
    "id": "selfdrive.car.car_specific.MockCarState",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\car_specific.py",
    "relative_path": "selfdrive\\car\\car_specific.py",
    "depends_on": [],
    "start_line": 19,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.car_specific.MockCarState.__init__": {
    "id": "selfdrive.car.car_specific.MockCarState.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\car_specific.py",
    "relative_path": "selfdrive\\car\\car_specific.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 21,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.car_specific.MockCarState.update": {
    "id": "selfdrive.car.car_specific.MockCarState.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\car_specific.py",
    "relative_path": "selfdrive\\car\\car_specific.py",
    "depends_on": [],
    "start_line": 23,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.car_specific.CarSpecificEvents": {
    "id": "selfdrive.car.car_specific.CarSpecificEvents",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\car_specific.py",
    "relative_path": "selfdrive\\car\\car_specific.py",
    "depends_on": [],
    "start_line": 33,
    "end_line": 244,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.car_specific.CarSpecificEvents.__init__": {
    "id": "selfdrive.car.car_specific.CarSpecificEvents.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\car_specific.py",
    "relative_path": "selfdrive\\car\\car_specific.py",
    "depends_on": [],
    "start_line": 34,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.car_specific.CarSpecificEvents.update": {
    "id": "selfdrive.car.car_specific.CarSpecificEvents.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\car_specific.py",
    "relative_path": "selfdrive\\car\\car_specific.py",
    "depends_on": [],
    "start_line": 44,
    "end_line": 157,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.car_specific.CarSpecificEvents.create_common_events": {
    "id": "selfdrive.car.car_specific.CarSpecificEvents.create_common_events",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\car_specific.py",
    "relative_path": "selfdrive\\car\\car_specific.py",
    "depends_on": [],
    "start_line": 159,
    "end_line": 244,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.cruise.VCruiseHelper": {
    "id": "selfdrive.car.cruise.VCruiseHelper",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\cruise.py",
    "relative_path": "selfdrive\\car\\cruise.py",
    "depends_on": [],
    "start_line": 31,
    "end_line": 138,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.cruise.VCruiseHelper.__init__": {
    "id": "selfdrive.car.cruise.VCruiseHelper.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\cruise.py",
    "relative_path": "selfdrive\\car\\cruise.py",
    "depends_on": [],
    "start_line": 32,
    "end_line": 38,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.cruise.VCruiseHelper.v_cruise_initialized": {
    "id": "selfdrive.car.cruise.VCruiseHelper.v_cruise_initialized",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\cruise.py",
    "relative_path": "selfdrive\\car\\cruise.py",
    "depends_on": [],
    "start_line": 41,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.cruise.VCruiseHelper.update_v_cruise": {
    "id": "selfdrive.car.cruise.VCruiseHelper.update_v_cruise",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\cruise.py",
    "relative_path": "selfdrive\\car\\cruise.py",
    "depends_on": [],
    "start_line": 44,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.cruise.VCruiseHelper._update_v_cruise_non_pcm": {
    "id": "selfdrive.car.cruise.VCruiseHelper._update_v_cruise_non_pcm",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\cruise.py",
    "relative_path": "selfdrive\\car\\cruise.py",
    "depends_on": [],
    "start_line": 66,
    "end_line": 112,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.cruise.VCruiseHelper.update_button_timers": {
    "id": "selfdrive.car.cruise.VCruiseHelper.update_button_timers",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\cruise.py",
    "relative_path": "selfdrive\\car\\cruise.py",
    "depends_on": [],
    "start_line": 114,
    "end_line": 124,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.cruise.VCruiseHelper.initialize_v_cruise": {
    "id": "selfdrive.car.cruise.VCruiseHelper.initialize_v_cruise",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\cruise.py",
    "relative_path": "selfdrive\\car\\cruise.py",
    "depends_on": [],
    "start_line": 126,
    "end_line": 138,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_car_interfaces.TestCarInterfaces": {
    "id": "selfdrive.car.tests.test_car_interfaces.TestCarInterfaces",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_car_interfaces.py",
    "relative_path": "selfdrive\\car\\tests\\test_car_interfaces.py",
    "depends_on": [],
    "start_line": 29,
    "end_line": 100,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_car_interfaces.TestCarInterfaces.test_car_interfaces": {
    "id": "selfdrive.car.tests.test_car_interfaces.TestCarInterfaces.test_car_interfaces",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_car_interfaces.py",
    "relative_path": "selfdrive\\car\\tests\\test_car_interfaces.py",
    "depends_on": [],
    "start_line": 36,
    "end_line": 100,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_cruise_speed.run_cruise_simulation": {
    "id": "selfdrive.car.tests.test_cruise_speed.run_cruise_simulation",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_cruise_speed.py",
    "relative_path": "selfdrive\\car\\tests\\test_cruise_speed.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_cruise_speed.TestCruiseSpeed": {
    "id": "selfdrive.car.tests.test_cruise_speed.TestCruiseSpeed",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_cruise_speed.py",
    "relative_path": "selfdrive\\car\\tests\\test_cruise_speed.py",
    "depends_on": [
      "selfdrive.car.tests.test_cruise_speed.run_cruise_simulation"
    ],
    "start_line": 38,
    "end_line": 44,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_cruise_speed.TestCruiseSpeed.test_cruise_speed": {
    "id": "selfdrive.car.tests.test_cruise_speed.TestCruiseSpeed.test_cruise_speed",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_cruise_speed.py",
    "relative_path": "selfdrive\\car\\tests\\test_cruise_speed.py",
    "depends_on": [
      "selfdrive.car.tests.test_cruise_speed.run_cruise_simulation"
    ],
    "start_line": 39,
    "end_line": 44,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_cruise_speed.TestVCruiseHelper": {
    "id": "selfdrive.car.tests.test_cruise_speed.TestVCruiseHelper",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_cruise_speed.py",
    "relative_path": "selfdrive\\car\\tests\\test_cruise_speed.py",
    "depends_on": [],
    "start_line": 49,
    "end_line": 151,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_cruise_speed.TestVCruiseHelper.setup_method": {
    "id": "selfdrive.car.tests.test_cruise_speed.TestVCruiseHelper.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_cruise_speed.py",
    "relative_path": "selfdrive\\car\\tests\\test_cruise_speed.py",
    "depends_on": [],
    "start_line": 50,
    "end_line": 53,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_cruise_speed.TestVCruiseHelper.reset_cruise_speed_state": {
    "id": "selfdrive.car.tests.test_cruise_speed.TestVCruiseHelper.reset_cruise_speed_state",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_cruise_speed.py",
    "relative_path": "selfdrive\\car\\tests\\test_cruise_speed.py",
    "depends_on": [],
    "start_line": 55,
    "end_line": 58,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_cruise_speed.TestVCruiseHelper.enable": {
    "id": "selfdrive.car.tests.test_cruise_speed.TestVCruiseHelper.enable",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_cruise_speed.py",
    "relative_path": "selfdrive\\car\\tests\\test_cruise_speed.py",
    "depends_on": [],
    "start_line": 60,
    "end_line": 62,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_cruise_speed.TestVCruiseHelper.test_adjust_speed": {
    "id": "selfdrive.car.tests.test_cruise_speed.TestVCruiseHelper.test_adjust_speed",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_cruise_speed.py",
    "relative_path": "selfdrive\\car\\tests\\test_cruise_speed.py",
    "depends_on": [],
    "start_line": 64,
    "end_line": 77,
    "has_docstring": true,
    "docstring": "\n    Asserts speed changes on falling edges of buttons.\n    ",
    "language": "python"
  },
  "selfdrive.car.tests.test_cruise_speed.TestVCruiseHelper.test_rising_edge_enable": {
    "id": "selfdrive.car.tests.test_cruise_speed.TestVCruiseHelper.test_rising_edge_enable",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_cruise_speed.py",
    "relative_path": "selfdrive\\car\\tests\\test_cruise_speed.py",
    "depends_on": [],
    "start_line": 79,
    "end_line": 96,
    "has_docstring": true,
    "docstring": "\n    Some car interfaces may enable on rising edge of a button,\n    ensure we don't adjust speed if enabled changes mid-press.\n    ",
    "language": "python"
  },
  "selfdrive.car.tests.test_cruise_speed.TestVCruiseHelper.test_resume_in_standstill": {
    "id": "selfdrive.car.tests.test_cruise_speed.TestVCruiseHelper.test_resume_in_standstill",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_cruise_speed.py",
    "relative_path": "selfdrive\\car\\tests\\test_cruise_speed.py",
    "depends_on": [],
    "start_line": 98,
    "end_line": 113,
    "has_docstring": true,
    "docstring": "\n    Asserts we don't increment set speed if user presses resume/accel to exit cruise standstill.\n    ",
    "language": "python"
  },
  "selfdrive.car.tests.test_cruise_speed.TestVCruiseHelper.test_set_gas_pressed": {
    "id": "selfdrive.car.tests.test_cruise_speed.TestVCruiseHelper.test_set_gas_pressed",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_cruise_speed.py",
    "relative_path": "selfdrive\\car\\tests\\test_cruise_speed.py",
    "depends_on": [],
    "start_line": 115,
    "end_line": 137,
    "has_docstring": true,
    "docstring": "\n    Asserts pressing set while enabled with gas pressed sets\n    the speed to the maximum of vEgo and current cruise speed.\n    ",
    "language": "python"
  },
  "selfdrive.car.tests.test_cruise_speed.TestVCruiseHelper.test_initialize_v_cruise": {
    "id": "selfdrive.car.tests.test_cruise_speed.TestVCruiseHelper.test_initialize_v_cruise",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_cruise_speed.py",
    "relative_path": "selfdrive\\car\\tests\\test_cruise_speed.py",
    "depends_on": [],
    "start_line": 139,
    "end_line": 151,
    "has_docstring": true,
    "docstring": "\n    Asserts allowed cruise speeds on enabling with SET.\n    ",
    "language": "python"
  },
  "selfdrive.car.tests.test_docs.TestCarDocs": {
    "id": "selfdrive.car.tests.test_docs.TestCarDocs",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_docs.py",
    "relative_path": "selfdrive\\car\\tests\\test_docs.py",
    "depends_on": [],
    "start_line": 10,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_docs.TestCarDocs.setup_class": {
    "id": "selfdrive.car.tests.test_docs.TestCarDocs.setup_class",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_docs.py",
    "relative_path": "selfdrive\\car\\tests\\test_docs.py",
    "depends_on": [],
    "start_line": 12,
    "end_line": 13,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_docs.TestCarDocs.test_generator": {
    "id": "selfdrive.car.tests.test_docs.TestCarDocs.test_generator",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_docs.py",
    "relative_path": "selfdrive\\car\\tests\\test_docs.py",
    "depends_on": [],
    "start_line": 15,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_docs.TestCarDocs.test_docs_diff": {
    "id": "selfdrive.car.tests.test_docs.TestCarDocs.test_docs_diff",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_docs.py",
    "relative_path": "selfdrive\\car\\tests\\test_docs.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_models.get_test_cases": {
    "id": "selfdrive.car.tests.test_models.get_test_cases",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_models.py",
    "relative_path": "selfdrive\\car\\tests\\test_models.py",
    "depends_on": [],
    "start_line": 40,
    "end_line": 60,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_models.TestCarModelBase": {
    "id": "selfdrive.car.tests.test_models.TestCarModelBase",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_models.py",
    "relative_path": "selfdrive\\car\\tests\\test_models.py",
    "depends_on": [],
    "start_line": 65,
    "end_line": 470,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_models.TestCarModelBase.get_testing_data_from_logreader": {
    "id": "selfdrive.car.tests.test_models.TestCarModelBase.get_testing_data_from_logreader",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_models.py",
    "relative_path": "selfdrive\\car\\tests\\test_models.py",
    "depends_on": [],
    "start_line": 75,
    "end_line": 116,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_models.TestCarModelBase.get_testing_data": {
    "id": "selfdrive.car.tests.test_models.TestCarModelBase.get_testing_data",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_models.py",
    "relative_path": "selfdrive\\car\\tests\\test_models.py",
    "depends_on": [],
    "start_line": 119,
    "end_line": 135,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_models.TestCarModelBase.setUpClass": {
    "id": "selfdrive.car.tests.test_models.TestCarModelBase.setUpClass",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_models.py",
    "relative_path": "selfdrive\\car\\tests\\test_models.py",
    "depends_on": [],
    "start_line": 139,
    "end_line": 159,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_models.TestCarModelBase.tearDownClass": {
    "id": "selfdrive.car.tests.test_models.TestCarModelBase.tearDownClass",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_models.py",
    "relative_path": "selfdrive\\car\\tests\\test_models.py",
    "depends_on": [],
    "start_line": 162,
    "end_line": 163,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_models.TestCarModelBase.setUp": {
    "id": "selfdrive.car.tests.test_models.TestCarModelBase.setUp",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_models.py",
    "relative_path": "selfdrive\\car\\tests\\test_models.py",
    "depends_on": [],
    "start_line": 165,
    "end_line": 175,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_models.TestCarModelBase.test_car_params": {
    "id": "selfdrive.car.tests.test_models.TestCarModelBase.test_car_params",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_models.py",
    "relative_path": "selfdrive\\car\\tests\\test_models.py",
    "depends_on": [],
    "start_line": 177,
    "end_line": 191,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_models.TestCarModelBase.test_car_interface": {
    "id": "selfdrive.car.tests.test_models.TestCarModelBase.test_car_interface",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_models.py",
    "relative_path": "selfdrive\\car\\tests\\test_models.py",
    "depends_on": [],
    "start_line": 193,
    "end_line": 210,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_models.TestCarModelBase.test_radar_interface": {
    "id": "selfdrive.car.tests.test_models.TestCarModelBase.test_radar_interface",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_models.py",
    "relative_path": "selfdrive\\car\\tests\\test_models.py",
    "depends_on": [],
    "start_line": 212,
    "end_line": 223,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_models.TestCarModelBase.test_panda_safety_rx_checks": {
    "id": "selfdrive.car.tests.test_models.TestCarModelBase.test_panda_safety_rx_checks",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_models.py",
    "relative_path": "selfdrive\\car\\tests\\test_models.py",
    "depends_on": [],
    "start_line": 225,
    "end_line": 263,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.car.tests.test_models.TestCarModelBase.test_panda_safety_tx_cases": {
    "id": "selfdrive.car.tests.test_models.TestCarModelBase.test_panda_safety_tx_cases",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_models.py",
    "relative_path": "selfdrive\\car\\tests\\test_models.py",
    "depends_on": [],
    "start_line": 265,
    "end_line": 302,
    "has_docstring": true,
    "docstring": "Asserts we can tx common messages",
    "language": "python"
  },
  "selfdrive.car.tests.test_models.TestCarModelBase.test_panda_safety_carstate_fuzzy": {
    "id": "selfdrive.car.tests.test_models.TestCarModelBase.test_panda_safety_carstate_fuzzy",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_models.py",
    "relative_path": "selfdrive\\car\\tests\\test_models.py",
    "depends_on": [],
    "start_line": 309,
    "end_line": 383,
    "has_docstring": true,
    "docstring": "\n      For each example, pick a random CAN message on the bus and fuzz its data,\n      checking for panda state mismatches.\n    ",
    "language": "python"
  },
  "selfdrive.car.tests.test_models.TestCarModelBase.test_panda_safety_carstate": {
    "id": "selfdrive.car.tests.test_models.TestCarModelBase.test_panda_safety_carstate",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_models.py",
    "relative_path": "selfdrive\\car\\tests\\test_models.py",
    "depends_on": [],
    "start_line": 385,
    "end_line": 470,
    "has_docstring": true,
    "docstring": "\n      Assert that panda safety matches openpilot's carState\n    ",
    "language": "python"
  },
  "selfdrive.car.tests.test_models.TestCarModel": {
    "id": "selfdrive.car.tests.test_models.TestCarModel",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\car\\tests\\test_models.py",
    "relative_path": "selfdrive\\car\\tests\\test_models.py",
    "depends_on": [
      "selfdrive.car.tests.test_models.get_test_cases",
      "selfdrive.car.tests.test_models.TestCarModelBase"
    ],
    "start_line": 475,
    "end_line": 476,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.controlsd.Controls": {
    "id": "selfdrive.controls.controlsd.Controls",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\controlsd.py",
    "relative_path": "selfdrive\\controls\\controlsd.py",
    "depends_on": [],
    "start_line": 29,
    "end_line": 219,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.controlsd.Controls.__init__": {
    "id": "selfdrive.controls.controlsd.Controls.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\controlsd.py",
    "relative_path": "selfdrive\\controls\\controlsd.py",
    "depends_on": [],
    "start_line": 30,
    "end_line": 58,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.controlsd.Controls.update": {
    "id": "selfdrive.controls.controlsd.Controls.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\controlsd.py",
    "relative_path": "selfdrive\\controls\\controlsd.py",
    "depends_on": [],
    "start_line": 60,
    "end_line": 66,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.controlsd.Controls.state_control": {
    "id": "selfdrive.controls.controlsd.Controls.state_control",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\controlsd.py",
    "relative_path": "selfdrive\\controls\\controlsd.py",
    "depends_on": [],
    "start_line": 68,
    "end_line": 137,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.controlsd.Controls.publish": {
    "id": "selfdrive.controls.controlsd.Controls.publish",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\controlsd.py",
    "relative_path": "selfdrive\\controls\\controlsd.py",
    "depends_on": [],
    "start_line": 139,
    "end_line": 211,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.controlsd.Controls.run": {
    "id": "selfdrive.controls.controlsd.Controls.run",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\controlsd.py",
    "relative_path": "selfdrive\\controls\\controlsd.py",
    "depends_on": [],
    "start_line": 213,
    "end_line": 219,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.controlsd.main": {
    "id": "selfdrive.controls.controlsd.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\controlsd.py",
    "relative_path": "selfdrive\\controls\\controlsd.py",
    "depends_on": [
      "selfdrive.controls.controlsd.Controls"
    ],
    "start_line": 222,
    "end_line": 225,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.plannerd.main": {
    "id": "selfdrive.controls.plannerd.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\plannerd.py",
    "relative_path": "selfdrive\\controls\\plannerd.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 36,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.radard.KalmanParams": {
    "id": "selfdrive.controls.radard.KalmanParams",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\radard.py",
    "relative_path": "selfdrive\\controls\\radard.py",
    "depends_on": [],
    "start_line": 29,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.radard.KalmanParams.__init__": {
    "id": "selfdrive.controls.radard.KalmanParams.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\radard.py",
    "relative_path": "selfdrive\\controls\\radard.py",
    "depends_on": [],
    "start_line": 30,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.radard.Track": {
    "id": "selfdrive.controls.radard.Track",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\radard.py",
    "relative_path": "selfdrive\\controls\\radard.py",
    "depends_on": [
      "selfdrive.controls.radard.KalmanParams"
    ],
    "start_line": 51,
    "end_line": 110,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.radard.Track.__init__": {
    "id": "selfdrive.controls.radard.Track.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\radard.py",
    "relative_path": "selfdrive\\controls\\radard.py",
    "depends_on": [
      "selfdrive.controls.radard.KalmanParams"
    ],
    "start_line": 52,
    "end_line": 59,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.radard.Track.update": {
    "id": "selfdrive.controls.radard.Track.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\radard.py",
    "relative_path": "selfdrive\\controls\\radard.py",
    "depends_on": [],
    "start_line": 61,
    "end_line": 82,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.radard.Track.get_RadarState": {
    "id": "selfdrive.controls.radard.Track.get_RadarState",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\radard.py",
    "relative_path": "selfdrive\\controls\\radard.py",
    "depends_on": [],
    "start_line": 84,
    "end_line": 98,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.radard.Track.potential_low_speed_lead": {
    "id": "selfdrive.controls.radard.Track.potential_low_speed_lead",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\radard.py",
    "relative_path": "selfdrive\\controls\\radard.py",
    "depends_on": [],
    "start_line": 100,
    "end_line": 103,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.radard.Track.is_potential_fcw": {
    "id": "selfdrive.controls.radard.Track.is_potential_fcw",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\radard.py",
    "relative_path": "selfdrive\\controls\\radard.py",
    "depends_on": [],
    "start_line": 105,
    "end_line": 106,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.radard.Track.__str__": {
    "id": "selfdrive.controls.radard.Track.__str__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\radard.py",
    "relative_path": "selfdrive\\controls\\radard.py",
    "depends_on": [],
    "start_line": 108,
    "end_line": 110,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.radard.laplacian_pdf": {
    "id": "selfdrive.controls.radard.laplacian_pdf",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\radard.py",
    "relative_path": "selfdrive\\controls\\radard.py",
    "depends_on": [],
    "start_line": 113,
    "end_line": 115,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.radard.match_vision_to_track": {
    "id": "selfdrive.controls.radard.match_vision_to_track",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\radard.py",
    "relative_path": "selfdrive\\controls\\radard.py",
    "depends_on": [
      "selfdrive.controls.radard.laplacian_pdf",
      "selfdrive.controls.radard.Track"
    ],
    "start_line": 118,
    "end_line": 138,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.radard.get_RadarState_from_vision": {
    "id": "selfdrive.controls.radard.get_RadarState_from_vision",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\radard.py",
    "relative_path": "selfdrive\\controls\\radard.py",
    "depends_on": [],
    "start_line": 141,
    "end_line": 156,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.radard.get_lead": {
    "id": "selfdrive.controls.radard.get_lead",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\radard.py",
    "relative_path": "selfdrive\\controls\\radard.py",
    "depends_on": [
      "selfdrive.controls.radard.get_RadarState_from_vision",
      "selfdrive.controls.radard.match_vision_to_track",
      "selfdrive.controls.radard.Track"
    ],
    "start_line": 159,
    "end_line": 182,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.radard.RadarD": {
    "id": "selfdrive.controls.radard.RadarD",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\radard.py",
    "relative_path": "selfdrive\\controls\\radard.py",
    "depends_on": [
      "selfdrive.controls.radard.get_lead",
      "selfdrive.controls.radard.KalmanParams",
      "selfdrive.controls.radard.Track"
    ],
    "start_line": 185,
    "end_line": 251,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.radard.RadarD.__init__": {
    "id": "selfdrive.controls.radard.RadarD.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\radard.py",
    "relative_path": "selfdrive\\controls\\radard.py",
    "depends_on": [
      "selfdrive.controls.radard.KalmanParams",
      "selfdrive.controls.radard.Track"
    ],
    "start_line": 186,
    "end_line": 199,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.radard.RadarD.update": {
    "id": "selfdrive.controls.radard.RadarD.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\radard.py",
    "relative_path": "selfdrive\\controls\\radard.py",
    "depends_on": [
      "selfdrive.controls.radard.get_lead",
      "selfdrive.controls.radard.Track"
    ],
    "start_line": 201,
    "end_line": 243,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.radard.RadarD.publish": {
    "id": "selfdrive.controls.radard.RadarD.publish",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\radard.py",
    "relative_path": "selfdrive\\controls\\radard.py",
    "depends_on": [],
    "start_line": 245,
    "end_line": 251,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.radard.main": {
    "id": "selfdrive.controls.radard.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\radard.py",
    "relative_path": "selfdrive\\controls\\radard.py",
    "depends_on": [
      "selfdrive.controls.radard.RadarD"
    ],
    "start_line": 255,
    "end_line": 273,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.desire_helper.DesireHelper": {
    "id": "selfdrive.controls.lib.desire_helper.DesireHelper",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\desire_helper.py",
    "relative_path": "selfdrive\\controls\\lib\\desire_helper.py",
    "depends_on": [],
    "start_line": 33,
    "end_line": 114,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.desire_helper.DesireHelper.__init__": {
    "id": "selfdrive.controls.lib.desire_helper.DesireHelper.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\desire_helper.py",
    "relative_path": "selfdrive\\controls\\lib\\desire_helper.py",
    "depends_on": [],
    "start_line": 34,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.desire_helper.DesireHelper.update": {
    "id": "selfdrive.controls.lib.desire_helper.DesireHelper.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\desire_helper.py",
    "relative_path": "selfdrive\\controls\\lib\\desire_helper.py",
    "depends_on": [],
    "start_line": 43,
    "end_line": 114,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.drive_helpers.clamp": {
    "id": "selfdrive.controls.lib.drive_helpers.clamp",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\drive_helpers.py",
    "relative_path": "selfdrive\\controls\\lib\\drive_helpers.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 20,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.drive_helpers.smooth_value": {
    "id": "selfdrive.controls.lib.drive_helpers.smooth_value",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\drive_helpers.py",
    "relative_path": "selfdrive\\controls\\lib\\drive_helpers.py",
    "depends_on": [],
    "start_line": 22,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.drive_helpers.clip_curvature": {
    "id": "selfdrive.controls.lib.drive_helpers.clip_curvature",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\drive_helpers.py",
    "relative_path": "selfdrive\\controls\\lib\\drive_helpers.py",
    "depends_on": [
      "selfdrive.controls.lib.drive_helpers.clamp"
    ],
    "start_line": 26,
    "end_line": 40,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.drive_helpers.get_speed_error": {
    "id": "selfdrive.controls.lib.drive_helpers.get_speed_error",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\drive_helpers.py",
    "relative_path": "selfdrive\\controls\\lib\\drive_helpers.py",
    "depends_on": [],
    "start_line": 43,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.drive_helpers.get_accel_from_plan": {
    "id": "selfdrive.controls.lib.drive_helpers.get_accel_from_plan",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\drive_helpers.py",
    "relative_path": "selfdrive\\controls\\lib\\drive_helpers.py",
    "depends_on": [],
    "start_line": 51,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.drive_helpers.curv_from_psis": {
    "id": "selfdrive.controls.lib.drive_helpers.curv_from_psis",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\drive_helpers.py",
    "relative_path": "selfdrive\\controls\\lib\\drive_helpers.py",
    "depends_on": [],
    "start_line": 66,
    "end_line": 69,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.drive_helpers.get_curvature_from_plan": {
    "id": "selfdrive.controls.lib.drive_helpers.get_curvature_from_plan",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\drive_helpers.py",
    "relative_path": "selfdrive\\controls\\lib\\drive_helpers.py",
    "depends_on": [
      "selfdrive.controls.lib.drive_helpers.curv_from_psis"
    ],
    "start_line": 71,
    "end_line": 74,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.latcontrol.LatControl": {
    "id": "selfdrive.controls.lib.latcontrol.LatControl",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\latcontrol.py",
    "relative_path": "selfdrive\\controls\\lib\\latcontrol.py",
    "depends_on": [],
    "start_line": 7,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.latcontrol.LatControl.__init__": {
    "id": "selfdrive.controls.lib.latcontrol.LatControl.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\latcontrol.py",
    "relative_path": "selfdrive\\controls\\lib\\latcontrol.py",
    "depends_on": [],
    "start_line": 8,
    "end_line": 15,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.latcontrol.LatControl.update": {
    "id": "selfdrive.controls.lib.latcontrol.LatControl.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\latcontrol.py",
    "relative_path": "selfdrive\\controls\\lib\\latcontrol.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.latcontrol.LatControl.reset": {
    "id": "selfdrive.controls.lib.latcontrol.LatControl.reset",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\latcontrol.py",
    "relative_path": "selfdrive\\controls\\lib\\latcontrol.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.latcontrol.LatControl._check_saturation": {
    "id": "selfdrive.controls.lib.latcontrol.LatControl._check_saturation",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\latcontrol.py",
    "relative_path": "selfdrive\\controls\\lib\\latcontrol.py",
    "depends_on": [],
    "start_line": 24,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.latcontrol_angle.LatControlAngle": {
    "id": "selfdrive.controls.lib.latcontrol_angle.LatControlAngle",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\latcontrol_angle.py",
    "relative_path": "selfdrive\\controls\\lib\\latcontrol_angle.py",
    "depends_on": [],
    "start_line": 9,
    "end_line": 36,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.latcontrol_angle.LatControlAngle.__init__": {
    "id": "selfdrive.controls.lib.latcontrol_angle.LatControlAngle.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\latcontrol_angle.py",
    "relative_path": "selfdrive\\controls\\lib\\latcontrol_angle.py",
    "depends_on": [],
    "start_line": 10,
    "end_line": 13,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.latcontrol_angle.LatControlAngle.update": {
    "id": "selfdrive.controls.lib.latcontrol_angle.LatControlAngle.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\latcontrol_angle.py",
    "relative_path": "selfdrive\\controls\\lib\\latcontrol_angle.py",
    "depends_on": [],
    "start_line": 15,
    "end_line": 36,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.latcontrol_pid.LatControlPID": {
    "id": "selfdrive.controls.lib.latcontrol_pid.LatControlPID",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\latcontrol_pid.py",
    "relative_path": "selfdrive\\controls\\lib\\latcontrol_pid.py",
    "depends_on": [],
    "start_line": 8,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.latcontrol_pid.LatControlPID.__init__": {
    "id": "selfdrive.controls.lib.latcontrol_pid.LatControlPID.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\latcontrol_pid.py",
    "relative_path": "selfdrive\\controls\\lib\\latcontrol_pid.py",
    "depends_on": [],
    "start_line": 9,
    "end_line": 14,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.latcontrol_pid.LatControlPID.reset": {
    "id": "selfdrive.controls.lib.latcontrol_pid.LatControlPID.reset",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\latcontrol_pid.py",
    "relative_path": "selfdrive\\controls\\lib\\latcontrol_pid.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.latcontrol_pid.LatControlPID.update": {
    "id": "selfdrive.controls.lib.latcontrol_pid.LatControlPID.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\latcontrol_pid.py",
    "relative_path": "selfdrive\\controls\\lib\\latcontrol_pid.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.latcontrol_torque.LatControlTorque": {
    "id": "selfdrive.controls.lib.latcontrol_torque.LatControlTorque",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\latcontrol_torque.py",
    "relative_path": "selfdrive\\controls\\lib\\latcontrol_torque.py",
    "depends_on": [],
    "start_line": 25,
    "end_line": 93,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.latcontrol_torque.LatControlTorque.__init__": {
    "id": "selfdrive.controls.lib.latcontrol_torque.LatControlTorque.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\latcontrol_torque.py",
    "relative_path": "selfdrive\\controls\\lib\\latcontrol_torque.py",
    "depends_on": [],
    "start_line": 26,
    "end_line": 33,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.latcontrol_torque.LatControlTorque.update_live_torque_params": {
    "id": "selfdrive.controls.lib.latcontrol_torque.LatControlTorque.update_live_torque_params",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\latcontrol_torque.py",
    "relative_path": "selfdrive\\controls\\lib\\latcontrol_torque.py",
    "depends_on": [],
    "start_line": 35,
    "end_line": 38,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.latcontrol_torque.LatControlTorque.update": {
    "id": "selfdrive.controls.lib.latcontrol_torque.LatControlTorque.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\latcontrol_torque.py",
    "relative_path": "selfdrive\\controls\\lib\\latcontrol_torque.py",
    "depends_on": [],
    "start_line": 40,
    "end_line": 93,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.ldw.LaneDepartureWarning": {
    "id": "selfdrive.controls.lib.ldw.LaneDepartureWarning",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\ldw.py",
    "relative_path": "selfdrive\\controls\\lib\\ldw.py",
    "depends_on": [],
    "start_line": 10,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.ldw.LaneDepartureWarning.__init__": {
    "id": "selfdrive.controls.lib.ldw.LaneDepartureWarning.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\ldw.py",
    "relative_path": "selfdrive\\controls\\lib\\ldw.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 14,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.ldw.LaneDepartureWarning.update": {
    "id": "selfdrive.controls.lib.ldw.LaneDepartureWarning.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\ldw.py",
    "relative_path": "selfdrive\\controls\\lib\\ldw.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.ldw.LaneDepartureWarning.warning": {
    "id": "selfdrive.controls.lib.ldw.LaneDepartureWarning.warning",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\ldw.py",
    "relative_path": "selfdrive\\controls\\lib\\ldw.py",
    "depends_on": [],
    "start_line": 40,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longcontrol.long_control_state_trans": {
    "id": "selfdrive.controls.lib.longcontrol.long_control_state_trans",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longcontrol.py",
    "relative_path": "selfdrive\\controls\\lib\\longcontrol.py",
    "depends_on": [],
    "start_line": 13,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longcontrol.LongControl": {
    "id": "selfdrive.controls.lib.longcontrol.LongControl",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longcontrol.py",
    "relative_path": "selfdrive\\controls\\lib\\longcontrol.py",
    "depends_on": [
      "selfdrive.controls.lib.longcontrol.long_control_state_trans"
    ],
    "start_line": 47,
    "end_line": 88,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longcontrol.LongControl.__init__": {
    "id": "selfdrive.controls.lib.longcontrol.LongControl.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longcontrol.py",
    "relative_path": "selfdrive\\controls\\lib\\longcontrol.py",
    "depends_on": [],
    "start_line": 48,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longcontrol.LongControl.reset": {
    "id": "selfdrive.controls.lib.longcontrol.LongControl.reset",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longcontrol.py",
    "relative_path": "selfdrive\\controls\\lib\\longcontrol.py",
    "depends_on": [],
    "start_line": 56,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longcontrol.LongControl.update": {
    "id": "selfdrive.controls.lib.longcontrol.LongControl.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longcontrol.py",
    "relative_path": "selfdrive\\controls\\lib\\longcontrol.py",
    "depends_on": [
      "selfdrive.controls.lib.longcontrol.long_control_state_trans"
    ],
    "start_line": 59,
    "end_line": 88,
    "has_docstring": true,
    "docstring": "Update longitudinal control. This updates the state machine and runs a PID loop",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_planner.get_max_accel": {
    "id": "selfdrive.controls.lib.longitudinal_planner.get_max_accel",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_planner.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_planner.py",
    "depends_on": [],
    "start_line": 30,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_planner.get_coast_accel": {
    "id": "selfdrive.controls.lib.longitudinal_planner.get_coast_accel",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_planner.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_planner.py",
    "depends_on": [],
    "start_line": 33,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_planner.limit_accel_in_turns": {
    "id": "selfdrive.controls.lib.longitudinal_planner.limit_accel_in_turns",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_planner.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_planner.py",
    "depends_on": [],
    "start_line": 37,
    "end_line": 48,
    "has_docstring": true,
    "docstring": "\n  This function returns a limited long acceleration allowed, depending on the existing lateral acceleration\n  this should avoid accelerating when losing the target in turns\n  ",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_planner.LongitudinalPlanner": {
    "id": "selfdrive.controls.lib.longitudinal_planner.LongitudinalPlanner",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_planner.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_planner.py",
    "depends_on": [
      "selfdrive.controls.lib.longitudinal_planner.get_max_accel",
      "selfdrive.controls.lib.longitudinal_planner.get_coast_accel",
      "selfdrive.controls.lib.longitudinal_planner.limit_accel_in_turns"
    ],
    "start_line": 51,
    "end_line": 194,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_planner.LongitudinalPlanner.__init__": {
    "id": "selfdrive.controls.lib.longitudinal_planner.LongitudinalPlanner.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_planner.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_planner.py",
    "depends_on": [],
    "start_line": 52,
    "end_line": 70,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_planner.LongitudinalPlanner.parse_model": {
    "id": "selfdrive.controls.lib.longitudinal_planner.LongitudinalPlanner.parse_model",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_planner.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_planner.py",
    "depends_on": [],
    "start_line": 73,
    "end_line": 90,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_planner.LongitudinalPlanner.update": {
    "id": "selfdrive.controls.lib.longitudinal_planner.LongitudinalPlanner.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_planner.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_planner.py",
    "depends_on": [
      "selfdrive.controls.lib.longitudinal_planner.get_max_accel",
      "selfdrive.controls.lib.longitudinal_planner.get_coast_accel",
      "selfdrive.controls.lib.longitudinal_planner.limit_accel_in_turns"
    ],
    "start_line": 92,
    "end_line": 169,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_planner.LongitudinalPlanner.publish": {
    "id": "selfdrive.controls.lib.longitudinal_planner.LongitudinalPlanner.publish",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_planner.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_planner.py",
    "depends_on": [],
    "start_line": 171,
    "end_line": 194,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.lateral_mpc_lib.lat_mpc.gen_lat_model": {
    "id": "selfdrive.controls.lib.lateral_mpc_lib.lat_mpc.gen_lat_model",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\lateral_mpc_lib\\lat_mpc.py",
    "relative_path": "selfdrive\\controls\\lib\\lateral_mpc_lib\\lat_mpc.py",
    "depends_on": [],
    "start_line": 27,
    "end_line": 62,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.lateral_mpc_lib.lat_mpc.gen_lat_ocp": {
    "id": "selfdrive.controls.lib.lateral_mpc_lib.lat_mpc.gen_lat_ocp",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\lateral_mpc_lib\\lat_mpc.py",
    "relative_path": "selfdrive\\controls\\lib\\lateral_mpc_lib\\lat_mpc.py",
    "depends_on": [
      "selfdrive.controls.lib.lateral_mpc_lib.lat_mpc.gen_lat_model"
    ],
    "start_line": 65,
    "end_line": 128,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.lateral_mpc_lib.lat_mpc.LateralMpc": {
    "id": "selfdrive.controls.lib.lateral_mpc_lib.lat_mpc.LateralMpc",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\lateral_mpc_lib\\lat_mpc.py",
    "relative_path": "selfdrive\\controls\\lib\\lateral_mpc_lib\\lat_mpc.py",
    "depends_on": [],
    "start_line": 131,
    "end_line": 193,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.lateral_mpc_lib.lat_mpc.LateralMpc.__init__": {
    "id": "selfdrive.controls.lib.lateral_mpc_lib.lat_mpc.LateralMpc.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\lateral_mpc_lib\\lat_mpc.py",
    "relative_path": "selfdrive\\controls\\lib\\lateral_mpc_lib\\lat_mpc.py",
    "depends_on": [],
    "start_line": 132,
    "end_line": 136,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.lateral_mpc_lib.lat_mpc.LateralMpc.reset": {
    "id": "selfdrive.controls.lib.lateral_mpc_lib.lat_mpc.LateralMpc.reset",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\lateral_mpc_lib\\lat_mpc.py",
    "relative_path": "selfdrive\\controls\\lib\\lateral_mpc_lib\\lat_mpc.py",
    "depends_on": [],
    "start_line": 138,
    "end_line": 157,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.lateral_mpc_lib.lat_mpc.LateralMpc.set_weights": {
    "id": "selfdrive.controls.lib.lateral_mpc_lib.lat_mpc.LateralMpc.set_weights",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\lateral_mpc_lib\\lat_mpc.py",
    "relative_path": "selfdrive\\controls\\lib\\lateral_mpc_lib\\lat_mpc.py",
    "depends_on": [],
    "start_line": 159,
    "end_line": 167,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.lateral_mpc_lib.lat_mpc.LateralMpc.run": {
    "id": "selfdrive.controls.lib.lateral_mpc_lib.lat_mpc.LateralMpc.run",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\lateral_mpc_lib\\lat_mpc.py",
    "relative_path": "selfdrive\\controls\\lib\\lateral_mpc_lib\\lat_mpc.py",
    "depends_on": [],
    "start_line": 169,
    "end_line": 193,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.get_jerk_factor": {
    "id": "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.get_jerk_factor",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "depends_on": [],
    "start_line": 61,
    "end_line": 69,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.get_T_FOLLOW": {
    "id": "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.get_T_FOLLOW",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "depends_on": [],
    "start_line": 72,
    "end_line": 80,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.get_stopped_equivalence_factor": {
    "id": "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.get_stopped_equivalence_factor",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "depends_on": [],
    "start_line": 82,
    "end_line": 83,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.get_safe_obstacle_distance": {
    "id": "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.get_safe_obstacle_distance",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "depends_on": [],
    "start_line": 85,
    "end_line": 86,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.desired_follow_distance": {
    "id": "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.desired_follow_distance",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "depends_on": [
      "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.get_safe_obstacle_distance",
      "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.get_T_FOLLOW",
      "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.get_stopped_equivalence_factor"
    ],
    "start_line": 88,
    "end_line": 91,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.gen_long_model": {
    "id": "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.gen_long_model",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "depends_on": [],
    "start_line": 94,
    "end_line": 127,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.gen_long_ocp": {
    "id": "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.gen_long_ocp",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "depends_on": [
      "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.gen_long_model",
      "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.get_T_FOLLOW",
      "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.get_safe_obstacle_distance"
    ],
    "start_line": 130,
    "end_line": 221,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.LongitudinalMpc": {
    "id": "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.LongitudinalMpc",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "depends_on": [
      "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.get_stopped_equivalence_factor",
      "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.get_jerk_factor",
      "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.get_safe_obstacle_distance",
      "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.get_T_FOLLOW"
    ],
    "start_line": 224,
    "end_line": 448,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.LongitudinalMpc.__init__": {
    "id": "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.LongitudinalMpc.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "depends_on": [],
    "start_line": 225,
    "end_line": 230,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.LongitudinalMpc.reset": {
    "id": "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.LongitudinalMpc.reset",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "depends_on": [],
    "start_line": 232,
    "end_line": 259,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.LongitudinalMpc.set_cost_weights": {
    "id": "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.LongitudinalMpc.set_cost_weights",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "depends_on": [],
    "start_line": 261,
    "end_line": 275,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.LongitudinalMpc.set_weights": {
    "id": "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.LongitudinalMpc.set_weights",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "depends_on": [
      "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.get_jerk_factor"
    ],
    "start_line": 277,
    "end_line": 289,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.LongitudinalMpc.set_cur_state": {
    "id": "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.LongitudinalMpc.set_cur_state",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "depends_on": [],
    "start_line": 291,
    "end_line": 297,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.LongitudinalMpc.extrapolate_lead": {
    "id": "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.LongitudinalMpc.extrapolate_lead",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "depends_on": [],
    "start_line": 300,
    "end_line": 305,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.LongitudinalMpc.process_lead": {
    "id": "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.LongitudinalMpc.process_lead",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "depends_on": [],
    "start_line": 307,
    "end_line": 328,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.LongitudinalMpc.update": {
    "id": "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.LongitudinalMpc.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "depends_on": [
      "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.get_safe_obstacle_distance",
      "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.get_T_FOLLOW",
      "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.get_stopped_equivalence_factor"
    ],
    "start_line": 330,
    "end_line": 409,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.LongitudinalMpc.run": {
    "id": "selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc.LongitudinalMpc.run",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "relative_path": "selfdrive\\controls\\lib\\longitudinal_mpc_lib\\long_mpc.py",
    "depends_on": [],
    "start_line": 411,
    "end_line": 448,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.tests.test_latcontrol.TestLatControl": {
    "id": "selfdrive.controls.lib.tests.test_latcontrol.TestLatControl",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\tests\\test_latcontrol.py",
    "relative_path": "selfdrive\\controls\\lib\\tests\\test_latcontrol.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.lib.tests.test_latcontrol.TestLatControl.test_saturation": {
    "id": "selfdrive.controls.lib.tests.test_latcontrol.TestLatControl.test_saturation",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\lib\\tests\\test_latcontrol.py",
    "relative_path": "selfdrive\\controls\\lib\\tests\\test_latcontrol.py",
    "depends_on": [],
    "start_line": 19,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.tests.test_following_distance.run_following_distance_simulation": {
    "id": "selfdrive.controls.tests.test_following_distance.run_following_distance_simulation",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\tests\\test_following_distance.py",
    "relative_path": "selfdrive\\controls\\tests\\test_following_distance.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.tests.test_following_distance.TestFollowingDistance": {
    "id": "selfdrive.controls.tests.test_following_distance.TestFollowingDistance",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\tests\\test_following_distance.py",
    "relative_path": "selfdrive\\controls\\tests\\test_following_distance.py",
    "depends_on": [
      "selfdrive.controls.tests.test_following_distance.run_following_distance_simulation"
    ],
    "start_line": 34,
    "end_line": 40,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.tests.test_following_distance.TestFollowingDistance.test_following_distance": {
    "id": "selfdrive.controls.tests.test_following_distance.TestFollowingDistance.test_following_distance",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\tests\\test_following_distance.py",
    "relative_path": "selfdrive\\controls\\tests\\test_following_distance.py",
    "depends_on": [
      "selfdrive.controls.tests.test_following_distance.run_following_distance_simulation"
    ],
    "start_line": 35,
    "end_line": 40,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.tests.test_lateral_mpc.run_mpc": {
    "id": "selfdrive.controls.tests.test_lateral_mpc.run_mpc",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\tests\\test_lateral_mpc.py",
    "relative_path": "selfdrive\\controls\\tests\\test_lateral_mpc.py",
    "depends_on": [],
    "start_line": 8,
    "end_line": 27,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.tests.test_lateral_mpc.TestLateralMpc": {
    "id": "selfdrive.controls.tests.test_lateral_mpc.TestLateralMpc",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\tests\\test_lateral_mpc.py",
    "relative_path": "selfdrive\\controls\\tests\\test_lateral_mpc.py",
    "depends_on": [
      "selfdrive.controls.tests.test_lateral_mpc.run_mpc"
    ],
    "start_line": 30,
    "end_line": 85,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.tests.test_lateral_mpc.TestLateralMpc._assert_null": {
    "id": "selfdrive.controls.tests.test_lateral_mpc.TestLateralMpc._assert_null",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\tests\\test_lateral_mpc.py",
    "relative_path": "selfdrive\\controls\\tests\\test_lateral_mpc.py",
    "depends_on": [],
    "start_line": 32,
    "end_line": 36,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.tests.test_lateral_mpc.TestLateralMpc._assert_simmetry": {
    "id": "selfdrive.controls.tests.test_lateral_mpc.TestLateralMpc._assert_simmetry",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\tests\\test_lateral_mpc.py",
    "relative_path": "selfdrive\\controls\\tests\\test_lateral_mpc.py",
    "depends_on": [],
    "start_line": 38,
    "end_line": 43,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.tests.test_lateral_mpc.TestLateralMpc.test_straight": {
    "id": "selfdrive.controls.tests.test_lateral_mpc.TestLateralMpc.test_straight",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\tests\\test_lateral_mpc.py",
    "relative_path": "selfdrive\\controls\\tests\\test_lateral_mpc.py",
    "depends_on": [
      "selfdrive.controls.tests.test_lateral_mpc.run_mpc"
    ],
    "start_line": 45,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.tests.test_lateral_mpc.TestLateralMpc.test_y_symmetry": {
    "id": "selfdrive.controls.tests.test_lateral_mpc.TestLateralMpc.test_y_symmetry",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\tests\\test_lateral_mpc.py",
    "relative_path": "selfdrive\\controls\\tests\\test_lateral_mpc.py",
    "depends_on": [
      "selfdrive.controls.tests.test_lateral_mpc.run_mpc"
    ],
    "start_line": 49,
    "end_line": 53,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.tests.test_lateral_mpc.TestLateralMpc.test_poly_symmetry": {
    "id": "selfdrive.controls.tests.test_lateral_mpc.TestLateralMpc.test_poly_symmetry",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\tests\\test_lateral_mpc.py",
    "relative_path": "selfdrive\\controls\\tests\\test_lateral_mpc.py",
    "depends_on": [
      "selfdrive.controls.tests.test_lateral_mpc.run_mpc"
    ],
    "start_line": 55,
    "end_line": 59,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.tests.test_lateral_mpc.TestLateralMpc.test_curvature_symmetry": {
    "id": "selfdrive.controls.tests.test_lateral_mpc.TestLateralMpc.test_curvature_symmetry",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\tests\\test_lateral_mpc.py",
    "relative_path": "selfdrive\\controls\\tests\\test_lateral_mpc.py",
    "depends_on": [
      "selfdrive.controls.tests.test_lateral_mpc.run_mpc"
    ],
    "start_line": 61,
    "end_line": 65,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.tests.test_lateral_mpc.TestLateralMpc.test_psi_symmetry": {
    "id": "selfdrive.controls.tests.test_lateral_mpc.TestLateralMpc.test_psi_symmetry",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\tests\\test_lateral_mpc.py",
    "relative_path": "selfdrive\\controls\\tests\\test_lateral_mpc.py",
    "depends_on": [
      "selfdrive.controls.tests.test_lateral_mpc.run_mpc"
    ],
    "start_line": 67,
    "end_line": 71,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.tests.test_lateral_mpc.TestLateralMpc.test_no_overshoot": {
    "id": "selfdrive.controls.tests.test_lateral_mpc.TestLateralMpc.test_no_overshoot",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\tests\\test_lateral_mpc.py",
    "relative_path": "selfdrive\\controls\\tests\\test_lateral_mpc.py",
    "depends_on": [
      "selfdrive.controls.tests.test_lateral_mpc.run_mpc"
    ],
    "start_line": 73,
    "end_line": 77,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.tests.test_lateral_mpc.TestLateralMpc.test_switch_convergence": {
    "id": "selfdrive.controls.tests.test_lateral_mpc.TestLateralMpc.test_switch_convergence",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\tests\\test_lateral_mpc.py",
    "relative_path": "selfdrive\\controls\\tests\\test_lateral_mpc.py",
    "depends_on": [
      "selfdrive.controls.tests.test_lateral_mpc.run_mpc"
    ],
    "start_line": 79,
    "end_line": 85,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.tests.test_leads.TestLeads": {
    "id": "selfdrive.controls.tests.test_leads.TestLeads",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\tests\\test_leads.py",
    "relative_path": "selfdrive\\controls\\tests\\test_leads.py",
    "depends_on": [],
    "start_line": 7,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.tests.test_leads.TestLeads.test_radar_fault": {
    "id": "selfdrive.controls.tests.test_leads.TestLeads.test_radar_fault",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\tests\\test_leads.py",
    "relative_path": "selfdrive\\controls\\tests\\test_leads.py",
    "depends_on": [],
    "start_line": 8,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.tests.test_longcontrol.TestLongControlStateTransition": {
    "id": "selfdrive.controls.tests.test_longcontrol.TestLongControlStateTransition",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\tests\\test_longcontrol.py",
    "relative_path": "selfdrive\\controls\\tests\\test_longcontrol.py",
    "depends_on": [],
    "start_line": 7,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.tests.test_longcontrol.TestLongControlStateTransition.test_stay_stopped": {
    "id": "selfdrive.controls.tests.test_longcontrol.TestLongControlStateTransition.test_stay_stopped",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\tests\\test_longcontrol.py",
    "relative_path": "selfdrive\\controls\\tests\\test_longcontrol.py",
    "depends_on": [],
    "start_line": 9,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.tests.test_longcontrol.test_engage": {
    "id": "selfdrive.controls.tests.test_longcontrol.test_engage",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\tests\\test_longcontrol.py",
    "relative_path": "selfdrive\\controls\\tests\\test_longcontrol.py",
    "depends_on": [],
    "start_line": 30,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.controls.tests.test_longcontrol.test_starting": {
    "id": "selfdrive.controls.tests.test_longcontrol.test_starting",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\controls\\tests\\test_longcontrol.py",
    "relative_path": "selfdrive\\controls\\tests\\test_longcontrol.py",
    "depends_on": [],
    "start_line": 47,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.can_printer.can_printer": {
    "id": "selfdrive.debug.can_printer.can_printer",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\can_printer.py",
    "relative_path": "selfdrive\\debug\\can_printer.py",
    "depends_on": [],
    "start_line": 10,
    "end_line": 33,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.can_print_changes.update": {
    "id": "selfdrive.debug.can_print_changes.update",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\can_print_changes.py",
    "relative_path": "selfdrive\\debug\\can_print_changes.py",
    "depends_on": [],
    "start_line": 14,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.can_print_changes.can_printer": {
    "id": "selfdrive.debug.can_print_changes.can_printer",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\can_print_changes.py",
    "relative_path": "selfdrive\\debug\\can_print_changes.py",
    "depends_on": [
      "selfdrive.debug.can_print_changes.update"
    ],
    "start_line": 40,
    "end_line": 83,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.can_table.can_table": {
    "id": "selfdrive.debug.can_table.can_table",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\can_table.py",
    "relative_path": "selfdrive\\debug\\can_table.py",
    "depends_on": [],
    "start_line": 8,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.check_can_parser_performance.CarModelTestCase": {
    "id": "selfdrive.debug.check_can_parser_performance.CarModelTestCase",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\check_can_parser_performance.py",
    "relative_path": "selfdrive\\debug\\check_can_parser_performance.py",
    "depends_on": [],
    "start_line": 14,
    "end_line": 15,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.cpu_usage_stat.get_arg_parser": {
    "id": "selfdrive.debug.cpu_usage_stat.get_arg_parser",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\cpu_usage_stat.py",
    "relative_path": "selfdrive\\debug\\cpu_usage_stat.py",
    "depends_on": [],
    "start_line": 43,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.cycle_alerts.randperc": {
    "id": "selfdrive.debug.cycle_alerts.randperc",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\cycle_alerts.py",
    "relative_path": "selfdrive\\debug\\cycle_alerts.py",
    "depends_on": [],
    "start_line": 15,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.cycle_alerts.cycle_alerts": {
    "id": "selfdrive.debug.cycle_alerts.cycle_alerts",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\cycle_alerts.py",
    "relative_path": "selfdrive\\debug\\cycle_alerts.py",
    "depends_on": [
      "selfdrive.debug.cycle_alerts.randperc"
    ],
    "start_line": 18,
    "end_line": 126,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.debug_fw_fingerprinting_offline.main": {
    "id": "selfdrive.debug.debug_fw_fingerprinting_offline.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\debug_fw_fingerprinting_offline.py",
    "relative_path": "selfdrive\\debug\\debug_fw_fingerprinting_offline.py",
    "depends_on": [],
    "start_line": 9,
    "end_line": 40,
    "has_docstring": true,
    "docstring": "\n  TODO:\n  - highlight TX vs RX clearly\n  - disambiguate sendcan and can (useful to know if something sent on sendcan made it to the bus on can->128)\n  - print as fixed width table, easier to read\n  ",
    "language": "python"
  },
  "selfdrive.debug.dump.hexdump": {
    "id": "selfdrive.debug.dump.hexdump",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\dump.py",
    "relative_path": "selfdrive\\debug\\dump.py",
    "depends_on": [],
    "start_line": 14,
    "end_line": 23,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.dump_car_docs.dump_car_docs": {
    "id": "selfdrive.debug.dump_car_docs.dump_car_docs",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\dump_car_docs.py",
    "relative_path": "selfdrive\\debug\\dump_car_docs.py",
    "depends_on": [],
    "start_line": 8,
    "end_line": 11,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.filter_log_message.print_logmessage": {
    "id": "selfdrive.debug.filter_log_message.print_logmessage",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\filter_log_message.py",
    "relative_path": "selfdrive\\debug\\filter_log_message.py",
    "depends_on": [],
    "start_line": 26,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.filter_log_message.print_androidlog": {
    "id": "selfdrive.debug.filter_log_message.print_androidlog",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\filter_log_message.py",
    "relative_path": "selfdrive\\debug\\filter_log_message.py",
    "depends_on": [],
    "start_line": 37,
    "end_line": 44,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.fingerprint_from_route.get_fingerprint": {
    "id": "selfdrive.debug.fingerprint_from_route.get_fingerprint",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\fingerprint_from_route.py",
    "relative_path": "selfdrive\\debug\\fingerprint_from_route.py",
    "depends_on": [],
    "start_line": 7,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.format_fingerprints.format_brand_fw_versions": {
    "id": "selfdrive.debug.format_fingerprints.format_brand_fw_versions",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\format_fingerprints.py",
    "relative_path": "selfdrive\\debug\\format_fingerprints.py",
    "depends_on": [],
    "start_line": 66,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.hyundai_enable_radar_points.ConfigValues": {
    "id": "selfdrive.debug.hyundai_enable_radar_points.ConfigValues",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\hyundai_enable_radar_points.py",
    "relative_path": "selfdrive\\debug\\hyundai_enable_radar_points.py",
    "depends_on": [],
    "start_line": 24,
    "end_line": 26,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.live_cpu_and_temp.cputime_total": {
    "id": "selfdrive.debug.live_cpu_and_temp.cputime_total",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\live_cpu_and_temp.py",
    "relative_path": "selfdrive\\debug\\live_cpu_and_temp.py",
    "depends_on": [],
    "start_line": 9,
    "end_line": 10,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.live_cpu_and_temp.cputime_busy": {
    "id": "selfdrive.debug.live_cpu_and_temp.cputime_busy",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\live_cpu_and_temp.py",
    "relative_path": "selfdrive\\debug\\live_cpu_and_temp.py",
    "depends_on": [],
    "start_line": 13,
    "end_line": 14,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.live_cpu_and_temp.proc_cputime_total": {
    "id": "selfdrive.debug.live_cpu_and_temp.proc_cputime_total",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\live_cpu_and_temp.py",
    "relative_path": "selfdrive\\debug\\live_cpu_and_temp.py",
    "depends_on": [],
    "start_line": 17,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.live_cpu_and_temp.proc_name": {
    "id": "selfdrive.debug.live_cpu_and_temp.proc_name",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\live_cpu_and_temp.py",
    "relative_path": "selfdrive\\debug\\live_cpu_and_temp.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.max_lat_accel.Event": {
    "id": "selfdrive.debug.max_lat_accel.Event",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\max_lat_accel.py",
    "relative_path": "selfdrive\\debug\\max_lat_accel.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.max_lat_accel.find_events": {
    "id": "selfdrive.debug.max_lat_accel.find_events",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\max_lat_accel.py",
    "relative_path": "selfdrive\\debug\\max_lat_accel.py",
    "depends_on": [
      "selfdrive.debug.max_lat_accel.Event"
    ],
    "start_line": 25,
    "end_line": 77,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.print_docs_diff.load_base_car_docs": {
    "id": "selfdrive.debug.print_docs_diff.load_base_car_docs",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\print_docs_diff.py",
    "relative_path": "selfdrive\\debug\\print_docs_diff.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.print_docs_diff.match_cars": {
    "id": "selfdrive.debug.print_docs_diff.match_cars",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\print_docs_diff.py",
    "relative_path": "selfdrive\\debug\\print_docs_diff.py",
    "depends_on": [],
    "start_line": 25,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.print_docs_diff.build_column_diff": {
    "id": "selfdrive.debug.print_docs_diff.build_column_diff",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\print_docs_diff.py",
    "relative_path": "selfdrive\\debug\\print_docs_diff.py",
    "depends_on": [
      "selfdrive.debug.print_docs_diff.format_row"
    ],
    "start_line": 42,
    "end_line": 53,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.print_docs_diff.format_row": {
    "id": "selfdrive.debug.print_docs_diff.format_row",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\print_docs_diff.py",
    "relative_path": "selfdrive\\debug\\print_docs_diff.py",
    "depends_on": [],
    "start_line": 56,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.print_docs_diff.print_car_docs_diff": {
    "id": "selfdrive.debug.print_docs_diff.print_car_docs_diff",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\print_docs_diff.py",
    "relative_path": "selfdrive\\debug\\print_docs_diff.py",
    "depends_on": [
      "selfdrive.debug.print_docs_diff.build_column_diff",
      "selfdrive.debug.print_docs_diff.match_cars",
      "selfdrive.debug.print_docs_diff.load_base_car_docs",
      "selfdrive.debug.print_docs_diff.format_row"
    ],
    "start_line": 60,
    "end_line": 113,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.qlog_size.make_pie": {
    "id": "selfdrive.debug.qlog_size.make_pie",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\qlog_size.py",
    "relative_path": "selfdrive\\debug\\qlog_size.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.toyota_eps_factor.to_signed": {
    "id": "selfdrive.debug.toyota_eps_factor.to_signed",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\toyota_eps_factor.py",
    "relative_path": "selfdrive\\debug\\toyota_eps_factor.py",
    "depends_on": [],
    "start_line": 13,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.toyota_eps_factor.get_eps_factor": {
    "id": "selfdrive.debug.toyota_eps_factor.get_eps_factor",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\toyota_eps_factor.py",
    "relative_path": "selfdrive\\debug\\toyota_eps_factor.py",
    "depends_on": [
      "selfdrive.debug.toyota_eps_factor.to_signed"
    ],
    "start_line": 19,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.vw_mqb_config.VOLKSWAGEN_DATA_IDENTIFIER_TYPE": {
    "id": "selfdrive.debug.vw_mqb_config.VOLKSWAGEN_DATA_IDENTIFIER_TYPE",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\vw_mqb_config.py",
    "relative_path": "selfdrive\\debug\\vw_mqb_config.py",
    "depends_on": [],
    "start_line": 14,
    "end_line": 15,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.debug.vw_mqb_config.ACCESS_TYPE_LEVEL_1": {
    "id": "selfdrive.debug.vw_mqb_config.ACCESS_TYPE_LEVEL_1",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\debug\\vw_mqb_config.py",
    "relative_path": "selfdrive\\debug\\vw_mqb_config.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 20,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.calibrationd.is_calibration_valid": {
    "id": "selfdrive.locationd.calibrationd.is_calibration_valid",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\calibrationd.py",
    "relative_path": "selfdrive\\locationd\\calibrationd.py",
    "depends_on": [],
    "start_line": 45,
    "end_line": 46,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.calibrationd.sanity_clip": {
    "id": "selfdrive.locationd.calibrationd.sanity_clip",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\calibrationd.py",
    "relative_path": "selfdrive\\locationd\\calibrationd.py",
    "depends_on": [],
    "start_line": 49,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.calibrationd.moving_avg_with_linear_decay": {
    "id": "selfdrive.locationd.calibrationd.moving_avg_with_linear_decay",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\calibrationd.py",
    "relative_path": "selfdrive\\locationd\\calibrationd.py",
    "depends_on": [],
    "start_line": 56,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.calibrationd.Calibrator": {
    "id": "selfdrive.locationd.calibrationd.Calibrator",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\calibrationd.py",
    "relative_path": "selfdrive\\locationd\\calibrationd.py",
    "depends_on": [
      "selfdrive.locationd.calibrationd.sanity_clip",
      "selfdrive.locationd.calibrationd.is_calibration_valid",
      "selfdrive.locationd.calibrationd.moving_avg_with_linear_decay"
    ],
    "start_line": 59,
    "end_line": 254,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.calibrationd.Calibrator.__init__": {
    "id": "selfdrive.locationd.calibrationd.Calibrator.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\calibrationd.py",
    "relative_path": "selfdrive\\locationd\\calibrationd.py",
    "depends_on": [],
    "start_line": 60,
    "end_line": 85,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.calibrationd.Calibrator.reset": {
    "id": "selfdrive.locationd.calibrationd.Calibrator.reset",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\calibrationd.py",
    "relative_path": "selfdrive\\locationd\\calibrationd.py",
    "depends_on": [],
    "start_line": 87,
    "end_line": 125,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.calibrationd.Calibrator.get_valid_idxs": {
    "id": "selfdrive.locationd.calibrationd.Calibrator.get_valid_idxs",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\calibrationd.py",
    "relative_path": "selfdrive\\locationd\\calibrationd.py",
    "depends_on": [],
    "start_line": 127,
    "end_line": 131,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.calibrationd.Calibrator.update_status": {
    "id": "selfdrive.locationd.calibrationd.Calibrator.update_status",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\calibrationd.py",
    "relative_path": "selfdrive\\locationd\\calibrationd.py",
    "depends_on": [
      "selfdrive.locationd.calibrationd.is_calibration_valid"
    ],
    "start_line": 133,
    "end_line": 166,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.calibrationd.Calibrator.handle_v_ego": {
    "id": "selfdrive.locationd.calibrationd.Calibrator.handle_v_ego",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\calibrationd.py",
    "relative_path": "selfdrive\\locationd\\calibrationd.py",
    "depends_on": [],
    "start_line": 168,
    "end_line": 169,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.calibrationd.Calibrator.get_smooth_rpy": {
    "id": "selfdrive.locationd.calibrationd.Calibrator.get_smooth_rpy",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\calibrationd.py",
    "relative_path": "selfdrive\\locationd\\calibrationd.py",
    "depends_on": [],
    "start_line": 171,
    "end_line": 175,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.calibrationd.Calibrator.handle_cam_odom": {
    "id": "selfdrive.locationd.calibrationd.Calibrator.handle_cam_odom",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\calibrationd.py",
    "relative_path": "selfdrive\\locationd\\calibrationd.py",
    "depends_on": [
      "selfdrive.locationd.calibrationd.sanity_clip",
      "selfdrive.locationd.calibrationd.moving_avg_with_linear_decay"
    ],
    "start_line": 177,
    "end_line": 227,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.calibrationd.Calibrator.get_msg": {
    "id": "selfdrive.locationd.calibrationd.Calibrator.get_msg",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\calibrationd.py",
    "relative_path": "selfdrive\\locationd\\calibrationd.py",
    "depends_on": [],
    "start_line": 229,
    "end_line": 251,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.calibrationd.Calibrator.send_data": {
    "id": "selfdrive.locationd.calibrationd.Calibrator.send_data",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\calibrationd.py",
    "relative_path": "selfdrive\\locationd\\calibrationd.py",
    "depends_on": [],
    "start_line": 253,
    "end_line": 254,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.calibrationd.main": {
    "id": "selfdrive.locationd.calibrationd.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\calibrationd.py",
    "relative_path": "selfdrive\\locationd\\calibrationd.py",
    "depends_on": [
      "selfdrive.locationd.calibrationd.Calibrator"
    ],
    "start_line": 257,
    "end_line": 287,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.fft_next_good_size": {
    "id": "selfdrive.locationd.helpers.fft_next_good_size",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [],
    "start_line": 10,
    "end_line": 33,
    "has_docstring": true,
    "docstring": "\n    smallest composite of 2, 3, 5, 7, 11 that is >= n\n    inspired by pocketfft\n    ",
    "language": "python"
  },
  "selfdrive.locationd.helpers.parabolic_peak_interp": {
    "id": "selfdrive.locationd.helpers.parabolic_peak_interp",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [],
    "start_line": 36,
    "end_line": 43,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.rotate_cov": {
    "id": "selfdrive.locationd.helpers.rotate_cov",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [],
    "start_line": 46,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.rotate_std": {
    "id": "selfdrive.locationd.helpers.rotate_std",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [
      "selfdrive.locationd.helpers.rotate_cov"
    ],
    "start_line": 50,
    "end_line": 51,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.NPQueue": {
    "id": "selfdrive.locationd.helpers.NPQueue",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [],
    "start_line": 54,
    "end_line": 67,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.NPQueue.__init__": {
    "id": "selfdrive.locationd.helpers.NPQueue.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [],
    "start_line": 55,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.NPQueue.__len__": {
    "id": "selfdrive.locationd.helpers.NPQueue.__len__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [],
    "start_line": 59,
    "end_line": 60,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.NPQueue.append": {
    "id": "selfdrive.locationd.helpers.NPQueue.append",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [],
    "start_line": 62,
    "end_line": 67,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.PointBuckets": {
    "id": "selfdrive.locationd.helpers.PointBuckets",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [
      "selfdrive.locationd.helpers.NPQueue"
    ],
    "start_line": 70,
    "end_line": 99,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.PointBuckets.__init__": {
    "id": "selfdrive.locationd.helpers.PointBuckets.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [
      "selfdrive.locationd.helpers.NPQueue"
    ],
    "start_line": 71,
    "end_line": 75,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.PointBuckets.__len__": {
    "id": "selfdrive.locationd.helpers.PointBuckets.__len__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [],
    "start_line": 77,
    "end_line": 78,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.PointBuckets.is_valid": {
    "id": "selfdrive.locationd.helpers.PointBuckets.is_valid",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [],
    "start_line": 80,
    "end_line": 83,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.PointBuckets.is_calculable": {
    "id": "selfdrive.locationd.helpers.PointBuckets.is_calculable",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [],
    "start_line": 85,
    "end_line": 86,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.PointBuckets.add_point": {
    "id": "selfdrive.locationd.helpers.PointBuckets.add_point",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [],
    "start_line": 88,
    "end_line": 89,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.PointBuckets.get_points": {
    "id": "selfdrive.locationd.helpers.PointBuckets.get_points",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [],
    "start_line": 91,
    "end_line": 95,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.PointBuckets.load_points": {
    "id": "selfdrive.locationd.helpers.PointBuckets.load_points",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [],
    "start_line": 97,
    "end_line": 99,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.ParameterEstimator": {
    "id": "selfdrive.locationd.helpers.ParameterEstimator",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [],
    "start_line": 102,
    "end_line": 111,
    "has_docstring": true,
    "docstring": " Base class for parameter estimators ",
    "language": "python"
  },
  "selfdrive.locationd.helpers.ParameterEstimator.reset": {
    "id": "selfdrive.locationd.helpers.ParameterEstimator.reset",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [],
    "start_line": 104,
    "end_line": 105,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.ParameterEstimator.handle_log": {
    "id": "selfdrive.locationd.helpers.ParameterEstimator.handle_log",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [],
    "start_line": 107,
    "end_line": 108,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.ParameterEstimator.get_msg": {
    "id": "selfdrive.locationd.helpers.ParameterEstimator.get_msg",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [],
    "start_line": 110,
    "end_line": 111,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.Measurement": {
    "id": "selfdrive.locationd.helpers.Measurement",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [],
    "start_line": 114,
    "end_line": 129,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.Measurement.__init__": {
    "id": "selfdrive.locationd.helpers.Measurement.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [],
    "start_line": 120,
    "end_line": 122,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.Measurement.from_measurement_xyz": {
    "id": "selfdrive.locationd.helpers.Measurement.from_measurement_xyz",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [],
    "start_line": 125,
    "end_line": 129,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.Pose": {
    "id": "selfdrive.locationd.helpers.Pose",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [
      "selfdrive.locationd.helpers.Measurement",
      "selfdrive.locationd.helpers.Pose"
    ],
    "start_line": 132,
    "end_line": 146,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.Pose.__init__": {
    "id": "selfdrive.locationd.helpers.Pose.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [
      "selfdrive.locationd.helpers.Measurement"
    ],
    "start_line": 133,
    "end_line": 137,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.Pose.from_live_pose": {
    "id": "selfdrive.locationd.helpers.Pose.from_live_pose",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [
      "selfdrive.locationd.helpers.Measurement",
      "selfdrive.locationd.helpers.Pose"
    ],
    "start_line": 140,
    "end_line": 146,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.PoseCalibrator": {
    "id": "selfdrive.locationd.helpers.PoseCalibrator",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [
      "selfdrive.locationd.helpers.Measurement",
      "selfdrive.locationd.helpers.rotate_std",
      "selfdrive.locationd.helpers.Pose"
    ],
    "start_line": 149,
    "end_line": 177,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.PoseCalibrator.__init__": {
    "id": "selfdrive.locationd.helpers.PoseCalibrator.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [],
    "start_line": 150,
    "end_line": 152,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.PoseCalibrator._transform_calib_from_device": {
    "id": "selfdrive.locationd.helpers.PoseCalibrator._transform_calib_from_device",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [
      "selfdrive.locationd.helpers.Measurement",
      "selfdrive.locationd.helpers.rotate_std"
    ],
    "start_line": 154,
    "end_line": 157,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.PoseCalibrator._ned_from_calib": {
    "id": "selfdrive.locationd.helpers.PoseCalibrator._ned_from_calib",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [
      "selfdrive.locationd.helpers.Measurement"
    ],
    "start_line": 159,
    "end_line": 163,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.PoseCalibrator.build_calibrated_pose": {
    "id": "selfdrive.locationd.helpers.PoseCalibrator.build_calibrated_pose",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [
      "selfdrive.locationd.helpers.Pose"
    ],
    "start_line": 165,
    "end_line": 171,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.helpers.PoseCalibrator.feed_live_calib": {
    "id": "selfdrive.locationd.helpers.PoseCalibrator.feed_live_calib",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\helpers.py",
    "relative_path": "selfdrive\\locationd\\helpers.py",
    "depends_on": [],
    "start_line": 173,
    "end_line": 177,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.lagd.masked_normalized_cross_correlation": {
    "id": "selfdrive.locationd.lagd.masked_normalized_cross_correlation",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\lagd.py",
    "relative_path": "selfdrive\\locationd\\lagd.py",
    "depends_on": [],
    "start_line": 32,
    "end_line": 86,
    "has_docstring": true,
    "docstring": "\n  References:\n    D. Padfield. \"Masked FFT registration\". In Proc. Computer Vision and\n    Pattern Recognition, pp. 2918-2925 (2010).\n    :DOI:`10.1109/CVPR.2010.5540032`\n  ",
    "language": "python"
  },
  "selfdrive.locationd.lagd.Points": {
    "id": "selfdrive.locationd.lagd.Points",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\lagd.py",
    "relative_path": "selfdrive\\locationd\\lagd.py",
    "depends_on": [],
    "start_line": 89,
    "end_line": 111,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.lagd.Points.__init__": {
    "id": "selfdrive.locationd.lagd.Points.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\lagd.py",
    "relative_path": "selfdrive\\locationd\\lagd.py",
    "depends_on": [],
    "start_line": 90,
    "end_line": 94,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.lagd.Points.num_points": {
    "id": "selfdrive.locationd.lagd.Points.num_points",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\lagd.py",
    "relative_path": "selfdrive\\locationd\\lagd.py",
    "depends_on": [],
    "start_line": 97,
    "end_line": 98,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.lagd.Points.num_okay": {
    "id": "selfdrive.locationd.lagd.Points.num_okay",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\lagd.py",
    "relative_path": "selfdrive\\locationd\\lagd.py",
    "depends_on": [],
    "start_line": 101,
    "end_line": 102,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.lagd.Points.update": {
    "id": "selfdrive.locationd.lagd.Points.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\lagd.py",
    "relative_path": "selfdrive\\locationd\\lagd.py",
    "depends_on": [],
    "start_line": 104,
    "end_line": 108,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.lagd.Points.get": {
    "id": "selfdrive.locationd.lagd.Points.get",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\lagd.py",
    "relative_path": "selfdrive\\locationd\\lagd.py",
    "depends_on": [],
    "start_line": 110,
    "end_line": 111,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.lagd.BlockAverage": {
    "id": "selfdrive.locationd.lagd.BlockAverage",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\lagd.py",
    "relative_path": "selfdrive\\locationd\\lagd.py",
    "depends_on": [],
    "start_line": 114,
    "end_line": 147,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.lagd.BlockAverage.__init__": {
    "id": "selfdrive.locationd.lagd.BlockAverage.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\lagd.py",
    "relative_path": "selfdrive\\locationd\\lagd.py",
    "depends_on": [],
    "start_line": 115,
    "end_line": 122,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.lagd.BlockAverage.update": {
    "id": "selfdrive.locationd.lagd.BlockAverage.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\lagd.py",
    "relative_path": "selfdrive\\locationd\\lagd.py",
    "depends_on": [],
    "start_line": 124,
    "end_line": 129,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.lagd.BlockAverage.get": {
    "id": "selfdrive.locationd.lagd.BlockAverage.get",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\lagd.py",
    "relative_path": "selfdrive\\locationd\\lagd.py",
    "depends_on": [],
    "start_line": 131,
    "end_line": 147,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.lagd.LateralLagEstimator": {
    "id": "selfdrive.locationd.lagd.LateralLagEstimator",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\lagd.py",
    "relative_path": "selfdrive\\locationd\\lagd.py",
    "depends_on": [
      "selfdrive.locationd.lagd.BlockAverage",
      "selfdrive.locationd.lagd.masked_normalized_cross_correlation",
      "selfdrive.locationd.lagd.Points"
    ],
    "start_line": 150,
    "end_line": 316,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.lagd.LateralLagEstimator.__init__": {
    "id": "selfdrive.locationd.lagd.LateralLagEstimator.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\lagd.py",
    "relative_path": "selfdrive\\locationd\\lagd.py",
    "depends_on": [],
    "start_line": 153,
    "end_line": 190,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.lagd.LateralLagEstimator.reset": {
    "id": "selfdrive.locationd.lagd.LateralLagEstimator.reset",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\lagd.py",
    "relative_path": "selfdrive\\locationd\\lagd.py",
    "depends_on": [
      "selfdrive.locationd.lagd.BlockAverage",
      "selfdrive.locationd.lagd.Points"
    ],
    "start_line": 192,
    "end_line": 195,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.lagd.LateralLagEstimator.get_msg": {
    "id": "selfdrive.locationd.lagd.LateralLagEstimator.get_msg",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\lagd.py",
    "relative_path": "selfdrive\\locationd\\lagd.py",
    "depends_on": [],
    "start_line": 197,
    "end_line": 229,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.lagd.LateralLagEstimator.handle_log": {
    "id": "selfdrive.locationd.lagd.LateralLagEstimator.handle_log",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\lagd.py",
    "relative_path": "selfdrive\\locationd\\lagd.py",
    "depends_on": [],
    "start_line": 231,
    "end_line": 248,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.lagd.LateralLagEstimator.points_enough": {
    "id": "selfdrive.locationd.lagd.LateralLagEstimator.points_enough",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\lagd.py",
    "relative_path": "selfdrive\\locationd\\lagd.py",
    "depends_on": [],
    "start_line": 250,
    "end_line": 251,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.lagd.LateralLagEstimator.points_valid": {
    "id": "selfdrive.locationd.lagd.LateralLagEstimator.points_valid",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\lagd.py",
    "relative_path": "selfdrive\\locationd\\lagd.py",
    "depends_on": [],
    "start_line": 253,
    "end_line": 254,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.lagd.LateralLagEstimator.update_points": {
    "id": "selfdrive.locationd.lagd.LateralLagEstimator.update_points",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\lagd.py",
    "relative_path": "selfdrive\\locationd\\lagd.py",
    "depends_on": [],
    "start_line": 256,
    "end_line": 282,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.lagd.LateralLagEstimator.update_estimate": {
    "id": "selfdrive.locationd.lagd.LateralLagEstimator.update_estimate",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\lagd.py",
    "relative_path": "selfdrive\\locationd\\lagd.py",
    "depends_on": [],
    "start_line": 284,
    "end_line": 300,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.lagd.LateralLagEstimator.actuator_delay": {
    "id": "selfdrive.locationd.lagd.LateralLagEstimator.actuator_delay",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\lagd.py",
    "relative_path": "selfdrive\\locationd\\lagd.py",
    "depends_on": [
      "selfdrive.locationd.lagd.masked_normalized_cross_correlation"
    ],
    "start_line": 302,
    "end_line": 316,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.lagd.retrieve_initial_lag": {
    "id": "selfdrive.locationd.lagd.retrieve_initial_lag",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\lagd.py",
    "relative_path": "selfdrive\\locationd\\lagd.py",
    "depends_on": [],
    "start_line": 319,
    "end_line": 338,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.lagd.main": {
    "id": "selfdrive.locationd.lagd.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\lagd.py",
    "relative_path": "selfdrive\\locationd\\lagd.py",
    "depends_on": [
      "selfdrive.locationd.lagd.LateralLagEstimator",
      "selfdrive.locationd.lagd.retrieve_initial_lag"
    ],
    "start_line": 341,
    "end_line": 374,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.locationd.calculate_invalid_input_decay": {
    "id": "selfdrive.locationd.locationd.calculate_invalid_input_decay",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\locationd.py",
    "relative_path": "selfdrive\\locationd\\locationd.py",
    "depends_on": [],
    "start_line": 33,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.locationd.init_xyz_measurement": {
    "id": "selfdrive.locationd.locationd.init_xyz_measurement",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\locationd.py",
    "relative_path": "selfdrive\\locationd\\locationd.py",
    "depends_on": [],
    "start_line": 37,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.locationd.HandleLogResult": {
    "id": "selfdrive.locationd.locationd.HandleLogResult",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\locationd.py",
    "relative_path": "selfdrive\\locationd\\locationd.py",
    "depends_on": [],
    "start_line": 44,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.locationd.LocationEstimator": {
    "id": "selfdrive.locationd.locationd.LocationEstimator",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\locationd.py",
    "relative_path": "selfdrive\\locationd\\locationd.py",
    "depends_on": [
      "selfdrive.locationd.locationd.HandleLogResult",
      "selfdrive.locationd.locationd.init_xyz_measurement"
    ],
    "start_line": 51,
    "end_line": 238,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.locationd.LocationEstimator.__init__": {
    "id": "selfdrive.locationd.locationd.LocationEstimator.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\locationd.py",
    "relative_path": "selfdrive\\locationd\\locationd.py",
    "depends_on": [],
    "start_line": 52,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.locationd.LocationEstimator.reset": {
    "id": "selfdrive.locationd.locationd.LocationEstimator.reset",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\locationd.py",
    "relative_path": "selfdrive\\locationd\\locationd.py",
    "depends_on": [],
    "start_line": 66,
    "end_line": 67,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.locationd.LocationEstimator._validate_sensor_source": {
    "id": "selfdrive.locationd.locationd.LocationEstimator._validate_sensor_source",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\locationd.py",
    "relative_path": "selfdrive\\locationd\\locationd.py",
    "depends_on": [],
    "start_line": 69,
    "end_line": 71,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.locationd.LocationEstimator._validate_sensor_time": {
    "id": "selfdrive.locationd.locationd.LocationEstimator._validate_sensor_time",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\locationd.py",
    "relative_path": "selfdrive\\locationd\\locationd.py",
    "depends_on": [],
    "start_line": 73,
    "end_line": 82,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.locationd.LocationEstimator._validate_timestamp": {
    "id": "selfdrive.locationd.locationd.LocationEstimator._validate_timestamp",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\locationd.py",
    "relative_path": "selfdrive\\locationd\\locationd.py",
    "depends_on": [],
    "start_line": 84,
    "end_line": 89,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.locationd.LocationEstimator._finite_check": {
    "id": "selfdrive.locationd.locationd.LocationEstimator._finite_check",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\locationd.py",
    "relative_path": "selfdrive\\locationd\\locationd.py",
    "depends_on": [],
    "start_line": 91,
    "end_line": 95,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.locationd.LocationEstimator.handle_log": {
    "id": "selfdrive.locationd.locationd.LocationEstimator.handle_log",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\locationd.py",
    "relative_path": "selfdrive\\locationd\\locationd.py",
    "depends_on": [
      "selfdrive.locationd.locationd.HandleLogResult"
    ],
    "start_line": 97,
    "end_line": 202,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.locationd.LocationEstimator.get_msg": {
    "id": "selfdrive.locationd.locationd.LocationEstimator.get_msg",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\locationd.py",
    "relative_path": "selfdrive\\locationd\\locationd.py",
    "depends_on": [
      "selfdrive.locationd.locationd.init_xyz_measurement"
    ],
    "start_line": 204,
    "end_line": 238,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.locationd.sensor_all_checks": {
    "id": "selfdrive.locationd.locationd.sensor_all_checks",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\locationd.py",
    "relative_path": "selfdrive\\locationd\\locationd.py",
    "depends_on": [],
    "start_line": 241,
    "end_line": 253,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.locationd.main": {
    "id": "selfdrive.locationd.locationd.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\locationd.py",
    "relative_path": "selfdrive\\locationd\\locationd.py",
    "depends_on": [
      "selfdrive.locationd.locationd.calculate_invalid_input_decay",
      "selfdrive.locationd.locationd.LocationEstimator",
      "selfdrive.locationd.locationd.HandleLogResult",
      "selfdrive.locationd.locationd.sensor_all_checks"
    ],
    "start_line": 256,
    "end_line": 328,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.paramsd.VehicleParamsLearner": {
    "id": "selfdrive.locationd.paramsd.VehicleParamsLearner",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\paramsd.py",
    "relative_path": "selfdrive\\locationd\\paramsd.py",
    "depends_on": [
      "selfdrive.locationd.paramsd.check_valid_with_hysteresis"
    ],
    "start_line": 28,
    "end_line": 191,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.paramsd.VehicleParamsLearner.__init__": {
    "id": "selfdrive.locationd.paramsd.VehicleParamsLearner.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\paramsd.py",
    "relative_path": "selfdrive\\locationd\\paramsd.py",
    "depends_on": [],
    "start_line": 29,
    "end_line": 59,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.paramsd.VehicleParamsLearner.reset": {
    "id": "selfdrive.locationd.paramsd.VehicleParamsLearner.reset",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\paramsd.py",
    "relative_path": "selfdrive\\locationd\\paramsd.py",
    "depends_on": [],
    "start_line": 61,
    "end_line": 65,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.paramsd.VehicleParamsLearner.handle_log": {
    "id": "selfdrive.locationd.paramsd.VehicleParamsLearner.handle_log",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\paramsd.py",
    "relative_path": "selfdrive\\locationd\\paramsd.py",
    "depends_on": [],
    "start_line": 67,
    "end_line": 132,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.paramsd.VehicleParamsLearner.get_msg": {
    "id": "selfdrive.locationd.paramsd.VehicleParamsLearner.get_msg",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\paramsd.py",
    "relative_path": "selfdrive\\locationd\\paramsd.py",
    "depends_on": [
      "selfdrive.locationd.paramsd.check_valid_with_hysteresis"
    ],
    "start_line": 134,
    "end_line": 191,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.paramsd.check_valid_with_hysteresis": {
    "id": "selfdrive.locationd.paramsd.check_valid_with_hysteresis",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\paramsd.py",
    "relative_path": "selfdrive\\locationd\\paramsd.py",
    "depends_on": [],
    "start_line": 194,
    "end_line": 199,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.paramsd.migrate_cached_vehicle_params_if_needed": {
    "id": "selfdrive.locationd.paramsd.migrate_cached_vehicle_params_if_needed",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\paramsd.py",
    "relative_path": "selfdrive\\locationd\\paramsd.py",
    "depends_on": [],
    "start_line": 203,
    "end_line": 219,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.paramsd.retrieve_initial_vehicle_params": {
    "id": "selfdrive.locationd.paramsd.retrieve_initial_vehicle_params",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\paramsd.py",
    "relative_path": "selfdrive\\locationd\\paramsd.py",
    "depends_on": [],
    "start_line": 222,
    "end_line": 261,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.paramsd.main": {
    "id": "selfdrive.locationd.paramsd.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\paramsd.py",
    "relative_path": "selfdrive\\locationd\\paramsd.py",
    "depends_on": [
      "selfdrive.locationd.paramsd.VehicleParamsLearner",
      "selfdrive.locationd.paramsd.migrate_cached_vehicle_params_if_needed",
      "selfdrive.locationd.paramsd.retrieve_initial_vehicle_params"
    ],
    "start_line": 264,
    "end_line": 296,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.torqued.slope2rot": {
    "id": "selfdrive.locationd.torqued.slope2rot",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\torqued.py",
    "relative_path": "selfdrive\\locationd\\torqued.py",
    "depends_on": [],
    "start_line": 38,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.torqued.TorqueBuckets": {
    "id": "selfdrive.locationd.torqued.TorqueBuckets",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\torqued.py",
    "relative_path": "selfdrive\\locationd\\torqued.py",
    "depends_on": [],
    "start_line": 44,
    "end_line": 49,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.torqued.TorqueBuckets.add_point": {
    "id": "selfdrive.locationd.torqued.TorqueBuckets.add_point",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\torqued.py",
    "relative_path": "selfdrive\\locationd\\torqued.py",
    "depends_on": [],
    "start_line": 45,
    "end_line": 49,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.torqued.TorqueEstimator": {
    "id": "selfdrive.locationd.torqued.TorqueEstimator",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\torqued.py",
    "relative_path": "selfdrive\\locationd\\torqued.py",
    "depends_on": [
      "selfdrive.locationd.torqued.TorqueBuckets",
      "selfdrive.locationd.torqued.slope2rot"
    ],
    "start_line": 52,
    "end_line": 238,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.torqued.TorqueEstimator.__init__": {
    "id": "selfdrive.locationd.torqued.TorqueEstimator.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\torqued.py",
    "relative_path": "selfdrive\\locationd\\torqued.py",
    "depends_on": [],
    "start_line": 53,
    "end_line": 123,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.torqued.TorqueEstimator.get_restore_key": {
    "id": "selfdrive.locationd.torqued.TorqueEstimator.get_restore_key",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\torqued.py",
    "relative_path": "selfdrive\\locationd\\torqued.py",
    "depends_on": [],
    "start_line": 126,
    "end_line": 131,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.torqued.TorqueEstimator.reset": {
    "id": "selfdrive.locationd.torqued.TorqueEstimator.reset",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\torqued.py",
    "relative_path": "selfdrive\\locationd\\torqued.py",
    "depends_on": [
      "selfdrive.locationd.torqued.TorqueBuckets"
    ],
    "start_line": 133,
    "end_line": 142,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.torqued.TorqueEstimator.estimate_params": {
    "id": "selfdrive.locationd.torqued.TorqueEstimator.estimate_params",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\torqued.py",
    "relative_path": "selfdrive\\locationd\\torqued.py",
    "depends_on": [
      "selfdrive.locationd.torqued.slope2rot"
    ],
    "start_line": 144,
    "end_line": 156,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.torqued.TorqueEstimator.update_params": {
    "id": "selfdrive.locationd.torqued.TorqueEstimator.update_params",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\torqued.py",
    "relative_path": "selfdrive\\locationd\\torqued.py",
    "depends_on": [],
    "start_line": 158,
    "end_line": 162,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.torqued.TorqueEstimator.handle_log": {
    "id": "selfdrive.locationd.torqued.TorqueEstimator.handle_log",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\torqued.py",
    "relative_path": "selfdrive\\locationd\\torqued.py",
    "depends_on": [],
    "start_line": 164,
    "end_line": 202,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.torqued.TorqueEstimator.get_msg": {
    "id": "selfdrive.locationd.torqued.TorqueEstimator.get_msg",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\torqued.py",
    "relative_path": "selfdrive\\locationd\\torqued.py",
    "depends_on": [],
    "start_line": 204,
    "end_line": 238,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.torqued.main": {
    "id": "selfdrive.locationd.torqued.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\torqued.py",
    "relative_path": "selfdrive\\locationd\\torqued.py",
    "depends_on": [
      "selfdrive.locationd.torqued.TorqueEstimator"
    ],
    "start_line": 241,
    "end_line": 265,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.models.car_kf._slice": {
    "id": "selfdrive.locationd.models.car_kf._slice",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\models\\car_kf.py",
    "relative_path": "selfdrive\\locationd\\models\\car_kf.py",
    "depends_on": [],
    "start_line": 23,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.models.car_kf.States": {
    "id": "selfdrive.locationd.models.car_kf.States",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\models\\car_kf.py",
    "relative_path": "selfdrive\\locationd\\models\\car_kf.py",
    "depends_on": [
      "selfdrive.locationd.models.car_kf._slice"
    ],
    "start_line": 31,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.models.car_kf.CarKalman": {
    "id": "selfdrive.locationd.models.car_kf.CarKalman",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\models\\car_kf.py",
    "relative_path": "selfdrive\\locationd\\models\\car_kf.py",
    "depends_on": [
      "selfdrive.locationd.models.car_kf.States",
      "selfdrive.locationd.models.car_kf.CarKalman"
    ],
    "start_line": 44,
    "end_line": 174,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.models.car_kf.CarKalman.generate_code": {
    "id": "selfdrive.locationd.models.car_kf.CarKalman.generate_code",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\models\\car_kf.py",
    "relative_path": "selfdrive\\locationd\\models\\car_kf.py",
    "depends_on": [
      "selfdrive.locationd.models.car_kf.States",
      "selfdrive.locationd.models.car_kf.CarKalman"
    ],
    "start_line": 92,
    "end_line": 161,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.models.car_kf.CarKalman.__init__": {
    "id": "selfdrive.locationd.models.car_kf.CarKalman.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\models\\car_kf.py",
    "relative_path": "selfdrive\\locationd\\models\\car_kf.py",
    "depends_on": [
      "selfdrive.locationd.models.car_kf.CarKalman"
    ],
    "start_line": 163,
    "end_line": 166,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.models.car_kf.CarKalman.set_globals": {
    "id": "selfdrive.locationd.models.car_kf.CarKalman.set_globals",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\models\\car_kf.py",
    "relative_path": "selfdrive\\locationd\\models\\car_kf.py",
    "depends_on": [],
    "start_line": 168,
    "end_line": 174,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.models.constants.ObservationKind": {
    "id": "selfdrive.locationd.models.constants.ObservationKind",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\models\\constants.py",
    "relative_path": "selfdrive\\locationd\\models\\constants.py",
    "depends_on": [],
    "start_line": 5,
    "end_line": 86,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.models.constants.ObservationKind.to_string": {
    "id": "selfdrive.locationd.models.constants.ObservationKind.to_string",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\models\\constants.py",
    "relative_path": "selfdrive\\locationd\\models\\constants.py",
    "depends_on": [],
    "start_line": 85,
    "end_line": 86,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.models.pose_kf.States": {
    "id": "selfdrive.locationd.models.pose_kf.States",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\models\\pose_kf.py",
    "relative_path": "selfdrive\\locationd\\models\\pose_kf.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 26,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.models.pose_kf.PoseKalman": {
    "id": "selfdrive.locationd.models.pose_kf.PoseKalman",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\models\\pose_kf.py",
    "relative_path": "selfdrive\\locationd\\models\\pose_kf.py",
    "depends_on": [
      "selfdrive.locationd.models.pose_kf.PoseKalman",
      "selfdrive.locationd.models.pose_kf.States"
    ],
    "start_line": 29,
    "end_line": 106,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.models.pose_kf.PoseKalman.generate_code": {
    "id": "selfdrive.locationd.models.pose_kf.PoseKalman.generate_code",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\models\\pose_kf.py",
    "relative_path": "selfdrive\\locationd\\models\\pose_kf.py",
    "depends_on": [
      "selfdrive.locationd.models.pose_kf.PoseKalman",
      "selfdrive.locationd.models.pose_kf.States"
    ],
    "start_line": 61,
    "end_line": 101,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.models.pose_kf.PoseKalman.__init__": {
    "id": "selfdrive.locationd.models.pose_kf.PoseKalman.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\models\\pose_kf.py",
    "relative_path": "selfdrive\\locationd\\models\\pose_kf.py",
    "depends_on": [
      "selfdrive.locationd.models.pose_kf.PoseKalman"
    ],
    "start_line": 103,
    "end_line": 106,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_calibrationd.process_messages": {
    "id": "selfdrive.locationd.test.test_calibrationd.process_messages",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_calibrationd.py",
    "relative_path": "selfdrive\\locationd\\test\\test_calibrationd.py",
    "depends_on": [],
    "start_line": 12,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_calibrationd.TestCalibrationd": {
    "id": "selfdrive.locationd.test.test_calibrationd.TestCalibrationd",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_calibrationd.py",
    "relative_path": "selfdrive\\locationd\\test\\test_calibrationd.py",
    "depends_on": [
      "selfdrive.locationd.test.test_calibrationd.process_messages"
    ],
    "start_line": 32,
    "end_line": 112,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_calibrationd.TestCalibrationd.test_read_saved_params": {
    "id": "selfdrive.locationd.test.test_calibrationd.TestCalibrationd.test_read_saved_params",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_calibrationd.py",
    "relative_path": "selfdrive\\locationd\\test\\test_calibrationd.py",
    "depends_on": [],
    "start_line": 34,
    "end_line": 44,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_calibrationd.TestCalibrationd.test_calibration_basics": {
    "id": "selfdrive.locationd.test.test_calibrationd.TestCalibrationd.test_calibration_basics",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_calibrationd.py",
    "relative_path": "selfdrive\\locationd\\test\\test_calibrationd.py",
    "depends_on": [
      "selfdrive.locationd.test.test_calibrationd.process_messages"
    ],
    "start_line": 47,
    "end_line": 53,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_calibrationd.TestCalibrationd.test_calibration_low_speed_reject": {
    "id": "selfdrive.locationd.test.test_calibrationd.TestCalibrationd.test_calibration_low_speed_reject",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_calibrationd.py",
    "relative_path": "selfdrive\\locationd\\test\\test_calibrationd.py",
    "depends_on": [
      "selfdrive.locationd.test.test_calibrationd.process_messages"
    ],
    "start_line": 56,
    "end_line": 62,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_calibrationd.TestCalibrationd.test_calibration_yaw_rate_reject": {
    "id": "selfdrive.locationd.test.test_calibrationd.TestCalibrationd.test_calibration_yaw_rate_reject",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_calibrationd.py",
    "relative_path": "selfdrive\\locationd\\test\\test_calibrationd.py",
    "depends_on": [
      "selfdrive.locationd.test.test_calibrationd.process_messages"
    ],
    "start_line": 65,
    "end_line": 70,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_calibrationd.TestCalibrationd.test_calibration_speed_std_reject": {
    "id": "selfdrive.locationd.test.test_calibrationd.TestCalibrationd.test_calibration_speed_std_reject",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_calibrationd.py",
    "relative_path": "selfdrive\\locationd\\test\\test_calibrationd.py",
    "depends_on": [
      "selfdrive.locationd.test.test_calibrationd.process_messages"
    ],
    "start_line": 73,
    "end_line": 77,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_calibrationd.TestCalibrationd.test_calibration_speed_std_height_reject": {
    "id": "selfdrive.locationd.test.test_calibrationd.TestCalibrationd.test_calibration_speed_std_height_reject",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_calibrationd.py",
    "relative_path": "selfdrive\\locationd\\test\\test_calibrationd.py",
    "depends_on": [
      "selfdrive.locationd.test.test_calibrationd.process_messages"
    ],
    "start_line": 80,
    "end_line": 84,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_calibrationd.TestCalibrationd.test_calibration_auto_reset": {
    "id": "selfdrive.locationd.test.test_calibrationd.TestCalibrationd.test_calibration_auto_reset",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_calibrationd.py",
    "relative_path": "selfdrive\\locationd\\test\\test_calibrationd.py",
    "depends_on": [
      "selfdrive.locationd.test.test_calibrationd.process_messages"
    ],
    "start_line": 87,
    "end_line": 112,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_lagd.process_messages": {
    "id": "selfdrive.locationd.test.test_lagd.process_messages",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_lagd.py",
    "relative_path": "selfdrive\\locationd\\test\\test_lagd.py",
    "depends_on": [
      "selfdrive.locationd.test.test_lagd.ZeroMock"
    ],
    "start_line": 19,
    "end_line": 51,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_lagd.TestLagd": {
    "id": "selfdrive.locationd.test.test_lagd.TestLagd",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_lagd.py",
    "relative_path": "selfdrive\\locationd\\test\\test_lagd.py",
    "depends_on": [
      "selfdrive.locationd.test.test_lagd.process_messages"
    ],
    "start_line": 54,
    "end_line": 141,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_lagd.TestLagd.test_read_saved_params": {
    "id": "selfdrive.locationd.test.test_lagd.TestLagd.test_read_saved_params",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_lagd.py",
    "relative_path": "selfdrive\\locationd\\test\\test_lagd.py",
    "depends_on": [],
    "start_line": 55,
    "end_line": 72,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_lagd.TestLagd.test_ncc": {
    "id": "selfdrive.locationd.test.test_lagd.TestLagd.test_ncc",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_lagd.py",
    "relative_path": "selfdrive\\locationd\\test\\test_lagd.py",
    "depends_on": [],
    "start_line": 74,
    "end_line": 95,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_lagd.TestLagd.test_empty_estimator": {
    "id": "selfdrive.locationd.test.test_lagd.TestLagd.test_empty_estimator",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_lagd.py",
    "relative_path": "selfdrive\\locationd\\test\\test_lagd.py",
    "depends_on": [],
    "start_line": 97,
    "end_line": 104,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_lagd.TestLagd.test_estimator_basics": {
    "id": "selfdrive.locationd.test.test_lagd.TestLagd.test_estimator_basics",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_lagd.py",
    "relative_path": "selfdrive\\locationd\\test\\test_lagd.py",
    "depends_on": [
      "selfdrive.locationd.test.test_lagd.process_messages"
    ],
    "start_line": 106,
    "end_line": 117,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_lagd.TestLagd.test_estimator_masking": {
    "id": "selfdrive.locationd.test.test_lagd.TestLagd.test_estimator_masking",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_lagd.py",
    "relative_path": "selfdrive\\locationd\\test\\test_lagd.py",
    "depends_on": [
      "selfdrive.locationd.test.test_lagd.process_messages"
    ],
    "start_line": 119,
    "end_line": 125,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_lagd.TestLagd.test_estimator_performance": {
    "id": "selfdrive.locationd.test.test_lagd.TestLagd.test_estimator_performance",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_lagd.py",
    "relative_path": "selfdrive\\locationd\\test\\test_lagd.py",
    "depends_on": [],
    "start_line": 129,
    "end_line": 141,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_lagd.ZeroMock": {
    "id": "selfdrive.locationd.test.test_lagd.ZeroMock",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_lagd.py",
    "relative_path": "selfdrive\\locationd\\test\\test_lagd.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_lagd.ZeroMock.__getattr__": {
    "id": "selfdrive.locationd.test.test_lagd.ZeroMock.__getattr__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_lagd.py",
    "relative_path": "selfdrive\\locationd\\test\\test_lagd.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_locationd_scenarios.Scenario": {
    "id": "selfdrive.locationd.test.test_locationd_scenarios.Scenario",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "relative_path": "selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "depends_on": [],
    "start_line": 22,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_locationd_scenarios.get_select_fields_data": {
    "id": "selfdrive.locationd.test.test_locationd_scenarios.get_select_fields_data",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "relative_path": "selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "depends_on": [],
    "start_line": 34,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_locationd_scenarios.modify_logs_midway": {
    "id": "selfdrive.locationd.test.test_locationd_scenarios.modify_logs_midway",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "relative_path": "selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "depends_on": [],
    "start_line": 50,
    "end_line": 58,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_locationd_scenarios.run_scenarios": {
    "id": "selfdrive.locationd.test.test_locationd_scenarios.run_scenarios",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "relative_path": "selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "depends_on": [
      "selfdrive.locationd.test.test_locationd_scenarios.modify_logs_midway",
      "selfdrive.locationd.test.test_locationd_scenarios.Scenario",
      "selfdrive.locationd.test.test_locationd_scenarios.get_select_fields_data"
    ],
    "start_line": 61,
    "end_line": 90,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_locationd_scenarios.TestLocationdScenarios": {
    "id": "selfdrive.locationd.test.test_locationd_scenarios.TestLocationdScenarios",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "relative_path": "selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "depends_on": [
      "selfdrive.locationd.test.test_locationd_scenarios.Scenario",
      "selfdrive.locationd.test.test_locationd_scenarios.run_scenarios"
    ],
    "start_line": 93,
    "end_line": 190,
    "has_docstring": true,
    "docstring": "\n  Test locationd with different scenarios. In all these scenarios, we expect the following:\n    - locationd kalman filter should never go unstable (we care mostly about yaw_rate, roll, gpsOK, inputsOK, sensorsOK)\n    - faulty values should be ignored, with appropriate flags set\n  ",
    "language": "python"
  },
  "selfdrive.locationd.test.test_locationd_scenarios.TestLocationdScenarios.setup_class": {
    "id": "selfdrive.locationd.test.test_locationd_scenarios.TestLocationdScenarios.setup_class",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "relative_path": "selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "depends_on": [],
    "start_line": 101,
    "end_line": 102,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_locationd_scenarios.TestLocationdScenarios.test_base": {
    "id": "selfdrive.locationd.test.test_locationd_scenarios.TestLocationdScenarios.test_base",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "relative_path": "selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "depends_on": [
      "selfdrive.locationd.test.test_locationd_scenarios.Scenario",
      "selfdrive.locationd.test.test_locationd_scenarios.run_scenarios"
    ],
    "start_line": 104,
    "end_line": 113,
    "has_docstring": true,
    "docstring": "\n    Test: unchanged log\n    Expected Result:\n      - yaw_rate: unchanged\n      - roll: unchanged\n    ",
    "language": "python"
  },
  "selfdrive.locationd.test.test_locationd_scenarios.TestLocationdScenarios.test_gyro_off": {
    "id": "selfdrive.locationd.test.test_locationd_scenarios.TestLocationdScenarios.test_gyro_off",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "relative_path": "selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "depends_on": [
      "selfdrive.locationd.test.test_locationd_scenarios.Scenario",
      "selfdrive.locationd.test.test_locationd_scenarios.run_scenarios"
    ],
    "start_line": 115,
    "end_line": 126,
    "has_docstring": true,
    "docstring": "\n    Test: no gyroscope message for the entire segment\n    Expected Result:\n      - yaw_rate: 0\n      - roll: 0\n      - sensorsOK: False\n    ",
    "language": "python"
  },
  "selfdrive.locationd.test.test_locationd_scenarios.TestLocationdScenarios.test_gyro_spike": {
    "id": "selfdrive.locationd.test.test_locationd_scenarios.TestLocationdScenarios.test_gyro_spike",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "relative_path": "selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "depends_on": [
      "selfdrive.locationd.test.test_locationd_scenarios.Scenario",
      "selfdrive.locationd.test.test_locationd_scenarios.run_scenarios"
    ],
    "start_line": 128,
    "end_line": 140,
    "has_docstring": true,
    "docstring": "\n    Test: a gyroscope spike in the middle of the segment\n    Expected Result:\n      - yaw_rate: unchanged\n      - roll: unchanged\n      - inputsOK: False for some time after the spike, True for the rest\n    ",
    "language": "python"
  },
  "selfdrive.locationd.test.test_locationd_scenarios.TestLocationdScenarios.test_consistent_gyro_spikes": {
    "id": "selfdrive.locationd.test.test_locationd_scenarios.TestLocationdScenarios.test_consistent_gyro_spikes",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "relative_path": "selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "depends_on": [
      "selfdrive.locationd.test.test_locationd_scenarios.Scenario",
      "selfdrive.locationd.test.test_locationd_scenarios.run_scenarios"
    ],
    "start_line": 142,
    "end_line": 149,
    "has_docstring": true,
    "docstring": "\n    Test: consistent timing spikes for N gyroscope messages in the middle of the segment\n    Expected Result: inputsOK becomes False after N of bad measurements\n    ",
    "language": "python"
  },
  "selfdrive.locationd.test.test_locationd_scenarios.TestLocationdScenarios.test_accel_off": {
    "id": "selfdrive.locationd.test.test_locationd_scenarios.TestLocationdScenarios.test_accel_off",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "relative_path": "selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "depends_on": [
      "selfdrive.locationd.test.test_locationd_scenarios.Scenario",
      "selfdrive.locationd.test.test_locationd_scenarios.run_scenarios"
    ],
    "start_line": 151,
    "end_line": 162,
    "has_docstring": true,
    "docstring": "\n    Test: no accelerometer message for the entire segment\n    Expected Result:\n      - yaw_rate: 0\n      - roll: 0\n      - sensorsOK: False\n    ",
    "language": "python"
  },
  "selfdrive.locationd.test.test_locationd_scenarios.TestLocationdScenarios.test_accel_spike": {
    "id": "selfdrive.locationd.test.test_locationd_scenarios.TestLocationdScenarios.test_accel_spike",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "relative_path": "selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "depends_on": [
      "selfdrive.locationd.test.test_locationd_scenarios.Scenario",
      "selfdrive.locationd.test.test_locationd_scenarios.run_scenarios"
    ],
    "start_line": 164,
    "end_line": 172,
    "has_docstring": true,
    "docstring": "\n    ToDo:\n    Test: an accelerometer spike in the middle of the segment\n    Expected Result: Right now, the kalman filter is not robust to small spikes like it is to gyroscope spikes.\n    ",
    "language": "python"
  },
  "selfdrive.locationd.test.test_locationd_scenarios.TestLocationdScenarios.test_single_timing_spike": {
    "id": "selfdrive.locationd.test.test_locationd_scenarios.TestLocationdScenarios.test_single_timing_spike",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "relative_path": "selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "depends_on": [
      "selfdrive.locationd.test.test_locationd_scenarios.Scenario",
      "selfdrive.locationd.test.test_locationd_scenarios.run_scenarios"
    ],
    "start_line": 174,
    "end_line": 181,
    "has_docstring": true,
    "docstring": "\n    Test: timing of 150ms off for the single accelerometer message in the middle of the segment\n    Expected Result: the message is ignored, and inputsOK is False for that time\n    ",
    "language": "python"
  },
  "selfdrive.locationd.test.test_locationd_scenarios.TestLocationdScenarios.test_consistent_timing_spikes": {
    "id": "selfdrive.locationd.test.test_locationd_scenarios.TestLocationdScenarios.test_consistent_timing_spikes",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "relative_path": "selfdrive\\locationd\\test\\test_locationd_scenarios.py",
    "depends_on": [
      "selfdrive.locationd.test.test_locationd_scenarios.Scenario",
      "selfdrive.locationd.test.test_locationd_scenarios.run_scenarios"
    ],
    "start_line": 183,
    "end_line": 190,
    "has_docstring": true,
    "docstring": "\n    Test: consistent timing spikes for N accelerometer messages in the middle of the segment\n    Expected Result: inputsOK becomes False after N of bad measurements\n    ",
    "language": "python"
  },
  "selfdrive.locationd.test.test_paramsd.get_random_live_parameters": {
    "id": "selfdrive.locationd.test.test_paramsd.get_random_live_parameters",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_paramsd.py",
    "relative_path": "selfdrive\\locationd\\test\\test_paramsd.py",
    "depends_on": [],
    "start_line": 14,
    "end_line": 20,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_paramsd.TestParamsd": {
    "id": "selfdrive.locationd.test.test_paramsd.TestParamsd",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_paramsd.py",
    "relative_path": "selfdrive\\locationd\\test\\test_paramsd.py",
    "depends_on": [
      "selfdrive.locationd.test.test_paramsd.get_random_live_parameters"
    ],
    "start_line": 23,
    "end_line": 68,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_paramsd.TestParamsd.test_read_saved_params": {
    "id": "selfdrive.locationd.test.test_paramsd.TestParamsd.test_read_saved_params",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_paramsd.py",
    "relative_path": "selfdrive\\locationd\\test\\test_paramsd.py",
    "depends_on": [
      "selfdrive.locationd.test.test_paramsd.get_random_live_parameters"
    ],
    "start_line": 24,
    "end_line": 40,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_paramsd.TestParamsd.test_read_saved_params_old_format": {
    "id": "selfdrive.locationd.test.test_paramsd.TestParamsd.test_read_saved_params_old_format",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_paramsd.py",
    "relative_path": "selfdrive\\locationd\\test\\test_paramsd.py",
    "depends_on": [
      "selfdrive.locationd.test.test_paramsd.get_random_live_parameters"
    ],
    "start_line": 43,
    "end_line": 59,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.locationd.test.test_paramsd.TestParamsd.test_read_saved_params_corrupted_old_format": {
    "id": "selfdrive.locationd.test.test_paramsd.TestParamsd.test_read_saved_params_corrupted_old_format",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\locationd\\test\\test_paramsd.py",
    "relative_path": "selfdrive\\locationd\\test\\test_paramsd.py",
    "depends_on": [],
    "start_line": 61,
    "end_line": 68,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.constants.index_function": {
    "id": "selfdrive.modeld.constants.index_function",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\constants.py",
    "relative_path": "selfdrive\\modeld\\constants.py",
    "depends_on": [],
    "start_line": 3,
    "end_line": 4,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.constants.ModelConstants": {
    "id": "selfdrive.modeld.constants.ModelConstants",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\constants.py",
    "relative_path": "selfdrive\\modeld\\constants.py",
    "depends_on": [
      "selfdrive.modeld.constants.index_function"
    ],
    "start_line": 6,
    "end_line": 67,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.constants.Plan": {
    "id": "selfdrive.modeld.constants.Plan",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\constants.py",
    "relative_path": "selfdrive\\modeld\\constants.py",
    "depends_on": [],
    "start_line": 70,
    "end_line": 75,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.constants.Meta": {
    "id": "selfdrive.modeld.constants.Meta",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\constants.py",
    "relative_path": "selfdrive\\modeld\\constants.py",
    "depends_on": [],
    "start_line": 77,
    "end_line": 90,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.dmonitoringmodeld.DriverStateResult": {
    "id": "selfdrive.modeld.dmonitoringmodeld.DriverStateResult",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\dmonitoringmodeld.py",
    "relative_path": "selfdrive\\modeld\\dmonitoringmodeld.py",
    "depends_on": [],
    "start_line": 40,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.dmonitoringmodeld.DMonitoringModelResult": {
    "id": "selfdrive.modeld.dmonitoringmodeld.DMonitoringModelResult",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\dmonitoringmodeld.py",
    "relative_path": "selfdrive\\modeld\\dmonitoringmodeld.py",
    "depends_on": [
      "selfdrive.modeld.dmonitoringmodeld.DriverStateResult"
    ],
    "start_line": 59,
    "end_line": 65,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.dmonitoringmodeld.ModelState": {
    "id": "selfdrive.modeld.dmonitoringmodeld.ModelState",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\dmonitoringmodeld.py",
    "relative_path": "selfdrive\\modeld\\dmonitoringmodeld.py",
    "depends_on": [
      "selfdrive.modeld.dmonitoringmodeld.DMonitoringModelResult"
    ],
    "start_line": 68,
    "end_line": 101,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.dmonitoringmodeld.ModelState.__init__": {
    "id": "selfdrive.modeld.dmonitoringmodeld.ModelState.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\dmonitoringmodeld.py",
    "relative_path": "selfdrive\\modeld\\dmonitoringmodeld.py",
    "depends_on": [
      "selfdrive.modeld.dmonitoringmodeld.DMonitoringModelResult"
    ],
    "start_line": 72,
    "end_line": 82,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.dmonitoringmodeld.ModelState.run": {
    "id": "selfdrive.modeld.dmonitoringmodeld.ModelState.run",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\dmonitoringmodeld.py",
    "relative_path": "selfdrive\\modeld\\dmonitoringmodeld.py",
    "depends_on": [],
    "start_line": 84,
    "end_line": 101,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.dmonitoringmodeld.fill_driver_state": {
    "id": "selfdrive.modeld.dmonitoringmodeld.fill_driver_state",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\dmonitoringmodeld.py",
    "relative_path": "selfdrive\\modeld\\dmonitoringmodeld.py",
    "depends_on": [
      "selfdrive.modeld.dmonitoringmodeld.DriverStateResult"
    ],
    "start_line": 104,
    "end_line": 117,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.dmonitoringmodeld.get_driverstate_packet": {
    "id": "selfdrive.modeld.dmonitoringmodeld.get_driverstate_packet",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\dmonitoringmodeld.py",
    "relative_path": "selfdrive\\modeld\\dmonitoringmodeld.py",
    "depends_on": [
      "selfdrive.modeld.dmonitoringmodeld.fill_driver_state",
      "selfdrive.modeld.dmonitoringmodeld.DMonitoringModelResult"
    ],
    "start_line": 120,
    "end_line": 132,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.dmonitoringmodeld.main": {
    "id": "selfdrive.modeld.dmonitoringmodeld.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\dmonitoringmodeld.py",
    "relative_path": "selfdrive\\modeld\\dmonitoringmodeld.py",
    "depends_on": [
      "selfdrive.modeld.dmonitoringmodeld.ModelState",
      "selfdrive.modeld.dmonitoringmodeld.get_driverstate_packet"
    ],
    "start_line": 135,
    "end_line": 179,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.fill_model_msg.PublishState": {
    "id": "selfdrive.modeld.fill_model_msg.PublishState",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\fill_model_msg.py",
    "relative_path": "selfdrive\\modeld\\fill_model_msg.py",
    "depends_on": [],
    "start_line": 12,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.fill_model_msg.PublishState.__init__": {
    "id": "selfdrive.modeld.fill_model_msg.PublishState.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\fill_model_msg.py",
    "relative_path": "selfdrive\\modeld\\fill_model_msg.py",
    "depends_on": [],
    "start_line": 13,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.fill_model_msg.fill_xyzt": {
    "id": "selfdrive.modeld.fill_model_msg.fill_xyzt",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\fill_model_msg.py",
    "relative_path": "selfdrive\\modeld\\fill_model_msg.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.fill_model_msg.fill_xyvat": {
    "id": "selfdrive.modeld.fill_model_msg.fill_xyvat",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\fill_model_msg.py",
    "relative_path": "selfdrive\\modeld\\fill_model_msg.py",
    "depends_on": [],
    "start_line": 30,
    "end_line": 43,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.fill_model_msg.fill_xyz_poly": {
    "id": "selfdrive.modeld.fill_model_msg.fill_xyz_poly",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\fill_model_msg.py",
    "relative_path": "selfdrive\\modeld\\fill_model_msg.py",
    "depends_on": [],
    "start_line": 45,
    "end_line": 50,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.fill_model_msg.fill_lane_line_meta": {
    "id": "selfdrive.modeld.fill_model_msg.fill_lane_line_meta",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\fill_model_msg.py",
    "relative_path": "selfdrive\\modeld\\fill_model_msg.py",
    "depends_on": [],
    "start_line": 52,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.fill_model_msg.fill_model_msg": {
    "id": "selfdrive.modeld.fill_model_msg.fill_model_msg",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\fill_model_msg.py",
    "relative_path": "selfdrive\\modeld\\fill_model_msg.py",
    "depends_on": [
      "selfdrive.modeld.fill_model_msg.fill_xyvat",
      "selfdrive.modeld.fill_model_msg.fill_xyz_poly",
      "selfdrive.modeld.fill_model_msg.fill_lane_line_meta",
      "selfdrive.modeld.fill_model_msg.PublishState",
      "selfdrive.modeld.fill_model_msg.fill_xyzt"
    ],
    "start_line": 58,
    "end_line": 183,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.fill_model_msg.fill_pose_msg": {
    "id": "selfdrive.modeld.fill_model_msg.fill_pose_msg",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\fill_model_msg.py",
    "relative_path": "selfdrive\\modeld\\fill_model_msg.py",
    "depends_on": [],
    "start_line": 185,
    "end_line": 200,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.get_model_metadata.get_name_and_shape": {
    "id": "selfdrive.modeld.get_model_metadata.get_name_and_shape",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\get_model_metadata.py",
    "relative_path": "selfdrive\\modeld\\get_model_metadata.py",
    "depends_on": [],
    "start_line": 9,
    "end_line": 12,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.get_model_metadata.get_metadata_value_by_name": {
    "id": "selfdrive.modeld.get_model_metadata.get_metadata_value_by_name",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\get_model_metadata.py",
    "relative_path": "selfdrive\\modeld\\get_model_metadata.py",
    "depends_on": [],
    "start_line": 14,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.modeld.get_action_from_model": {
    "id": "selfdrive.modeld.modeld.get_action_from_model",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\modeld.py",
    "relative_path": "selfdrive\\modeld\\modeld.py",
    "depends_on": [],
    "start_line": 53,
    "end_line": 70,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.modeld.FrameMeta": {
    "id": "selfdrive.modeld.modeld.FrameMeta",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\modeld.py",
    "relative_path": "selfdrive\\modeld\\modeld.py",
    "depends_on": [],
    "start_line": 72,
    "end_line": 79,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.modeld.FrameMeta.__init__": {
    "id": "selfdrive.modeld.modeld.FrameMeta.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\modeld.py",
    "relative_path": "selfdrive\\modeld\\modeld.py",
    "depends_on": [],
    "start_line": 77,
    "end_line": 79,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.modeld.ModelState": {
    "id": "selfdrive.modeld.modeld.ModelState",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\modeld.py",
    "relative_path": "selfdrive\\modeld\\modeld.py",
    "depends_on": [],
    "start_line": 81,
    "end_line": 185,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.modeld.ModelState.__init__": {
    "id": "selfdrive.modeld.modeld.ModelState.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\modeld.py",
    "relative_path": "selfdrive\\modeld\\modeld.py",
    "depends_on": [],
    "start_line": 87,
    "end_line": 131,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.modeld.ModelState.slice_outputs": {
    "id": "selfdrive.modeld.modeld.ModelState.slice_outputs",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\modeld.py",
    "relative_path": "selfdrive\\modeld\\modeld.py",
    "depends_on": [],
    "start_line": 133,
    "end_line": 135,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.modeld.ModelState.run": {
    "id": "selfdrive.modeld.modeld.ModelState.run",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\modeld.py",
    "relative_path": "selfdrive\\modeld\\modeld.py",
    "depends_on": [],
    "start_line": 137,
    "end_line": 185,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.modeld.main": {
    "id": "selfdrive.modeld.modeld.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\modeld.py",
    "relative_path": "selfdrive\\modeld\\modeld.py",
    "depends_on": [
      "selfdrive.modeld.modeld.ModelState",
      "selfdrive.modeld.modeld.FrameMeta",
      "selfdrive.modeld.modeld.get_action_from_model"
    ],
    "start_line": 188,
    "end_line": 365,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.parse_model_outputs.safe_exp": {
    "id": "selfdrive.modeld.parse_model_outputs.safe_exp",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\parse_model_outputs.py",
    "relative_path": "selfdrive\\modeld\\parse_model_outputs.py",
    "depends_on": [],
    "start_line": 4,
    "end_line": 6,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.parse_model_outputs.sigmoid": {
    "id": "selfdrive.modeld.parse_model_outputs.sigmoid",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\parse_model_outputs.py",
    "relative_path": "selfdrive\\modeld\\parse_model_outputs.py",
    "depends_on": [
      "selfdrive.modeld.parse_model_outputs.safe_exp"
    ],
    "start_line": 8,
    "end_line": 9,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.parse_model_outputs.softmax": {
    "id": "selfdrive.modeld.parse_model_outputs.softmax",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\parse_model_outputs.py",
    "relative_path": "selfdrive\\modeld\\parse_model_outputs.py",
    "depends_on": [
      "selfdrive.modeld.parse_model_outputs.safe_exp"
    ],
    "start_line": 11,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.parse_model_outputs.Parser": {
    "id": "selfdrive.modeld.parse_model_outputs.Parser",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\parse_model_outputs.py",
    "relative_path": "selfdrive\\modeld\\parse_model_outputs.py",
    "depends_on": [
      "selfdrive.modeld.parse_model_outputs.softmax",
      "selfdrive.modeld.parse_model_outputs.sigmoid",
      "selfdrive.modeld.parse_model_outputs.safe_exp"
    ],
    "start_line": 20,
    "end_line": 115,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.parse_model_outputs.Parser.__init__": {
    "id": "selfdrive.modeld.parse_model_outputs.Parser.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\parse_model_outputs.py",
    "relative_path": "selfdrive\\modeld\\parse_model_outputs.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.parse_model_outputs.Parser.check_missing": {
    "id": "selfdrive.modeld.parse_model_outputs.Parser.check_missing",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\parse_model_outputs.py",
    "relative_path": "selfdrive\\modeld\\parse_model_outputs.py",
    "depends_on": [],
    "start_line": 24,
    "end_line": 27,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.parse_model_outputs.Parser.parse_categorical_crossentropy": {
    "id": "selfdrive.modeld.parse_model_outputs.Parser.parse_categorical_crossentropy",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\parse_model_outputs.py",
    "relative_path": "selfdrive\\modeld\\parse_model_outputs.py",
    "depends_on": [
      "selfdrive.modeld.parse_model_outputs.softmax"
    ],
    "start_line": 29,
    "end_line": 35,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.parse_model_outputs.Parser.parse_binary_crossentropy": {
    "id": "selfdrive.modeld.parse_model_outputs.Parser.parse_binary_crossentropy",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\parse_model_outputs.py",
    "relative_path": "selfdrive\\modeld\\parse_model_outputs.py",
    "depends_on": [
      "selfdrive.modeld.parse_model_outputs.sigmoid"
    ],
    "start_line": 37,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.parse_model_outputs.Parser.parse_mdn": {
    "id": "selfdrive.modeld.parse_model_outputs.Parser.parse_mdn",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\parse_model_outputs.py",
    "relative_path": "selfdrive\\modeld\\parse_model_outputs.py",
    "depends_on": [
      "selfdrive.modeld.parse_model_outputs.softmax",
      "selfdrive.modeld.parse_model_outputs.safe_exp"
    ],
    "start_line": 43,
    "end_line": 85,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.parse_model_outputs.Parser.parse_vision_outputs": {
    "id": "selfdrive.modeld.parse_model_outputs.Parser.parse_vision_outputs",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\parse_model_outputs.py",
    "relative_path": "selfdrive\\modeld\\parse_model_outputs.py",
    "depends_on": [],
    "start_line": 87,
    "end_line": 93,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.parse_model_outputs.Parser.parse_policy_outputs": {
    "id": "selfdrive.modeld.parse_model_outputs.Parser.parse_policy_outputs",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\parse_model_outputs.py",
    "relative_path": "selfdrive\\modeld\\parse_model_outputs.py",
    "depends_on": [],
    "start_line": 95,
    "end_line": 110,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.parse_model_outputs.Parser.parse_outputs": {
    "id": "selfdrive.modeld.parse_model_outputs.Parser.parse_outputs",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\parse_model_outputs.py",
    "relative_path": "selfdrive\\modeld\\parse_model_outputs.py",
    "depends_on": [],
    "start_line": 112,
    "end_line": 115,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.models.commonmodel.ModelFrame": {
    "id": "selfdrive.modeld.models.commonmodel.ModelFrame",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\models\\commonmodel.h",
    "relative_path": "selfdrive\\modeld\\models\\commonmodel.h",
    "depends_on": [],
    "start_line": 20,
    "end_line": 63,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ModelFrame {\npublic:\n  ModelFrame(cl_device_id device_id, cl_context context) {\n    q = CL_CHECK_ERR(clCreateCommandQueue(context, device_id, 0, &err));\n  }\n  virtual ~ModelFrame() {}\n  virtual cl_mem* prepare(cl_mem yuv_cl, int frame_width, int frame_height, int frame_stride, int frame_uv_offset, const mat3& projection) { return NULL; }\n  uint8_t* buffer_from_cl(cl_mem *in_frames, int buffer_size) {\n    CL_CHECK(clEnqueueReadBuffer(q, *in_frames, CL_TRUE, 0, buffer_size, input_frames.get(), 0, nullptr, nullptr));\n    clFinish(q);\n    return &input_frames[0];\n  }\n\n  int MODEL_WIDTH;\n  int MODEL_HEIGHT;\n  int MODEL_FRAME_SIZE;\n  int buf_size;\n\nprotected:\n  cl_mem y_cl, u_cl, v_cl;\n  Transform transform;\n  cl_command_queue q;\n  std::unique_ptr<uint8_t[]> input_frames;\n\n  void init_transform(cl_device_id device_id, cl_context context, int model_width, int model_height) {\n    y_cl = CL_CHECK_ERR(clCreateBuffer(context, CL_MEM_READ_WRITE, model_width * model_height, NULL, &err));\n    u_cl = CL_CHECK_ERR(clCreateBuffer(context, CL_MEM_READ_WRITE, (model_width / 2) * (model_height / 2), NULL, &err));\n    v_cl = CL_CHECK_ERR(clCreateBuffer(context, CL_MEM_READ_WRITE, (model_width / 2) * (model_height / 2), NULL, &err));\n    transform_init(&transform, context, device_id);\n  }\n\n  void deinit_transform() {\n    transform_destroy(&transform);\n    CL_CHECK(clReleaseMemObject(v_cl));\n    CL_CHECK(clReleaseMemObject(u_cl));\n    CL_CHECK(clReleaseMemObject(y_cl));\n  }\n\n  void run_transform(cl_mem yuv_cl, int model_width, int model_height, int frame_width, int frame_height, int frame_stride, int frame_uv_offset, const mat3& projection) {\n    transform_queue(&transform, q,\n        yuv_cl, frame_width, frame_height, frame_stride, frame_uv_offset,\n        y_cl, u_cl, v_cl, model_width, model_height, projection);\n  }\n};\n"
  },
  "selfdrive.modeld.models.commonmodel.ModelFrame.buffer_from_cl": {
    "id": "selfdrive.modeld.models.commonmodel.ModelFrame.buffer_from_cl",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\models\\commonmodel.h",
    "relative_path": "selfdrive\\modeld\\models\\commonmodel.h",
    "depends_on": [],
    "start_line": 27,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  uint8_t* buffer_from_cl(cl_mem *in_frames, int buffer_size) {\n    CL_CHECK(clEnqueueReadBuffer(q, *in_frames, CL_TRUE, 0, buffer_size, input_frames.get(), 0, nullptr, nullptr));\n    clFinish(q);\n    return &input_frames[0];\n  }\n"
  },
  "selfdrive.modeld.models.commonmodel.ModelFrame.init_transform": {
    "id": "selfdrive.modeld.models.commonmodel.ModelFrame.init_transform",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\models\\commonmodel.h",
    "relative_path": "selfdrive\\modeld\\models\\commonmodel.h",
    "depends_on": [],
    "start_line": 44,
    "end_line": 49,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  void init_transform(cl_device_id device_id, cl_context context, int model_width, int model_height) {\n    y_cl = CL_CHECK_ERR(clCreateBuffer(context, CL_MEM_READ_WRITE, model_width * model_height, NULL, &err));\n    u_cl = CL_CHECK_ERR(clCreateBuffer(context, CL_MEM_READ_WRITE, (model_width / 2) * (model_height / 2), NULL, &err));\n    v_cl = CL_CHECK_ERR(clCreateBuffer(context, CL_MEM_READ_WRITE, (model_width / 2) * (model_height / 2), NULL, &err));\n    transform_init(&transform, context, device_id);\n  }\n"
  },
  "selfdrive.modeld.models.commonmodel.ModelFrame.deinit_transform": {
    "id": "selfdrive.modeld.models.commonmodel.ModelFrame.deinit_transform",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\models\\commonmodel.h",
    "relative_path": "selfdrive\\modeld\\models\\commonmodel.h",
    "depends_on": [],
    "start_line": 51,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  void deinit_transform() {\n    transform_destroy(&transform);\n    CL_CHECK(clReleaseMemObject(v_cl));\n    CL_CHECK(clReleaseMemObject(u_cl));\n    CL_CHECK(clReleaseMemObject(y_cl));\n  }\n"
  },
  "selfdrive.modeld.models.commonmodel.ModelFrame.run_transform": {
    "id": "selfdrive.modeld.models.commonmodel.ModelFrame.run_transform",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\models\\commonmodel.h",
    "relative_path": "selfdrive\\modeld\\models\\commonmodel.h",
    "depends_on": [],
    "start_line": 58,
    "end_line": 62,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  void run_transform(cl_mem yuv_cl, int model_width, int model_height, int frame_width, int frame_height, int frame_stride, int frame_uv_offset, const mat3& projection) {\n    transform_queue(&transform, q,\n        yuv_cl, frame_width, frame_height, frame_stride, frame_uv_offset,\n        y_cl, u_cl, v_cl, model_width, model_height, projection);\n  }\n"
  },
  "selfdrive.modeld.models.commonmodel.DrivingModelFrame": {
    "id": "selfdrive.modeld.models.commonmodel.DrivingModelFrame",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\models\\commonmodel.h",
    "relative_path": "selfdrive\\modeld\\models\\commonmodel.h",
    "depends_on": [],
    "start_line": 65,
    "end_line": 82,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class DrivingModelFrame : public ModelFrame {\npublic:\n  DrivingModelFrame(cl_device_id device_id, cl_context context, int _temporal_skip);\n  ~DrivingModelFrame();\n  cl_mem* prepare(cl_mem yuv_cl, int frame_width, int frame_height, int frame_stride, int frame_uv_offset, const mat3& projection);\n\n  const int MODEL_WIDTH = 512;\n  const int MODEL_HEIGHT = 256;\n  const int MODEL_FRAME_SIZE = MODEL_WIDTH * MODEL_HEIGHT * 3 / 2;\n  const int buf_size = MODEL_FRAME_SIZE * 2; // 2 frames are temporal_skip frames apart\n  const size_t frame_size_bytes = MODEL_FRAME_SIZE * sizeof(uint8_t);\n\nprivate:\n  LoadYUVState loadyuv;\n  cl_mem img_buffer_20hz_cl, last_img_cl, input_frames_cl;\n  cl_buffer_region region;\n  int temporal_skip;\n};\n"
  },
  "selfdrive.modeld.models.commonmodel.MonitoringModelFrame": {
    "id": "selfdrive.modeld.models.commonmodel.MonitoringModelFrame",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\models\\commonmodel.h",
    "relative_path": "selfdrive\\modeld\\models\\commonmodel.h",
    "depends_on": [],
    "start_line": 84,
    "end_line": 97,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class MonitoringModelFrame : public ModelFrame {\npublic:\n  MonitoringModelFrame(cl_device_id device_id, cl_context context);\n  ~MonitoringModelFrame();\n  cl_mem* prepare(cl_mem yuv_cl, int frame_width, int frame_height, int frame_stride, int frame_uv_offset, const mat3& projection);\n\n  const int MODEL_WIDTH = 1440;\n  const int MODEL_HEIGHT = 960;\n  const int MODEL_FRAME_SIZE = MODEL_WIDTH * MODEL_HEIGHT;\n  const int buf_size = MODEL_FRAME_SIZE;\n\nprivate:\n  cl_mem input_frame_cl;\n};\n"
  },
  "selfdrive.modeld.runners.tinygrad_helpers.qcom_tensor_from_opencl_address": {
    "id": "selfdrive.modeld.runners.tinygrad_helpers.qcom_tensor_from_opencl_address",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\runners\\tinygrad_helpers.py",
    "relative_path": "selfdrive\\modeld\\runners\\tinygrad_helpers.py",
    "depends_on": [],
    "start_line": 5,
    "end_line": 8,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.tests.test_modeld.TestModeld": {
    "id": "selfdrive.modeld.tests.test_modeld.TestModeld",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\tests\\test_modeld.py",
    "relative_path": "selfdrive\\modeld\\tests\\test_modeld.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 102,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.tests.test_modeld.TestModeld.setup_method": {
    "id": "selfdrive.modeld.tests.test_modeld.TestModeld.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\tests\\test_modeld.py",
    "relative_path": "selfdrive\\modeld\\tests\\test_modeld.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.tests.test_modeld.TestModeld.teardown_method": {
    "id": "selfdrive.modeld.tests.test_modeld.TestModeld.teardown_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\tests\\test_modeld.py",
    "relative_path": "selfdrive\\modeld\\tests\\test_modeld.py",
    "depends_on": [],
    "start_line": 34,
    "end_line": 36,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.tests.test_modeld.TestModeld._send_frames": {
    "id": "selfdrive.modeld.tests.test_modeld.TestModeld._send_frames",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\tests\\test_modeld.py",
    "relative_path": "selfdrive\\modeld\\tests\\test_modeld.py",
    "depends_on": [],
    "start_line": 38,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.tests.test_modeld.TestModeld._wait": {
    "id": "selfdrive.modeld.tests.test_modeld.TestModeld._wait",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\tests\\test_modeld.py",
    "relative_path": "selfdrive\\modeld\\tests\\test_modeld.py",
    "depends_on": [],
    "start_line": 56,
    "end_line": 59,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.tests.test_modeld.TestModeld.test_modeld": {
    "id": "selfdrive.modeld.tests.test_modeld.TestModeld.test_modeld",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\tests\\test_modeld.py",
    "relative_path": "selfdrive\\modeld\\tests\\test_modeld.py",
    "depends_on": [],
    "start_line": 61,
    "end_line": 75,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.modeld.tests.test_modeld.TestModeld.test_dropped_frames": {
    "id": "selfdrive.modeld.tests.test_modeld.TestModeld.test_dropped_frames",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\tests\\test_modeld.py",
    "relative_path": "selfdrive\\modeld\\tests\\test_modeld.py",
    "depends_on": [],
    "start_line": 77,
    "end_line": 102,
    "has_docstring": true,
    "docstring": "\n      modeld should only run on consecutive road frames\n    ",
    "language": "python"
  },
  "selfdrive.modeld.transforms.loadyuv.loadyuv_init": {
    "id": "selfdrive.modeld.transforms.loadyuv.loadyuv_init",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\transforms\\loadyuv.cc",
    "relative_path": "selfdrive\\modeld\\transforms\\loadyuv.cc",
    "depends_on": [],
    "start_line": 7,
    "end_line": 26,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void loadyuv_init(LoadYUVState* s, cl_context ctx, cl_device_id device_id, int width, int height) {\n  memset(s, 0, sizeof(*s));\n\n  s->width = width;\n  s->height = height;\n\n  char args[1024];\n  snprintf(args, sizeof(args),\n           \"-cl-fast-relaxed-math -cl-denorms-are-zero \"\n           \"-DTRANSFORMED_WIDTH=%d -DTRANSFORMED_HEIGHT=%d\",\n           width, height);\n  cl_program prg = cl_program_from_file(ctx, device_id, LOADYUV_PATH, args);\n\n  s->loadys_krnl = CL_CHECK_ERR(clCreateKernel(prg, \"loadys\", &err));\n  s->loaduv_krnl = CL_CHECK_ERR(clCreateKernel(prg, \"loaduv\", &err));\n  s->copy_krnl = CL_CHECK_ERR(clCreateKernel(prg, \"copy\", &err));\n\n  // done with this\n  CL_CHECK(clReleaseProgram(prg));\n}\n"
  },
  "selfdrive.modeld.transforms.loadyuv.loadyuv_destroy": {
    "id": "selfdrive.modeld.transforms.loadyuv.loadyuv_destroy",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\transforms\\loadyuv.cc",
    "relative_path": "selfdrive\\modeld\\transforms\\loadyuv.cc",
    "depends_on": [],
    "start_line": 28,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void loadyuv_destroy(LoadYUVState* s) {\n  CL_CHECK(clReleaseKernel(s->loadys_krnl));\n  CL_CHECK(clReleaseKernel(s->loaduv_krnl));\n  CL_CHECK(clReleaseKernel(s->copy_krnl));\n}\n"
  },
  "selfdrive.modeld.transforms.loadyuv.loadyuv_queue": {
    "id": "selfdrive.modeld.transforms.loadyuv.loadyuv_queue",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\transforms\\loadyuv.cc",
    "relative_path": "selfdrive\\modeld\\transforms\\loadyuv.cc",
    "depends_on": [],
    "start_line": 34,
    "end_line": 65,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void loadyuv_queue(LoadYUVState* s, cl_command_queue q,\n                   cl_mem y_cl, cl_mem u_cl, cl_mem v_cl,\n                   cl_mem out_cl) {\n  cl_int global_out_off = 0;\n\n  CL_CHECK(clSetKernelArg(s->loadys_krnl, 0, sizeof(cl_mem), &y_cl));\n  CL_CHECK(clSetKernelArg(s->loadys_krnl, 1, sizeof(cl_mem), &out_cl));\n  CL_CHECK(clSetKernelArg(s->loadys_krnl, 2, sizeof(cl_int), &global_out_off));\n\n  const size_t loadys_work_size = (s->width*s->height)/8;\n  CL_CHECK(clEnqueueNDRangeKernel(q, s->loadys_krnl, 1, NULL,\n                               &loadys_work_size, NULL, 0, 0, NULL));\n\n  const size_t loaduv_work_size = ((s->width/2)*(s->height/2))/8;\n  global_out_off += (s->width*s->height);\n\n  CL_CHECK(clSetKernelArg(s->loaduv_krnl, 0, sizeof(cl_mem), &u_cl));\n  CL_CHECK(clSetKernelArg(s->loaduv_krnl, 1, sizeof(cl_mem), &out_cl));\n  CL_CHECK(clSetKernelArg(s->loaduv_krnl, 2, sizeof(cl_int), &global_out_off));\n\n  CL_CHECK(clEnqueueNDRangeKernel(q, s->loaduv_krnl, 1, NULL,\n                               &loaduv_work_size, NULL, 0, 0, NULL));\n\n  global_out_off += (s->width/2)*(s->height/2);\n\n  CL_CHECK(clSetKernelArg(s->loaduv_krnl, 0, sizeof(cl_mem), &v_cl));\n  CL_CHECK(clSetKernelArg(s->loaduv_krnl, 1, sizeof(cl_mem), &out_cl));\n  CL_CHECK(clSetKernelArg(s->loaduv_krnl, 2, sizeof(cl_int), &global_out_off));\n\n  CL_CHECK(clEnqueueNDRangeKernel(q, s->loaduv_krnl, 1, NULL,\n                               &loaduv_work_size, NULL, 0, 0, NULL));\n}\n"
  },
  "selfdrive.modeld.transforms.loadyuv.copy_queue": {
    "id": "selfdrive.modeld.transforms.loadyuv.copy_queue",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\transforms\\loadyuv.cc",
    "relative_path": "selfdrive\\modeld\\transforms\\loadyuv.cc",
    "depends_on": [],
    "start_line": 67,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void copy_queue(LoadYUVState* s, cl_command_queue q, cl_mem src, cl_mem dst,\n                 size_t src_offset, size_t dst_offset, size_t size) {\n  CL_CHECK(clSetKernelArg(s->copy_krnl, 0, sizeof(cl_mem), &src));\n  CL_CHECK(clSetKernelArg(s->copy_krnl, 1, sizeof(cl_mem), &dst));\n  CL_CHECK(clSetKernelArg(s->copy_krnl, 2, sizeof(cl_int), &src_offset));\n  CL_CHECK(clSetKernelArg(s->copy_krnl, 3, sizeof(cl_int), &dst_offset));\n  const size_t copy_work_size = size/8;\n  CL_CHECK(clEnqueueNDRangeKernel(q, s->copy_krnl, 1, NULL,\n                              &copy_work_size, NULL, 0, 0, NULL));\n}"
  },
  "selfdrive.modeld.transforms.transform.transform_init": {
    "id": "selfdrive.modeld.transforms.transform.transform_init",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\transforms\\transform.cc",
    "relative_path": "selfdrive\\modeld\\transforms\\transform.cc",
    "depends_on": [],
    "start_line": 8,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void transform_init(Transform* s, cl_context ctx, cl_device_id device_id) {\n  memset(s, 0, sizeof(*s));\n\n  cl_program prg = cl_program_from_file(ctx, device_id, TRANSFORM_PATH, \"\");\n  s->krnl = CL_CHECK_ERR(clCreateKernel(prg, \"warpPerspective\", &err));\n  // done with this\n  CL_CHECK(clReleaseProgram(prg));\n\n  s->m_y_cl = CL_CHECK_ERR(clCreateBuffer(ctx, CL_MEM_READ_WRITE, 3*3*sizeof(float), NULL, &err));\n  s->m_uv_cl = CL_CHECK_ERR(clCreateBuffer(ctx, CL_MEM_READ_WRITE, 3*3*sizeof(float), NULL, &err));\n}\n"
  },
  "selfdrive.modeld.transforms.transform.transform_destroy": {
    "id": "selfdrive.modeld.transforms.transform.transform_destroy",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\transforms\\transform.cc",
    "relative_path": "selfdrive\\modeld\\transforms\\transform.cc",
    "depends_on": [],
    "start_line": 20,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void transform_destroy(Transform* s) {\n  CL_CHECK(clReleaseMemObject(s->m_y_cl));\n  CL_CHECK(clReleaseMemObject(s->m_uv_cl));\n  CL_CHECK(clReleaseKernel(s->krnl));\n}\n"
  },
  "selfdrive.modeld.transforms.transform.transform_queue": {
    "id": "selfdrive.modeld.transforms.transform.transform_queue",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\modeld\\transforms\\transform.cc",
    "relative_path": "selfdrive\\modeld\\transforms\\transform.cc",
    "depends_on": [],
    "start_line": 26,
    "end_line": 97,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void transform_queue(Transform* s,\n                     cl_command_queue q,\n                     cl_mem in_yuv, int in_width, int in_height, int in_stride, int in_uv_offset,\n                     cl_mem out_y, cl_mem out_u, cl_mem out_v,\n                     int out_width, int out_height,\n                     const mat3& projection) {\n  const int zero = 0;\n\n  // sampled using pixel center origin\n  // (because that's how fastcv and opencv does it)\n\n  mat3 projection_y = projection;\n\n  // in and out uv is half the size of y.\n  mat3 projection_uv = transform_scale_buffer(projection, 0.5);\n\n  CL_CHECK(clEnqueueWriteBuffer(q, s->m_y_cl, CL_TRUE, 0, 3*3*sizeof(float), (void*)projection_y.v, 0, NULL, NULL));\n  CL_CHECK(clEnqueueWriteBuffer(q, s->m_uv_cl, CL_TRUE, 0, 3*3*sizeof(float), (void*)projection_uv.v, 0, NULL, NULL));\n\n  const int in_y_width = in_width;\n  const int in_y_height = in_height;\n  const int in_y_px_stride = 1;\n  const int in_uv_width = in_width/2;\n  const int in_uv_height = in_height/2;\n  const int in_uv_px_stride = 2;\n  const int in_u_offset = in_uv_offset;\n  const int in_v_offset = in_uv_offset + 1;\n\n  const int out_y_width = out_width;\n  const int out_y_height = out_height;\n  const int out_uv_width = out_width/2;\n  const int out_uv_height = out_height/2;\n\n  CL_CHECK(clSetKernelArg(s->krnl, 0, sizeof(cl_mem), &in_yuv));  // src\n  CL_CHECK(clSetKernelArg(s->krnl, 1, sizeof(cl_int), &in_stride));  // src_row_stride\n  CL_CHECK(clSetKernelArg(s->krnl, 2, sizeof(cl_int), &in_y_px_stride));  // src_px_stride\n  CL_CHECK(clSetKernelArg(s->krnl, 3, sizeof(cl_int), &zero));  // src_offset\n  CL_CHECK(clSetKernelArg(s->krnl, 4, sizeof(cl_int), &in_y_height));  // src_rows\n  CL_CHECK(clSetKernelArg(s->krnl, 5, sizeof(cl_int), &in_y_width));  // src_cols\n  CL_CHECK(clSetKernelArg(s->krnl, 6, sizeof(cl_mem), &out_y));  // dst\n  CL_CHECK(clSetKernelArg(s->krnl, 7, sizeof(cl_int), &out_y_width));  // dst_row_stride\n  CL_CHECK(clSetKernelArg(s->krnl, 8, sizeof(cl_int), &zero));  // dst_offset\n  CL_CHECK(clSetKernelArg(s->krnl, 9, sizeof(cl_int), &out_y_height));  // dst_rows\n  CL_CHECK(clSetKernelArg(s->krnl, 10, sizeof(cl_int), &out_y_width));  // dst_cols\n  CL_CHECK(clSetKernelArg(s->krnl, 11, sizeof(cl_mem), &s->m_y_cl));  // M\n\n  const size_t work_size_y[2] = {(size_t)out_y_width, (size_t)out_y_height};\n\n  CL_CHECK(clEnqueueNDRangeKernel(q, s->krnl, 2, NULL,\n                              (const size_t*)&work_size_y, NULL, 0, 0, NULL));\n\n  const size_t work_size_uv[2] = {(size_t)out_uv_width, (size_t)out_uv_height};\n\n  CL_CHECK(clSetKernelArg(s->krnl, 2, sizeof(cl_int), &in_uv_px_stride));  // src_px_stride\n  CL_CHECK(clSetKernelArg(s->krnl, 3, sizeof(cl_int), &in_u_offset));  // src_offset\n  CL_CHECK(clSetKernelArg(s->krnl, 4, sizeof(cl_int), &in_uv_height));  // src_rows\n  CL_CHECK(clSetKernelArg(s->krnl, 5, sizeof(cl_int), &in_uv_width));  // src_cols\n  CL_CHECK(clSetKernelArg(s->krnl, 6, sizeof(cl_mem), &out_u));  // dst\n  CL_CHECK(clSetKernelArg(s->krnl, 7, sizeof(cl_int), &out_uv_width));  // dst_row_stride\n  CL_CHECK(clSetKernelArg(s->krnl, 8, sizeof(cl_int), &zero));  // dst_offset\n  CL_CHECK(clSetKernelArg(s->krnl, 9, sizeof(cl_int), &out_uv_height));  // dst_rows\n  CL_CHECK(clSetKernelArg(s->krnl, 10, sizeof(cl_int), &out_uv_width));  // dst_cols\n  CL_CHECK(clSetKernelArg(s->krnl, 11, sizeof(cl_mem), &s->m_uv_cl));  // M\n\n  CL_CHECK(clEnqueueNDRangeKernel(q, s->krnl, 2, NULL,\n                              (const size_t*)&work_size_uv, NULL, 0, 0, NULL));\n  CL_CHECK(clSetKernelArg(s->krnl, 3, sizeof(cl_int), &in_v_offset));  // src_ofset\n  CL_CHECK(clSetKernelArg(s->krnl, 6, sizeof(cl_mem), &out_v));  // dst\n\n  CL_CHECK(clEnqueueNDRangeKernel(q, s->krnl, 2, NULL,\n                              (const size_t*)&work_size_uv, NULL, 0, 0, NULL));\n}\n"
  },
  "selfdrive.monitoring.dmonitoringd.dmonitoringd_thread": {
    "id": "selfdrive.monitoring.dmonitoringd.dmonitoringd_thread",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\dmonitoringd.py",
    "relative_path": "selfdrive\\monitoring\\dmonitoringd.py",
    "depends_on": [],
    "start_line": 8,
    "end_line": 40,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.dmonitoringd.main": {
    "id": "selfdrive.monitoring.dmonitoringd.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\dmonitoringd.py",
    "relative_path": "selfdrive\\monitoring\\dmonitoringd.py",
    "depends_on": [
      "selfdrive.monitoring.dmonitoringd.dmonitoringd_thread"
    ],
    "start_line": 42,
    "end_line": 43,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.helpers.DRIVER_MONITOR_SETTINGS": {
    "id": "selfdrive.monitoring.helpers.DRIVER_MONITOR_SETTINGS",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\helpers.py",
    "relative_path": "selfdrive\\monitoring\\helpers.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 74,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.helpers.DRIVER_MONITOR_SETTINGS.__init__": {
    "id": "selfdrive.monitoring.helpers.DRIVER_MONITOR_SETTINGS.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\helpers.py",
    "relative_path": "selfdrive\\monitoring\\helpers.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 74,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.helpers.DistractedType": {
    "id": "selfdrive.monitoring.helpers.DistractedType",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\helpers.py",
    "relative_path": "selfdrive\\monitoring\\helpers.py",
    "depends_on": [],
    "start_line": 76,
    "end_line": 80,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.helpers.DriverPose": {
    "id": "selfdrive.monitoring.helpers.DriverPose",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\helpers.py",
    "relative_path": "selfdrive\\monitoring\\helpers.py",
    "depends_on": [],
    "start_line": 82,
    "end_line": 95,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.helpers.DriverPose.__init__": {
    "id": "selfdrive.monitoring.helpers.DriverPose.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\helpers.py",
    "relative_path": "selfdrive\\monitoring\\helpers.py",
    "depends_on": [],
    "start_line": 83,
    "end_line": 95,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.helpers.DriverBlink": {
    "id": "selfdrive.monitoring.helpers.DriverBlink",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\helpers.py",
    "relative_path": "selfdrive\\monitoring\\helpers.py",
    "depends_on": [],
    "start_line": 97,
    "end_line": 100,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.helpers.DriverBlink.__init__": {
    "id": "selfdrive.monitoring.helpers.DriverBlink.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\helpers.py",
    "relative_path": "selfdrive\\monitoring\\helpers.py",
    "depends_on": [],
    "start_line": 98,
    "end_line": 100,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.helpers.face_orientation_from_net": {
    "id": "selfdrive.monitoring.helpers.face_orientation_from_net",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\helpers.py",
    "relative_path": "selfdrive\\monitoring\\helpers.py",
    "depends_on": [],
    "start_line": 108,
    "end_line": 124,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.helpers.DriverMonitoring": {
    "id": "selfdrive.monitoring.helpers.DriverMonitoring",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\helpers.py",
    "relative_path": "selfdrive\\monitoring\\helpers.py",
    "depends_on": [
      "selfdrive.monitoring.helpers.DriverPose",
      "selfdrive.monitoring.helpers.DriverBlink",
      "selfdrive.monitoring.helpers.DRIVER_MONITOR_SETTINGS",
      "selfdrive.monitoring.helpers.face_orientation_from_net",
      "selfdrive.monitoring.helpers.DistractedType"
    ],
    "start_line": 127,
    "end_line": 416,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.helpers.DriverMonitoring.__init__": {
    "id": "selfdrive.monitoring.helpers.DriverMonitoring.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\helpers.py",
    "relative_path": "selfdrive\\monitoring\\helpers.py",
    "depends_on": [
      "selfdrive.monitoring.helpers.DriverPose",
      "selfdrive.monitoring.helpers.DriverBlink",
      "selfdrive.monitoring.helpers.DRIVER_MONITOR_SETTINGS"
    ],
    "start_line": 128,
    "end_line": 164,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.helpers.DriverMonitoring._reset_awareness": {
    "id": "selfdrive.monitoring.helpers.DriverMonitoring._reset_awareness",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\helpers.py",
    "relative_path": "selfdrive\\monitoring\\helpers.py",
    "depends_on": [],
    "start_line": 166,
    "end_line": 169,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.helpers.DriverMonitoring._reset_events": {
    "id": "selfdrive.monitoring.helpers.DriverMonitoring._reset_events",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\helpers.py",
    "relative_path": "selfdrive\\monitoring\\helpers.py",
    "depends_on": [],
    "start_line": 171,
    "end_line": 172,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.helpers.DriverMonitoring._set_timers": {
    "id": "selfdrive.monitoring.helpers.DriverMonitoring._set_timers",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\helpers.py",
    "relative_path": "selfdrive\\monitoring\\helpers.py",
    "depends_on": [],
    "start_line": 174,
    "end_line": 202,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.helpers.DriverMonitoring._set_policy": {
    "id": "selfdrive.monitoring.helpers.DriverMonitoring._set_policy",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\helpers.py",
    "relative_path": "selfdrive\\monitoring\\helpers.py",
    "depends_on": [],
    "start_line": 204,
    "end_line": 213,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.helpers.DriverMonitoring._get_distracted_types": {
    "id": "selfdrive.monitoring.helpers.DriverMonitoring._get_distracted_types",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\helpers.py",
    "relative_path": "selfdrive\\monitoring\\helpers.py",
    "depends_on": [
      "selfdrive.monitoring.helpers.DistractedType"
    ],
    "start_line": 215,
    "end_line": 243,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.helpers.DriverMonitoring._update_states": {
    "id": "selfdrive.monitoring.helpers.DriverMonitoring._update_states",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\helpers.py",
    "relative_path": "selfdrive\\monitoring\\helpers.py",
    "depends_on": [
      "selfdrive.monitoring.helpers.DistractedType",
      "selfdrive.monitoring.helpers.face_orientation_from_net"
    ],
    "start_line": 245,
    "end_line": 304,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.helpers.DriverMonitoring._update_events": {
    "id": "selfdrive.monitoring.helpers.DriverMonitoring._update_events",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\helpers.py",
    "relative_path": "selfdrive\\monitoring\\helpers.py",
    "depends_on": [],
    "start_line": 306,
    "end_line": 368,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.helpers.DriverMonitoring.get_state_packet": {
    "id": "selfdrive.monitoring.helpers.DriverMonitoring.get_state_packet",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\helpers.py",
    "relative_path": "selfdrive\\monitoring\\helpers.py",
    "depends_on": [],
    "start_line": 371,
    "end_line": 392,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.helpers.DriverMonitoring.run_step": {
    "id": "selfdrive.monitoring.helpers.DriverMonitoring.run_step",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\helpers.py",
    "relative_path": "selfdrive\\monitoring\\helpers.py",
    "depends_on": [],
    "start_line": 394,
    "end_line": 416,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.test_monitoring.make_msg": {
    "id": "selfdrive.monitoring.test_monitoring.make_msg",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\test_monitoring.py",
    "relative_path": "selfdrive\\monitoring\\test_monitoring.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.test_monitoring.TestMonitoring": {
    "id": "selfdrive.monitoring.test_monitoring.TestMonitoring",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\test_monitoring.py",
    "relative_path": "selfdrive\\monitoring\\test_monitoring.py",
    "depends_on": [],
    "start_line": 52,
    "end_line": 205,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.test_monitoring.TestMonitoring._run_seq": {
    "id": "selfdrive.monitoring.test_monitoring.TestMonitoring._run_seq",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\test_monitoring.py",
    "relative_path": "selfdrive\\monitoring\\test_monitoring.py",
    "depends_on": [],
    "start_line": 53,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.test_monitoring.TestMonitoring._assert_no_events": {
    "id": "selfdrive.monitoring.test_monitoring.TestMonitoring._assert_no_events",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\test_monitoring.py",
    "relative_path": "selfdrive\\monitoring\\test_monitoring.py",
    "depends_on": [],
    "start_line": 66,
    "end_line": 67,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.test_monitoring.TestMonitoring.test_fully_aware_driver": {
    "id": "selfdrive.monitoring.test_monitoring.TestMonitoring.test_fully_aware_driver",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\test_monitoring.py",
    "relative_path": "selfdrive\\monitoring\\test_monitoring.py",
    "depends_on": [],
    "start_line": 70,
    "end_line": 72,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.test_monitoring.TestMonitoring.test_fully_distracted_driver": {
    "id": "selfdrive.monitoring.test_monitoring.TestMonitoring.test_fully_distracted_driver",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\test_monitoring.py",
    "relative_path": "selfdrive\\monitoring\\test_monitoring.py",
    "depends_on": [],
    "start_line": 75,
    "end_line": 85,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.test_monitoring.TestMonitoring.test_fully_invisible_driver": {
    "id": "selfdrive.monitoring.test_monitoring.TestMonitoring.test_fully_invisible_driver",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\test_monitoring.py",
    "relative_path": "selfdrive\\monitoring\\test_monitoring.py",
    "depends_on": [],
    "start_line": 88,
    "end_line": 97,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.test_monitoring.TestMonitoring.test_normal_driver": {
    "id": "selfdrive.monitoring.test_monitoring.TestMonitoring.test_normal_driver",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\test_monitoring.py",
    "relative_path": "selfdrive\\monitoring\\test_monitoring.py",
    "depends_on": [],
    "start_line": 101,
    "end_line": 114,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.test_monitoring.TestMonitoring.test_biggest_comma_fan": {
    "id": "selfdrive.monitoring.test_monitoring.TestMonitoring.test_biggest_comma_fan",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\test_monitoring.py",
    "relative_path": "selfdrive\\monitoring\\test_monitoring.py",
    "depends_on": [],
    "start_line": 119,
    "end_line": 136,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.test_monitoring.TestMonitoring.test_sometimes_transparent_commuter": {
    "id": "selfdrive.monitoring.test_monitoring.TestMonitoring.test_sometimes_transparent_commuter",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\test_monitoring.py",
    "relative_path": "selfdrive\\monitoring\\test_monitoring.py",
    "depends_on": [],
    "start_line": 140,
    "end_line": 156,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.test_monitoring.TestMonitoring.test_last_second_responder": {
    "id": "selfdrive.monitoring.test_monitoring.TestMonitoring.test_last_second_responder",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\test_monitoring.py",
    "relative_path": "selfdrive\\monitoring\\test_monitoring.py",
    "depends_on": [],
    "start_line": 160,
    "end_line": 174,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.test_monitoring.TestMonitoring.test_pure_dashcam_user": {
    "id": "selfdrive.monitoring.test_monitoring.TestMonitoring.test_pure_dashcam_user",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\test_monitoring.py",
    "relative_path": "selfdrive\\monitoring\\test_monitoring.py",
    "depends_on": [],
    "start_line": 178,
    "end_line": 180,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.test_monitoring.TestMonitoring.test_long_traffic_light_victim": {
    "id": "selfdrive.monitoring.test_monitoring.TestMonitoring.test_long_traffic_light_victim",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\test_monitoring.py",
    "relative_path": "selfdrive\\monitoring\\test_monitoring.py",
    "depends_on": [],
    "start_line": 184,
    "end_line": 192,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.monitoring.test_monitoring.TestMonitoring.test_somehow_indecisive_model": {
    "id": "selfdrive.monitoring.test_monitoring.TestMonitoring.test_somehow_indecisive_model",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\monitoring\\test_monitoring.py",
    "relative_path": "selfdrive\\monitoring\\test_monitoring.py",
    "depends_on": [],
    "start_line": 196,
    "end_line": 205,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.can_list_to_can_capnp.can_list_to_can_capnp_cpp": {
    "id": "selfdrive.pandad.can_list_to_can_capnp.can_list_to_can_capnp_cpp",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\can_list_to_can_capnp.cc",
    "relative_path": "selfdrive\\pandad\\can_list_to_can_capnp.cc",
    "depends_on": [],
    "start_line": 4,
    "end_line": 20,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void can_list_to_can_capnp_cpp(const std::vector<CanFrame> &can_list, std::string &out, bool sendcan, bool valid) {\n  MessageBuilder msg;\n  auto event = msg.initEvent(valid);\n\n  auto canData = sendcan ? event.initSendcan(can_list.size()) : event.initCan(can_list.size());\n  int j = 0;\n  for (auto it = can_list.begin(); it != can_list.end(); it++, j++) {\n    auto c = canData[j];\n    c.setAddress(it->address);\n    c.setDat(kj::arrayPtr((uint8_t*)it->dat.data(), it->dat.size()));\n    c.setSrc(it->src);\n  }\n  const uint64_t msg_size = capnp::computeSerializedSizeInWords(msg) * sizeof(capnp::word);\n  out.resize(msg_size);\n  kj::ArrayOutputStream output_stream(kj::ArrayPtr<capnp::byte>((unsigned char *)out.data(), msg_size));\n  capnp::writeMessage(output_stream, msg);\n}\n"
  },
  "selfdrive.pandad.can_list_to_can_capnp.can_capnp_to_can_list_cpp": {
    "id": "selfdrive.pandad.can_list_to_can_capnp.can_capnp_to_can_list_cpp",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\can_list_to_can_capnp.cc",
    "relative_path": "selfdrive\\pandad\\can_list_to_can_capnp.cc",
    "depends_on": [],
    "start_line": 23,
    "end_line": 50,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void can_capnp_to_can_list_cpp(const std::vector<std::string> &strings, std::vector<CanData> &can_list, bool sendcan) {\n  AlignedBuffer aligned_buf;\n  can_list.reserve(strings.size());\n\n  for (const auto &str : strings) {\n    // extract the messages\n    capnp::FlatArrayMessageReader reader(aligned_buf.align(str.data(), str.size()));\n    cereal::Event::Reader event = reader.getRoot<cereal::Event>();\n\n    auto frames = sendcan ? event.getSendcan() : event.getCan();\n\n    // Add new CanData entry\n    CanData &can_data = can_list.emplace_back();\n    can_data.nanos = event.getLogMonoTime();\n    can_data.frames.reserve(frames.size());\n\n    // Populate CAN frames\n    for (const auto &frame : frames) {\n      CanFrame &can_frame = can_data.frames.emplace_back();\n      can_frame.src = frame.getSrc();\n      can_frame.address = frame.getAddress();\n\n      // Copy CAN data\n      auto dat = frame.getDat();\n      can_frame.dat.assign(dat.begin(), dat.end());\n    }\n  }\n}\n"
  },
  "selfdrive.pandad.main.main": {
    "id": "selfdrive.pandad.main.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\main.cc",
    "relative_path": "selfdrive\\pandad\\main.cc",
    "depends_on": [],
    "start_line": 8,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int main(int argc, char *argv[]) {\n  LOGW(\"starting pandad\");\n\n  if (!Hardware::PC()) {\n    int err;\n    err = util::set_realtime_priority(54);\n    assert(err == 0);\n    err = util::set_core_affinity({3});\n    assert(err == 0);\n  }\n\n  std::vector<std::string> serials(argv + 1, argv + argc);\n  pandad_main_thread(serials);\n  return 0;\n}\n"
  },
  "selfdrive.pandad.panda.len_to_dlc": {
    "id": "selfdrive.pandad.panda.len_to_dlc",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\panda.cc",
    "relative_path": "selfdrive\\pandad\\panda.cc",
    "depends_on": [],
    "start_line": 179,
    "end_line": 188,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static uint8_t len_to_dlc(uint8_t len) {\n  if (len <= 8) {\n    return len;\n  }\n  if (len <= 24) {\n    return 8 + ((len - 8) / 4) + ((len % 4) ? 1 : 0);\n  } else {\n    return 11 + (len / 16) + ((len % 16) ? 1 : 0);\n  }\n}\n"
  },
  "selfdrive.pandad.panda.Panda": {
    "id": "selfdrive.pandad.panda.Panda",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\panda.h",
    "relative_path": "selfdrive\\pandad\\panda.h",
    "depends_on": [],
    "start_line": 46,
    "end_line": 99,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class Panda {\nprivate:\n  std::unique_ptr<PandaCommsHandle> handle;\n\npublic:\n  Panda(std::string serial=\"\", uint32_t bus_offset=0);\n\n  cereal::PandaState::PandaType hw_type = cereal::PandaState::PandaType::UNKNOWN;\n  const uint32_t bus_offset;\n\n  bool connected();\n  bool comms_healthy();\n  std::string hw_serial();\n\n  // Static functions\n  static std::vector<std::string> list(bool usb_only=false);\n\n  // Panda functionality\n  cereal::PandaState::PandaType get_hw_type();\n  void set_safety_model(cereal::CarParams::SafetyModel safety_model, uint16_t safety_param=0U);\n  void set_alternative_experience(uint16_t alternative_experience);\n  std::string serial_read(int port_number = 0);\n  void set_uart_baud(int uart, int rate);\n  void set_fan_speed(uint16_t fan_speed);\n  uint16_t get_fan_speed();\n  void set_ir_pwr(uint16_t ir_pwr);\n  std::optional<health_t> get_state();\n  std::optional<can_health_t> get_can_state(uint16_t can_number);\n  void set_loopback(bool loopback);\n  std::optional<std::vector<uint8_t>> get_firmware_version();\n  bool up_to_date();\n  std::optional<std::string> get_serial();\n  void set_power_saving(bool power_saving);\n  void enable_deepsleep();\n  void send_heartbeat(bool engaged);\n  void set_can_speed_kbps(uint16_t bus, uint16_t speed);\n  void set_can_fd_auto(uint16_t bus, bool enabled);\n  void set_data_speed_kbps(uint16_t bus, uint16_t speed);\n  void set_canfd_non_iso(uint16_t bus, bool non_iso);\n  void can_send(const capnp::List<cereal::CanData>::Reader &can_data_list);\n  bool can_receive(std::vector<can_frame>& out_vec);\n  void can_reset_communications();\n\nprotected:\n  // for unit tests\n  uint8_t receive_buffer[RECV_SIZE + sizeof(can_header) + 64];\n  uint32_t receive_buffer_size = 0;\n\n  Panda(uint32_t bus_offset) : bus_offset(bus_offset) {}\n  void pack_can_buffer(const capnp::List<cereal::CanData>::Reader &can_data_list,\n                         std::function<void(uint8_t *, size_t)> write_func);\n  bool unpack_can_buffer(uint8_t *data, uint32_t &size, std::vector<can_frame> &out_vec);\n  uint8_t calculate_checksum(uint8_t *data, uint32_t len);\n};\n"
  },
  "selfdrive.pandad.pandad.check_all_connected": {
    "id": "selfdrive.pandad.pandad.check_all_connected",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\pandad.cc",
    "relative_path": "selfdrive\\pandad\\pandad.cc",
    "depends_on": [],
    "start_line": 46,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "bool check_all_connected(const std::vector<Panda *> &pandas) {\n  for (const auto& panda : pandas) {\n    if (!panda->connected()) {\n      do_exit = true;\n      return false;\n    }\n  }\n  return true;\n}\n"
  },
  "selfdrive.pandad.pandad.connect": {
    "id": "selfdrive.pandad.pandad.connect",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\pandad.cc",
    "relative_path": "selfdrive\\pandad\\pandad.cc",
    "depends_on": [],
    "start_line": 56,
    "end_line": 79,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "Panda *connect(std::string serial=\"\", uint32_t index=0) {\n  std::unique_ptr<Panda> panda;\n  try {\n    panda = std::make_unique<Panda>(serial, (index * PANDA_BUS_OFFSET));\n  } catch (std::exception &e) {\n    return nullptr;\n  }\n\n  // common panda config\n  if (getenv(\"BOARDD_LOOPBACK\")) {\n    panda->set_loopback(true);\n  }\n  //panda->enable_deepsleep();\n\n  for (int i = 0; i < PANDA_BUS_CNT; i++) {\n    panda->set_can_fd_auto(i, true);\n  }\n\n  if (!panda->up_to_date() && !getenv(\"BOARDD_SKIP_FW_CHECK\")) {\n    throw std::runtime_error(\"Panda firmware out of date. Run pandad.py to update.\");\n  }\n\n  return panda.release();\n}\n"
  },
  "selfdrive.pandad.pandad.fill_panda_state": {
    "id": "selfdrive.pandad.pandad.fill_panda_state",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\pandad.cc",
    "relative_path": "selfdrive\\pandad\\pandad.cc",
    "depends_on": [],
    "start_line": 135,
    "end_line": 161,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void fill_panda_state(cereal::PandaState::Builder &ps, cereal::PandaState::PandaType hw_type, const health_t &health) {\n  ps.setVoltage(health.voltage_pkt);\n  ps.setCurrent(health.current_pkt);\n  ps.setUptime(health.uptime_pkt);\n  ps.setSafetyTxBlocked(health.safety_tx_blocked_pkt);\n  ps.setSafetyRxInvalid(health.safety_rx_invalid_pkt);\n  ps.setIgnitionLine(health.ignition_line_pkt);\n  ps.setIgnitionCan(health.ignition_can_pkt);\n  ps.setControlsAllowed(health.controls_allowed_pkt);\n  ps.setTxBufferOverflow(health.tx_buffer_overflow_pkt);\n  ps.setRxBufferOverflow(health.rx_buffer_overflow_pkt);\n  ps.setPandaType(hw_type);\n  ps.setSafetyModel(cereal::CarParams::SafetyModel(health.safety_mode_pkt));\n  ps.setSafetyParam(health.safety_param_pkt);\n  ps.setFaultStatus(cereal::PandaState::FaultStatus(health.fault_status_pkt));\n  ps.setPowerSaveEnabled((bool)(health.power_save_enabled_pkt));\n  ps.setHeartbeatLost((bool)(health.heartbeat_lost_pkt));\n  ps.setAlternativeExperience(health.alternative_experience_pkt);\n  ps.setHarnessStatus(cereal::PandaState::HarnessStatus(health.car_harness_status_pkt));\n  ps.setInterruptLoad(health.interrupt_load_pkt);\n  ps.setFanPower(health.fan_power);\n  ps.setFanStallCount(health.fan_stall_count);\n  ps.setSafetyRxChecksInvalid((bool)(health.safety_rx_checks_invalid_pkt));\n  ps.setSpiChecksumErrorCount(health.spi_checksum_error_count_pkt);\n  ps.setSbu1Voltage(health.sbu1_voltage_mV / 1000.0f);\n  ps.setSbu2Voltage(health.sbu2_voltage_mV / 1000.0f);\n}\n"
  },
  "selfdrive.pandad.pandad.fill_panda_can_state": {
    "id": "selfdrive.pandad.pandad.fill_panda_can_state",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\pandad.cc",
    "relative_path": "selfdrive\\pandad\\pandad.cc",
    "depends_on": [],
    "start_line": 163,
    "end_line": 189,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void fill_panda_can_state(cereal::PandaState::PandaCanState::Builder &cs, const can_health_t &can_health) {\n  cs.setBusOff((bool)can_health.bus_off);\n  cs.setBusOffCnt(can_health.bus_off_cnt);\n  cs.setErrorWarning((bool)can_health.error_warning);\n  cs.setErrorPassive((bool)can_health.error_passive);\n  cs.setLastError(cereal::PandaState::PandaCanState::LecErrorCode(can_health.last_error));\n  cs.setLastStoredError(cereal::PandaState::PandaCanState::LecErrorCode(can_health.last_stored_error));\n  cs.setLastDataError(cereal::PandaState::PandaCanState::LecErrorCode(can_health.last_data_error));\n  cs.setLastDataStoredError(cereal::PandaState::PandaCanState::LecErrorCode(can_health.last_data_stored_error));\n  cs.setReceiveErrorCnt(can_health.receive_error_cnt);\n  cs.setTransmitErrorCnt(can_health.transmit_error_cnt);\n  cs.setTotalErrorCnt(can_health.total_error_cnt);\n  cs.setTotalTxLostCnt(can_health.total_tx_lost_cnt);\n  cs.setTotalRxLostCnt(can_health.total_rx_lost_cnt);\n  cs.setTotalTxCnt(can_health.total_tx_cnt);\n  cs.setTotalRxCnt(can_health.total_rx_cnt);\n  cs.setTotalFwdCnt(can_health.total_fwd_cnt);\n  cs.setCanSpeed(can_health.can_speed);\n  cs.setCanDataSpeed(can_health.can_data_speed);\n  cs.setCanfdEnabled(can_health.canfd_enabled);\n  cs.setBrsEnabled(can_health.brs_enabled);\n  cs.setCanfdNonIso(can_health.canfd_non_iso);\n  cs.setIrq0CallRate(can_health.irq0_call_rate);\n  cs.setIrq1CallRate(can_health.irq1_call_rate);\n  cs.setIrq2CallRate(can_health.irq2_call_rate);\n  cs.setCanCoreResetCnt(can_health.can_core_reset_cnt);\n}\n"
  },
  "selfdrive.pandad.pandad.send_panda_states": {
    "id": "selfdrive.pandad.pandad.send_panda_states",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\pandad.cc",
    "relative_path": "selfdrive\\pandad\\pandad.cc",
    "depends_on": [],
    "start_line": 191,
    "end_line": 291,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::optional<bool> send_panda_states(PubMaster *pm, const std::vector<Panda *> &pandas, bool spoofing_started) {\n  bool ignition_local = false;\n  const uint32_t pandas_cnt = pandas.size();\n\n  // build msg\n  MessageBuilder msg;\n  auto evt = msg.initEvent();\n  auto pss = evt.initPandaStates(pandas_cnt);\n\n  std::vector<health_t> pandaStates;\n  pandaStates.reserve(pandas_cnt);\n\n  std::vector<std::array<can_health_t, PANDA_CAN_CNT>> pandaCanStates;\n  pandaCanStates.reserve(pandas_cnt);\n\n  const bool red_panda_comma_three = (pandas.size() == 2) &&\n                                     (pandas[0]->hw_type == cereal::PandaState::PandaType::DOS) &&\n                                     (pandas[1]->hw_type == cereal::PandaState::PandaType::RED_PANDA);\n\n  for (const auto& panda : pandas){\n    auto health_opt = panda->get_state();\n    if (!health_opt) {\n      return std::nullopt;\n    }\n\n    health_t health = *health_opt;\n\n    std::array<can_health_t, PANDA_CAN_CNT> can_health{};\n    for (uint32_t i = 0; i < PANDA_CAN_CNT; i++) {\n      auto can_health_opt = panda->get_can_state(i);\n      if (!can_health_opt) {\n        return std::nullopt;\n      }\n      can_health[i] = *can_health_opt;\n    }\n    pandaCanStates.push_back(can_health);\n\n    if (spoofing_started) {\n      health.ignition_line_pkt = 1;\n    }\n\n    // on comma three setups with a red panda, the dos can\n    // get false positive ignitions due to the harness box\n    // without a harness connector, so ignore it\n    if (red_panda_comma_three && (panda->hw_type == cereal::PandaState::PandaType::DOS)) {\n      health.ignition_line_pkt = 0;\n    }\n\n    ignition_local |= ((health.ignition_line_pkt != 0) || (health.ignition_can_pkt != 0));\n\n    pandaStates.push_back(health);\n  }\n\n  for (uint32_t i = 0; i < pandas_cnt; i++) {\n    auto panda = pandas[i];\n    const auto &health = pandaStates[i];\n\n    // Make sure CAN buses are live: safety_setter_thread does not work if Panda CAN are silent and there is only one other CAN node\n    if (health.safety_mode_pkt == (uint8_t)(cereal::CarParams::SafetyModel::SILENT)) {\n      panda->set_safety_model(cereal::CarParams::SafetyModel::NO_OUTPUT);\n    }\n\n    bool power_save_desired = !ignition_local;\n    if (health.power_save_enabled_pkt != power_save_desired) {\n      panda->set_power_saving(power_save_desired);\n    }\n\n    // set safety mode to NO_OUTPUT when car is off. ELM327 is an alternative if we want to leverage athenad/connect\n    if (!ignition_local && (health.safety_mode_pkt != (uint8_t)(cereal::CarParams::SafetyModel::NO_OUTPUT))) {\n      panda->set_safety_model(cereal::CarParams::SafetyModel::NO_OUTPUT);\n    }\n\n    if (!panda->comms_healthy()) {\n      evt.setValid(false);\n    }\n\n    auto ps = pss[i];\n    fill_panda_state(ps, panda->hw_type, health);\n\n    auto cs = std::array{ps.initCanState0(), ps.initCanState1(), ps.initCanState2()};\n    for (uint32_t j = 0; j < PANDA_CAN_CNT; j++) {\n      fill_panda_can_state(cs[j], pandaCanStates[i][j]);\n    }\n\n    // Convert faults bitset to capnp list\n    std::bitset<sizeof(health.faults_pkt) * 8> fault_bits(health.faults_pkt);\n    auto faults = ps.initFaults(fault_bits.count());\n\n    size_t j = 0;\n    for (size_t f = size_t(cereal::PandaState::FaultType::RELAY_MALFUNCTION);\n         f <= size_t(cereal::PandaState::FaultType::HEARTBEAT_LOOP_WATCHDOG); f++) {\n      if (fault_bits.test(f)) {\n        faults.set(j, cereal::PandaState::FaultType(f));\n        j++;\n      }\n    }\n  }\n\n  pm->send(\"pandaStates\", msg);\n  return ignition_local;\n}\n"
  },
  "selfdrive.pandad.pandad.send_peripheral_state": {
    "id": "selfdrive.pandad.pandad.send_peripheral_state",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\pandad.cc",
    "relative_path": "selfdrive\\pandad\\pandad.cc",
    "depends_on": [],
    "start_line": 293,
    "end_line": 324,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void send_peripheral_state(Panda *panda, PubMaster *pm) {\n  // build msg\n  MessageBuilder msg;\n  auto evt = msg.initEvent();\n  evt.setValid(panda->comms_healthy());\n\n  auto ps = evt.initPeripheralState();\n  ps.setPandaType(panda->hw_type);\n\n  double read_time = millis_since_boot();\n  ps.setVoltage(Hardware::get_voltage());\n  ps.setCurrent(Hardware::get_current());\n  read_time = millis_since_boot() - read_time;\n  if (read_time > 50) {\n    LOGW(\"reading hwmon took %lfms\", read_time);\n  }\n\n  // fall back to panda's voltage and current measurement\n  if (ps.getVoltage() == 0 && ps.getCurrent() == 0) {\n    auto health_opt = panda->get_state();\n    if (health_opt) {\n      health_t health = *health_opt;\n      ps.setVoltage(health.voltage_pkt);\n      ps.setCurrent(health.current_pkt);\n    }\n  }\n\n  uint16_t fan_speed_rpm = panda->get_fan_speed();\n  ps.setFanSpeedRpm(fan_speed_rpm);\n\n  pm->send(\"peripheralState\", msg);\n}\n"
  },
  "selfdrive.pandad.pandad.process_peripheral_state": {
    "id": "selfdrive.pandad.pandad.process_peripheral_state",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\pandad.cc",
    "relative_path": "selfdrive\\pandad\\pandad.cc",
    "depends_on": [],
    "start_line": 368,
    "end_line": 416,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void process_peripheral_state(Panda *panda, PubMaster *pm, bool no_fan_control) {\n  static SubMaster sm({\"deviceState\", \"driverCameraState\"});\n\n  static uint64_t last_driver_camera_t = 0;\n  static uint16_t prev_fan_speed = 999;\n  static uint16_t ir_pwr = 0;\n  static uint16_t prev_ir_pwr = 999;\n\n  static FirstOrderFilter integ_lines_filter(0, 30.0, 0.05);\n\n  {\n    sm.update(0);\n    if (sm.updated(\"deviceState\") && !no_fan_control) {\n      // Fan speed\n      uint16_t fan_speed = sm[\"deviceState\"].getDeviceState().getFanSpeedPercentDesired();\n      if (fan_speed != prev_fan_speed || sm.frame % 100 == 0) {\n        panda->set_fan_speed(fan_speed);\n        prev_fan_speed = fan_speed;\n      }\n    }\n\n    if (sm.updated(\"driverCameraState\")) {\n      auto event = sm[\"driverCameraState\"];\n      int cur_integ_lines = event.getDriverCameraState().getIntegLines();\n\n      cur_integ_lines = integ_lines_filter.update(cur_integ_lines);\n      last_driver_camera_t = event.getLogMonoTime();\n\n      if (cur_integ_lines <= CUTOFF_IL) {\n        ir_pwr = 100.0 * MIN_IR_POWER;\n      } else if (cur_integ_lines > SATURATE_IL) {\n        ir_pwr = 100.0 * MAX_IR_POWER;\n      } else {\n        ir_pwr = 100.0 * (MIN_IR_POWER + ((cur_integ_lines - CUTOFF_IL) * (MAX_IR_POWER - MIN_IR_POWER) / (SATURATE_IL - CUTOFF_IL)));\n      }\n    }\n\n    // Disable IR on input timeout\n    if (nanos_since_boot() - last_driver_camera_t > 1e9) {\n      ir_pwr = 0;\n    }\n\n    if (ir_pwr != prev_ir_pwr || sm.frame % 100 == 0 || ir_pwr >= 50.0) {\n      panda->set_ir_pwr(ir_pwr);\n      Hardware::set_ir_power(ir_pwr);\n      prev_ir_pwr = ir_pwr;\n    }\n  }\n}\n"
  },
  "selfdrive.pandad.pandad.PandaSafety": {
    "id": "selfdrive.pandad.pandad.PandaSafety",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\pandad.h",
    "relative_path": "selfdrive\\pandad\\pandad.h",
    "depends_on": [],
    "start_line": 11,
    "end_line": 27,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class PandaSafety {\npublic:\n  PandaSafety(const std::vector<Panda *> &pandas) : pandas_(pandas) {}\n  void configureSafetyMode();\n\nprivate:\n  void updateMultiplexingMode();\n  std::string fetchCarParams();\n  void setSafetyMode(const std::string &params_string);\n\n  bool initialized_ = false;\n  bool log_once_ = false;\n  bool safety_configured_ = false;\n  bool prev_obd_multiplexing_ = false;\n  std::vector<Panda *> pandas_;\n  Params params_;\n};\n"
  },
  "selfdrive.pandad.pandad.get_expected_signature": {
    "id": "selfdrive.pandad.pandad.get_expected_signature",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\pandad.py",
    "relative_path": "selfdrive\\pandad\\pandad.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.pandad.flash_panda": {
    "id": "selfdrive.pandad.pandad.flash_panda",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\pandad.py",
    "relative_path": "selfdrive\\pandad\\pandad.py",
    "depends_on": [
      "selfdrive.pandad.pandad.get_expected_signature"
    ],
    "start_line": 24,
    "end_line": 61,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.pandad.main": {
    "id": "selfdrive.pandad.pandad.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\pandad.py",
    "relative_path": "selfdrive\\pandad\\pandad.py",
    "depends_on": [
      "selfdrive.pandad.pandad.flash_panda"
    ],
    "start_line": 64,
    "end_line": 175,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.panda_comms.init_usb_ctx": {
    "id": "selfdrive.pandad.panda_comms.init_usb_ctx",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\panda_comms.cc",
    "relative_path": "selfdrive\\pandad\\panda_comms.cc",
    "depends_on": [],
    "start_line": 9,
    "end_line": 23,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static libusb_context *init_usb_ctx() {\n  libusb_context *context = nullptr;\n  int err = libusb_init(&context);\n  if (err != 0) {\n    LOGE(\"libusb initialization error\");\n    return nullptr;\n  }\n\n#if LIBUSB_API_VERSION >= 0x01000106\n  libusb_set_option(context, LIBUSB_OPTION_LOG_LEVEL, LIBUSB_LOG_LEVEL_INFO);\n#else\n  libusb_set_debug(context, 3);\n#endif\n  return context;\n}\n"
  },
  "selfdrive.pandad.panda_comms.PandaCommsHandle": {
    "id": "selfdrive.pandad.panda_comms.PandaCommsHandle",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\panda_comms.h",
    "relative_path": "selfdrive\\pandad\\panda_comms.h",
    "depends_on": [],
    "start_line": 21,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class PandaCommsHandle {\npublic:\n  PandaCommsHandle(std::string serial) {}\n  virtual ~PandaCommsHandle() {}\n  virtual void cleanup() = 0;\n\n  std::string hw_serial;\n  std::atomic<bool> connected = true;\n  std::atomic<bool> comms_healthy = true;\n  static std::vector<std::string> list();\n\n  // HW communication\n  virtual int control_write(uint8_t request, uint16_t param1, uint16_t param2, unsigned int timeout=TIMEOUT) = 0;\n  virtual int control_read(uint8_t request, uint16_t param1, uint16_t param2, unsigned char *data, uint16_t length, unsigned int timeout=TIMEOUT) = 0;\n  virtual int bulk_write(unsigned char endpoint, unsigned char* data, int length, unsigned int timeout=TIMEOUT) = 0;\n  virtual int bulk_read(unsigned char endpoint, unsigned char* data, int length, unsigned int timeout=TIMEOUT) = 0;\n};\n"
  },
  "selfdrive.pandad.panda_comms.PandaUsbHandle": {
    "id": "selfdrive.pandad.panda_comms.PandaUsbHandle",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\panda_comms.h",
    "relative_path": "selfdrive\\pandad\\panda_comms.h",
    "depends_on": [],
    "start_line": 39,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class PandaUsbHandle : public PandaCommsHandle {\npublic:\n  PandaUsbHandle(std::string serial);\n  ~PandaUsbHandle();\n  int control_write(uint8_t request, uint16_t param1, uint16_t param2, unsigned int timeout=TIMEOUT);\n  int control_read(uint8_t request, uint16_t param1, uint16_t param2, unsigned char *data, uint16_t length, unsigned int timeout=TIMEOUT);\n  int bulk_write(unsigned char endpoint, unsigned char* data, int length, unsigned int timeout=TIMEOUT);\n  int bulk_read(unsigned char endpoint, unsigned char* data, int length, unsigned int timeout=TIMEOUT);\n  void cleanup();\n\n  static std::vector<std::string> list();\n\nprivate:\n  libusb_context *ctx = NULL;\n  libusb_device_handle *dev_handle = NULL;\n  std::recursive_mutex hw_lock;\n  void handle_usb_issue(int err, const char func[]);\n};\n"
  },
  "selfdrive.pandad.panda_comms.PandaSpiHandle": {
    "id": "selfdrive.pandad.panda_comms.PandaSpiHandle",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\panda_comms.h",
    "relative_path": "selfdrive\\pandad\\panda_comms.h",
    "depends_on": [],
    "start_line": 66,
    "end_line": 92,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class PandaSpiHandle : public PandaCommsHandle {\npublic:\n  PandaSpiHandle(std::string serial);\n  ~PandaSpiHandle();\n  int control_write(uint8_t request, uint16_t param1, uint16_t param2, unsigned int timeout=TIMEOUT);\n  int control_read(uint8_t request, uint16_t param1, uint16_t param2, unsigned char *data, uint16_t length, unsigned int timeout=TIMEOUT);\n  int bulk_write(unsigned char endpoint, unsigned char* data, int length, unsigned int timeout=TIMEOUT);\n  int bulk_read(unsigned char endpoint, unsigned char* data, int length, unsigned int timeout=TIMEOUT);\n  void cleanup();\n\n  static std::vector<std::string> list();\n\nprivate:\n  int spi_fd = -1;\n  uint8_t tx_buf[SPI_BUF_SIZE];\n  uint8_t rx_buf[SPI_BUF_SIZE];\n  inline static std::recursive_mutex hw_lock;\n\n  int wait_for_ack(uint8_t ack, uint8_t tx, unsigned int timeout, unsigned int length);\n  int bulk_transfer(uint8_t endpoint, uint8_t *tx_data, uint16_t tx_len, uint8_t *rx_data, uint16_t rx_len, unsigned int timeout);\n  int spi_transfer(uint8_t endpoint, uint8_t *tx_data, uint16_t tx_len, uint8_t *rx_data, uint16_t max_rx_len, unsigned int timeout);\n  int spi_transfer_retry(uint8_t endpoint, uint8_t *tx_data, uint16_t tx_len, uint8_t *rx_data, uint16_t max_rx_len, unsigned int timeout);\n  int lltransfer(spi_ioc_transfer &t);\n\n  spi_header header;\n  uint32_t xfer_count = 0;\n};\n"
  },
  "selfdrive.pandad.spi.LockEx": {
    "id": "selfdrive.pandad.spi.LockEx",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\spi.cc",
    "relative_path": "selfdrive\\pandad\\spi.cc",
    "depends_on": [],
    "start_line": 34,
    "end_line": 49,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class LockEx {\npublic:\n  LockEx(int fd, std::recursive_mutex &m) : fd(fd), m(m) {\n    m.lock();\n    flock(fd, LOCK_EX);\n  }\n\n  ~LockEx() {\n    flock(fd, LOCK_UN);\n    m.unlock();\n  }\n\nprivate:\n  int fd;\n  std::recursive_mutex &m;\n};\n"
  },
  "selfdrive.pandad.spi.add_checksum": {
    "id": "selfdrive.pandad.spi.add_checksum",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\spi.cc",
    "relative_path": "selfdrive\\pandad\\spi.cc",
    "depends_on": [],
    "start_line": 204,
    "end_line": 209,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void add_checksum(uint8_t *data, int data_len) {\n  data[data_len] = SPI_CHECKSUM_START;\n  for (int i=0; i < data_len; i++) {\n    data[data_len] ^= data[i];\n  }\n}\n"
  },
  "selfdrive.pandad.spi.check_checksum": {
    "id": "selfdrive.pandad.spi.check_checksum",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\spi.cc",
    "relative_path": "selfdrive\\pandad\\spi.cc",
    "depends_on": [],
    "start_line": 211,
    "end_line": 217,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "bool check_checksum(uint8_t *data, int data_len) {\n  uint8_t checksum = SPI_CHECKSUM_START;\n  for (uint16_t i = 0U; i < data_len; i++) {\n    checksum ^= data[i];\n  }\n  return checksum == 0U;\n}\n"
  },
  "selfdrive.pandad.tests.test_pandad.TestPandad": {
    "id": "selfdrive.pandad.tests.test_pandad.TestPandad",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\tests\\test_pandad.py",
    "relative_path": "selfdrive\\pandad\\tests\\test_pandad.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 129,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.tests.test_pandad.TestPandad.setup_method": {
    "id": "selfdrive.pandad.tests.test_pandad.TestPandad.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\tests\\test_pandad.py",
    "relative_path": "selfdrive\\pandad\\tests\\test_pandad.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.tests.test_pandad.TestPandad.teardown_method": {
    "id": "selfdrive.pandad.tests.test_pandad.TestPandad.teardown_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\tests\\test_pandad.py",
    "relative_path": "selfdrive\\pandad\\tests\\test_pandad.py",
    "depends_on": [],
    "start_line": 27,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.tests.test_pandad.TestPandad._run_test": {
    "id": "selfdrive.pandad.tests.test_pandad.TestPandad._run_test",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\tests\\test_pandad.py",
    "relative_path": "selfdrive\\pandad\\tests\\test_pandad.py",
    "depends_on": [],
    "start_line": 30,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.tests.test_pandad.TestPandad._go_to_dfu": {
    "id": "selfdrive.pandad.tests.test_pandad.TestPandad._go_to_dfu",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\tests\\test_pandad.py",
    "relative_path": "selfdrive\\pandad\\tests\\test_pandad.py",
    "depends_on": [],
    "start_line": 47,
    "end_line": 49,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.tests.test_pandad.TestPandad._assert_no_panda": {
    "id": "selfdrive.pandad.tests.test_pandad.TestPandad._assert_no_panda",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\tests\\test_pandad.py",
    "relative_path": "selfdrive\\pandad\\tests\\test_pandad.py",
    "depends_on": [],
    "start_line": 51,
    "end_line": 53,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.tests.test_pandad.TestPandad._flash_bootstub_and_test": {
    "id": "selfdrive.pandad.tests.test_pandad.TestPandad._flash_bootstub_and_test",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\tests\\test_pandad.py",
    "relative_path": "selfdrive\\pandad\\tests\\test_pandad.py",
    "depends_on": [],
    "start_line": 56,
    "end_line": 74,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.tests.test_pandad.TestPandad.test_in_dfu": {
    "id": "selfdrive.pandad.tests.test_pandad.TestPandad.test_in_dfu",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\tests\\test_pandad.py",
    "relative_path": "selfdrive\\pandad\\tests\\test_pandad.py",
    "depends_on": [],
    "start_line": 76,
    "end_line": 78,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.tests.test_pandad.TestPandad.test_in_bootstub": {
    "id": "selfdrive.pandad.tests.test_pandad.TestPandad.test_in_bootstub",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\tests\\test_pandad.py",
    "relative_path": "selfdrive\\pandad\\tests\\test_pandad.py",
    "depends_on": [],
    "start_line": 80,
    "end_line": 84,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.tests.test_pandad.TestPandad.test_internal_panda_reset": {
    "id": "selfdrive.pandad.tests.test_pandad.TestPandad.test_internal_panda_reset",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\tests\\test_pandad.py",
    "relative_path": "selfdrive\\pandad\\tests\\test_pandad.py",
    "depends_on": [],
    "start_line": 86,
    "end_line": 93,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.tests.test_pandad.TestPandad.test_best_case_startup_time": {
    "id": "selfdrive.pandad.tests.test_pandad.TestPandad.test_best_case_startup_time",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\tests\\test_pandad.py",
    "relative_path": "selfdrive\\pandad\\tests\\test_pandad.py",
    "depends_on": [],
    "start_line": 95,
    "end_line": 109,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.tests.test_pandad.TestPandad.test_protocol_version_check": {
    "id": "selfdrive.pandad.tests.test_pandad.TestPandad.test_protocol_version_check",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\tests\\test_pandad.py",
    "relative_path": "selfdrive\\pandad\\tests\\test_pandad.py",
    "depends_on": [],
    "start_line": 111,
    "end_line": 116,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.tests.test_pandad.TestPandad.test_release_to_devel_bootstub": {
    "id": "selfdrive.pandad.tests.test_pandad.TestPandad.test_release_to_devel_bootstub",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\tests\\test_pandad.py",
    "relative_path": "selfdrive\\pandad\\tests\\test_pandad.py",
    "depends_on": [],
    "start_line": 118,
    "end_line": 119,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.tests.test_pandad.TestPandad.test_recover_from_bad_bootstub": {
    "id": "selfdrive.pandad.tests.test_pandad.TestPandad.test_recover_from_bad_bootstub",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\tests\\test_pandad.py",
    "relative_path": "selfdrive\\pandad\\tests\\test_pandad.py",
    "depends_on": [],
    "start_line": 121,
    "end_line": 129,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.tests.test_pandad_loopback.setup_pandad": {
    "id": "selfdrive.pandad.tests.test_pandad_loopback.setup_pandad",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\tests\\test_pandad_loopback.py",
    "relative_path": "selfdrive\\pandad\\tests\\test_pandad_loopback.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 50,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.tests.test_pandad_loopback.send_random_can_messages": {
    "id": "selfdrive.pandad.tests.test_pandad_loopback.send_random_can_messages",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\tests\\test_pandad_loopback.py",
    "relative_path": "selfdrive\\pandad\\tests\\test_pandad_loopback.py",
    "depends_on": [],
    "start_line": 52,
    "end_line": 65,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.tests.test_pandad_loopback.TestBoarddLoopback": {
    "id": "selfdrive.pandad.tests.test_pandad_loopback.TestBoarddLoopback",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\tests\\test_pandad_loopback.py",
    "relative_path": "selfdrive\\pandad\\tests\\test_pandad_loopback.py",
    "depends_on": [
      "selfdrive.pandad.tests.test_pandad_loopback.send_random_can_messages",
      "selfdrive.pandad.tests.test_pandad_loopback.setup_pandad"
    ],
    "start_line": 69,
    "end_line": 113,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.tests.test_pandad_loopback.TestBoarddLoopback.setup_class": {
    "id": "selfdrive.pandad.tests.test_pandad_loopback.TestBoarddLoopback.setup_class",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\tests\\test_pandad_loopback.py",
    "relative_path": "selfdrive\\pandad\\tests\\test_pandad_loopback.py",
    "depends_on": [],
    "start_line": 71,
    "end_line": 73,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.tests.test_pandad_loopback.TestBoarddLoopback.test_loopback": {
    "id": "selfdrive.pandad.tests.test_pandad_loopback.TestBoarddLoopback.test_loopback",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\tests\\test_pandad_loopback.py",
    "relative_path": "selfdrive\\pandad\\tests\\test_pandad_loopback.py",
    "depends_on": [
      "selfdrive.pandad.tests.test_pandad_loopback.send_random_can_messages",
      "selfdrive.pandad.tests.test_pandad_loopback.setup_pandad"
    ],
    "start_line": 76,
    "end_line": 113,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.tests.test_pandad_spi.TestBoarddSpi": {
    "id": "selfdrive.pandad.tests.test_pandad_spi.TestBoarddSpi",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\tests\\test_pandad_spi.py",
    "relative_path": "selfdrive\\pandad\\tests\\test_pandad_spi.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 105,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.tests.test_pandad_spi.TestBoarddSpi.setup_class": {
    "id": "selfdrive.pandad.tests.test_pandad_spi.TestBoarddSpi.setup_class",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\tests\\test_pandad_spi.py",
    "relative_path": "selfdrive\\pandad\\tests\\test_pandad_spi.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.tests.test_pandad_spi.TestBoarddSpi.test_spi_corruption": {
    "id": "selfdrive.pandad.tests.test_pandad_spi.TestBoarddSpi.test_spi_corruption",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\tests\\test_pandad_spi.py",
    "relative_path": "selfdrive\\pandad\\tests\\test_pandad_spi.py",
    "depends_on": [],
    "start_line": 27,
    "end_line": 105,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.pandad.tests.test_pandad_usbprotocol.PandaTest.test_can_send": {
    "id": "selfdrive.pandad.tests.test_pandad_usbprotocol.PandaTest.test_can_send",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\tests\\test_pandad_usbprotocol.cc",
    "relative_path": "selfdrive\\pandad\\tests\\test_pandad_usbprotocol.cc",
    "depends_on": [],
    "start_line": 52,
    "end_line": 74,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void PandaTest::test_can_send() {\n  std::vector<uint8_t> unpacked_data;\n  this->pack_can_buffer(can_data_list, [&](uint8_t *chunk, size_t size) {\n    unpacked_data.insert(unpacked_data.end(), chunk, &chunk[size]);\n  });\n  REQUIRE(unpacked_data.size() == total_pakets_size);\n\n  int cnt = 0;\n  INFO(\"test can message integrity\");\n  for (int pos = 0, pckt_len = 0; pos < unpacked_data.size(); pos += pckt_len) {\n    can_header header;\n    memcpy(&header, &unpacked_data[pos], sizeof(can_header));\n    const uint8_t data_len = dlc_to_len[header.data_len_code];\n    pckt_len = sizeof(can_header) + data_len;\n\n    REQUIRE(header.addr == cnt);\n    REQUIRE(test_data.find(data_len) != test_data.end());\n    const std::string &dat = test_data[data_len];\n    REQUIRE(memcmp(dat.data(), &unpacked_data[pos + sizeof(can_header)], dat.size()) == 0);\n    ++cnt;\n  }\n  REQUIRE(cnt == can_list_size);\n}\n"
  },
  "selfdrive.pandad.tests.test_pandad_usbprotocol.PandaTest.test_can_recv": {
    "id": "selfdrive.pandad.tests.test_pandad_usbprotocol.PandaTest.test_can_recv",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\pandad\\tests\\test_pandad_usbprotocol.cc",
    "relative_path": "selfdrive\\pandad\\tests\\test_pandad_usbprotocol.cc",
    "depends_on": [],
    "start_line": 76,
    "end_line": 103,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void PandaTest::test_can_recv(uint32_t rx_chunk_size) {\n  std::vector<can_frame> frames;\n  this->pack_can_buffer(can_data_list, [&](uint8_t *data, uint32_t size) {\n    if (rx_chunk_size == 0) {\n      REQUIRE(this->unpack_can_buffer(data, size, frames));\n    } else {\n      this->receive_buffer_size = 0;\n      uint32_t pos = 0;\n\n      while (pos < size) {\n        uint32_t chunk_size = std::min(rx_chunk_size, size - pos);\n        memcpy(&this->receive_buffer[this->receive_buffer_size], &data[pos], chunk_size);\n        this->receive_buffer_size += chunk_size;\n        pos += chunk_size;\n\n        REQUIRE(this->unpack_can_buffer(this->receive_buffer, this->receive_buffer_size, frames));\n      }\n    }\n  });\n\n  REQUIRE(frames.size() == can_list_size);\n  for (int i = 0; i < frames.size(); ++i) {\n    REQUIRE(frames[i].address == i);\n    REQUIRE(test_data.find(frames[i].dat.size()) != test_data.end());\n    const std::string &dat = test_data[frames[i].dat.size()];\n    REQUIRE(memcmp(dat.data(), frames[i].dat.data(), dat.size()) == 0);\n  }\n}\n"
  },
  "selfdrive.selfdrived.alertmanager.set_offroad_alert": {
    "id": "selfdrive.selfdrived.alertmanager.set_offroad_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\alertmanager.py",
    "relative_path": "selfdrive\\selfdrived\\alertmanager.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.alertmanager.AlertEntry": {
    "id": "selfdrive.selfdrived.alertmanager.AlertEntry",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\alertmanager.py",
    "relative_path": "selfdrive\\selfdrived\\alertmanager.py",
    "depends_on": [],
    "start_line": 26,
    "end_line": 36,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.alertmanager.AlertEntry.active": {
    "id": "selfdrive.selfdrived.alertmanager.AlertEntry.active",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\alertmanager.py",
    "relative_path": "selfdrive\\selfdrived\\alertmanager.py",
    "depends_on": [],
    "start_line": 32,
    "end_line": 33,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.alertmanager.AlertEntry.just_added": {
    "id": "selfdrive.selfdrived.alertmanager.AlertEntry.just_added",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\alertmanager.py",
    "relative_path": "selfdrive\\selfdrived\\alertmanager.py",
    "depends_on": [],
    "start_line": 35,
    "end_line": 36,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.alertmanager.AlertManager": {
    "id": "selfdrive.selfdrived.alertmanager.AlertManager",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\alertmanager.py",
    "relative_path": "selfdrive\\selfdrived\\alertmanager.py",
    "depends_on": [
      "selfdrive.selfdrived.alertmanager.AlertEntry"
    ],
    "start_line": 38,
    "end_line": 67,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.alertmanager.AlertManager.__init__": {
    "id": "selfdrive.selfdrived.alertmanager.AlertManager.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\alertmanager.py",
    "relative_path": "selfdrive\\selfdrived\\alertmanager.py",
    "depends_on": [
      "selfdrive.selfdrived.alertmanager.AlertEntry"
    ],
    "start_line": 39,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.alertmanager.AlertManager.add_many": {
    "id": "selfdrive.selfdrived.alertmanager.AlertManager.add_many",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\alertmanager.py",
    "relative_path": "selfdrive\\selfdrived\\alertmanager.py",
    "depends_on": [],
    "start_line": 43,
    "end_line": 51,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.alertmanager.AlertManager.process_alerts": {
    "id": "selfdrive.selfdrived.alertmanager.AlertManager.process_alerts",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\alertmanager.py",
    "relative_path": "selfdrive\\selfdrived\\alertmanager.py",
    "depends_on": [
      "selfdrive.selfdrived.alertmanager.AlertEntry"
    ],
    "start_line": 53,
    "end_line": 67,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.Priority": {
    "id": "selfdrive.selfdrived.events.Priority",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [],
    "start_line": 23,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.ET": {
    "id": "selfdrive.selfdrived.events.ET",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [],
    "start_line": 33,
    "end_line": 43,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.Events": {
    "id": "selfdrive.selfdrived.events.Events",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert"
    ],
    "start_line": 50,
    "end_line": 106,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.Events.__init__": {
    "id": "selfdrive.selfdrived.events.Events.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [],
    "start_line": 51,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.Events.names": {
    "id": "selfdrive.selfdrived.events.Events.names",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [],
    "start_line": 57,
    "end_line": 58,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.Events.__len__": {
    "id": "selfdrive.selfdrived.events.Events.__len__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [],
    "start_line": 60,
    "end_line": 61,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.Events.add": {
    "id": "selfdrive.selfdrived.events.Events.add",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [],
    "start_line": 63,
    "end_line": 66,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.Events.clear": {
    "id": "selfdrive.selfdrived.events.Events.clear",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [],
    "start_line": 68,
    "end_line": 70,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.Events.contains": {
    "id": "selfdrive.selfdrived.events.Events.contains",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [],
    "start_line": 72,
    "end_line": 73,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.Events.create_alerts": {
    "id": "selfdrive.selfdrived.events.Events.create_alerts",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert"
    ],
    "start_line": 75,
    "end_line": 92,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.Events.add_from_msg": {
    "id": "selfdrive.selfdrived.events.Events.add_from_msg",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [],
    "start_line": 94,
    "end_line": 96,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.Events.to_msg": {
    "id": "selfdrive.selfdrived.events.Events.to_msg",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [],
    "start_line": 98,
    "end_line": 106,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.Alert": {
    "id": "selfdrive.selfdrived.events.Alert",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.Priority"
    ],
    "start_line": 109,
    "end_line": 142,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.Alert.__init__": {
    "id": "selfdrive.selfdrived.events.Alert.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Priority"
    ],
    "start_line": 110,
    "end_line": 134,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.Alert.__str__": {
    "id": "selfdrive.selfdrived.events.Alert.__str__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [],
    "start_line": 136,
    "end_line": 137,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.Alert.__gt__": {
    "id": "selfdrive.selfdrived.events.Alert.__gt__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert"
    ],
    "start_line": 139,
    "end_line": 142,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.NoEntryAlert": {
    "id": "selfdrive.selfdrived.events.NoEntryAlert",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.Priority"
    ],
    "start_line": 147,
    "end_line": 153,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.NoEntryAlert.__init__": {
    "id": "selfdrive.selfdrived.events.NoEntryAlert.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Priority"
    ],
    "start_line": 148,
    "end_line": 153,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.SoftDisableAlert": {
    "id": "selfdrive.selfdrived.events.SoftDisableAlert",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.Priority"
    ],
    "start_line": 156,
    "end_line": 161,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.SoftDisableAlert.__init__": {
    "id": "selfdrive.selfdrived.events.SoftDisableAlert.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Priority"
    ],
    "start_line": 157,
    "end_line": 161,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.UserSoftDisableAlert": {
    "id": "selfdrive.selfdrived.events.UserSoftDisableAlert",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.SoftDisableAlert"
    ],
    "start_line": 165,
    "end_line": 168,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.UserSoftDisableAlert.__init__": {
    "id": "selfdrive.selfdrived.events.UserSoftDisableAlert.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [],
    "start_line": 166,
    "end_line": 168,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.ImmediateDisableAlert": {
    "id": "selfdrive.selfdrived.events.ImmediateDisableAlert",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.Priority"
    ],
    "start_line": 171,
    "end_line": 176,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.ImmediateDisableAlert.__init__": {
    "id": "selfdrive.selfdrived.events.ImmediateDisableAlert.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Priority"
    ],
    "start_line": 172,
    "end_line": 176,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.EngagementAlert": {
    "id": "selfdrive.selfdrived.events.EngagementAlert",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.Priority"
    ],
    "start_line": 179,
    "end_line": 184,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.EngagementAlert.__init__": {
    "id": "selfdrive.selfdrived.events.EngagementAlert.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Priority"
    ],
    "start_line": 180,
    "end_line": 184,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.NormalPermanentAlert": {
    "id": "selfdrive.selfdrived.events.NormalPermanentAlert",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.Priority"
    ],
    "start_line": 187,
    "end_line": 191,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.NormalPermanentAlert.__init__": {
    "id": "selfdrive.selfdrived.events.NormalPermanentAlert.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Priority"
    ],
    "start_line": 188,
    "end_line": 191,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.StartupAlert": {
    "id": "selfdrive.selfdrived.events.StartupAlert",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.Priority"
    ],
    "start_line": 194,
    "end_line": 198,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.StartupAlert.__init__": {
    "id": "selfdrive.selfdrived.events.StartupAlert.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Priority"
    ],
    "start_line": 195,
    "end_line": 198,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.get_display_speed": {
    "id": "selfdrive.selfdrived.events.get_display_speed",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [],
    "start_line": 202,
    "end_line": 205,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.soft_disable_alert": {
    "id": "selfdrive.selfdrived.events.soft_disable_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.ImmediateDisableAlert",
      "selfdrive.selfdrived.events.SoftDisableAlert"
    ],
    "start_line": 213,
    "end_line": 218,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.user_soft_disable_alert": {
    "id": "selfdrive.selfdrived.events.user_soft_disable_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.UserSoftDisableAlert",
      "selfdrive.selfdrived.events.ImmediateDisableAlert"
    ],
    "start_line": 220,
    "end_line": 225,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.startup_master_alert": {
    "id": "selfdrive.selfdrived.events.startup_master_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.StartupAlert"
    ],
    "start_line": 227,
    "end_line": 232,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.below_engage_speed_alert": {
    "id": "selfdrive.selfdrived.events.below_engage_speed_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.get_display_speed",
      "selfdrive.selfdrived.events.NoEntryAlert"
    ],
    "start_line": 234,
    "end_line": 235,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.below_steer_speed_alert": {
    "id": "selfdrive.selfdrived.events.below_steer_speed_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.Priority",
      "selfdrive.selfdrived.events.get_display_speed"
    ],
    "start_line": 238,
    "end_line": 243,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.calibration_incomplete_alert": {
    "id": "selfdrive.selfdrived.events.calibration_incomplete_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.Priority",
      "selfdrive.selfdrived.events.get_display_speed"
    ],
    "start_line": 246,
    "end_line": 252,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.out_of_space_alert": {
    "id": "selfdrive.selfdrived.events.out_of_space_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.NormalPermanentAlert"
    ],
    "start_line": 257,
    "end_line": 259,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.posenet_invalid_alert": {
    "id": "selfdrive.selfdrived.events.posenet_invalid_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.NoEntryAlert"
    ],
    "start_line": 262,
    "end_line": 266,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.process_not_running_alert": {
    "id": "selfdrive.selfdrived.events.process_not_running_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.NoEntryAlert"
    ],
    "start_line": 269,
    "end_line": 272,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.comm_issue_alert": {
    "id": "selfdrive.selfdrived.events.comm_issue_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.NoEntryAlert"
    ],
    "start_line": 275,
    "end_line": 278,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.camera_malfunction_alert": {
    "id": "selfdrive.selfdrived.events.camera_malfunction_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.NormalPermanentAlert"
    ],
    "start_line": 281,
    "end_line": 284,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.calibration_invalid_alert": {
    "id": "selfdrive.selfdrived.events.calibration_invalid_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.NormalPermanentAlert"
    ],
    "start_line": 287,
    "end_line": 292,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.paramsd_invalid_alert": {
    "id": "selfdrive.selfdrived.events.paramsd_invalid_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.NoEntryAlert"
    ],
    "start_line": 295,
    "end_line": 311,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.overheat_alert": {
    "id": "selfdrive.selfdrived.events.overheat_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.NormalPermanentAlert"
    ],
    "start_line": 313,
    "end_line": 317,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.low_memory_alert": {
    "id": "selfdrive.selfdrived.events.low_memory_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.NormalPermanentAlert"
    ],
    "start_line": 320,
    "end_line": 321,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.high_cpu_usage_alert": {
    "id": "selfdrive.selfdrived.events.high_cpu_usage_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.NormalPermanentAlert"
    ],
    "start_line": 324,
    "end_line": 326,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.modeld_lagging_alert": {
    "id": "selfdrive.selfdrived.events.modeld_lagging_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.NormalPermanentAlert"
    ],
    "start_line": 329,
    "end_line": 330,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.wrong_car_mode_alert": {
    "id": "selfdrive.selfdrived.events.wrong_car_mode_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.NoEntryAlert"
    ],
    "start_line": 333,
    "end_line": 337,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.joystick_alert": {
    "id": "selfdrive.selfdrived.events.joystick_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.NormalPermanentAlert"
    ],
    "start_line": 340,
    "end_line": 344,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.longitudinal_maneuver_alert": {
    "id": "selfdrive.selfdrived.events.longitudinal_maneuver_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.Priority"
    ],
    "start_line": 347,
    "end_line": 354,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.events.personality_changed_alert": {
    "id": "selfdrive.selfdrived.events.personality_changed_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\events.py",
    "relative_path": "selfdrive\\selfdrived\\events.py",
    "depends_on": [
      "selfdrive.selfdrived.events.Alert",
      "selfdrive.selfdrived.events.NormalPermanentAlert"
    ],
    "start_line": 357,
    "end_line": 359,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.selfdrived.SelfdriveD": {
    "id": "selfdrive.selfdrived.selfdrived.SelfdriveD",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\selfdrived.py",
    "relative_path": "selfdrive\\selfdrived\\selfdrived.py",
    "depends_on": [],
    "start_line": 42,
    "end_line": 503,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.selfdrived.SelfdriveD.__init__": {
    "id": "selfdrive.selfdrived.selfdrived.SelfdriveD.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\selfdrived.py",
    "relative_path": "selfdrive\\selfdrived\\selfdrived.py",
    "depends_on": [],
    "start_line": 43,
    "end_line": 136,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.selfdrived.SelfdriveD.update_events": {
    "id": "selfdrive.selfdrived.selfdrived.SelfdriveD.update_events",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\selfdrived.py",
    "relative_path": "selfdrive\\selfdrived\\selfdrived.py",
    "depends_on": [],
    "start_line": 138,
    "end_line": 376,
    "has_docstring": true,
    "docstring": "Compute onroadEvents from carState",
    "language": "python"
  },
  "selfdrive.selfdrived.selfdrived.SelfdriveD.data_sample": {
    "id": "selfdrive.selfdrived.selfdrived.SelfdriveD.data_sample",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\selfdrived.py",
    "relative_path": "selfdrive\\selfdrived\\selfdrived.py",
    "depends_on": [],
    "start_line": 378,
    "end_line": 423,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.selfdrived.SelfdriveD.update_alerts": {
    "id": "selfdrive.selfdrived.selfdrived.SelfdriveD.update_alerts",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\selfdrived.py",
    "relative_path": "selfdrive\\selfdrived\\selfdrived.py",
    "depends_on": [],
    "start_line": 425,
    "end_line": 436,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.selfdrived.SelfdriveD.publish_selfdriveState": {
    "id": "selfdrive.selfdrived.selfdrived.SelfdriveD.publish_selfdriveState",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\selfdrived.py",
    "relative_path": "selfdrive\\selfdrived\\selfdrived.py",
    "depends_on": [],
    "start_line": 438,
    "end_line": 466,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.selfdrived.SelfdriveD.step": {
    "id": "selfdrive.selfdrived.selfdrived.SelfdriveD.step",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\selfdrived.py",
    "relative_path": "selfdrive\\selfdrived\\selfdrived.py",
    "depends_on": [],
    "start_line": 468,
    "end_line": 477,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.selfdrived.SelfdriveD.read_personality_param": {
    "id": "selfdrive.selfdrived.selfdrived.SelfdriveD.read_personality_param",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\selfdrived.py",
    "relative_path": "selfdrive\\selfdrived\\selfdrived.py",
    "depends_on": [],
    "start_line": 479,
    "end_line": 483,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.selfdrived.SelfdriveD.params_thread": {
    "id": "selfdrive.selfdrived.selfdrived.SelfdriveD.params_thread",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\selfdrived.py",
    "relative_path": "selfdrive\\selfdrived\\selfdrived.py",
    "depends_on": [],
    "start_line": 485,
    "end_line": 491,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.selfdrived.SelfdriveD.run": {
    "id": "selfdrive.selfdrived.selfdrived.SelfdriveD.run",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\selfdrived.py",
    "relative_path": "selfdrive\\selfdrived\\selfdrived.py",
    "depends_on": [],
    "start_line": 493,
    "end_line": 503,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.selfdrived.main": {
    "id": "selfdrive.selfdrived.selfdrived.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\selfdrived.py",
    "relative_path": "selfdrive\\selfdrived\\selfdrived.py",
    "depends_on": [
      "selfdrive.selfdrived.selfdrived.SelfdriveD"
    ],
    "start_line": 506,
    "end_line": 509,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.state.StateMachine": {
    "id": "selfdrive.selfdrived.state.StateMachine",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\state.py",
    "relative_path": "selfdrive\\selfdrived\\state.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 97,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.state.StateMachine.__init__": {
    "id": "selfdrive.selfdrived.state.StateMachine.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\state.py",
    "relative_path": "selfdrive\\selfdrived\\state.py",
    "depends_on": [],
    "start_line": 12,
    "end_line": 15,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.state.StateMachine.update": {
    "id": "selfdrive.selfdrived.state.StateMachine.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\state.py",
    "relative_path": "selfdrive\\selfdrived\\state.py",
    "depends_on": [],
    "start_line": 17,
    "end_line": 97,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.tests.test_alertmanager.TestAlertManager": {
    "id": "selfdrive.selfdrived.tests.test_alertmanager.TestAlertManager",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\tests\\test_alertmanager.py",
    "relative_path": "selfdrive\\selfdrived\\tests\\test_alertmanager.py",
    "depends_on": [],
    "start_line": 7,
    "end_line": 58,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.tests.test_alertmanager.TestAlertManager.test_duration": {
    "id": "selfdrive.selfdrived.tests.test_alertmanager.TestAlertManager.test_duration",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\tests\\test_alertmanager.py",
    "relative_path": "selfdrive\\selfdrived\\tests\\test_alertmanager.py",
    "depends_on": [],
    "start_line": 9,
    "end_line": 58,
    "has_docstring": true,
    "docstring": "\n      Enforce that an alert lasts for max(alert duration, duration the alert is added)\n    ",
    "language": "python"
  },
  "selfdrive.selfdrived.tests.test_alerts.TestAlerts": {
    "id": "selfdrive.selfdrived.tests.test_alerts.TestAlerts",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\tests\\test_alerts.py",
    "relative_path": "selfdrive\\selfdrived\\tests\\test_alerts.py",
    "depends_on": [],
    "start_line": 26,
    "end_line": 130,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.tests.test_alerts.TestAlerts.setup_class": {
    "id": "selfdrive.selfdrived.tests.test_alerts.TestAlerts.setup_class",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\tests\\test_alerts.py",
    "relative_path": "selfdrive\\selfdrived\\tests\\test_alerts.py",
    "depends_on": [],
    "start_line": 29,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.tests.test_alerts.TestAlerts.test_events_defined": {
    "id": "selfdrive.selfdrived.tests.test_alerts.TestAlerts.test_events_defined",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\tests\\test_alerts.py",
    "relative_path": "selfdrive\\selfdrived\\tests\\test_alerts.py",
    "depends_on": [],
    "start_line": 39,
    "end_line": 46,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.tests.test_alerts.TestAlerts.test_alert_text_length": {
    "id": "selfdrive.selfdrived.tests.test_alerts.TestAlerts.test_alert_text_length",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\tests\\test_alerts.py",
    "relative_path": "selfdrive\\selfdrived\\tests\\test_alerts.py",
    "depends_on": [],
    "start_line": 49,
    "end_line": 81,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.tests.test_alerts.TestAlerts.test_alert_sanity_check": {
    "id": "selfdrive.selfdrived.tests.test_alerts.TestAlerts.test_alert_sanity_check",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\tests\\test_alerts.py",
    "relative_path": "selfdrive\\selfdrived\\tests\\test_alerts.py",
    "depends_on": [],
    "start_line": 83,
    "end_line": 105,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.tests.test_alerts.TestAlerts.test_offroad_alerts": {
    "id": "selfdrive.selfdrived.tests.test_alerts.TestAlerts.test_offroad_alerts",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\tests\\test_alerts.py",
    "relative_path": "selfdrive\\selfdrived\\tests\\test_alerts.py",
    "depends_on": [],
    "start_line": 107,
    "end_line": 118,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.tests.test_alerts.TestAlerts.test_offroad_alerts_extra_text": {
    "id": "selfdrive.selfdrived.tests.test_alerts.TestAlerts.test_offroad_alerts_extra_text",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\tests\\test_alerts.py",
    "relative_path": "selfdrive\\selfdrived\\tests\\test_alerts.py",
    "depends_on": [],
    "start_line": 120,
    "end_line": 130,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.tests.test_state_machine.make_event": {
    "id": "selfdrive.selfdrived.tests.test_state_machine.make_event",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\tests\\test_state_machine.py",
    "relative_path": "selfdrive\\selfdrived\\tests\\test_state_machine.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 21,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.tests.test_state_machine.TestStateMachine": {
    "id": "selfdrive.selfdrived.tests.test_state_machine.TestStateMachine",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\tests\\test_state_machine.py",
    "relative_path": "selfdrive\\selfdrived\\tests\\test_state_machine.py",
    "depends_on": [
      "selfdrive.selfdrived.tests.test_state_machine.make_event"
    ],
    "start_line": 24,
    "end_line": 92,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.tests.test_state_machine.TestStateMachine.setup_method": {
    "id": "selfdrive.selfdrived.tests.test_state_machine.TestStateMachine.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\tests\\test_state_machine.py",
    "relative_path": "selfdrive\\selfdrived\\tests\\test_state_machine.py",
    "depends_on": [],
    "start_line": 25,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.tests.test_state_machine.TestStateMachine.test_immediate_disable": {
    "id": "selfdrive.selfdrived.tests.test_state_machine.TestStateMachine.test_immediate_disable",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\tests\\test_state_machine.py",
    "relative_path": "selfdrive\\selfdrived\\tests\\test_state_machine.py",
    "depends_on": [
      "selfdrive.selfdrived.tests.test_state_machine.make_event"
    ],
    "start_line": 30,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.tests.test_state_machine.TestStateMachine.test_user_disable": {
    "id": "selfdrive.selfdrived.tests.test_state_machine.TestStateMachine.test_user_disable",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\tests\\test_state_machine.py",
    "relative_path": "selfdrive\\selfdrived\\tests\\test_state_machine.py",
    "depends_on": [
      "selfdrive.selfdrived.tests.test_state_machine.make_event"
    ],
    "start_line": 39,
    "end_line": 46,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.tests.test_state_machine.TestStateMachine.test_soft_disable": {
    "id": "selfdrive.selfdrived.tests.test_state_machine.TestStateMachine.test_soft_disable",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\tests\\test_state_machine.py",
    "relative_path": "selfdrive\\selfdrived\\tests\\test_state_machine.py",
    "depends_on": [
      "selfdrive.selfdrived.tests.test_state_machine.make_event"
    ],
    "start_line": 48,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.tests.test_state_machine.TestStateMachine.test_soft_disable_timer": {
    "id": "selfdrive.selfdrived.tests.test_state_machine.TestStateMachine.test_soft_disable_timer",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\tests\\test_state_machine.py",
    "relative_path": "selfdrive\\selfdrived\\tests\\test_state_machine.py",
    "depends_on": [
      "selfdrive.selfdrived.tests.test_state_machine.make_event"
    ],
    "start_line": 59,
    "end_line": 67,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.tests.test_state_machine.TestStateMachine.test_no_entry": {
    "id": "selfdrive.selfdrived.tests.test_state_machine.TestStateMachine.test_no_entry",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\tests\\test_state_machine.py",
    "relative_path": "selfdrive\\selfdrived\\tests\\test_state_machine.py",
    "depends_on": [
      "selfdrive.selfdrived.tests.test_state_machine.make_event"
    ],
    "start_line": 69,
    "end_line": 75,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.tests.test_state_machine.TestStateMachine.test_no_entry_pre_enable": {
    "id": "selfdrive.selfdrived.tests.test_state_machine.TestStateMachine.test_no_entry_pre_enable",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\tests\\test_state_machine.py",
    "relative_path": "selfdrive\\selfdrived\\tests\\test_state_machine.py",
    "depends_on": [
      "selfdrive.selfdrived.tests.test_state_machine.make_event"
    ],
    "start_line": 77,
    "end_line": 82,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.selfdrived.tests.test_state_machine.TestStateMachine.test_maintain_states": {
    "id": "selfdrive.selfdrived.tests.test_state_machine.TestStateMachine.test_maintain_states",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\selfdrived\\tests\\test_state_machine.py",
    "relative_path": "selfdrive\\selfdrived\\tests\\test_state_machine.py",
    "depends_on": [
      "selfdrive.selfdrived.tests.test_state_machine.make_event"
    ],
    "start_line": 84,
    "end_line": 92,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.fuzzy_generation.FuzzyGenerator": {
    "id": "selfdrive.test.fuzzy_generation.FuzzyGenerator",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\fuzzy_generation.py",
    "relative_path": "selfdrive\\test\\fuzzy_generation.py",
    "depends_on": [
      "selfdrive.test.fuzzy_generation.FuzzyGenerator"
    ],
    "start_line": 12,
    "end_line": 81,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.fuzzy_generation.FuzzyGenerator.__init__": {
    "id": "selfdrive.test.fuzzy_generation.FuzzyGenerator.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\fuzzy_generation.py",
    "relative_path": "selfdrive\\test\\fuzzy_generation.py",
    "depends_on": [
      "selfdrive.test.fuzzy_generation.FuzzyGenerator"
    ],
    "start_line": 13,
    "end_line": 15,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.fuzzy_generation.FuzzyGenerator.generate_native_type": {
    "id": "selfdrive.test.fuzzy_generation.FuzzyGenerator.generate_native_type",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\fuzzy_generation.py",
    "relative_path": "selfdrive\\test\\fuzzy_generation.py",
    "depends_on": [],
    "start_line": 17,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.fuzzy_generation.FuzzyGenerator.generate_field": {
    "id": "selfdrive.test.fuzzy_generation.FuzzyGenerator.generate_field",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\fuzzy_generation.py",
    "relative_path": "selfdrive\\test\\fuzzy_generation.py",
    "depends_on": [],
    "start_line": 24,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.fuzzy_generation.FuzzyGenerator.generate_struct": {
    "id": "selfdrive.test.fuzzy_generation.FuzzyGenerator.generate_struct",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\fuzzy_generation.py",
    "relative_path": "selfdrive\\test\\fuzzy_generation.py",
    "depends_on": [],
    "start_line": 47,
    "end_line": 50,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.fuzzy_generation.FuzzyGenerator._get_native_type_map": {
    "id": "selfdrive.test.fuzzy_generation.FuzzyGenerator._get_native_type_map",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\fuzzy_generation.py",
    "relative_path": "selfdrive\\test\\fuzzy_generation.py",
    "depends_on": [],
    "start_line": 54,
    "end_line": 70,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.fuzzy_generation.FuzzyGenerator.get_random_msg": {
    "id": "selfdrive.test.fuzzy_generation.FuzzyGenerator.get_random_msg",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\fuzzy_generation.py",
    "relative_path": "selfdrive\\test\\fuzzy_generation.py",
    "depends_on": [],
    "start_line": 73,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.fuzzy_generation.FuzzyGenerator.get_random_event_msg": {
    "id": "selfdrive.test.fuzzy_generation.FuzzyGenerator.get_random_event_msg",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\fuzzy_generation.py",
    "relative_path": "selfdrive\\test\\fuzzy_generation.py",
    "depends_on": [],
    "start_line": 79,
    "end_line": 81,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.helpers.set_params_enabled": {
    "id": "selfdrive.test.helpers.set_params_enabled",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\helpers.py",
    "relative_path": "selfdrive\\test\\helpers.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.helpers.release_only": {
    "id": "selfdrive.test.helpers.release_only",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\helpers.py",
    "relative_path": "selfdrive\\test\\helpers.py",
    "depends_on": [],
    "start_line": 31,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.helpers.processes_context": {
    "id": "selfdrive.test.helpers.processes_context",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\helpers.py",
    "relative_path": "selfdrive\\test\\helpers.py",
    "depends_on": [],
    "start_line": 41,
    "end_line": 58,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.helpers.with_processes": {
    "id": "selfdrive.test.helpers.with_processes",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\helpers.py",
    "relative_path": "selfdrive\\test\\helpers.py",
    "depends_on": [
      "selfdrive.test.helpers.processes_context"
    ],
    "start_line": 61,
    "end_line": 69,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.helpers.noop": {
    "id": "selfdrive.test.helpers.noop",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\helpers.py",
    "relative_path": "selfdrive\\test\\helpers.py",
    "depends_on": [],
    "start_line": 72,
    "end_line": 73,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.helpers.read_segment_list": {
    "id": "selfdrive.test.helpers.read_segment_list",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\helpers.py",
    "relative_path": "selfdrive\\test\\helpers.py",
    "depends_on": [],
    "start_line": 76,
    "end_line": 80,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.helpers.http_server_context": {
    "id": "selfdrive.test.helpers.http_server_context",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\helpers.py",
    "relative_path": "selfdrive\\test\\helpers.py",
    "depends_on": [],
    "start_line": 84,
    "end_line": 99,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.helpers.with_http_server": {
    "id": "selfdrive.test.helpers.with_http_server",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\helpers.py",
    "relative_path": "selfdrive\\test\\helpers.py",
    "depends_on": [
      "selfdrive.test.helpers.http_server_context"
    ],
    "start_line": 102,
    "end_line": 107,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.helpers.DirectoryHttpServer": {
    "id": "selfdrive.test.helpers.DirectoryHttpServer",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\helpers.py",
    "relative_path": "selfdrive\\test\\helpers.py",
    "depends_on": [
      "selfdrive.test.helpers.Handler"
    ],
    "start_line": 110,
    "end_line": 128,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.helpers.Handler": {
    "id": "selfdrive.test.helpers.Handler",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\helpers.py",
    "relative_path": "selfdrive\\test\\helpers.py",
    "depends_on": [],
    "start_line": 112,
    "end_line": 126,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.helpers.Handler.do_GET": {
    "id": "selfdrive.test.helpers.Handler.do_GET",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\helpers.py",
    "relative_path": "selfdrive\\test\\helpers.py",
    "depends_on": [],
    "start_line": 116,
    "end_line": 123,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.helpers.Handler.__init__": {
    "id": "selfdrive.test.helpers.Handler.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\helpers.py",
    "relative_path": "selfdrive\\test\\helpers.py",
    "depends_on": [],
    "start_line": 125,
    "end_line": 126,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_onroad.cputime_total": {
    "id": "selfdrive.test.test_onroad.cputime_total",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_onroad.py",
    "relative_path": "selfdrive\\test\\test_onroad.py",
    "depends_on": [],
    "start_line": 111,
    "end_line": 112,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_onroad.TestOnroad": {
    "id": "selfdrive.test.test_onroad.TestOnroad",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_onroad.py",
    "relative_path": "selfdrive\\test\\test_onroad.py",
    "depends_on": [
      "selfdrive.test.test_onroad.cputime_total"
    ],
    "start_line": 117,
    "end_line": 462,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_onroad.TestOnroad.setup_class": {
    "id": "selfdrive.test.test_onroad.TestOnroad.setup_class",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_onroad.py",
    "relative_path": "selfdrive\\test\\test_onroad.py",
    "depends_on": [],
    "start_line": 120,
    "end_line": 176,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_onroad.TestOnroad.test_service_frequencies": {
    "id": "selfdrive.test.test_onroad.TestOnroad.test_service_frequencies",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_onroad.py",
    "relative_path": "selfdrive\\test\\test_onroad.py",
    "depends_on": [],
    "start_line": 178,
    "end_line": 188,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_onroad.TestOnroad.test_manager_starting_time": {
    "id": "selfdrive.test.test_onroad.TestOnroad.test_manager_starting_time",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_onroad.py",
    "relative_path": "selfdrive\\test\\test_onroad.py",
    "depends_on": [],
    "start_line": 190,
    "end_line": 192,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_onroad.TestOnroad.test_cloudlog_size": {
    "id": "selfdrive.test.test_onroad.TestOnroad.test_cloudlog_size",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_onroad.py",
    "relative_path": "selfdrive\\test\\test_onroad.py",
    "depends_on": [],
    "start_line": 194,
    "end_line": 202,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_onroad.TestOnroad.test_log_sizes": {
    "id": "selfdrive.test.test_onroad.TestOnroad.test_log_sizes",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_onroad.py",
    "relative_path": "selfdrive\\test\\test_onroad.py",
    "depends_on": [],
    "start_line": 204,
    "end_line": 211,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_onroad.TestOnroad.test_ui_timings": {
    "id": "selfdrive.test.test_onroad.TestOnroad.test_ui_timings",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_onroad.py",
    "relative_path": "selfdrive\\test\\test_onroad.py",
    "depends_on": [],
    "start_line": 213,
    "end_line": 233,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_onroad.TestOnroad.test_cpu_usage": {
    "id": "selfdrive.test.test_onroad.TestOnroad.test_cpu_usage",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_onroad.py",
    "relative_path": "selfdrive\\test\\test_onroad.py",
    "depends_on": [
      "selfdrive.test.test_onroad.cputime_total"
    ],
    "start_line": 235,
    "end_line": 286,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_onroad.TestOnroad.test_memory_usage": {
    "id": "selfdrive.test.test_onroad.TestOnroad.test_memory_usage",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_onroad.py",
    "relative_path": "selfdrive\\test\\test_onroad.py",
    "depends_on": [],
    "start_line": 288,
    "end_line": 300,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_onroad.TestOnroad.test_camera_frame_timings": {
    "id": "selfdrive.test.test_onroad.TestOnroad.test_camera_frame_timings",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_onroad.py",
    "relative_path": "selfdrive\\test\\test_onroad.py",
    "depends_on": [],
    "start_line": 302,
    "end_line": 318,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_onroad.TestOnroad.test_camera_sync": {
    "id": "selfdrive.test.test_onroad.TestOnroad.test_camera_sync",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_onroad.py",
    "relative_path": "selfdrive\\test\\test_onroad.py",
    "depends_on": [],
    "start_line": 320,
    "end_line": 352,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_onroad.TestOnroad.test_camera_encoder_matches": {
    "id": "selfdrive.test.test_onroad.TestOnroad.test_camera_encoder_matches",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_onroad.py",
    "relative_path": "selfdrive\\test\\test_onroad.py",
    "depends_on": [],
    "start_line": 354,
    "end_line": 371,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_onroad.TestOnroad.test_mpc_execution_timings": {
    "id": "selfdrive.test.test_onroad.TestOnroad.test_mpc_execution_timings",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_onroad.py",
    "relative_path": "selfdrive\\test\\test_onroad.py",
    "depends_on": [],
    "start_line": 373,
    "end_line": 388,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_onroad.TestOnroad.test_model_execution_timings": {
    "id": "selfdrive.test.test_onroad.TestOnroad.test_model_execution_timings",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_onroad.py",
    "relative_path": "selfdrive\\test\\test_onroad.py",
    "depends_on": [],
    "start_line": 390,
    "end_line": 414,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_onroad.TestOnroad.test_timings": {
    "id": "selfdrive.test.test_onroad.TestOnroad.test_timings",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_onroad.py",
    "relative_path": "selfdrive\\test\\test_onroad.py",
    "depends_on": [],
    "start_line": 416,
    "end_line": 444,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_onroad.TestOnroad.test_startup": {
    "id": "selfdrive.test.test_onroad.TestOnroad.test_startup",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_onroad.py",
    "relative_path": "selfdrive\\test\\test_onroad.py",
    "depends_on": [],
    "start_line": 447,
    "end_line": 450,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_onroad.TestOnroad.test_engagable": {
    "id": "selfdrive.test.test_onroad.TestOnroad.test_engagable",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_onroad.py",
    "relative_path": "selfdrive\\test\\test_onroad.py",
    "depends_on": [],
    "start_line": 452,
    "end_line": 462,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_updated.TestUpdated": {
    "id": "selfdrive.test.test_updated.TestUpdated",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_updated.py",
    "relative_path": "selfdrive\\test\\test_updated.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 296,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_updated.TestUpdated.setup_method": {
    "id": "selfdrive.test.test_updated.TestUpdated.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_updated.py",
    "relative_path": "selfdrive\\test\\test_updated.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 58,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_updated.TestUpdated.teardown_method": {
    "id": "selfdrive.test.test_updated.TestUpdated.teardown_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_updated.py",
    "relative_path": "selfdrive\\test\\test_updated.py",
    "depends_on": [],
    "start_line": 60,
    "end_line": 67,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_updated.TestUpdated._run": {
    "id": "selfdrive.test.test_updated.TestUpdated._run",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_updated.py",
    "relative_path": "selfdrive\\test\\test_updated.py",
    "depends_on": [],
    "start_line": 73,
    "end_line": 78,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_updated.TestUpdated._get_updated_proc": {
    "id": "selfdrive.test.test_updated.TestUpdated._get_updated_proc",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_updated.py",
    "relative_path": "selfdrive\\test\\test_updated.py",
    "depends_on": [],
    "start_line": 80,
    "end_line": 92,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_updated.TestUpdated._start_updater": {
    "id": "selfdrive.test.test_updated.TestUpdated._start_updater",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_updated.py",
    "relative_path": "selfdrive\\test\\test_updated.py",
    "depends_on": [],
    "start_line": 94,
    "end_line": 98,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_updated.TestUpdated._update_now": {
    "id": "selfdrive.test.test_updated.TestUpdated._update_now",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_updated.py",
    "relative_path": "selfdrive\\test\\test_updated.py",
    "depends_on": [],
    "start_line": 100,
    "end_line": 101,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_updated.TestUpdated._read_param": {
    "id": "selfdrive.test.test_updated.TestUpdated._read_param",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_updated.py",
    "relative_path": "selfdrive\\test\\test_updated.py",
    "depends_on": [],
    "start_line": 104,
    "end_line": 112,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_updated.TestUpdated._wait_for_update": {
    "id": "selfdrive.test.test_updated.TestUpdated._wait_for_update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_updated.py",
    "relative_path": "selfdrive\\test\\test_updated.py",
    "depends_on": [],
    "start_line": 114,
    "end_line": 121,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_updated.TestUpdated._make_commit": {
    "id": "selfdrive.test.test_updated.TestUpdated._make_commit",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_updated.py",
    "relative_path": "selfdrive\\test\\test_updated.py",
    "depends_on": [],
    "start_line": 123,
    "end_line": 161,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_updated.TestUpdated._check_update_state": {
    "id": "selfdrive.test.test_updated.TestUpdated._check_update_state",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_updated.py",
    "relative_path": "selfdrive\\test\\test_updated.py",
    "depends_on": [],
    "start_line": 163,
    "end_line": 182,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_updated.TestUpdated.test_no_update": {
    "id": "selfdrive.test.test_updated.TestUpdated.test_no_update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_updated.py",
    "relative_path": "selfdrive\\test\\test_updated.py",
    "depends_on": [],
    "start_line": 189,
    "end_line": 193,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_updated.TestUpdated.test_update": {
    "id": "selfdrive.test.test_updated.TestUpdated.test_update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_updated.py",
    "relative_path": "selfdrive\\test\\test_updated.py",
    "depends_on": [],
    "start_line": 196,
    "end_line": 212,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_updated.TestUpdated.test_update_loop": {
    "id": "selfdrive.test.test_updated.TestUpdated.test_update_loop",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_updated.py",
    "relative_path": "selfdrive\\test\\test_updated.py",
    "depends_on": [],
    "start_line": 216,
    "end_line": 225,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_updated.TestUpdated.test_overlay_reinit": {
    "id": "selfdrive.test.test_updated.TestUpdated.test_overlay_reinit",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_updated.py",
    "relative_path": "selfdrive\\test\\test_updated.py",
    "depends_on": [],
    "start_line": 228,
    "end_line": 249,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_updated.TestUpdated.test_multiple_instances": {
    "id": "selfdrive.test.test_updated.TestUpdated.test_multiple_instances",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_updated.py",
    "relative_path": "selfdrive\\test\\test_updated.py",
    "depends_on": [],
    "start_line": 252,
    "end_line": 261,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_updated.TestUpdated.test_clear_neos_cache": {
    "id": "selfdrive.test.test_updated.TestUpdated.test_clear_neos_cache",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_updated.py",
    "relative_path": "selfdrive\\test\\test_updated.py",
    "depends_on": [],
    "start_line": 268,
    "end_line": 278,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.test_updated.TestUpdated.test_update_with_neos_update": {
    "id": "selfdrive.test.test_updated.TestUpdated.test_update_with_neos_update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\test_updated.py",
    "relative_path": "selfdrive\\test\\test_updated.py",
    "depends_on": [],
    "start_line": 282,
    "end_line": 296,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.update_ci_routes.upload_route": {
    "id": "selfdrive.test.update_ci_routes.upload_route",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\update_ci_routes.py",
    "relative_path": "selfdrive\\test\\update_ci_routes.py",
    "depends_on": [],
    "start_line": 22,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.update_ci_routes.sync_to_ci_public": {
    "id": "selfdrive.test.update_ci_routes.sync_to_ci_public",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\update_ci_routes.py",
    "relative_path": "selfdrive\\test\\update_ci_routes.py",
    "depends_on": [],
    "start_line": 35,
    "end_line": 66,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.longitudinal_maneuvers.maneuver.Maneuver": {
    "id": "selfdrive.test.longitudinal_maneuvers.maneuver.Maneuver",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\longitudinal_maneuvers\\maneuver.py",
    "relative_path": "selfdrive\\test\\longitudinal_maneuvers\\maneuver.py",
    "depends_on": [],
    "start_line": 5,
    "end_line": 83,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.longitudinal_maneuvers.maneuver.Maneuver.__init__": {
    "id": "selfdrive.test.longitudinal_maneuvers.maneuver.Maneuver.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\longitudinal_maneuvers\\maneuver.py",
    "relative_path": "selfdrive\\test\\longitudinal_maneuvers\\maneuver.py",
    "depends_on": [],
    "start_line": 6,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.longitudinal_maneuvers.maneuver.Maneuver.evaluate": {
    "id": "selfdrive.test.longitudinal_maneuvers.maneuver.Maneuver.evaluate",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\longitudinal_maneuvers\\maneuver.py",
    "relative_path": "selfdrive\\test\\longitudinal_maneuvers\\maneuver.py",
    "depends_on": [],
    "start_line": 31,
    "end_line": 83,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.longitudinal_maneuvers.plant.Plant": {
    "id": "selfdrive.test.longitudinal_maneuvers.plant.Plant",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\longitudinal_maneuvers\\plant.py",
    "relative_path": "selfdrive\\test\\longitudinal_maneuvers\\plant.py",
    "depends_on": [
      "selfdrive.test.longitudinal_maneuvers.plant.Plant"
    ],
    "start_line": 14,
    "end_line": 175,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.longitudinal_maneuvers.plant.Plant.__init__": {
    "id": "selfdrive.test.longitudinal_maneuvers.plant.Plant.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\longitudinal_maneuvers\\plant.py",
    "relative_path": "selfdrive\\test\\longitudinal_maneuvers\\plant.py",
    "depends_on": [
      "selfdrive.test.longitudinal_maneuvers.plant.Plant"
    ],
    "start_line": 17,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.longitudinal_maneuvers.plant.Plant.current_time": {
    "id": "selfdrive.test.longitudinal_maneuvers.plant.Plant.current_time",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\longitudinal_maneuvers\\plant.py",
    "relative_path": "selfdrive\\test\\longitudinal_maneuvers\\plant.py",
    "depends_on": [],
    "start_line": 57,
    "end_line": 58,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.longitudinal_maneuvers.plant.Plant.step": {
    "id": "selfdrive.test.longitudinal_maneuvers.plant.Plant.step",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\longitudinal_maneuvers\\plant.py",
    "relative_path": "selfdrive\\test\\longitudinal_maneuvers\\plant.py",
    "depends_on": [],
    "start_line": 60,
    "end_line": 175,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.longitudinal_maneuvers.plant.plant_thread": {
    "id": "selfdrive.test.longitudinal_maneuvers.plant.plant_thread",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\longitudinal_maneuvers\\plant.py",
    "relative_path": "selfdrive\\test\\longitudinal_maneuvers\\plant.py",
    "depends_on": [
      "selfdrive.test.longitudinal_maneuvers.plant.Plant"
    ],
    "start_line": 178,
    "end_line": 181,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.longitudinal_maneuvers.test_longitudinal.create_maneuvers": {
    "id": "selfdrive.test.longitudinal_maneuvers.test_longitudinal.create_maneuvers",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\longitudinal_maneuvers\\test_longitudinal.py",
    "relative_path": "selfdrive\\test\\longitudinal_maneuvers\\test_longitudinal.py",
    "depends_on": [],
    "start_line": 9,
    "end_line": 178,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.longitudinal_maneuvers.test_longitudinal.TestLongitudinalControl": {
    "id": "selfdrive.test.longitudinal_maneuvers.test_longitudinal.TestLongitudinalControl",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\longitudinal_maneuvers\\test_longitudinal.py",
    "relative_path": "selfdrive\\test\\longitudinal_maneuvers\\test_longitudinal.py",
    "depends_on": [
      "selfdrive.test.longitudinal_maneuvers.test_longitudinal.create_maneuvers"
    ],
    "start_line": 182,
    "end_line": 191,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.longitudinal_maneuvers.test_longitudinal.TestLongitudinalControl.test_maneuver": {
    "id": "selfdrive.test.longitudinal_maneuvers.test_longitudinal.TestLongitudinalControl.test_maneuver",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\longitudinal_maneuvers\\test_longitudinal.py",
    "relative_path": "selfdrive\\test\\longitudinal_maneuvers\\test_longitudinal.py",
    "depends_on": [
      "selfdrive.test.longitudinal_maneuvers.test_longitudinal.create_maneuvers"
    ],
    "start_line": 186,
    "end_line": 191,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.capture.FdRedirect": {
    "id": "selfdrive.test.process_replay.capture.FdRedirect",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\capture.py",
    "relative_path": "selfdrive\\test\\process_replay\\capture.py",
    "depends_on": [],
    "start_line": 6,
    "end_line": 27,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.capture.FdRedirect.__init__": {
    "id": "selfdrive.test.process_replay.capture.FdRedirect.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\capture.py",
    "relative_path": "selfdrive\\test\\process_replay\\capture.py",
    "depends_on": [],
    "start_line": 7,
    "end_line": 14,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.capture.FdRedirect.__del__": {
    "id": "selfdrive.test.process_replay.capture.FdRedirect.__del__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\capture.py",
    "relative_path": "selfdrive\\test\\process_replay\\capture.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 17,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.capture.FdRedirect.purge": {
    "id": "selfdrive.test.process_replay.capture.FdRedirect.purge",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\capture.py",
    "relative_path": "selfdrive\\test\\process_replay\\capture.py",
    "depends_on": [],
    "start_line": 19,
    "end_line": 20,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.capture.FdRedirect.read": {
    "id": "selfdrive.test.process_replay.capture.FdRedirect.read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\capture.py",
    "relative_path": "selfdrive\\test\\process_replay\\capture.py",
    "depends_on": [],
    "start_line": 22,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.capture.FdRedirect.link": {
    "id": "selfdrive.test.process_replay.capture.FdRedirect.link",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\capture.py",
    "relative_path": "selfdrive\\test\\process_replay\\capture.py",
    "depends_on": [],
    "start_line": 26,
    "end_line": 27,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.capture.ProcessOutputCapture": {
    "id": "selfdrive.test.process_replay.capture.ProcessOutputCapture",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\capture.py",
    "relative_path": "selfdrive\\test\\process_replay\\capture.py",
    "depends_on": [
      "selfdrive.test.process_replay.capture.FdRedirect"
    ],
    "start_line": 30,
    "end_line": 59,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.capture.ProcessOutputCapture.__init__": {
    "id": "selfdrive.test.process_replay.capture.ProcessOutputCapture.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\capture.py",
    "relative_path": "selfdrive\\test\\process_replay\\capture.py",
    "depends_on": [
      "selfdrive.test.process_replay.capture.FdRedirect"
    ],
    "start_line": 31,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.capture.ProcessOutputCapture.__del__": {
    "id": "selfdrive.test.process_replay.capture.ProcessOutputCapture.__del__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\capture.py",
    "relative_path": "selfdrive\\test\\process_replay\\capture.py",
    "depends_on": [],
    "start_line": 36,
    "end_line": 38,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.capture.ProcessOutputCapture.link_with_current_proc": {
    "id": "selfdrive.test.process_replay.capture.ProcessOutputCapture.link_with_current_proc",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\capture.py",
    "relative_path": "selfdrive\\test\\process_replay\\capture.py",
    "depends_on": [],
    "start_line": 41,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.capture.ProcessOutputCapture.read_outerr": {
    "id": "selfdrive.test.process_replay.capture.ProcessOutputCapture.read_outerr",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\capture.py",
    "relative_path": "selfdrive\\test\\process_replay\\capture.py",
    "depends_on": [],
    "start_line": 56,
    "end_line": 59,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.compare_logs.remove_ignored_fields": {
    "id": "selfdrive.test.process_replay.compare_logs.remove_ignored_fields",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\compare_logs.py",
    "relative_path": "selfdrive\\test\\process_replay\\compare_logs.py",
    "depends_on": [],
    "start_line": 14,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.compare_logs.compare_logs": {
    "id": "selfdrive.test.process_replay.compare_logs.compare_logs",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\compare_logs.py",
    "relative_path": "selfdrive\\test\\process_replay\\compare_logs.py",
    "depends_on": [
      "selfdrive.test.process_replay.compare_logs.remove_ignored_fields"
    ],
    "start_line": 42,
    "end_line": 89,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.compare_logs.format_process_diff": {
    "id": "selfdrive.test.process_replay.compare_logs.format_process_diff",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\compare_logs.py",
    "relative_path": "selfdrive\\test\\process_replay\\compare_logs.py",
    "depends_on": [],
    "start_line": 92,
    "end_line": 109,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.compare_logs.format_diff": {
    "id": "selfdrive.test.process_replay.compare_logs.format_diff",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\compare_logs.py",
    "relative_path": "selfdrive\\test\\process_replay\\compare_logs.py",
    "depends_on": [
      "selfdrive.test.process_replay.compare_logs.format_process_diff"
    ],
    "start_line": 112,
    "end_line": 138,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.migration.migrate_all": {
    "id": "selfdrive.test.process_replay.migration.migrate_all",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\migration.py",
    "relative_path": "selfdrive\\test\\process_replay\\migration.py",
    "depends_on": [
      "selfdrive.test.process_replay.migration.migrate_deviceState",
      "selfdrive.test.process_replay.migration.migrate_peripheralState",
      "selfdrive.test.process_replay.migration.migrate_gpsLocation",
      "selfdrive.test.process_replay.migration.migrate",
      "selfdrive.test.process_replay.migration.migrate_cameraStates",
      "selfdrive.test.process_replay.migration.migrate_managerState",
      "selfdrive.test.process_replay.migration.migrate_drivingModelData",
      "selfdrive.test.process_replay.migration.migrate_driverMonitoringState",
      "selfdrive.test.process_replay.migration.migrate_sensorEvents",
      "selfdrive.test.process_replay.migration.migrate_carParams",
      "selfdrive.test.process_replay.migration.migrate_carOutput",
      "selfdrive.test.process_replay.migration.migrate_liveLocationKalman",
      "selfdrive.test.process_replay.migration.migrate_longitudinalPlan",
      "selfdrive.test.process_replay.migration.migrate_driverAssistance",
      "selfdrive.test.process_replay.migration.migrate_onroadEvents",
      "selfdrive.test.process_replay.migration.migrate_pandaStates",
      "selfdrive.test.process_replay.migration.migrate_carState",
      "selfdrive.test.process_replay.migration.migrate_liveTracks",
      "selfdrive.test.process_replay.migration.migrate_controlsState"
    ],
    "start_line": 31,
    "end_line": 55,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.migration.migrate": {
    "id": "selfdrive.test.process_replay.migration.migrate",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\migration.py",
    "relative_path": "selfdrive\\test\\process_replay\\migration.py",
    "depends_on": [
      "selfdrive.test.process_replay.migration.migration"
    ],
    "start_line": 58,
    "end_line": 85,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.migration.migration": {
    "id": "selfdrive.test.process_replay.migration.migration",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\migration.py",
    "relative_path": "selfdrive\\test\\process_replay\\migration.py",
    "depends_on": [],
    "start_line": 88,
    "end_line": 96,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.migration.migrate_longitudinalPlan": {
    "id": "selfdrive.test.process_replay.migration.migrate_longitudinalPlan",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\migration.py",
    "relative_path": "selfdrive\\test\\process_replay\\migration.py",
    "depends_on": [
      "selfdrive.test.process_replay.migration.migration"
    ],
    "start_line": 100,
    "end_line": 115,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.migration.migrate_driverAssistance": {
    "id": "selfdrive.test.process_replay.migration.migrate_driverAssistance",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\migration.py",
    "relative_path": "selfdrive\\test\\process_replay\\migration.py",
    "depends_on": [
      "selfdrive.test.process_replay.migration.migration"
    ],
    "start_line": 119,
    "end_line": 124,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.migration.migrate_drivingModelData": {
    "id": "selfdrive.test.process_replay.migration.migrate_drivingModelData",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\migration.py",
    "relative_path": "selfdrive\\test\\process_replay\\migration.py",
    "depends_on": [
      "selfdrive.test.process_replay.migration.migration"
    ],
    "start_line": 128,
    "end_line": 141,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.migration.migrate_liveTracks": {
    "id": "selfdrive.test.process_replay.migration.migrate_liveTracks",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\migration.py",
    "relative_path": "selfdrive\\test\\process_replay\\migration.py",
    "depends_on": [
      "selfdrive.test.process_replay.migration.migration"
    ],
    "start_line": 145,
    "end_line": 166,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.migration.migrate_liveLocationKalman": {
    "id": "selfdrive.test.process_replay.migration.migrate_liveLocationKalman",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\migration.py",
    "relative_path": "selfdrive\\test\\process_replay\\migration.py",
    "depends_on": [
      "selfdrive.test.process_replay.migration.migration"
    ],
    "start_line": 170,
    "end_line": 185,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.migration.migrate_controlsState": {
    "id": "selfdrive.test.process_replay.migration.migrate_controlsState",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\migration.py",
    "relative_path": "selfdrive\\test\\process_replay\\migration.py",
    "depends_on": [
      "selfdrive.test.process_replay.migration.migration"
    ],
    "start_line": 189,
    "end_line": 201,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.migration.migrate_carState": {
    "id": "selfdrive.test.process_replay.migration.migrate_carState",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\migration.py",
    "relative_path": "selfdrive\\test\\process_replay\\migration.py",
    "depends_on": [
      "selfdrive.test.process_replay.migration.migration"
    ],
    "start_line": 205,
    "end_line": 217,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.migration.migrate_managerState": {
    "id": "selfdrive.test.process_replay.migration.migrate_managerState",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\migration.py",
    "relative_path": "selfdrive\\test\\process_replay\\migration.py",
    "depends_on": [
      "selfdrive.test.process_replay.migration.migration"
    ],
    "start_line": 221,
    "end_line": 227,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.migration.migrate_gpsLocation": {
    "id": "selfdrive.test.process_replay.migration.migrate_gpsLocation",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\migration.py",
    "relative_path": "selfdrive\\test\\process_replay\\migration.py",
    "depends_on": [
      "selfdrive.test.process_replay.migration.migration"
    ],
    "start_line": 231,
    "end_line": 240,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.migration.migrate_deviceState": {
    "id": "selfdrive.test.process_replay.migration.migrate_deviceState",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\migration.py",
    "relative_path": "selfdrive\\test\\process_replay\\migration.py",
    "depends_on": [
      "selfdrive.test.process_replay.migration.migration"
    ],
    "start_line": 244,
    "end_line": 256,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.migration.migrate_carOutput": {
    "id": "selfdrive.test.process_replay.migration.migrate_carOutput",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\migration.py",
    "relative_path": "selfdrive\\test\\process_replay\\migration.py",
    "depends_on": [
      "selfdrive.test.process_replay.migration.migration"
    ],
    "start_line": 260,
    "end_line": 268,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.migration.migrate_pandaStates": {
    "id": "selfdrive.test.process_replay.migration.migrate_pandaStates",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\migration.py",
    "relative_path": "selfdrive\\test\\process_replay\\migration.py",
    "depends_on": [
      "selfdrive.test.process_replay.migration.migration"
    ],
    "start_line": 272,
    "end_line": 310,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.migration.migrate_peripheralState": {
    "id": "selfdrive.test.process_replay.migration.migrate_peripheralState",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\migration.py",
    "relative_path": "selfdrive\\test\\process_replay\\migration.py",
    "depends_on": [
      "selfdrive.test.process_replay.migration.migration"
    ],
    "start_line": 314,
    "end_line": 325,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.migration.migrate_cameraStates": {
    "id": "selfdrive.test.process_replay.migration.migrate_cameraStates",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\migration.py",
    "relative_path": "selfdrive\\test\\process_replay\\migration.py",
    "depends_on": [
      "selfdrive.test.process_replay.migration.migration"
    ],
    "start_line": 329,
    "end_line": 380,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.migration.migrate_carParams": {
    "id": "selfdrive.test.process_replay.migration.migrate_carParams",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\migration.py",
    "relative_path": "selfdrive\\test\\process_replay\\migration.py",
    "depends_on": [
      "selfdrive.test.process_replay.migration.migration"
    ],
    "start_line": 384,
    "end_line": 392,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.migration.migrate_sensorEvents": {
    "id": "selfdrive.test.process_replay.migration.migrate_sensorEvents",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\migration.py",
    "relative_path": "selfdrive\\test\\process_replay\\migration.py",
    "depends_on": [
      "selfdrive.test.process_replay.migration.migration"
    ],
    "start_line": 396,
    "end_line": 428,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.migration.migrate_onroadEvents": {
    "id": "selfdrive.test.process_replay.migration.migrate_onroadEvents",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\migration.py",
    "relative_path": "selfdrive\\test\\process_replay\\migration.py",
    "depends_on": [
      "selfdrive.test.process_replay.migration.migration"
    ],
    "start_line": 432,
    "end_line": 450,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.migration.migrate_driverMonitoringState": {
    "id": "selfdrive.test.process_replay.migration.migrate_driverMonitoringState",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\migration.py",
    "relative_path": "selfdrive\\test\\process_replay\\migration.py",
    "depends_on": [
      "selfdrive.test.process_replay.migration.migration"
    ],
    "start_line": 454,
    "end_line": 470,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.model_replay.get_log_fn": {
    "id": "selfdrive.test.process_replay.model_replay.get_log_fn",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\model_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\model_replay.py",
    "depends_on": [],
    "start_line": 40,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.model_replay.plot": {
    "id": "selfdrive.test.process_replay.model_replay.plot",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\model_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\model_replay.py",
    "depends_on": [],
    "start_line": 43,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.model_replay.get_event": {
    "id": "selfdrive.test.process_replay.model_replay.get_event",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\model_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\model_replay.py",
    "depends_on": [],
    "start_line": 54,
    "end_line": 55,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.model_replay.zl": {
    "id": "selfdrive.test.process_replay.model_replay.zl",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\model_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\model_replay.py",
    "depends_on": [],
    "start_line": 57,
    "end_line": 58,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.model_replay.get_idx_if_non_empty": {
    "id": "selfdrive.test.process_replay.model_replay.get_idx_if_non_empty",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\model_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\model_replay.py",
    "depends_on": [],
    "start_line": 60,
    "end_line": 61,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.model_replay.generate_report": {
    "id": "selfdrive.test.process_replay.model_replay.generate_report",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\model_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\model_replay.py",
    "depends_on": [
      "selfdrive.test.process_replay.model_replay.get_idx_if_non_empty",
      "selfdrive.test.process_replay.model_replay.get_event",
      "selfdrive.test.process_replay.model_replay.zl",
      "selfdrive.test.process_replay.model_replay.plot"
    ],
    "start_line": 63,
    "end_line": 85,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.model_replay.create_table": {
    "id": "selfdrive.test.process_replay.model_replay.create_table",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\model_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\model_replay.py",
    "depends_on": [],
    "start_line": 87,
    "end_line": 99,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.model_replay.comment_replay_report": {
    "id": "selfdrive.test.process_replay.model_replay.comment_replay_report",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\model_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\model_replay.py",
    "depends_on": [
      "selfdrive.test.process_replay.model_replay.create_table",
      "selfdrive.test.process_replay.model_replay.get_log_fn",
      "selfdrive.test.process_replay.model_replay.generate_report"
    ],
    "start_line": 101,
    "end_line": 126,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.model_replay.trim_logs_to_max_frames": {
    "id": "selfdrive.test.process_replay.model_replay.trim_logs_to_max_frames",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\model_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\model_replay.py",
    "depends_on": [],
    "start_line": 128,
    "end_line": 144,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.model_replay.model_replay": {
    "id": "selfdrive.test.process_replay.model_replay.model_replay",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\model_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\model_replay.py",
    "depends_on": [
      "selfdrive.test.process_replay.model_replay.trim_logs_to_max_frames"
    ],
    "start_line": 147,
    "end_line": 198,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.model_replay.get_frames": {
    "id": "selfdrive.test.process_replay.model_replay.get_frames",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\model_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\model_replay.py",
    "depends_on": [],
    "start_line": 201,
    "end_line": 222,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.DummySocket": {
    "id": "selfdrive.test.process_replay.process_replay.DummySocket",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 37,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.DummySocket.__init__": {
    "id": "selfdrive.test.process_replay.process_replay.DummySocket.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 38,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.DummySocket.receive": {
    "id": "selfdrive.test.process_replay.process_replay.DummySocket.receive",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 41,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.DummySocket.send": {
    "id": "selfdrive.test.process_replay.process_replay.DummySocket.send",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 47,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.LauncherWithCapture": {
    "id": "selfdrive.test.process_replay.process_replay.LauncherWithCapture",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 50,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.LauncherWithCapture.__init__": {
    "id": "selfdrive.test.process_replay.process_replay.LauncherWithCapture.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 51,
    "end_line": 53,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.LauncherWithCapture.__call__": {
    "id": "selfdrive.test.process_replay.process_replay.LauncherWithCapture.__call__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 55,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ReplayContext": {
    "id": "selfdrive.test.process_replay.process_replay.ReplayContext",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 60,
    "end_line": 125,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ReplayContext.__init__": {
    "id": "selfdrive.test.process_replay.process_replay.ReplayContext.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 61,
    "end_line": 67,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ReplayContext.__enter__": {
    "id": "selfdrive.test.process_replay.process_replay.ReplayContext.__enter__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 69,
    "end_line": 72,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ReplayContext.__exit__": {
    "id": "selfdrive.test.process_replay.process_replay.ReplayContext.__exit__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 74,
    "end_line": 75,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ReplayContext.open_context": {
    "id": "selfdrive.test.process_replay.process_replay.ReplayContext.open_context",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 77,
    "end_line": 87,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ReplayContext.close_context": {
    "id": "selfdrive.test.process_replay.process_replay.ReplayContext.close_context",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 89,
    "end_line": 93,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ReplayContext.all_recv_called_events": {
    "id": "selfdrive.test.process_replay.process_replay.ReplayContext.all_recv_called_events",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 96,
    "end_line": 97,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ReplayContext.all_recv_ready_events": {
    "id": "selfdrive.test.process_replay.process_replay.ReplayContext.all_recv_ready_events",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 100,
    "end_line": 101,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ReplayContext.send_sync": {
    "id": "selfdrive.test.process_replay.process_replay.ReplayContext.send_sync",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 103,
    "end_line": 107,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ReplayContext.unlock_sockets": {
    "id": "selfdrive.test.process_replay.process_replay.ReplayContext.unlock_sockets",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 109,
    "end_line": 115,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ReplayContext.wait_for_recv_called": {
    "id": "selfdrive.test.process_replay.process_replay.ReplayContext.wait_for_recv_called",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 117,
    "end_line": 118,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ReplayContext.wait_for_next_recv": {
    "id": "selfdrive.test.process_replay.process_replay.ReplayContext.wait_for_next_recv",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 120,
    "end_line": 125,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ProcessConfig": {
    "id": "selfdrive.test.process_replay.process_replay.ProcessConfig",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 129,
    "end_line": 145,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ProcessContainer": {
    "id": "selfdrive.test.process_replay.process_replay.ProcessContainer",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [
      "selfdrive.test.process_replay.process_replay.ReplayContext",
      "selfdrive.test.process_replay.process_replay.LauncherWithCapture",
      "selfdrive.test.process_replay.process_replay.ProcessConfig"
    ],
    "start_line": 148,
    "end_line": 316,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ProcessContainer.__init__": {
    "id": "selfdrive.test.process_replay.process_replay.ProcessContainer.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [
      "selfdrive.test.process_replay.process_replay.ReplayContext",
      "selfdrive.test.process_replay.process_replay.ProcessConfig"
    ],
    "start_line": 149,
    "end_line": 160,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ProcessContainer.has_empty_queue": {
    "id": "selfdrive.test.process_replay.process_replay.ProcessContainer.has_empty_queue",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 163,
    "end_line": 164,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ProcessContainer.pubs": {
    "id": "selfdrive.test.process_replay.process_replay.ProcessContainer.pubs",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 167,
    "end_line": 168,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ProcessContainer.subs": {
    "id": "selfdrive.test.process_replay.process_replay.ProcessContainer.subs",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 171,
    "end_line": 172,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ProcessContainer._clean_env": {
    "id": "selfdrive.test.process_replay.process_replay.ProcessContainer._clean_env",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 174,
    "end_line": 181,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ProcessContainer._setup_env": {
    "id": "selfdrive.test.process_replay.process_replay.ProcessContainer._setup_env",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 183,
    "end_line": 203,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ProcessContainer._setup_vision_ipc": {
    "id": "selfdrive.test.process_replay.process_replay.ProcessContainer._setup_vision_ipc",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 205,
    "end_line": 217,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ProcessContainer._start_process": {
    "id": "selfdrive.test.process_replay.process_replay.ProcessContainer._start_process",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [
      "selfdrive.test.process_replay.process_replay.LauncherWithCapture"
    ],
    "start_line": 219,
    "end_line": 223,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ProcessContainer.start": {
    "id": "selfdrive.test.process_replay.process_replay.ProcessContainer.start",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [
      "selfdrive.test.process_replay.process_replay.ReplayContext"
    ],
    "start_line": 225,
    "end_line": 259,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ProcessContainer.stop": {
    "id": "selfdrive.test.process_replay.process_replay.ProcessContainer.stop",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 261,
    "end_line": 267,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ProcessContainer.run_step": {
    "id": "selfdrive.test.process_replay.process_replay.ProcessContainer.run_step",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 269,
    "end_line": 316,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.card_fingerprint_callback": {
    "id": "selfdrive.test.process_replay.process_replay.card_fingerprint_callback",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 319,
    "end_line": 337,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.get_car_params_callback": {
    "id": "selfdrive.test.process_replay.process_replay.get_car_params_callback",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [
      "selfdrive.test.process_replay.process_replay.DummySocket"
    ],
    "start_line": 340,
    "end_line": 367,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.selfdrived_rcv_callback": {
    "id": "selfdrive.test.process_replay.process_replay.selfdrived_rcv_callback",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 370,
    "end_line": 371,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.card_rcv_callback": {
    "id": "selfdrive.test.process_replay.process_replay.card_rcv_callback",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 374,
    "end_line": 385,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.calibration_rcv_callback": {
    "id": "selfdrive.test.process_replay.process_replay.calibration_rcv_callback",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 388,
    "end_line": 391,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.torqued_rcv_callback": {
    "id": "selfdrive.test.process_replay.process_replay.torqued_rcv_callback",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 394,
    "end_line": 396,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.dmonitoringmodeld_rcv_callback": {
    "id": "selfdrive.test.process_replay.process_replay.dmonitoringmodeld_rcv_callback",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 399,
    "end_line": 400,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ModeldCameraSyncRcvCallback": {
    "id": "selfdrive.test.process_replay.process_replay.ModeldCameraSyncRcvCallback",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 403,
    "end_line": 423,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ModeldCameraSyncRcvCallback.__init__": {
    "id": "selfdrive.test.process_replay.process_replay.ModeldCameraSyncRcvCallback.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 404,
    "end_line": 407,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.ModeldCameraSyncRcvCallback.__call__": {
    "id": "selfdrive.test.process_replay.process_replay.ModeldCameraSyncRcvCallback.__call__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 409,
    "end_line": 423,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.MessageBasedRcvCallback": {
    "id": "selfdrive.test.process_replay.process_replay.MessageBasedRcvCallback",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 426,
    "end_line": 431,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.MessageBasedRcvCallback.__init__": {
    "id": "selfdrive.test.process_replay.process_replay.MessageBasedRcvCallback.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 427,
    "end_line": 428,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.MessageBasedRcvCallback.__call__": {
    "id": "selfdrive.test.process_replay.process_replay.MessageBasedRcvCallback.__call__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 430,
    "end_line": 431,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.FrequencyBasedRcvCallback": {
    "id": "selfdrive.test.process_replay.process_replay.FrequencyBasedRcvCallback",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 434,
    "end_line": 446,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.FrequencyBasedRcvCallback.__init__": {
    "id": "selfdrive.test.process_replay.process_replay.FrequencyBasedRcvCallback.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 435,
    "end_line": 436,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.FrequencyBasedRcvCallback.__call__": {
    "id": "selfdrive.test.process_replay.process_replay.FrequencyBasedRcvCallback.__call__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 438,
    "end_line": 446,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.selfdrived_config_callback": {
    "id": "selfdrive.test.process_replay.process_replay.selfdrived_config_callback",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 449,
    "end_line": 453,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.get_process_config": {
    "id": "selfdrive.test.process_replay.process_replay.get_process_config",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [
      "selfdrive.test.process_replay.process_replay.ProcessConfig"
    ],
    "start_line": 604,
    "end_line": 608,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.get_custom_params_from_lr": {
    "id": "selfdrive.test.process_replay.process_replay.get_custom_params_from_lr",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 611,
    "end_line": 640,
    "has_docstring": true,
    "docstring": "\n  Use this to get custom params dict based on provided logs.\n  Useful when replaying following processes: calibrationd, paramsd, torqued\n  The params may be based on first or last message of given type (carParams, liveCalibration, liveParameters, liveTorqueParameters) in the logs.\n  ",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.replay_process_with_name": {
    "id": "selfdrive.test.process_replay.process_replay.replay_process_with_name",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [
      "selfdrive.test.process_replay.process_replay.get_process_config",
      "selfdrive.test.process_replay.process_replay.replay_process"
    ],
    "start_line": 643,
    "end_line": 651,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.replay_process": {
    "id": "selfdrive.test.process_replay.process_replay.replay_process",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [
      "selfdrive.test.process_replay.process_replay._replay_multi_process",
      "selfdrive.test.process_replay.process_replay.ProcessConfig"
    ],
    "start_line": 654,
    "end_line": 679,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay._replay_multi_process": {
    "id": "selfdrive.test.process_replay.process_replay._replay_multi_process",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [
      "selfdrive.test.process_replay.process_replay.ProcessContainer",
      "selfdrive.test.process_replay.process_replay.ProcessConfig",
      "selfdrive.test.process_replay.process_replay.generate_params_config",
      "selfdrive.test.process_replay.process_replay.generate_environ_config"
    ],
    "start_line": 682,
    "end_line": 749,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.generate_params_config": {
    "id": "selfdrive.test.process_replay.process_replay.generate_params_config",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 752,
    "end_line": 778,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.generate_environ_config": {
    "id": "selfdrive.test.process_replay.process_replay.generate_environ_config",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 781,
    "end_line": 804,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.check_openpilot_enabled": {
    "id": "selfdrive.test.process_replay.process_replay.check_openpilot_enabled",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 807,
    "end_line": 821,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.process_replay.check_most_messages_valid": {
    "id": "selfdrive.test.process_replay.process_replay.check_most_messages_valid",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\process_replay.py",
    "relative_path": "selfdrive\\test\\process_replay\\process_replay.py",
    "depends_on": [],
    "start_line": 824,
    "end_line": 840,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.regen.DummyFrameReader": {
    "id": "selfdrive.test.process_replay.regen.DummyFrameReader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\regen.py",
    "relative_path": "selfdrive\\test\\process_replay\\regen.py",
    "depends_on": [
      "selfdrive.test.process_replay.regen.DummyFrameReader"
    ],
    "start_line": 19,
    "end_line": 38,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.regen.DummyFrameReader.__init__": {
    "id": "selfdrive.test.process_replay.regen.DummyFrameReader.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\regen.py",
    "relative_path": "selfdrive\\test\\process_replay\\regen.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.regen.DummyFrameReader.get": {
    "id": "selfdrive.test.process_replay.regen.DummyFrameReader.get",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\regen.py",
    "relative_path": "selfdrive\\test\\process_replay\\regen.py",
    "depends_on": [],
    "start_line": 26,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.regen.DummyFrameReader.zero_dcamera": {
    "id": "selfdrive.test.process_replay.regen.DummyFrameReader.zero_dcamera",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\regen.py",
    "relative_path": "selfdrive\\test\\process_replay\\regen.py",
    "depends_on": [
      "selfdrive.test.process_replay.regen.DummyFrameReader"
    ],
    "start_line": 37,
    "end_line": 38,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.regen.regen_segment": {
    "id": "selfdrive.test.process_replay.regen.regen_segment",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\regen.py",
    "relative_path": "selfdrive\\test\\process_replay\\regen.py",
    "depends_on": [],
    "start_line": 41,
    "end_line": 53,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.regen.setup_data_readers": {
    "id": "selfdrive.test.process_replay.regen.setup_data_readers",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\regen.py",
    "relative_path": "selfdrive\\test\\process_replay\\regen.py",
    "depends_on": [
      "selfdrive.test.process_replay.regen.DummyFrameReader"
    ],
    "start_line": 56,
    "end_line": 73,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.regen.regen_and_save": {
    "id": "selfdrive.test.process_replay.regen.regen_and_save",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\regen.py",
    "relative_path": "selfdrive\\test\\process_replay\\regen.py",
    "depends_on": [
      "selfdrive.test.process_replay.regen.setup_data_readers",
      "selfdrive.test.process_replay.regen.regen_segment"
    ],
    "start_line": 76,
    "end_line": 119,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.regen_all.regen_job": {
    "id": "selfdrive.test.process_replay.regen_all.regen_job",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\regen_all.py",
    "relative_path": "selfdrive\\test\\process_replay\\regen_all.py",
    "depends_on": [],
    "start_line": 15,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.test_fuzzy.TestFuzzProcesses": {
    "id": "selfdrive.test.process_replay.test_fuzzy.TestFuzzProcesses",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\test_fuzzy.py",
    "relative_path": "selfdrive\\test\\process_replay\\test_fuzzy.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.test_fuzzy.TestFuzzProcesses.test_fuzz_process": {
    "id": "selfdrive.test.process_replay.test_fuzzy.TestFuzzProcesses.test_fuzz_process",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\test_fuzzy.py",
    "relative_path": "selfdrive\\test\\process_replay\\test_fuzzy.py",
    "depends_on": [],
    "start_line": 27,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.test_processes.run_test_process": {
    "id": "selfdrive.test.process_replay.test_processes.run_test_process",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\test_processes.py",
    "relative_path": "selfdrive\\test\\process_replay\\test_processes.py",
    "depends_on": [
      "selfdrive.test.process_replay.test_processes.test_process"
    ],
    "start_line": 73,
    "end_line": 87,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.test_processes.get_log_data": {
    "id": "selfdrive.test.process_replay.test_processes.get_log_data",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\test_processes.py",
    "relative_path": "selfdrive\\test\\process_replay\\test_processes.py",
    "depends_on": [],
    "start_line": 90,
    "end_line": 93,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.test_processes.test_process": {
    "id": "selfdrive.test.process_replay.test_processes.test_process",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\test_processes.py",
    "relative_path": "selfdrive\\test\\process_replay\\test_processes.py",
    "depends_on": [],
    "start_line": 96,
    "end_line": 122,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.test_regen.ci_setup_data_readers": {
    "id": "selfdrive.test.process_replay.test_regen.ci_setup_data_readers",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\test_regen.py",
    "relative_path": "selfdrive\\test\\process_replay\\test_regen.py",
    "depends_on": [],
    "start_line": 17,
    "end_line": 26,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.test_regen.TestRegen": {
    "id": "selfdrive.test.process_replay.test_regen.TestRegen",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\test_regen.py",
    "relative_path": "selfdrive\\test\\process_replay\\test_regen.py",
    "depends_on": [
      "selfdrive.test.process_replay.test_regen.ci_setup_data_readers"
    ],
    "start_line": 29,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.test_regen.TestRegen.test_engaged": {
    "id": "selfdrive.test.process_replay.test_regen.TestRegen.test_engaged",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\test_regen.py",
    "relative_path": "selfdrive\\test\\process_replay\\test_regen.py",
    "depends_on": [
      "selfdrive.test.process_replay.test_regen.ci_setup_data_readers"
    ],
    "start_line": 31,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.vision_meta.meta_from_camera_state": {
    "id": "selfdrive.test.process_replay.vision_meta.meta_from_camera_state",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\vision_meta.py",
    "relative_path": "selfdrive\\test\\process_replay\\vision_meta.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 20,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.vision_meta.meta_from_encode_index": {
    "id": "selfdrive.test.process_replay.vision_meta.meta_from_encode_index",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\vision_meta.py",
    "relative_path": "selfdrive\\test\\process_replay\\vision_meta.py",
    "depends_on": [],
    "start_line": 23,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.vision_meta.meta_from_stream_type": {
    "id": "selfdrive.test.process_replay.vision_meta.meta_from_stream_type",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\vision_meta.py",
    "relative_path": "selfdrive\\test\\process_replay\\vision_meta.py",
    "depends_on": [],
    "start_line": 28,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.test.process_replay.vision_meta.available_streams": {
    "id": "selfdrive.test.process_replay.vision_meta.available_streams",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\test\\process_replay\\vision_meta.py",
    "relative_path": "selfdrive\\test\\process_replay\\vision_meta.py",
    "depends_on": [],
    "start_line": 33,
    "end_line": 43,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.main.main": {
    "id": "selfdrive.ui.main.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\main.cc",
    "relative_path": "selfdrive\\ui\\main.cc",
    "depends_on": [],
    "start_line": 11,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int main(int argc, char *argv[]) {\n  setpriority(PRIO_PROCESS, 0, -20);\n\n  qInstallMessageHandler(swagLogMessageHandler);\n  initApp(argc, argv);\n\n  QTranslator translator;\n  QString translation_file = QString::fromStdString(Params().get(\"LanguageSetting\"));\n  if (!translator.load(QString(\":/%1\").arg(translation_file)) && translation_file.length()) {\n    qCritical() << \"Failed to load translation file:\" << translation_file;\n  }\n\n  QApplication a(argc, argv);\n  a.installTranslator(&translator);\n\n  MainWindow w;\n  setMainWindow(&w);\n  a.installEventFilter(&w);\n  return a.exec();\n}\n"
  },
  "selfdrive.ui.soundd.check_selfdrive_timeout_alert": {
    "id": "selfdrive.ui.soundd.check_selfdrive_timeout_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\soundd.py",
    "relative_path": "selfdrive\\ui\\soundd.py",
    "depends_on": [],
    "start_line": 43,
    "end_line": 50,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.soundd.Soundd": {
    "id": "selfdrive.ui.soundd.Soundd",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\soundd.py",
    "relative_path": "selfdrive\\ui\\soundd.py",
    "depends_on": [
      "selfdrive.ui.soundd.check_selfdrive_timeout_alert"
    ],
    "start_line": 53,
    "end_line": 155,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.soundd.Soundd.__init__": {
    "id": "selfdrive.ui.soundd.Soundd.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\soundd.py",
    "relative_path": "selfdrive\\ui\\soundd.py",
    "depends_on": [],
    "start_line": 54,
    "end_line": 63,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.soundd.Soundd.load_sounds": {
    "id": "selfdrive.ui.soundd.Soundd.load_sounds",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\soundd.py",
    "relative_path": "selfdrive\\ui\\soundd.py",
    "depends_on": [],
    "start_line": 65,
    "end_line": 78,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.soundd.Soundd.get_sound_data": {
    "id": "selfdrive.ui.soundd.Soundd.get_sound_data",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\soundd.py",
    "relative_path": "selfdrive\\ui\\soundd.py",
    "depends_on": [],
    "start_line": 80,
    "end_line": 99,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.soundd.Soundd.callback": {
    "id": "selfdrive.ui.soundd.Soundd.callback",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\soundd.py",
    "relative_path": "selfdrive\\ui\\soundd.py",
    "depends_on": [],
    "start_line": 101,
    "end_line": 104,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.soundd.Soundd.update_alert": {
    "id": "selfdrive.ui.soundd.Soundd.update_alert",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\soundd.py",
    "relative_path": "selfdrive\\ui\\soundd.py",
    "depends_on": [],
    "start_line": 106,
    "end_line": 110,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.soundd.Soundd.get_audible_alert": {
    "id": "selfdrive.ui.soundd.Soundd.get_audible_alert",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\soundd.py",
    "relative_path": "selfdrive\\ui\\soundd.py",
    "depends_on": [
      "selfdrive.ui.soundd.check_selfdrive_timeout_alert"
    ],
    "start_line": 112,
    "end_line": 121,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.soundd.Soundd.calculate_volume": {
    "id": "selfdrive.ui.soundd.Soundd.calculate_volume",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\soundd.py",
    "relative_path": "selfdrive\\ui\\soundd.py",
    "depends_on": [],
    "start_line": 123,
    "end_line": 125,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.soundd.Soundd.get_stream": {
    "id": "selfdrive.ui.soundd.Soundd.get_stream",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\soundd.py",
    "relative_path": "selfdrive\\ui\\soundd.py",
    "depends_on": [],
    "start_line": 128,
    "end_line": 132,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.soundd.Soundd.soundd_thread": {
    "id": "selfdrive.ui.soundd.Soundd.soundd_thread",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\soundd.py",
    "relative_path": "selfdrive\\ui\\soundd.py",
    "depends_on": [],
    "start_line": 134,
    "end_line": 155,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.soundd.main": {
    "id": "selfdrive.ui.soundd.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\soundd.py",
    "relative_path": "selfdrive\\ui\\soundd.py",
    "depends_on": [
      "selfdrive.ui.soundd.Soundd"
    ],
    "start_line": 158,
    "end_line": 160,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.ui.update_sockets": {
    "id": "selfdrive.ui.ui.update_sockets",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\ui.cc",
    "relative_path": "selfdrive\\ui\\ui.cc",
    "depends_on": [],
    "start_line": 17,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static void update_sockets(UIState *s) {\n  s->sm->update(0);\n}\n"
  },
  "selfdrive.ui.ui.update_state": {
    "id": "selfdrive.ui.ui.update_state",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\ui.cc",
    "relative_path": "selfdrive\\ui\\ui.cc",
    "depends_on": [],
    "start_line": 21,
    "end_line": 63,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static void update_state(UIState *s) {\n  SubMaster &sm = *(s->sm);\n  UIScene &scene = s->scene;\n\n  if (sm.updated(\"liveCalibration\")) {\n    auto list2rot = [](const capnp::List<float>::Reader &rpy_list) ->Eigen::Matrix3f {\n      return euler2rot({rpy_list[0], rpy_list[1], rpy_list[2]}).cast<float>();\n    };\n\n    auto live_calib = sm[\"liveCalibration\"].getLiveCalibration();\n    if (live_calib.getCalStatus() == cereal::LiveCalibrationData::Status::CALIBRATED) {\n      auto device_from_calib = list2rot(live_calib.getRpyCalib());\n      auto wide_from_device = list2rot(live_calib.getWideFromDeviceEuler());\n      s->scene.view_from_calib = VIEW_FROM_DEVICE * device_from_calib;\n      s->scene.view_from_wide_calib = VIEW_FROM_DEVICE * wide_from_device * device_from_calib;\n    } else {\n      s->scene.view_from_calib = s->scene.view_from_wide_calib = VIEW_FROM_DEVICE;\n    }\n  }\n  if (sm.updated(\"pandaStates\")) {\n    auto pandaStates = sm[\"pandaStates\"].getPandaStates();\n    if (pandaStates.size() > 0) {\n      scene.pandaType = pandaStates[0].getPandaType();\n\n      if (scene.pandaType != cereal::PandaState::PandaType::UNKNOWN) {\n        scene.ignition = false;\n        for (const auto& pandaState : pandaStates) {\n          scene.ignition |= pandaState.getIgnitionLine() || pandaState.getIgnitionCan();\n        }\n      }\n    }\n  } else if ((s->sm->frame - s->sm->rcv_frame(\"pandaStates\")) > 5*UI_FREQ) {\n    scene.pandaType = cereal::PandaState::PandaType::UNKNOWN;\n  }\n  if (sm.updated(\"wideRoadCameraState\")) {\n    auto cam_state = sm[\"wideRoadCameraState\"].getWideRoadCameraState();\n    float scale = (cam_state.getSensor() == cereal::FrameData::ImageSensor::AR0231) ? 6.0f : 1.0f;\n    scene.light_sensor = std::max(100.0f - scale * cam_state.getExposureValPercent(), 0.0f);\n  } else if (!sm.allAliveAndValid({\"wideRoadCameraState\"})) {\n    scene.light_sensor = -1;\n  }\n  scene.started = sm[\"deviceState\"].getDeviceState().getStarted() && scene.ignition;\n}\n"
  },
  "selfdrive.ui.ui.ui_update_params": {
    "id": "selfdrive.ui.ui.ui_update_params",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\ui.cc",
    "relative_path": "selfdrive\\ui\\ui.cc",
    "depends_on": [],
    "start_line": 65,
    "end_line": 68,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void ui_update_params(UIState *s) {\n  auto params = Params();\n  s->scene.is_metric = params.getBool(\"IsMetric\");\n}\n"
  },
  "selfdrive.ui.ui.uiState": {
    "id": "selfdrive.ui.ui.uiState",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\ui.cc",
    "relative_path": "selfdrive\\ui\\ui.cc",
    "depends_on": [],
    "start_line": 188,
    "end_line": 191,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "UIState *uiState() {\n  static UIState ui_state;\n  return &ui_state;\n}\n"
  },
  "selfdrive.ui.ui.device": {
    "id": "selfdrive.ui.ui.device",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\ui.cc",
    "relative_path": "selfdrive\\ui\\ui.cc",
    "depends_on": [],
    "start_line": 193,
    "end_line": 196,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "Device *device() {\n  static Device _device;\n  return &_device;\n}\n"
  },
  "selfdrive.ui.ui.UIState": {
    "id": "selfdrive.ui.ui.UIState",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\ui.h",
    "relative_path": "selfdrive\\ui\\ui.h",
    "depends_on": [],
    "start_line": 65,
    "end_line": 91,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class UIState : public QObject {\n  Q_OBJECT\n\npublic:\n  UIState(QObject* parent = 0);\n  void updateStatus();\n  inline bool engaged() const {\n    return scene.started && (*sm)[\"selfdriveState\"].getSelfdriveState().getEnabled();\n  }\n\n  std::unique_ptr<SubMaster> sm;\n  UIStatus status;\n  UIScene scene = {};\n  QString language;\n  PrimeState *prime_state;\n\nsignals:\n  void uiUpdate(const UIState &s);\n  void offroadTransition(bool offroad);\n\nprivate slots:\n  void update();\n\nprivate:\n  QTimer *timer;\n  bool started_prev = false;\n};\n"
  },
  "selfdrive.ui.ui.UIState.engaged": {
    "id": "selfdrive.ui.ui.UIState.engaged",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\ui.h",
    "relative_path": "selfdrive\\ui\\ui.h",
    "depends_on": [],
    "start_line": 71,
    "end_line": 73,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  inline bool engaged() const {\n    return scene.started && (*sm)[\"selfdriveState\"].getSelfdriveState().getEnabled();\n  }\n"
  },
  "selfdrive.ui.ui.Device": {
    "id": "selfdrive.ui.ui.Device",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\ui.h",
    "relative_path": "selfdrive\\ui\\ui.h",
    "depends_on": [],
    "start_line": 96,
    "end_line": 127,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class Device : public QObject {\n  Q_OBJECT\n\npublic:\n  Device(QObject *parent = 0);\n  bool isAwake() { return awake; }\n  void setOffroadBrightness(int brightness) {\n    offroad_brightness = std::clamp(brightness, 0, 100);\n  }\n\nprivate:\n  bool awake = false;\n  int interactive_timeout = 0;\n  bool ignition_on = false;\n\n  int offroad_brightness = BACKLIGHT_OFFROAD;\n  int last_brightness = 0;\n  FirstOrderFilter brightness_filter;\n  QFuture<void> brightness_future;\n\n  void updateBrightness(const UIState &s);\n  void updateWakefulness(const UIState &s);\n  void setAwake(bool on);\n\nsignals:\n  void displayPowerChanged(bool on);\n  void interactiveTimeout();\n\npublic slots:\n  void resetInteractiveTimeout(int timeout = -1);\n  void update(const UIState &s);\n};\n"
  },
  "selfdrive.ui.ui.Device.setOffroadBrightness": {
    "id": "selfdrive.ui.ui.Device.setOffroadBrightness",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\ui.h",
    "relative_path": "selfdrive\\ui\\ui.h",
    "depends_on": [],
    "start_line": 102,
    "end_line": 104,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  void setOffroadBrightness(int brightness) {\n    offroad_brightness = std::clamp(brightness, 0, 100);\n  }\n"
  },
  "selfdrive.ui.update_translations.generate_translations_include": {
    "id": "selfdrive.ui.update_translations.generate_translations_include",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\update_translations.py",
    "relative_path": "selfdrive\\ui\\update_translations.py",
    "depends_on": [],
    "start_line": 15,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.update_translations.update_translations": {
    "id": "selfdrive.ui.update_translations.update_translations",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\update_translations.py",
    "relative_path": "selfdrive\\ui\\update_translations.py",
    "depends_on": [],
    "start_line": 27,
    "end_line": 40,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.watch3.main": {
    "id": "selfdrive.ui.watch3.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\watch3.cc",
    "relative_path": "selfdrive\\ui\\watch3.cc",
    "depends_on": [],
    "start_line": 8,
    "end_line": 33,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int main(int argc, char *argv[]) {\n  initApp(argc, argv);\n\n  QApplication a(argc, argv);\n  QWidget w;\n  setMainWindow(&w);\n\n  QVBoxLayout *layout = new QVBoxLayout(&w);\n  layout->setMargin(0);\n  layout->setSpacing(0);\n\n  {\n    QHBoxLayout *hlayout = new QHBoxLayout();\n    layout->addLayout(hlayout);\n    hlayout->addWidget(new CameraWidget(\"camerad\", VISION_STREAM_ROAD));\n  }\n\n  {\n    QHBoxLayout *hlayout = new QHBoxLayout();\n    layout->addLayout(hlayout);\n    hlayout->addWidget(new CameraWidget(\"camerad\", VISION_STREAM_DRIVER));\n    hlayout->addWidget(new CameraWidget(\"camerad\", VISION_STREAM_WIDE_ROAD));\n  }\n\n  return a.exec();\n}\n"
  },
  "selfdrive.ui.installer.installer.get_str": {
    "id": "selfdrive.ui.installer.installer.get_str",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\installer\\installer.cc",
    "relative_path": "selfdrive\\ui\\installer\\installer.cc",
    "depends_on": [],
    "start_line": 18,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string get_str(std::string const s) {\n  std::string::size_type pos = s.find('?');\n  assert(pos != std::string::npos);\n  return s.substr(0, pos);\n}\n"
  },
  "selfdrive.ui.installer.installer.run": {
    "id": "selfdrive.ui.installer.installer.run",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\installer\\installer.cc",
    "relative_path": "selfdrive\\ui\\installer\\installer.cc",
    "depends_on": [],
    "start_line": 39,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void run(const char* cmd) {\n  int err = std::system(cmd);\n  assert(err == 0);\n}\n"
  },
  "selfdrive.ui.installer.installer.main": {
    "id": "selfdrive.ui.installer.installer.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\installer\\installer.cc",
    "relative_path": "selfdrive\\ui\\installer\\installer.cc",
    "depends_on": [],
    "start_line": 209,
    "end_line": 215,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int main(int argc, char *argv[]) {\n  initApp(argc, argv);\n  QApplication a(argc, argv);\n  Installer installer;\n  setMainWindow(&installer);\n  return a.exec();\n}\n"
  },
  "selfdrive.ui.installer.installer.Installer": {
    "id": "selfdrive.ui.installer.installer.Installer",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\installer\\installer.h",
    "relative_path": "selfdrive\\ui\\installer\\installer.h",
    "depends_on": [],
    "start_line": 8,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class Installer : public QWidget {\n  Q_OBJECT\n\npublic:\n  explicit Installer(QWidget *parent = 0);\n\nprivate slots:\n  void updateProgress(int percent);\n\n  void readProgress();\n  void cloneFinished(int exitCode, QProcess::ExitStatus exitStatus);\n\nprivate:\n  QLabel *val;\n  QProgressBar *bar;\n  QProcess proc;\n\n  void doInstall();\n  void freshClone();\n  void cachedFetch(const QString &cache);\n};\n"
  },
  "selfdrive.ui.qt.api.get_rsa_private_key": {
    "id": "selfdrive.ui.qt.api.get_rsa_private_key",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\api.cc",
    "relative_path": "selfdrive\\ui\\qt\\api.cc",
    "depends_on": [],
    "start_line": 22,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RSA *get_rsa_private_key() {\n  static std::unique_ptr<RSA, decltype(&RSA_free)> rsa_private(nullptr, RSA_free);\n  if (!rsa_private) {\n    FILE *fp = fopen(Path::rsa_file().c_str(), \"rb\");\n    if (!fp) {\n      qDebug() << \"No RSA private key found, please run manager.py or registration.py\";\n      return nullptr;\n    }\n    rsa_private.reset(PEM_read_RSAPrivateKey(fp, NULL, NULL, NULL));\n    fclose(fp);\n  }\n  return rsa_private.get();\n}\n"
  },
  "selfdrive.ui.qt.api.rsa_sign": {
    "id": "selfdrive.ui.qt.api.rsa_sign",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\api.cc",
    "relative_path": "selfdrive\\ui\\qt\\api.cc",
    "depends_on": [],
    "start_line": 36,
    "end_line": 46,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QByteArray rsa_sign(const QByteArray &data) {\n  RSA *rsa_private = get_rsa_private_key();\n  if (!rsa_private) return {};\n\n  QByteArray sig(RSA_size(rsa_private), Qt::Uninitialized);\n  unsigned int sig_len;\n  int ret = RSA_sign(NID_sha256, (unsigned char*)data.data(), data.size(), (unsigned char*)sig.data(), &sig_len, rsa_private);\n  assert(ret == 1);\n  assert(sig.size() == sig_len);\n  return sig;\n}\n"
  },
  "selfdrive.ui.qt.api.create_jwt": {
    "id": "selfdrive.ui.qt.api.create_jwt",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\api.cc",
    "relative_path": "selfdrive\\ui\\qt\\api.cc",
    "depends_on": [],
    "start_line": 48,
    "end_line": 63,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QString create_jwt(const QJsonObject &payloads, int expiry) {\n  QJsonObject header = {{\"alg\", \"RS256\"}};\n\n  auto t = QDateTime::currentSecsSinceEpoch();\n  QJsonObject payload = {{\"identity\", getDongleId().value_or(\"\")}, {\"nbf\", t}, {\"iat\", t}, {\"exp\", t + expiry}};\n  for (auto it = payloads.begin(); it != payloads.end(); ++it) {\n    payload.insert(it.key(), it.value());\n  }\n\n  auto b64_opts = QByteArray::Base64UrlEncoding | QByteArray::OmitTrailingEquals;\n  QString jwt = QJsonDocument(header).toJson(QJsonDocument::Compact).toBase64(b64_opts) + '.' +\n                QJsonDocument(payload).toJson(QJsonDocument::Compact).toBase64(b64_opts);\n\n  auto hash = QCryptographicHash::hash(jwt.toUtf8(), QCryptographicHash::Sha256);\n  return jwt + \".\" + rsa_sign(hash).toBase64(b64_opts);\n}\n"
  },
  "selfdrive.ui.qt.api.HttpRequest": {
    "id": "selfdrive.ui.qt.api.HttpRequest",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\api.h",
    "relative_path": "selfdrive\\ui\\qt\\api.h",
    "depends_on": [],
    "start_line": 22,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class HttpRequest : public QObject {\n  Q_OBJECT\n\npublic:\n  enum class Method {GET, DELETE};\n\n  explicit HttpRequest(QObject* parent, bool create_jwt = true, int timeout = 20000);\n  void sendRequest(const QString &requestURL, const Method method = Method::GET);\n  bool active() const;\n  bool timeout() const;\n\nsignals:\n  void requestDone(const QString &response, bool success, QNetworkReply::NetworkError error);\n\nprotected:\n  QNetworkReply *reply = nullptr;\n\nprivate:\n  static QNetworkAccessManager *nam();\n  QTimer *networkTimer = nullptr;\n  bool create_jwt;\n\nprivate slots:\n  void requestTimeout();\n  void requestFinished();\n};\n"
  },
  "selfdrive.ui.qt.body.RecordButton": {
    "id": "selfdrive.ui.qt.body.RecordButton",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\body.h",
    "relative_path": "selfdrive\\ui\\qt\\body.h",
    "depends_on": [],
    "start_line": 10,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class RecordButton : public QPushButton {\n  Q_OBJECT\n\npublic:\n  RecordButton(QWidget* parent = 0);\n\nprivate:\n  void paintEvent(QPaintEvent*) override;\n};\n"
  },
  "selfdrive.ui.qt.body.BodyWindow": {
    "id": "selfdrive.ui.qt.body.BodyWindow",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\body.h",
    "relative_path": "selfdrive\\ui\\qt\\body.h",
    "depends_on": [],
    "start_line": 20,
    "end_line": 38,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class BodyWindow : public QWidget {\n  Q_OBJECT\n\npublic:\n  BodyWindow(QWidget* parent = 0);\n\nprivate:\n  bool charging = false;\n  uint64_t last_button = 0;\n  FirstOrderFilter fuel_filter;\n  QLabel *face;\n  QMovie *awake, *sleep;\n  RecordButton *btn;\n  void paintEvent(QPaintEvent*) override;\n\nprivate slots:\n  void updateState(const UIState &s);\n  void offroadTransition(bool onroad);\n};\n"
  },
  "selfdrive.ui.qt.home.OffroadHome": {
    "id": "selfdrive.ui.qt.home.OffroadHome",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\home.h",
    "relative_path": "selfdrive\\ui\\qt\\home.h",
    "depends_on": [],
    "start_line": 19,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class OffroadHome : public QFrame {\n  Q_OBJECT\n\npublic:\n  explicit OffroadHome(QWidget* parent = 0);\n\nsignals:\n  void openSettings(int index = 0, const QString &param = \"\");\n\nprivate:\n  void showEvent(QShowEvent *event) override;\n  void hideEvent(QHideEvent *event) override;\n  void refresh();\n\n  Params params;\n\n  QTimer* timer;\n  ElidedLabel* version;\n  QStackedLayout* center_layout;\n  UpdateAlert *update_widget;\n  OffroadAlert* alerts_widget;\n  QPushButton* alert_notif;\n  QPushButton* update_notif;\n};\n"
  },
  "selfdrive.ui.qt.home.HomeWindow": {
    "id": "selfdrive.ui.qt.home.HomeWindow",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\home.h",
    "relative_path": "selfdrive\\ui\\qt\\home.h",
    "depends_on": [],
    "start_line": 44,
    "end_line": 73,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class HomeWindow : public QWidget {\n  Q_OBJECT\n\npublic:\n  explicit HomeWindow(QWidget* parent = 0);\n\nsignals:\n  void openSettings(int index = 0, const QString &param = \"\");\n  void closeSettings();\n\npublic slots:\n  void offroadTransition(bool offroad);\n  void showDriverView(bool show);\n  void showSidebar(bool show);\n\nprotected:\n  void mousePressEvent(QMouseEvent* e) override;\n  void mouseDoubleClickEvent(QMouseEvent* e) override;\n\nprivate:\n  Sidebar *sidebar;\n  OffroadHome *home;\n  OnroadWindow *onroad;\n  BodyWindow *body;\n  DriverViewWindow *driver_view;\n  QStackedLayout *slayout;\n\nprivate slots:\n  void updateState(const UIState &s);\n};\n"
  },
  "selfdrive.ui.qt.prime_state.PrimeState": {
    "id": "selfdrive.ui.qt.prime_state.PrimeState",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\prime_state.h",
    "relative_path": "selfdrive\\ui\\qt\\prime_state.h",
    "depends_on": [],
    "start_line": 5,
    "end_line": 33,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class PrimeState : public QObject {\n  Q_OBJECT\n\npublic:\n\n enum Type {\n   PRIME_TYPE_UNKNOWN = -2,\n   PRIME_TYPE_UNPAIRED = -1,\n   PRIME_TYPE_NONE = 0,\n   PRIME_TYPE_MAGENTA = 1,\n   PRIME_TYPE_LITE = 2,\n   PRIME_TYPE_BLUE = 3,\n   PRIME_TYPE_MAGENTA_NEW = 4,\n   PRIME_TYPE_PURPLE = 5,\n };\n\n PrimeState(QObject *parent);\n void setType(PrimeState::Type type);\n inline PrimeState::Type currentType() const { return prime_type; }\n inline bool isSubscribed() const { return prime_type > PrimeState::PRIME_TYPE_NONE; }\n\nsignals:\n  void changed(PrimeState::Type prime_type);\n\nprivate:\n  void handleReply(const QString &response, bool success);\n\n  PrimeState::Type prime_type = PrimeState::PRIME_TYPE_UNKNOWN;\n};\n"
  },
  "selfdrive.ui.qt.python_helpers.get_ffi": {
    "id": "selfdrive.ui.qt.python_helpers.get_ffi",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\python_helpers.py",
    "relative_path": "selfdrive\\ui\\qt\\python_helpers.py",
    "depends_on": [],
    "start_line": 10,
    "end_line": 15,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.qt.python_helpers.set_main_window": {
    "id": "selfdrive.ui.qt.python_helpers.set_main_window",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\python_helpers.py",
    "relative_path": "selfdrive\\ui\\qt\\python_helpers.py",
    "depends_on": [
      "selfdrive.ui.qt.python_helpers.get_ffi"
    ],
    "start_line": 18,
    "end_line": 20,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.qt.qt_window.setMainWindow": {
    "id": "selfdrive.ui.qt.qt_window.setMainWindow",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\qt_window.cc",
    "relative_path": "selfdrive\\ui\\qt\\qt_window.cc",
    "depends_on": [],
    "start_line": 3,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void setMainWindow(QWidget *w) {\n  const float scale = util::getenv(\"SCALE\", 1.0f);\n  const QSize sz = QGuiApplication::primaryScreen()->size();\n\n  if (Hardware::PC() && scale == 1.0 && !(sz - DEVICE_SCREEN_SIZE).isValid()) {\n    w->setMinimumSize(QSize(640, 480)); // allow resize smaller than fullscreen\n    w->setMaximumSize(DEVICE_SCREEN_SIZE);\n    w->resize(sz);\n  } else {\n    w->setFixedSize(DEVICE_SCREEN_SIZE * scale);\n  }\n  w->show();\n\n#ifdef QCOM2\n  QPlatformNativeInterface *native = QGuiApplication::platformNativeInterface();\n  wl_surface *s = reinterpret_cast<wl_surface*>(native->nativeResourceForWindow(\"surface\", w->windowHandle()));\n  wl_surface_set_buffer_transform(s, WL_OUTPUT_TRANSFORM_270);\n  wl_surface_commit(s);\n\n  w->setWindowState(Qt::WindowFullScreen);\n  w->setVisible(true);\n\n  // ensure we have a valid eglDisplay, otherwise the ui will silently fail\n  void *egl = native->nativeResourceForWindow(\"egldisplay\", w->windowHandle());\n  assert(egl != nullptr);\n#endif\n}\n"
  },
  "selfdrive.ui.qt.qt_window.set_main_window": {
    "id": "selfdrive.ui.qt.qt_window.set_main_window",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\qt_window.cc",
    "relative_path": "selfdrive\\ui\\qt\\qt_window.cc",
    "depends_on": [],
    "start_line": 33,
    "end_line": 35,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  void set_main_window(void *w) {\n    setMainWindow((QWidget*)w);\n  }\n"
  },
  "selfdrive.ui.qt.request_repeater.RequestRepeater": {
    "id": "selfdrive.ui.qt.request_repeater.RequestRepeater",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\request_repeater.h",
    "relative_path": "selfdrive\\ui\\qt\\request_repeater.h",
    "depends_on": [],
    "start_line": 7,
    "end_line": 15,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class RequestRepeater : public HttpRequest {\npublic:\n  RequestRepeater(QObject *parent, const QString &requestURL, const QString &cacheKey = \"\", int period = 0, bool while_onroad=false);\n\nprivate:\n  Params params;\n  QTimer *timer;\n  QString prevResp;\n};\n"
  },
  "selfdrive.ui.qt.sidebar.Sidebar": {
    "id": "selfdrive.ui.qt.sidebar.Sidebar",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\sidebar.h",
    "relative_path": "selfdrive\\ui\\qt\\sidebar.h",
    "depends_on": [],
    "start_line": 14,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class Sidebar : public QFrame {\n  Q_OBJECT\n  Q_PROPERTY(ItemStatus connectStatus MEMBER connect_status NOTIFY valueChanged);\n  Q_PROPERTY(ItemStatus pandaStatus MEMBER panda_status NOTIFY valueChanged);\n  Q_PROPERTY(ItemStatus tempStatus MEMBER temp_status NOTIFY valueChanged);\n  Q_PROPERTY(QString netType MEMBER net_type NOTIFY valueChanged);\n  Q_PROPERTY(int netStrength MEMBER net_strength NOTIFY valueChanged);\n\npublic:\n  explicit Sidebar(QWidget* parent = 0);\n\nsignals:\n  void openSettings(int index = 0, const QString &param = \"\");\n  void valueChanged();\n\npublic slots:\n  void offroadTransition(bool offroad);\n  void updateState(const UIState &s);\n\nprotected:\n  void paintEvent(QPaintEvent *event) override;\n  void mousePressEvent(QMouseEvent *event) override;\n  void mouseReleaseEvent(QMouseEvent *event) override;\n  void drawMetric(QPainter &p, const QPair<QString, QString> &label, QColor c, int y);\n\n  QPixmap home_img, flag_img, settings_img;\n  bool onroad, flag_pressed, settings_pressed;\n  const QMap<cereal::DeviceState::NetworkType, QString> network_type = {\n    {cereal::DeviceState::NetworkType::NONE, tr(\"--\")},\n    {cereal::DeviceState::NetworkType::WIFI, tr(\"Wi-Fi\")},\n    {cereal::DeviceState::NetworkType::ETHERNET, tr(\"ETH\")},\n    {cereal::DeviceState::NetworkType::CELL2_G, tr(\"2G\")},\n    {cereal::DeviceState::NetworkType::CELL3_G, tr(\"3G\")},\n    {cereal::DeviceState::NetworkType::CELL4_G, tr(\"LTE\")},\n    {cereal::DeviceState::NetworkType::CELL5_G, tr(\"5G\")}\n  };\n\n  const QRect home_btn = QRect(60, 860, 180, 180);\n  const QRect settings_btn = QRect(50, 35, 200, 117);\n  const QColor good_color = QColor(255, 255, 255);\n  const QColor warning_color = QColor(218, 202, 37);\n  const QColor danger_color = QColor(201, 34, 49);\n\n  ItemStatus connect_status, panda_status, temp_status;\n  QString net_type;\n  int net_strength = 0;\n\nprivate:\n  std::unique_ptr<PubMaster> pm;\n  Networking *networking = nullptr;\n};\n"
  },
  "selfdrive.ui.qt.util.getVersion": {
    "id": "selfdrive.ui.qt.util.getVersion",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\util.cc",
    "relative_path": "selfdrive\\ui\\qt\\util.cc",
    "depends_on": [],
    "start_line": 23,
    "end_line": 26,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QString getVersion() {\n  static QString version =  QString::fromStdString(Params().get(\"Version\"));\n  return version;\n}\n"
  },
  "selfdrive.ui.qt.util.getBrand": {
    "id": "selfdrive.ui.qt.util.getBrand",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\util.cc",
    "relative_path": "selfdrive\\ui\\qt\\util.cc",
    "depends_on": [],
    "start_line": 28,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QString getBrand() {\n  return QObject::tr(\"openpilot\");\n}\n"
  },
  "selfdrive.ui.qt.util.getUserAgent": {
    "id": "selfdrive.ui.qt.util.getUserAgent",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\util.cc",
    "relative_path": "selfdrive\\ui\\qt\\util.cc",
    "depends_on": [],
    "start_line": 32,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QString getUserAgent() {\n  return \"openpilot-\" + getVersion();\n}\n"
  },
  "selfdrive.ui.qt.util.getDongleId": {
    "id": "selfdrive.ui.qt.util.getDongleId",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\util.cc",
    "relative_path": "selfdrive\\ui\\qt\\util.cc",
    "depends_on": [],
    "start_line": 36,
    "end_line": 44,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::optional<QString> getDongleId() {\n  std::string id = Params().get(\"DongleId\");\n\n  if (!id.empty() && (id != \"UnregisteredDevice\")) {\n    return QString::fromStdString(id);\n  } else {\n    return {};\n  }\n}\n"
  },
  "selfdrive.ui.qt.util.getSupportedLanguages": {
    "id": "selfdrive.ui.qt.util.getSupportedLanguages",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\util.cc",
    "relative_path": "selfdrive\\ui\\qt\\util.cc",
    "depends_on": [],
    "start_line": 46,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QMap<QString, QString> getSupportedLanguages() {\n  QFile f(\":/languages.json\");\n  f.open(QIODevice::ReadOnly | QIODevice::Text);\n  QString val = f.readAll();\n\n  QJsonObject obj = QJsonDocument::fromJson(val.toUtf8()).object();\n  QMap<QString, QString> map;\n  for (auto key : obj.keys()) {\n    map[key] = obj[key].toString();\n  }\n  return map;\n}\n"
  },
  "selfdrive.ui.qt.util.timeAgo": {
    "id": "selfdrive.ui.qt.util.timeAgo",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\util.cc",
    "relative_path": "selfdrive\\ui\\qt\\util.cc",
    "depends_on": [],
    "start_line": 59,
    "end_line": 79,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QString timeAgo(const QDateTime &date) {\n  int diff = date.secsTo(QDateTime::currentDateTimeUtc());\n\n  QString s;\n  if (diff < 60) {\n    s = QObject::tr(\"now\");\n  } else if (diff < 60 * 60) {\n    int minutes = diff / 60;\n    s = QObject::tr(\"%n minute(s) ago\", \"\", minutes);\n  } else if (diff < 60 * 60 * 24) {\n    int hours = diff / (60 * 60);\n    s = QObject::tr(\"%n hour(s) ago\", \"\", hours);\n  } else if (diff < 3600 * 24 * 7) {\n    int days = diff / (60 * 60 * 24);\n    s = QObject::tr(\"%n day(s) ago\", \"\", days);\n  } else {\n    s = date.date().toString();\n  }\n\n  return s;\n}\n"
  },
  "selfdrive.ui.qt.util.setQtSurfaceFormat": {
    "id": "selfdrive.ui.qt.util.setQtSurfaceFormat",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\util.cc",
    "relative_path": "selfdrive\\ui\\qt\\util.cc",
    "depends_on": [],
    "start_line": 81,
    "end_line": 93,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void setQtSurfaceFormat() {\n  QSurfaceFormat fmt;\n#ifdef __APPLE__\n  fmt.setVersion(3, 2);\n  fmt.setProfile(QSurfaceFormat::OpenGLContextProfile::CoreProfile);\n  fmt.setRenderableType(QSurfaceFormat::OpenGL);\n#else\n  fmt.setRenderableType(QSurfaceFormat::OpenGLES);\n#endif\n  fmt.setSamples(16);\n  fmt.setStencilBufferSize(1);\n  QSurfaceFormat::setDefaultFormat(fmt);\n}\n"
  },
  "selfdrive.ui.qt.util.sigTermHandler": {
    "id": "selfdrive.ui.qt.util.sigTermHandler",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\util.cc",
    "relative_path": "selfdrive\\ui\\qt\\util.cc",
    "depends_on": [],
    "start_line": 95,
    "end_line": 98,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void sigTermHandler(int s) {\n  std::signal(s, SIG_DFL);\n  qApp->quit();\n}\n"
  },
  "selfdrive.ui.qt.util.initApp": {
    "id": "selfdrive.ui.qt.util.initApp",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\util.cc",
    "relative_path": "selfdrive\\ui\\qt\\util.cc",
    "depends_on": [],
    "start_line": 100,
    "end_line": 125,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void initApp(int argc, char *argv[], bool disable_hidpi) {\n  Hardware::set_display_power(true);\n  Hardware::set_brightness(65);\n\n  // setup signal handlers to exit gracefully\n  std::signal(SIGINT, sigTermHandler);\n  std::signal(SIGTERM, sigTermHandler);\n\n  QString app_dir;\n#ifdef __APPLE__\n  // Get the devicePixelRatio, and scale accordingly to maintain 1:1 rendering\n  QApplication tmp(argc, argv);\n  app_dir = QCoreApplication::applicationDirPath();\n  if (disable_hidpi) {\n    qputenv(\"QT_SCALE_FACTOR\", QString::number(1.0 / tmp.devicePixelRatio()).toLocal8Bit());\n  }\n#else\n  app_dir = QFileInfo(util::readlink(\"/proc/self/exe\").c_str()).path();\n#endif\n\n  qputenv(\"QT_DBL_CLICK_DIST\", QByteArray::number(150));\n  // ensure the current dir matches the exectuable's directory\n  QDir::setCurrent(app_dir);\n\n  setQtSurfaceFormat();\n}\n"
  },
  "selfdrive.ui.qt.util.swagLogMessageHandler": {
    "id": "selfdrive.ui.qt.util.swagLogMessageHandler",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\util.cc",
    "relative_path": "selfdrive\\ui\\qt\\util.cc",
    "depends_on": [],
    "start_line": 127,
    "end_line": 143,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void swagLogMessageHandler(QtMsgType type, const QMessageLogContext &context, const QString &msg) {\n  static std::map<QtMsgType, int> levels = {\n    {QtMsgType::QtDebugMsg, CLOUDLOG_DEBUG},\n    {QtMsgType::QtInfoMsg, CLOUDLOG_INFO},\n    {QtMsgType::QtWarningMsg, CLOUDLOG_WARNING},\n    {QtMsgType::QtCriticalMsg, CLOUDLOG_ERROR},\n    {QtMsgType::QtSystemMsg, CLOUDLOG_ERROR},\n    {QtMsgType::QtFatalMsg, CLOUDLOG_CRITICAL},\n  };\n\n  std::string file, function;\n  if (context.file != nullptr) file = context.file;\n  if (context.function != nullptr) function = context.function;\n\n  auto bts = msg.toUtf8();\n  cloudlog_e(levels[type], file.c_str(), context.line, function.c_str(), \"%s\", bts.constData());\n}\n"
  },
  "selfdrive.ui.qt.util.topWidget": {
    "id": "selfdrive.ui.qt.util.topWidget",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\util.cc",
    "relative_path": "selfdrive\\ui\\qt\\util.cc",
    "depends_on": [],
    "start_line": 146,
    "end_line": 149,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QWidget* topWidget(QWidget* widget) {\n  while (widget->parentWidget() != nullptr) widget=widget->parentWidget();\n  return widget;\n}\n"
  },
  "selfdrive.ui.qt.util.loadPixmap": {
    "id": "selfdrive.ui.qt.util.loadPixmap",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\util.cc",
    "relative_path": "selfdrive\\ui\\qt\\util.cc",
    "depends_on": [],
    "start_line": 151,
    "end_line": 157,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QPixmap loadPixmap(const QString &fileName, const QSize &size, Qt::AspectRatioMode aspectRatioMode) {\n  if (size.isEmpty()) {\n    return QPixmap(fileName);\n  } else {\n    return QPixmap(fileName).scaled(size, aspectRatioMode, Qt::SmoothTransformation);\n  }\n}\n"
  },
  "selfdrive.ui.qt.util.load_bootstrap_icons": {
    "id": "selfdrive.ui.qt.util.load_bootstrap_icons",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\util.cc",
    "relative_path": "selfdrive\\ui\\qt\\util.cc",
    "depends_on": [],
    "start_line": 159,
    "end_line": 181,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static QHash<QString, QByteArray> load_bootstrap_icons() {\n  QHash<QString, QByteArray> icons;\n\n  QFile f(\":/bootstrap-icons.svg\");\n  if (f.open(QIODevice::ReadOnly | QIODevice::Text)) {\n    QDomDocument xml;\n    xml.setContent(&f);\n    QDomNode n = xml.documentElement().firstChild();\n    while (!n.isNull()) {\n      QDomElement e = n.toElement();\n      if (!e.isNull() && e.hasAttribute(\"id\")) {\n        QString svg_str;\n        QTextStream stream(&svg_str);\n        n.save(stream, 0);\n        svg_str.replace(\"<symbol\", \"<svg\");\n        svg_str.replace(\"</symbol>\", \"</svg>\");\n        icons[e.attribute(\"id\")] = svg_str.toUtf8();\n      }\n      n = n.nextSibling();\n    }\n  }\n  return icons;\n}\n"
  },
  "selfdrive.ui.qt.util.bootstrapPixmap": {
    "id": "selfdrive.ui.qt.util.bootstrapPixmap",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\util.cc",
    "relative_path": "selfdrive\\ui\\qt\\util.cc",
    "depends_on": [],
    "start_line": 183,
    "end_line": 191,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QPixmap bootstrapPixmap(const QString &id) {\n  static QHash<QString, QByteArray> icons = load_bootstrap_icons();\n\n  QPixmap pixmap;\n  if (auto it = icons.find(id); it != icons.end()) {\n    pixmap.loadFromData(it.value(), \"svg\");\n  }\n  return pixmap;\n}\n"
  },
  "selfdrive.ui.qt.util.hasLongitudinalControl": {
    "id": "selfdrive.ui.qt.util.hasLongitudinalControl",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\util.cc",
    "relative_path": "selfdrive\\ui\\qt\\util.cc",
    "depends_on": [],
    "start_line": 193,
    "end_line": 199,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "bool hasLongitudinalControl(const cereal::CarParams::Reader &car_params) {\n  // Using the experimental longitudinal toggle, returns whether longitudinal control\n  // will be active without needing a restart of openpilot\n  return car_params.getAlphaLongitudinalAvailable()\n             ? Params().getBool(\"AlphaLongitudinalEnabled\")\n             : car_params.getOpenpilotLongitudinalControl();\n}\n"
  },
  "selfdrive.ui.qt.util.ParamWatcher": {
    "id": "selfdrive.ui.qt.util.ParamWatcher",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\util.h",
    "relative_path": "selfdrive\\ui\\qt\\util.h",
    "depends_on": [],
    "start_line": 38,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ParamWatcher : public QObject {\n  Q_OBJECT\n\npublic:\n  ParamWatcher(QObject *parent);\n  void addParam(const QString &param_name);\n\nsignals:\n  void paramChanged(const QString &param_name, const QString &param_value);\n\nprivate:\n  void fileChanged(const QString &path);\n\n  QFileSystemWatcher *watcher;\n  QHash<QString, QString> params_hash;\n  Params params;\n};\n"
  },
  "selfdrive.ui.qt.window.MainWindow": {
    "id": "selfdrive.ui.qt.window.MainWindow",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\window.h",
    "relative_path": "selfdrive\\ui\\qt\\window.h",
    "depends_on": [],
    "start_line": 10,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class MainWindow : public QWidget {\n  Q_OBJECT\n\npublic:\n  explicit MainWindow(QWidget *parent = 0);\n\nprivate:\n  bool eventFilter(QObject *obj, QEvent *event) override;\n  void openSettings(int index = 0, const QString &param = \"\");\n  void closeSettings();\n\n  QStackedLayout *main_layout;\n  HomeWindow *homeWindow;\n  SettingsWindow *settingsWindow;\n  OnboardingWindow *onboardingWindow;\n};\n"
  },
  "selfdrive.ui.qt.network.networking.WifiItem": {
    "id": "selfdrive.ui.qt.network.networking.WifiItem",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\network\\networking.h",
    "relative_path": "selfdrive\\ui\\qt\\network\\networking.h",
    "depends_on": [],
    "start_line": 11,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class WifiItem : public QWidget {\n  Q_OBJECT\npublic:\n  explicit WifiItem(const QString &connecting_text, const QString &forget_text, QWidget* parent = nullptr);\n  void setItem(const Network& n, const QPixmap &icon, bool show_forget_btn, const QPixmap &strength);\n\nsignals:\n  // Cannot pass Network by reference. it may change after the signal is sent.\n  void connectToNetwork(const Network n);\n  void forgotNetwork(const Network n);\n\nprotected:\n  ElidedLabel* ssidLabel;\n  QPushButton* connecting;\n  QPushButton* forgetBtn;\n  QLabel* iconLabel;\n  QLabel* strengthLabel;\n  Network network;\n};\n"
  },
  "selfdrive.ui.qt.network.networking.WifiUI": {
    "id": "selfdrive.ui.qt.network.networking.WifiUI",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\network\\networking.h",
    "relative_path": "selfdrive\\ui\\qt\\network\\networking.h",
    "depends_on": [],
    "start_line": 31,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class WifiUI : public QWidget {\n  Q_OBJECT\n\npublic:\n  explicit WifiUI(QWidget *parent = 0, WifiManager* wifi = 0);\n\nprivate:\n  WifiItem *getItem(int n);\n\n  WifiManager *wifi = nullptr;\n  QLabel *scanningLabel = nullptr;\n  QPixmap lock;\n  QPixmap checkmark;\n  QPixmap circled_slash;\n  QVector<QPixmap> strengths;\n  ListWidget *wifi_list_widget = nullptr;\n  std::vector<WifiItem*> wifi_items;\n\nsignals:\n  void connectToNetwork(const Network n);\n\npublic slots:\n  void refresh();\n};\n"
  },
  "selfdrive.ui.qt.network.networking.AdvancedNetworking": {
    "id": "selfdrive.ui.qt.network.networking.AdvancedNetworking",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\network\\networking.h",
    "relative_path": "selfdrive\\ui\\qt\\network\\networking.h",
    "depends_on": [],
    "start_line": 56,
    "end_line": 79,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class AdvancedNetworking : public QWidget {\n  Q_OBJECT\npublic:\n  explicit AdvancedNetworking(QWidget* parent = 0, WifiManager* wifi = 0);\n  void setGsmVisible(bool visible);\n\nprivate:\n  LabelControl* ipLabel;\n  ToggleControl* tetheringToggle;\n  ToggleControl* roamingToggle;\n  ButtonControl* editApnButton;\n  ButtonControl* hiddenNetworkButton;\n  ToggleControl* meteredToggle;\n  WifiManager* wifi = nullptr;\n  Params params;\n\nsignals:\n  void backPress();\n  void requestWifiScreen();\n\npublic slots:\n  void toggleTethering(bool enabled);\n  void refresh();\n};\n"
  },
  "selfdrive.ui.qt.network.networking.Networking": {
    "id": "selfdrive.ui.qt.network.networking.Networking",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\network\\networking.h",
    "relative_path": "selfdrive\\ui\\qt\\network\\networking.h",
    "depends_on": [],
    "start_line": 81,
    "end_line": 104,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class Networking : public QFrame {\n  Q_OBJECT\n\npublic:\n  explicit Networking(QWidget* parent = 0, bool show_advanced = true);\n  void setPrimeType(PrimeState::Type type);\n  WifiManager* wifi = nullptr;\n\nprivate:\n  QStackedLayout* main_layout = nullptr;\n  QWidget* wifiScreen = nullptr;\n  AdvancedNetworking* an = nullptr;\n  WifiUI* wifiWidget;\n\n  void showEvent(QShowEvent* event) override;\n  void hideEvent(QHideEvent* event) override;\n\npublic slots:\n  void refresh();\n\nprivate slots:\n  void connectToNetwork(const Network n);\n  void wrongPassword(const QString &ssid);\n};\n"
  },
  "selfdrive.ui.qt.network.wifi_manager.compare_by_strength": {
    "id": "selfdrive.ui.qt.network.wifi_manager.compare_by_strength",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\network\\wifi_manager.cc",
    "relative_path": "selfdrive\\ui\\qt\\network\\wifi_manager.cc",
    "depends_on": [],
    "start_line": 8,
    "end_line": 11,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "bool compare_by_strength(const Network &a, const Network &b) {\n  return std::tuple(a.connected, strengthLevel(a.strength), b.ssid) >\n         std::tuple(b.connected, strengthLevel(b.strength), a.ssid);\n}\n"
  },
  "selfdrive.ui.qt.network.wifi_manager.emptyPath": {
    "id": "selfdrive.ui.qt.network.wifi_manager.emptyPath",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\network\\wifi_manager.cc",
    "relative_path": "selfdrive\\ui\\qt\\network\\wifi_manager.cc",
    "depends_on": [],
    "start_line": 44,
    "end_line": 46,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "bool emptyPath(const QString &path) {\n  return path == \"\" || path == \"/\";\n}\n"
  },
  "selfdrive.ui.qt.network.wifi_manager.WifiManager": {
    "id": "selfdrive.ui.qt.network.wifi_manager.WifiManager",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\network\\wifi_manager.h",
    "relative_path": "selfdrive\\ui\\qt\\network\\wifi_manager.h",
    "depends_on": [],
    "start_line": 38,
    "end_line": 104,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class WifiManager : public QObject {\n  Q_OBJECT\n\npublic:\n  QMap<QString, Network> seenNetworks;\n  QMap<QDBusObjectPath, QString> knownConnections;\n  QString ipv4_address;\n  bool tethering_on = false;\n  bool ipv4_forward = false;\n\n  explicit WifiManager(QObject* parent);\n  void start();\n  void stop();\n  void requestScan();\n  void forgetConnection(const QString &ssid);\n  bool isKnownConnection(const QString &ssid);\n  std::optional<QDBusPendingCall> activateWifiConnection(const QString &ssid);\n  NetworkType currentNetworkType();\n  void updateGsmSettings(bool roaming, QString apn, bool metered);\n  void connect(const Network &ssid, const bool is_hidden = false, const QString &password = {}, const QString &username = {});\n\n  // Tethering functions\n  void setTetheringEnabled(bool enabled);\n  bool isTetheringEnabled();\n  void changeTetheringPassword(const QString &newPassword);\n  QString getTetheringPassword();\n\nprivate:\n  QString adapter;  // Path to network manager wifi-device\n  QTimer timer;\n  unsigned int raw_adapter_state = NM_DEVICE_STATE_UNKNOWN;  // Connection status https://developer.gnome.org/NetworkManager/1.26/nm-dbus-types.html#NMDeviceState\n  QString connecting_to_network;\n  QString tethering_ssid;\n  const QString defaultTetheringPassword = \"swagswagcomma\";\n  QString activeAp;\n  QDBusObjectPath lteConnectionPath;\n\n  QString getAdapter(const uint = NM_DEVICE_TYPE_WIFI);\n  uint getAdapterType(const QDBusObjectPath &path);\n  QString getIp4Address();\n  void deactivateConnectionBySsid(const QString &ssid);\n  void deactivateConnection(const QDBusObjectPath &path);\n  QVector<QDBusObjectPath> getActiveConnections();\n  QByteArray get_property(const QString &network_path, const QString &property);\n  SecurityType getSecurityType(const QVariantMap &properties);\n  QDBusObjectPath getConnectionPath(const QString &ssid);\n  Connection getConnectionSettings(const QDBusObjectPath &path);\n  void initConnections();\n  void setup();\n  void refreshNetworks();\n  void activateModemConnection(const QDBusObjectPath &path);\n  void addTetheringConnection();\n  void setCurrentConnecting(const QString &ssid);\n\nsignals:\n  void wrongPassword(const QString &ssid);\n  void refreshSignal();\n\nprivate slots:\n  void stateChange(unsigned int new_state, unsigned int previous_state, unsigned int change_reason);\n  void propertyChange(const QString &interface, const QVariantMap &props, const QStringList &invalidated_props);\n  void deviceAdded(const QDBusObjectPath &path);\n  void connectionRemoved(const QDBusObjectPath &path);\n  void newConnection(const QDBusObjectPath &path);\n  void refreshFinished(QDBusPendingCallWatcher *call);\n  void tetheringActivated(QDBusPendingCallWatcher *call);\n};\n"
  },
  "selfdrive.ui.qt.offroad.developer_panel.DeveloperPanel": {
    "id": "selfdrive.ui.qt.offroad.developer_panel.DeveloperPanel",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\offroad\\developer_panel.h",
    "relative_path": "selfdrive\\ui\\qt\\offroad\\developer_panel.h",
    "depends_on": [],
    "start_line": 5,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class DeveloperPanel : public ListWidget {\n  Q_OBJECT\npublic:\n  explicit DeveloperPanel(SettingsWindow *parent);\n  void showEvent(QShowEvent *event) override;\n\nprivate:\n  Params params;\n  ParamControl* adbToggle;\n  ParamControl* joystickToggle;\n  ParamControl* longManeuverToggle;\n  ParamControl* experimentalLongitudinalToggle;\n  bool is_release;\n  bool offroad = false;\n\nprivate slots:\n  void updateToggles(bool _offroad);\n};\n"
  },
  "selfdrive.ui.qt.offroad.driverview.DriverViewWindow": {
    "id": "selfdrive.ui.qt.offroad.driverview.DriverViewWindow",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\offroad\\driverview.h",
    "relative_path": "selfdrive\\ui\\qt\\offroad\\driverview.h",
    "depends_on": [],
    "start_line": 6,
    "end_line": 23,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class DriverViewWindow : public CameraWidget {\n  Q_OBJECT\n\npublic:\n  explicit DriverViewWindow(QWidget *parent);\n\nsignals:\n  void done();\n\nprotected:\n  mat4 calcFrameMatrix() override;\n  void showEvent(QShowEvent *event) override;\n  void hideEvent(QHideEvent *event) override;\n  void paintGL() override;\n\n  Params params;\n  DriverMonitorRenderer driver_monitor;\n};\n"
  },
  "selfdrive.ui.qt.offroad.experimental_mode.ExperimentalModeButton": {
    "id": "selfdrive.ui.qt.offroad.experimental_mode.ExperimentalModeButton",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\offroad\\experimental_mode.h",
    "relative_path": "selfdrive\\ui\\qt\\offroad\\experimental_mode.h",
    "depends_on": [],
    "start_line": 8,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ExperimentalModeButton : public QPushButton {\n  Q_OBJECT\n\npublic:\n  explicit ExperimentalModeButton(QWidget* parent = 0);\n\nsignals:\n  void openSettings(int index = 0, const QString &toggle = \"\");\n\nprivate:\n  void showEvent(QShowEvent *event) override;\n\n  Params params;\n  bool experimental_mode;\n  int img_width = 100;\n  int horizontal_padding = 30;\n  QPixmap experimental_pixmap;\n  QPixmap chill_pixmap;\n  QLabel *mode_label;\n  QLabel *mode_icon;\n\nprotected:\n  void paintEvent(QPaintEvent *event) override;\n};\n"
  },
  "selfdrive.ui.qt.offroad.firehose.FirehosePanel": {
    "id": "selfdrive.ui.qt.offroad.firehose.FirehosePanel",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\offroad\\firehose.h",
    "relative_path": "selfdrive\\ui\\qt\\offroad\\firehose.h",
    "depends_on": [],
    "start_line": 11,
    "end_line": 27,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class FirehosePanel : public QWidget {\n  Q_OBJECT\npublic:\n  explicit FirehosePanel(SettingsWindow *parent);\n\nprivate:\n  QVBoxLayout *layout;\n\n  QLabel *detailed_instructions;\n  QLabel *contribution_label;\n  QLabel *toggle_label;\n\n  RequestRepeater *firehose_stats;\n\nprivate slots:\n  void refresh();\n};\n"
  },
  "selfdrive.ui.qt.offroad.onboarding.TrainingGuide": {
    "id": "selfdrive.ui.qt.offroad.onboarding.TrainingGuide",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\offroad\\onboarding.h",
    "relative_path": "selfdrive\\ui\\qt\\offroad\\onboarding.h",
    "depends_on": [],
    "start_line": 13,
    "end_line": 59,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class TrainingGuide : public QFrame {\n  Q_OBJECT\n\npublic:\n  explicit TrainingGuide(QWidget *parent = 0);\n\nprivate:\n  void showEvent(QShowEvent *event) override;\n  void paintEvent(QPaintEvent *event) override;\n  void mouseReleaseEvent(QMouseEvent* e) override;\n  QImage loadImage(int id);\n\n  QImage image;\n  QSize image_raw_size;\n  int currentIndex = 0;\n\n  // Bounding boxes for each training guide step\n  const QRect continueBtn = {1840, 0, 320, 1080};\n  QVector<QRect> boundingRect {\n    QRect(112, 804, 618, 164),\n    continueBtn,\n    continueBtn,\n    QRect(1641, 558, 210, 313),\n    QRect(1662, 528, 184, 108),\n    continueBtn,\n    QRect(1814, 621, 211, 170),\n    QRect(1350, 0, 497, 755),\n    QRect(1540, 386, 468, 238),\n    QRect(112, 804, 1126, 164),\n    QRect(1598, 199, 316, 333),\n    continueBtn,\n    QRect(1364, 90, 796, 990),\n    continueBtn,\n    QRect(1593, 114, 318, 853),\n    QRect(1379, 511, 391, 243),\n    continueBtn,\n    continueBtn,\n    QRect(630, 804, 626, 164),\n    QRect(108, 804, 426, 164),\n  };\n\n  const QString img_path = \"../assets/training/\";\n  QElapsedTimer click_timer;\n\nsignals:\n  void completedTraining();\n};\n"
  },
  "selfdrive.ui.qt.offroad.onboarding.TermsPage": {
    "id": "selfdrive.ui.qt.offroad.onboarding.TermsPage",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\offroad\\onboarding.h",
    "relative_path": "selfdrive\\ui\\qt\\offroad\\onboarding.h",
    "depends_on": [],
    "start_line": 62,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class TermsPage : public QFrame {\n  Q_OBJECT\n\npublic:\n  explicit TermsPage(QWidget *parent = 0) : QFrame(parent) {}\n\nprivate:\n  void showEvent(QShowEvent *event) override;\n\n  QPushButton *accept_btn;\n\nsignals:\n  void acceptedTerms();\n  void declinedTerms();\n};\n"
  },
  "selfdrive.ui.qt.offroad.onboarding.DeclinePage": {
    "id": "selfdrive.ui.qt.offroad.onboarding.DeclinePage",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\offroad\\onboarding.h",
    "relative_path": "selfdrive\\ui\\qt\\offroad\\onboarding.h",
    "depends_on": [],
    "start_line": 78,
    "end_line": 89,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class DeclinePage : public QFrame {\n  Q_OBJECT\n\npublic:\n  explicit DeclinePage(QWidget *parent = 0) : QFrame(parent) {}\n\nprivate:\n  void showEvent(QShowEvent *event) override;\n\nsignals:\n  void getBack();\n};\n"
  },
  "selfdrive.ui.qt.offroad.onboarding.OnboardingWindow": {
    "id": "selfdrive.ui.qt.offroad.onboarding.OnboardingWindow",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\offroad\\onboarding.h",
    "relative_path": "selfdrive\\ui\\qt\\offroad\\onboarding.h",
    "depends_on": [],
    "start_line": 91,
    "end_line": 107,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class OnboardingWindow : public QStackedWidget {\n  Q_OBJECT\n\npublic:\n  explicit OnboardingWindow(QWidget *parent = 0);\n  inline void showTrainingGuide() { setCurrentIndex(1); }\n  inline bool completed() const { return accepted_terms && training_done; }\n\nprivate:\n  void updateActiveScreen();\n\n  Params params;\n  bool accepted_terms = false, training_done = false;\n\nsignals:\n  void onboardingDone();\n};\n"
  },
  "selfdrive.ui.qt.offroad.settings.SettingsWindow": {
    "id": "selfdrive.ui.qt.offroad.settings.SettingsWindow",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\offroad\\settings.h",
    "relative_path": "selfdrive\\ui\\qt\\offroad\\settings.h",
    "depends_on": [],
    "start_line": 18,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class SettingsWindow : public QFrame {\n  Q_OBJECT\n\npublic:\n  explicit SettingsWindow(QWidget *parent = 0);\n  void setCurrentPanel(int index, const QString &param = \"\");\n\nprotected:\n  void showEvent(QShowEvent *event) override;\n\nsignals:\n  void closeSettings();\n  void reviewTrainingGuide();\n  void showDriverView();\n  void expandToggleDescription(const QString &param);\n\nprivate:\n  QPushButton *sidebar_alert_widget;\n  QWidget *sidebar_widget;\n  QButtonGroup *nav_btns;\n  QStackedWidget *panel_widget;\n};\n"
  },
  "selfdrive.ui.qt.offroad.settings.DevicePanel": {
    "id": "selfdrive.ui.qt.offroad.settings.DevicePanel",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\offroad\\settings.h",
    "relative_path": "selfdrive\\ui\\qt\\offroad\\settings.h",
    "depends_on": [],
    "start_line": 41,
    "end_line": 58,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class DevicePanel : public ListWidget {\n  Q_OBJECT\npublic:\n  explicit DevicePanel(SettingsWindow *parent);\n\nsignals:\n  void reviewTrainingGuide();\n  void showDriverView();\n\nprivate slots:\n  void poweroff();\n  void reboot();\n  void updateCalibDescription();\n\nprivate:\n  Params params;\n  ButtonControl *pair_device;\n};\n"
  },
  "selfdrive.ui.qt.offroad.settings.TogglesPanel": {
    "id": "selfdrive.ui.qt.offroad.settings.TogglesPanel",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\offroad\\settings.h",
    "relative_path": "selfdrive\\ui\\qt\\offroad\\settings.h",
    "depends_on": [],
    "start_line": 60,
    "end_line": 78,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class TogglesPanel : public ListWidget {\n  Q_OBJECT\npublic:\n  explicit TogglesPanel(SettingsWindow *parent);\n  void showEvent(QShowEvent *event) override;\n\npublic slots:\n  void expandToggleDescription(const QString &param);\n\nprivate slots:\n  void updateState(const UIState &s);\n\nprivate:\n  Params params;\n  std::map<std::string, ParamControl*> toggles;\n  ButtonParamControl *long_personality_setting;\n\n  void updateToggles();\n};\n"
  },
  "selfdrive.ui.qt.offroad.settings.SoftwarePanel": {
    "id": "selfdrive.ui.qt.offroad.settings.SoftwarePanel",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\offroad\\settings.h",
    "relative_path": "selfdrive\\ui\\qt\\offroad\\settings.h",
    "depends_on": [],
    "start_line": 80,
    "end_line": 100,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class SoftwarePanel : public ListWidget {\n  Q_OBJECT\npublic:\n  explicit SoftwarePanel(QWidget* parent = nullptr);\n\nprivate:\n  void showEvent(QShowEvent *event) override;\n  void updateLabels();\n  void checkForUpdates();\n\n  bool is_onroad = false;\n\n  QLabel *onroadLbl;\n  LabelControl *versionLbl;\n  ButtonControl *installBtn;\n  ButtonControl *downloadBtn;\n  ButtonControl *targetBranchBtn;\n\n  Params params;\n  ParamWatcher *fs_watch;\n};\n"
  },
  "selfdrive.ui.qt.onroad.alerts.OnroadAlerts": {
    "id": "selfdrive.ui.qt.onroad.alerts.OnroadAlerts",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\onroad\\alerts.h",
    "relative_path": "selfdrive\\ui\\qt\\onroad\\alerts.h",
    "depends_on": [],
    "start_line": 7,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class OnroadAlerts : public QWidget {\n  Q_OBJECT\n\npublic:\n  OnroadAlerts(QWidget *parent = 0) : QWidget(parent) {}\n  void updateState(const UIState &s);\n  void clear();\n\nprotected:\n  struct Alert {\n    QString text1;\n    QString text2;\n    QString type;\n    cereal::SelfdriveState::AlertSize size;\n    cereal::SelfdriveState::AlertStatus status;\n\n    bool equal(const Alert &other) const {\n      return text1 == other.text1 && text2 == other.text2 && type == other.type;\n    }\n  };\n\n  const QMap<cereal::SelfdriveState::AlertStatus, QColor> alert_colors = {\n    {cereal::SelfdriveState::AlertStatus::NORMAL, QColor(0x15, 0x15, 0x15, 0xf1)},\n    {cereal::SelfdriveState::AlertStatus::USER_PROMPT, QColor(0xDA, 0x6F, 0x25, 0xf1)},\n    {cereal::SelfdriveState::AlertStatus::CRITICAL, QColor(0xC9, 0x22, 0x31, 0xf1)},\n  };\n\n  void paintEvent(QPaintEvent*) override;\n  OnroadAlerts::Alert getAlert(const SubMaster &sm, uint64_t started_frame);\n\n  QColor bg;\n  Alert alert = {};\n};\n"
  },
  "selfdrive.ui.qt.onroad.alerts.Alert.equal": {
    "id": "selfdrive.ui.qt.onroad.alerts.Alert.equal",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\onroad\\alerts.h",
    "relative_path": "selfdrive\\ui\\qt\\onroad\\alerts.h",
    "depends_on": [],
    "start_line": 23,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    bool equal(const Alert &other) const {\n      return text1 == other.text1 && text2 == other.text2 && type == other.type;\n    }\n"
  },
  "selfdrive.ui.qt.onroad.annotated_camera.AnnotatedCameraWidget": {
    "id": "selfdrive.ui.qt.onroad.annotated_camera.AnnotatedCameraWidget",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\onroad\\annotated_camera.h",
    "relative_path": "selfdrive\\ui\\qt\\onroad\\annotated_camera.h",
    "depends_on": [],
    "start_line": 11,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class AnnotatedCameraWidget : public CameraWidget {\n  Q_OBJECT\n\npublic:\n  explicit AnnotatedCameraWidget(VisionStreamType type, QWidget* parent = 0);\n  void updateState(const UIState &s);\n\nprivate:\n  QVBoxLayout *main_layout;\n  ExperimentalButton *experimental_btn;\n  DriverMonitorRenderer dmon;\n  HudRenderer hud;\n  ModelRenderer model;\n  std::unique_ptr<PubMaster> pm;\n\n  int skip_frame_count = 0;\n  bool wide_cam_requested = false;\n\nprotected:\n  void paintGL() override;\n  void initializeGL() override;\n  void showEvent(QShowEvent *event) override;\n  mat4 calcFrameMatrix() override;\n\n  double prev_draw_t = 0;\n  FirstOrderFilter fps_filter;\n};\n"
  },
  "selfdrive.ui.qt.onroad.buttons.drawIcon": {
    "id": "selfdrive.ui.qt.onroad.buttons.drawIcon",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\onroad\\buttons.cc",
    "relative_path": "selfdrive\\ui\\qt\\onroad\\buttons.cc",
    "depends_on": [],
    "start_line": 7,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void drawIcon(QPainter &p, const QPoint &center, const QPixmap &img, const QBrush &bg, float opacity) {\n  p.setRenderHint(QPainter::Antialiasing);\n  p.setOpacity(1.0);  // bg dictates opacity of ellipse\n  p.setPen(Qt::NoPen);\n  p.setBrush(bg);\n  p.drawEllipse(center, btn_size / 2, btn_size / 2);\n  p.setOpacity(opacity);\n  p.drawPixmap(center - QPoint(img.width() / 2, img.height() / 2), img);\n  p.setOpacity(1.0);\n}\n"
  },
  "selfdrive.ui.qt.onroad.buttons.ExperimentalButton": {
    "id": "selfdrive.ui.qt.onroad.buttons.ExperimentalButton",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\onroad\\buttons.h",
    "relative_path": "selfdrive\\ui\\qt\\onroad\\buttons.h",
    "depends_on": [],
    "start_line": 10,
    "end_line": 26,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ExperimentalButton : public QPushButton {\n  Q_OBJECT\n\npublic:\n  explicit ExperimentalButton(QWidget *parent = 0);\n  void updateState(const UIState &s);\n\nprivate:\n  void paintEvent(QPaintEvent *event) override;\n  void changeMode();\n\n  Params params;\n  QPixmap engage_img;\n  QPixmap experimental_img;\n  bool experimental_mode;\n  bool engageable;\n};\n"
  },
  "selfdrive.ui.qt.onroad.driver_monitoring.DriverMonitorRenderer": {
    "id": "selfdrive.ui.qt.onroad.driver_monitoring.DriverMonitorRenderer",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\onroad\\driver_monitoring.h",
    "relative_path": "selfdrive\\ui\\qt\\onroad\\driver_monitoring.h",
    "depends_on": [],
    "start_line": 7,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class DriverMonitorRenderer {\npublic:\n  DriverMonitorRenderer();\n  void updateState(const UIState &s);\n  void draw(QPainter &painter, const QRect &surface_rect);\n\nprivate:\n  float driver_pose_vals[3] = {};\n  float driver_pose_diff[3] = {};\n  float driver_pose_sins[3] = {};\n  float driver_pose_coss[3] = {};\n  bool is_visible = false;\n  bool is_active = false;\n  bool is_rhd = false;\n  float dm_fade_state = 1.0;\n  QPixmap dm_img;\n  std::vector<vec3> face_kpts_draw;\n};\n"
  },
  "selfdrive.ui.qt.onroad.hud.HudRenderer": {
    "id": "selfdrive.ui.qt.onroad.hud.HudRenderer",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\onroad\\hud.h",
    "relative_path": "selfdrive\\ui\\qt\\onroad\\hud.h",
    "depends_on": [],
    "start_line": 6,
    "end_line": 26,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class HudRenderer : public QObject {\n  Q_OBJECT\n\npublic:\n  HudRenderer();\n  void updateState(const UIState &s);\n  void draw(QPainter &p, const QRect &surface_rect);\n\nprivate:\n  void drawSetSpeed(QPainter &p, const QRect &surface_rect);\n  void drawCurrentSpeed(QPainter &p, const QRect &surface_rect);\n  void drawText(QPainter &p, int x, int y, const QString &text, int alpha = 255);\n\n  float speed = 0;\n  float set_speed = 0;\n  bool is_cruise_set = false;\n  bool is_cruise_available = true;\n  bool is_metric = false;\n  bool v_ego_cluster_seen = false;\n  int status = STATUS_DISENGAGED;\n};\n"
  },
  "selfdrive.ui.qt.onroad.model.get_path_length_idx": {
    "id": "selfdrive.ui.qt.onroad.model.get_path_length_idx",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\onroad\\model.cc",
    "relative_path": "selfdrive\\ui\\qt\\onroad\\model.cc",
    "depends_on": [],
    "start_line": 7,
    "end_line": 14,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static int get_path_length_idx(const cereal::XYZTData::Reader &line, const float path_height) {\n  const auto &line_x = line.getX();\n  int max_idx = 0;\n  for (int i = 1; i < line_x.size() && line_x[i] <= path_height; ++i) {\n    max_idx = i;\n  }\n  return max_idx;\n}\n"
  },
  "selfdrive.ui.qt.onroad.model.ModelRenderer": {
    "id": "selfdrive.ui.qt.onroad.model.ModelRenderer",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\onroad\\model.h",
    "relative_path": "selfdrive\\ui\\qt\\onroad\\model.h",
    "depends_on": [],
    "start_line": 8,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ModelRenderer {\npublic:\n  ModelRenderer() {}\n  void setTransform(const Eigen::Matrix3f &transform) { car_space_transform = transform; }\n  void draw(QPainter &painter, const QRect &surface_rect);\n\nprivate:\n  bool mapToScreen(float in_x, float in_y, float in_z, QPointF *out);\n  void mapLineToPolygon(const cereal::XYZTData::Reader &line, float y_off, float z_off,\n                        QPolygonF *pvd, int max_idx, bool allow_invert = true);\n  void drawLead(QPainter &painter, const cereal::RadarState::LeadData::Reader &lead_data, const QPointF &vd, const QRect &surface_rect);\n  void update_leads(const cereal::RadarState::Reader &radar_state, const cereal::XYZTData::Reader &line);\n  void update_model(const cereal::ModelDataV2::Reader &model, const cereal::RadarState::LeadData::Reader &lead);\n  void drawLaneLines(QPainter &painter);\n  void drawPath(QPainter &painter, const cereal::ModelDataV2::Reader &model, int height);\n  void updatePathGradient(QLinearGradient &bg);\n  QColor blendColors(const QColor &start, const QColor &end, float t);\n\n  bool longitudinal_control = false;\n  bool experimental_mode = false;\n  float blend_factor = 1.0f;\n  bool prev_allow_throttle = true;\n  float lane_line_probs[4] = {};\n  float road_edge_stds[2] = {};\n  float path_offset_z = 1.22f;\n  QPolygonF track_vertices;\n  QPolygonF lane_line_vertices[4] = {};\n  QPolygonF road_edge_vertices[2] = {};\n  QPointF lead_vertices[2] = {};\n  Eigen::Matrix3f car_space_transform = Eigen::Matrix3f::Zero();\n  QRectF clip_region;\n};\n"
  },
  "selfdrive.ui.qt.onroad.onroad_home.OnroadWindow": {
    "id": "selfdrive.ui.qt.onroad.onroad_home.OnroadWindow",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\onroad\\onroad_home.h",
    "relative_path": "selfdrive\\ui\\qt\\onroad\\onroad_home.h",
    "depends_on": [],
    "start_line": 6,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class OnroadWindow : public QWidget {\n  Q_OBJECT\n\npublic:\n  OnroadWindow(QWidget* parent = 0);\n\nprivate:\n  void paintEvent(QPaintEvent *event);\n  OnroadAlerts *alerts;\n  AnnotatedCameraWidget *nvg;\n  QColor bg = bg_colors[STATUS_DISENGAGED];\n  QHBoxLayout* split;\n\nprivate slots:\n  void offroadTransition(bool offroad);\n  void updateState(const UIState &s);\n};\n"
  },
  "selfdrive.ui.qt.setup.reset.main": {
    "id": "selfdrive.ui.qt.setup.reset.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\setup\\reset.cc",
    "relative_path": "selfdrive\\ui\\qt\\setup\\reset.cc",
    "depends_on": [],
    "start_line": 127,
    "end_line": 141,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int main(int argc, char *argv[]) {\n  ResetMode mode = ResetMode::USER_RESET;\n  if (argc > 1) {\n    if (strcmp(argv[1], \"--recover\") == 0) {\n      mode = ResetMode::RECOVER;\n    } else if (strcmp(argv[1], \"--format\") == 0) {\n      mode = ResetMode::FORMAT;\n    }\n  }\n\n  QApplication a(argc, argv);\n  Reset reset(mode);\n  setMainWindow(&reset);\n  return a.exec();\n}\n"
  },
  "selfdrive.ui.qt.setup.reset.Reset": {
    "id": "selfdrive.ui.qt.setup.reset.Reset",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\setup\\reset.h",
    "relative_path": "selfdrive\\ui\\qt\\setup\\reset.h",
    "depends_on": [],
    "start_line": 11,
    "end_line": 27,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class Reset : public QWidget {\n  Q_OBJECT\n\npublic:\n  explicit Reset(ResetMode mode, QWidget *parent = 0);\n\nprivate:\n  QLabel *body;\n  QPushButton *rejectBtn;\n  QPushButton *rebootBtn;\n  QPushButton *confirmBtn;\n  void doErase();\n  void startReset();\n\nprivate slots:\n  void confirm();\n};\n"
  },
  "selfdrive.ui.qt.setup.setup.is_elf": {
    "id": "selfdrive.ui.qt.setup.setup.is_elf",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\setup\\setup.cc",
    "relative_path": "selfdrive\\ui\\qt\\setup\\setup.cc",
    "depends_on": [],
    "start_line": 25,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "bool is_elf(char *fname) {\n  FILE *fp = fopen(fname, \"rb\");\n  if (fp == NULL) {\n    return false;\n  }\n  char buf[4];\n  size_t n = fread(buf, 1, 4, fp);\n  fclose(fp);\n  return n == 4 && buf[0] == 0x7f && buf[1] == 'E' && buf[2] == 'L' && buf[3] == 'F';\n}\n"
  },
  "selfdrive.ui.qt.setup.setup.radio_button": {
    "id": "selfdrive.ui.qt.setup.setup.radio_button",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\setup\\setup.cc",
    "relative_path": "selfdrive\\ui\\qt\\setup\\setup.cc",
    "depends_on": [],
    "start_line": 233,
    "end_line": 262,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QWidget * radio_button(QString title, QButtonGroup *group) {\n  QPushButton *btn = new QPushButton(title);\n  btn->setCheckable(true);\n  group->addButton(btn);\n  btn->setStyleSheet(R\"(\n    QPushButton {\n      height: 230;\n      padding-left: 100px;\n      padding-right: 100px;\n      text-align: left;\n      font-size: 80px;\n      font-weight: 400;\n      border-radius: 10px;\n      background-color: #4F4F4F;\n    }\n    QPushButton:checked {\n      background-color: #465BEA;\n    }\n  )\");\n\n  // checkmark icon\n  QPixmap pix(\":/icons/circled_check.svg\");\n  btn->setIcon(pix);\n  btn->setIconSize(QSize(0, 0));\n  btn->setLayoutDirection(Qt::RightToLeft);\n  QObject::connect(btn, &QPushButton::toggled, [=](bool checked) {\n    btn->setIconSize(checked ? QSize(104, 104) : QSize(0, 0));\n  });\n  return btn;\n}\n"
  },
  "selfdrive.ui.qt.setup.setup.main": {
    "id": "selfdrive.ui.qt.setup.setup.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\setup\\setup.cc",
    "relative_path": "selfdrive\\ui\\qt\\setup\\setup.cc",
    "depends_on": [],
    "start_line": 484,
    "end_line": 489,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int main(int argc, char *argv[]) {\n  QApplication a(argc, argv);\n  Setup setup;\n  setMainWindow(&setup);\n  return a.exec();\n}\n"
  },
  "selfdrive.ui.qt.setup.setup.Setup": {
    "id": "selfdrive.ui.qt.setup.setup.Setup",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\setup\\setup.h",
    "relative_path": "selfdrive\\ui\\qt\\setup\\setup.h",
    "depends_on": [],
    "start_line": 9,
    "end_line": 35,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class Setup : public QStackedWidget {\n  Q_OBJECT\n\npublic:\n  explicit Setup(QWidget *parent = 0);\n\nprivate:\n  void selectLanguage();\n  QWidget *low_voltage();\n  QWidget *getting_started();\n  QWidget *network_setup();\n  QWidget *software_selection();\n  QWidget *downloading();\n  QWidget *download_failed(QLabel *url, QLabel *body);\n\n  QWidget *failed_widget;\n  QWidget *downloading_widget;\n  QTranslator translator;\n\nsignals:\n  void finished(const QString &url, const QString &error = \"\");\n\npublic slots:\n  void nextPage();\n  void prevPage();\n  void download(QString url);\n};\n"
  },
  "selfdrive.ui.qt.setup.updater.main": {
    "id": "selfdrive.ui.qt.setup.updater.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\setup\\updater.cc",
    "relative_path": "selfdrive\\ui\\qt\\setup\\updater.cc",
    "depends_on": [],
    "start_line": 179,
    "end_line": 186,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int main(int argc, char *argv[]) {\n  initApp(argc, argv);\n  QApplication a(argc, argv);\n  Updater updater(argv[1], argv[2]);\n  setMainWindow(&updater);\n  a.installEventFilter(&updater);\n  return a.exec();\n}\n"
  },
  "selfdrive.ui.qt.setup.updater.Updater": {
    "id": "selfdrive.ui.qt.setup.updater.Updater",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\setup\\updater.h",
    "relative_path": "selfdrive\\ui\\qt\\setup\\updater.h",
    "depends_on": [],
    "start_line": 10,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class Updater : public QStackedWidget {\n  Q_OBJECT\n\npublic:\n  explicit Updater(const QString &updater_path, const QString &manifest_path, QWidget *parent = 0);\n\nprivate slots:\n  void installUpdate();\n  void readProgress();\n  void updateFinished(int exitCode, QProcess::ExitStatus exitStatus);\n\nprivate:\n  QProcess proc;\n  QString updater, manifest;\n\n  QLabel *text;\n  QProgressBar *bar;\n  QPushButton *reboot;\n  QWidget *prompt, *wifi, *progress;\n};\n"
  },
  "selfdrive.ui.qt.widgets.cameraview.CameraWidget": {
    "id": "selfdrive.ui.qt.widgets.cameraview.CameraWidget",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\cameraview.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\cameraview.h",
    "depends_on": [],
    "start_line": 30,
    "end_line": 87,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class CameraWidget : public QOpenGLWidget, protected QOpenGLFunctions {\n  Q_OBJECT\n\npublic:\n  using QOpenGLWidget::QOpenGLWidget;\n  explicit CameraWidget(std::string stream_name, VisionStreamType stream_type, QWidget* parent = nullptr);\n  ~CameraWidget();\n  void setBackgroundColor(const QColor &color) { bg = color; }\n  void setFrameId(int frame_id) { draw_frame_id = frame_id; }\n  void setStreamType(VisionStreamType type) { requested_stream_type = type; }\n  VisionStreamType getStreamType() { return active_stream_type; }\n  void stopVipcThread();\n\nsignals:\n  void clicked();\n  void vipcThreadConnected(VisionIpcClient *);\n  void vipcThreadFrameReceived();\n  void vipcAvailableStreamsUpdated(std::set<VisionStreamType>);\n\nprotected:\n  void paintGL() override;\n  void initializeGL() override;\n  void showEvent(QShowEvent *event) override;\n  void mouseReleaseEvent(QMouseEvent *event) override { emit clicked(); }\n  virtual mat4 calcFrameMatrix();\n  void vipcThread();\n  void clearFrames();\n\n  int glWidth();\n  int glHeight();\n\n  GLuint frame_vao, frame_vbo, frame_ibo;\n  GLuint textures[2];\n  std::unique_ptr<QOpenGLShaderProgram> program;\n  QColor bg = QColor(\"#000000\");\n\n#ifdef QCOM2\n  std::map<int, EGLImageKHR> egl_images;\n#endif\n\n  std::string stream_name;\n  int stream_width = 0;\n  int stream_height = 0;\n  int stream_stride = 0;\n  std::atomic<VisionStreamType> active_stream_type;\n  std::atomic<VisionStreamType> requested_stream_type;\n  std::set<VisionStreamType> available_streams;\n  QThread *vipc_thread = nullptr;\n  std::recursive_mutex frame_lock;\n  std::deque<std::pair<uint32_t, VisionBuf*>> frames;\n  uint32_t draw_frame_id = 0;\n  uint32_t prev_frame_id = 0;\n\nprotected slots:\n  void vipcConnected(VisionIpcClient *vipc_client);\n  void vipcFrameReceived();\n  void availableStreamsUpdated(std::set<VisionStreamType> streams);\n};\n"
  },
  "selfdrive.ui.qt.widgets.controls.ElidedLabel": {
    "id": "selfdrive.ui.qt.widgets.controls.ElidedLabel",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\controls.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\controls.h",
    "depends_on": [],
    "start_line": 17,
    "end_line": 36,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ElidedLabel : public QLabel {\n  Q_OBJECT\n\npublic:\n  explicit ElidedLabel(QWidget *parent = 0);\n  explicit ElidedLabel(const QString &text, QWidget *parent = 0);\n\nsignals:\n  void clicked();\n\nprotected:\n  void paintEvent(QPaintEvent *event) override;\n  void resizeEvent(QResizeEvent* event) override;\n  void mouseReleaseEvent(QMouseEvent *event) override {\n    if (rect().contains(event->pos())) {\n      emit clicked();\n    }\n  }\n  QString lastText_, elidedText_;\n};\n"
  },
  "selfdrive.ui.qt.widgets.controls.ElidedLabel.mouseReleaseEvent": {
    "id": "selfdrive.ui.qt.widgets.controls.ElidedLabel.mouseReleaseEvent",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\controls.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\controls.h",
    "depends_on": [],
    "start_line": 30,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  void mouseReleaseEvent(QMouseEvent *event) override {\n    if (rect().contains(event->pos())) {\n      emit clicked();\n    }\n  }\n"
  },
  "selfdrive.ui.qt.widgets.controls.AbstractControl": {
    "id": "selfdrive.ui.qt.widgets.controls.AbstractControl",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\controls.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\controls.h",
    "depends_on": [],
    "start_line": 39,
    "end_line": 80,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class AbstractControl : public QFrame {\n  Q_OBJECT\n\npublic:\n  void setDescription(const QString &desc) {\n    if (description) description->setText(desc);\n  }\n\n  void setTitle(const QString &title) {\n    title_label->setText(title);\n  }\n\n  void setValue(const QString &val) {\n    value->setText(val);\n  }\n\n  const QString getDescription() {\n    return description->text();\n  }\n\n  QLabel *icon_label;\n  QPixmap icon_pixmap;\n\npublic slots:\n  void showDescription() {\n    description->setVisible(true);\n  }\n\nsignals:\n  void showDescriptionEvent();\n\nprotected:\n  AbstractControl(const QString &title, const QString &desc = \"\", const QString &icon = \"\", QWidget *parent = nullptr);\n  void hideEvent(QHideEvent *e) override;\n\n  QHBoxLayout *hlayout;\n  QPushButton *title_label;\n\nprivate:\n  ElidedLabel *value;\n  QLabel *description = nullptr;\n};\n"
  },
  "selfdrive.ui.qt.widgets.controls.LabelControl": {
    "id": "selfdrive.ui.qt.widgets.controls.LabelControl",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\controls.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\controls.h",
    "depends_on": [],
    "start_line": 83,
    "end_line": 96,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class LabelControl : public AbstractControl {\n  Q_OBJECT\n\npublic:\n  LabelControl(const QString &title, const QString &text = \"\", const QString &desc = \"\", QWidget *parent = nullptr) : AbstractControl(title, desc, \"\", parent) {\n    label.setText(text);\n    label.setAlignment(Qt::AlignRight | Qt::AlignVCenter);\n    hlayout->addWidget(&label);\n  }\n  void setText(const QString &text) { label.setText(text); }\n\nprivate:\n  ElidedLabel label;\n};\n"
  },
  "selfdrive.ui.qt.widgets.controls.ButtonControl": {
    "id": "selfdrive.ui.qt.widgets.controls.ButtonControl",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\controls.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\controls.h",
    "depends_on": [],
    "start_line": 99,
    "end_line": 115,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ButtonControl : public AbstractControl {\n  Q_OBJECT\n\npublic:\n  ButtonControl(const QString &title, const QString &text, const QString &desc = \"\", QWidget *parent = nullptr);\n  inline void setText(const QString &text) { btn.setText(text); }\n  inline QString text() const { return btn.text(); }\n\nsignals:\n  void clicked();\n\npublic slots:\n  void setEnabled(bool enabled) { btn.setEnabled(enabled); }\n\nprivate:\n  QPushButton btn;\n};\n"
  },
  "selfdrive.ui.qt.widgets.controls.ToggleControl": {
    "id": "selfdrive.ui.qt.widgets.controls.ToggleControl",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\controls.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\controls.h",
    "depends_on": [],
    "start_line": 117,
    "end_line": 140,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ToggleControl : public AbstractControl {\n  Q_OBJECT\n\npublic:\n  ToggleControl(const QString &title, const QString &desc = \"\", const QString &icon = \"\", const bool state = false, QWidget *parent = nullptr) : AbstractControl(title, desc, icon, parent) {\n    toggle.setFixedSize(150, 100);\n    if (state) {\n      toggle.togglePosition();\n    }\n    hlayout->addWidget(&toggle);\n    QObject::connect(&toggle, &Toggle::stateChanged, this, &ToggleControl::toggleFlipped);\n  }\n\n  void setEnabled(bool enabled) {\n    toggle.setEnabled(enabled);\n    toggle.update();\n  }\n\nsignals:\n  void toggleFlipped(bool state);\n\nprotected:\n  Toggle toggle;\n};\n"
  },
  "selfdrive.ui.qt.widgets.controls.ParamControl": {
    "id": "selfdrive.ui.qt.widgets.controls.ParamControl",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\controls.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\controls.h",
    "depends_on": [],
    "start_line": 143,
    "end_line": 184,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ParamControl : public ToggleControl {\n  Q_OBJECT\n\npublic:\n  ParamControl(const QString &param, const QString &title, const QString &desc, const QString &icon, QWidget *parent = nullptr);\n  void setConfirmation(bool _confirm, bool _store_confirm) {\n    confirm = _confirm;\n    store_confirm = _store_confirm;\n  }\n\n  void setActiveIcon(const QString &icon) {\n    active_icon_pixmap = QPixmap(icon).scaledToWidth(80, Qt::SmoothTransformation);\n  }\n\n  void refresh() {\n    bool state = params.getBool(key);\n    if (state != toggle.on) {\n      toggle.togglePosition();\n      setIcon(state);\n    }\n  }\n\n  void showEvent(QShowEvent *event) override {\n    refresh();\n  }\n\nprivate:\n  void toggleClicked(bool state);\n  void setIcon(bool state) {\n    if (state && !active_icon_pixmap.isNull()) {\n      icon_label->setPixmap(active_icon_pixmap);\n    } else if (!icon_pixmap.isNull()) {\n      icon_label->setPixmap(icon_pixmap);\n    }\n  }\n\n  std::string key;\n  Params params;\n  QPixmap active_icon_pixmap;\n  bool confirm = false;\n  bool store_confirm = false;\n};\n"
  },
  "selfdrive.ui.qt.widgets.controls.ParamControl.setConfirmation": {
    "id": "selfdrive.ui.qt.widgets.controls.ParamControl.setConfirmation",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\controls.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\controls.h",
    "depends_on": [],
    "start_line": 148,
    "end_line": 151,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  void setConfirmation(bool _confirm, bool _store_confirm) {\n    confirm = _confirm;\n    store_confirm = _store_confirm;\n  }\n"
  },
  "selfdrive.ui.qt.widgets.controls.ParamControl.setActiveIcon": {
    "id": "selfdrive.ui.qt.widgets.controls.ParamControl.setActiveIcon",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\controls.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\controls.h",
    "depends_on": [],
    "start_line": 153,
    "end_line": 155,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  void setActiveIcon(const QString &icon) {\n    active_icon_pixmap = QPixmap(icon).scaledToWidth(80, Qt::SmoothTransformation);\n  }\n"
  },
  "selfdrive.ui.qt.widgets.controls.ParamControl.refresh": {
    "id": "selfdrive.ui.qt.widgets.controls.ParamControl.refresh",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\controls.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\controls.h",
    "depends_on": [],
    "start_line": 157,
    "end_line": 163,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  void refresh() {\n    bool state = params.getBool(key);\n    if (state != toggle.on) {\n      toggle.togglePosition();\n      setIcon(state);\n    }\n  }\n"
  },
  "selfdrive.ui.qt.widgets.controls.ParamControl.showEvent": {
    "id": "selfdrive.ui.qt.widgets.controls.ParamControl.showEvent",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\controls.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\controls.h",
    "depends_on": [],
    "start_line": 165,
    "end_line": 167,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  void showEvent(QShowEvent *event) override {\n    refresh();\n  }\n"
  },
  "selfdrive.ui.qt.widgets.controls.ParamControl.setIcon": {
    "id": "selfdrive.ui.qt.widgets.controls.ParamControl.setIcon",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\controls.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\controls.h",
    "depends_on": [],
    "start_line": 171,
    "end_line": 177,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  void setIcon(bool state) {\n    if (state && !active_icon_pixmap.isNull()) {\n      icon_label->setPixmap(active_icon_pixmap);\n    } else if (!icon_pixmap.isNull()) {\n      icon_label->setPixmap(icon_pixmap);\n    }\n  }\n"
  },
  "selfdrive.ui.qt.widgets.controls.ButtonParamControl": {
    "id": "selfdrive.ui.qt.widgets.controls.ButtonParamControl",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\controls.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\controls.h",
    "depends_on": [],
    "start_line": 186,
    "end_line": 254,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ButtonParamControl : public AbstractControl {\n  Q_OBJECT\npublic:\n  ButtonParamControl(const QString &param, const QString &title, const QString &desc, const QString &icon,\n                     const std::vector<QString> &button_texts, const int minimum_button_width = 225) : AbstractControl(title, desc, icon) {\n    const QString style = R\"(\n      QPushButton {\n        border-radius: 50px;\n        font-size: 40px;\n        font-weight: 500;\n        height:100px;\n        padding: 0 25 0 25;\n        color: #E4E4E4;\n        background-color: #393939;\n      }\n      QPushButton:pressed {\n        background-color: #4a4a4a;\n      }\n      QPushButton:checked:enabled {\n        background-color: #33Ab4C;\n      }\n      QPushButton:disabled {\n        color: #33E4E4E4;\n      }\n    )\";\n    key = param.toStdString();\n    int value = atoi(params.get(key).c_str());\n\n    button_group = new QButtonGroup(this);\n    button_group->setExclusive(true);\n    for (int i = 0; i < button_texts.size(); i++) {\n      QPushButton *button = new QPushButton(button_texts[i], this);\n      button->setCheckable(true);\n      button->setChecked(i == value);\n      button->setStyleSheet(style);\n      button->setMinimumWidth(minimum_button_width);\n      hlayout->addWidget(button);\n      button_group->addButton(button, i);\n    }\n\n    QObject::connect(button_group, QOverload<int>::of(&QButtonGroup::buttonClicked), [=](int id) {\n      params.put(key, std::to_string(id));\n    });\n  }\n\n  void setEnabled(bool enable) {\n    for (auto btn : button_group->buttons()) {\n      btn->setEnabled(enable);\n    }\n  }\n\n  void setCheckedButton(int id) {\n    button_group->button(id)->setChecked(true);\n  }\n\n  void refresh() {\n    int value = atoi(params.get(key).c_str());\n    button_group->button(value)->setChecked(true);\n  }\n\n  void showEvent(QShowEvent *event) override {\n    refresh();\n  }\n\nprivate:\n  std::string key;\n  Params params;\n  QButtonGroup *button_group;\n};\n"
  },
  "selfdrive.ui.qt.widgets.controls.ListWidget": {
    "id": "selfdrive.ui.qt.widgets.controls.ListWidget",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\controls.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\controls.h",
    "depends_on": [],
    "start_line": 256,
    "end_line": 286,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ListWidget : public QWidget {\n  Q_OBJECT\n public:\n  explicit ListWidget(QWidget *parent = 0) : QWidget(parent), outer_layout(this) {\n    outer_layout.setMargin(0);\n    outer_layout.setSpacing(0);\n    outer_layout.addLayout(&inner_layout);\n    inner_layout.setMargin(0);\n    inner_layout.setSpacing(25); // default spacing is 25\n    outer_layout.addStretch(1);\n  }\n  inline void addItem(QWidget *w) { inner_layout.addWidget(w); }\n  inline void addItem(QLayout *layout) { inner_layout.addLayout(layout); }\n  inline void setSpacing(int spacing) { inner_layout.setSpacing(spacing); }\n\nprivate:\n  void paintEvent(QPaintEvent *) override {\n    QPainter p(this);\n    p.setPen(Qt::gray);\n    for (int i = 0; i < inner_layout.count() - 1; ++i) {\n      QWidget *widget = inner_layout.itemAt(i)->widget();\n      if (widget == nullptr || widget->isVisible()) {\n        QRect r = inner_layout.itemAt(i)->geometry();\n        int bottom = r.bottom() + inner_layout.spacing() / 2;\n        p.drawLine(r.left() + 40, bottom, r.right() - 40, bottom);\n      }\n    }\n  }\n  QVBoxLayout outer_layout;\n  QVBoxLayout inner_layout;\n};\n"
  },
  "selfdrive.ui.qt.widgets.controls.LayoutWidget": {
    "id": "selfdrive.ui.qt.widgets.controls.LayoutWidget",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\controls.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\controls.h",
    "depends_on": [],
    "start_line": 289,
    "end_line": 296,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class LayoutWidget : public QWidget {\n  Q_OBJECT\n\npublic:\n  LayoutWidget(QLayout *l, QWidget *parent = nullptr) : QWidget(parent) {\n    setLayout(l);\n  }\n};\n"
  },
  "selfdrive.ui.qt.widgets.input.DialogBase": {
    "id": "selfdrive.ui.qt.widgets.input.DialogBase",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\input.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\input.h",
    "depends_on": [],
    "start_line": 13,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class DialogBase : public QDialog {\n  Q_OBJECT\n\nprotected:\n  DialogBase(QWidget *parent);\n  bool eventFilter(QObject *o, QEvent *e) override;\n\npublic slots:\n  int exec() override;\n};\n"
  },
  "selfdrive.ui.qt.widgets.input.InputDialog": {
    "id": "selfdrive.ui.qt.widgets.input.InputDialog",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\input.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\input.h",
    "depends_on": [],
    "start_line": 24,
    "end_line": 51,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class InputDialog : public DialogBase {\n  Q_OBJECT\n\npublic:\n  explicit InputDialog(const QString &title, QWidget *parent, const QString &subtitle = \"\", bool secret = false);\n  static QString getText(const QString &title, QWidget *parent, const QString &subtitle = \"\",\n                         bool secret = false, int minLength = -1, const QString &defaultText = \"\");\n  QString text();\n  void setMessage(const QString &message, bool clearInputField = true);\n  void setMinLength(int length);\n  void show();\n\nprivate:\n  int minLength;\n  QLineEdit *line;\n  Keyboard *k;\n  QLabel *label;\n  QLabel *sublabel;\n  QVBoxLayout *main_layout;\n  QPushButton *eye_btn;\n\nprivate slots:\n  void handleEnter();\n\nsignals:\n  void cancel();\n  void emitText(const QString &text);\n};\n"
  },
  "selfdrive.ui.qt.widgets.input.ConfirmationDialog": {
    "id": "selfdrive.ui.qt.widgets.input.ConfirmationDialog",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\input.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\input.h",
    "depends_on": [],
    "start_line": 53,
    "end_line": 62,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ConfirmationDialog : public DialogBase {\n  Q_OBJECT\n\npublic:\n  explicit ConfirmationDialog(const QString &prompt_text, const QString &confirm_text,\n                              const QString &cancel_text, const bool rich, QWidget* parent);\n  static bool alert(const QString &prompt_text, QWidget *parent);\n  static bool confirm(const QString &prompt_text, const QString &confirm_text, QWidget *parent);\n  static bool rich(const QString &prompt_text, QWidget *parent);\n};\n"
  },
  "selfdrive.ui.qt.widgets.input.MultiOptionDialog": {
    "id": "selfdrive.ui.qt.widgets.input.MultiOptionDialog",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\input.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\input.h",
    "depends_on": [],
    "start_line": 64,
    "end_line": 71,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class MultiOptionDialog : public DialogBase {\n  Q_OBJECT\n\npublic:\n  explicit MultiOptionDialog(const QString &prompt_text, const QStringList &l, const QString &current, QWidget *parent);\n  static QString getSelection(const QString &prompt_text, const QStringList &l, const QString &current, QWidget *parent);\n  QString selection;\n};\n"
  },
  "selfdrive.ui.qt.widgets.keyboard.KeyButton": {
    "id": "selfdrive.ui.qt.widgets.keyboard.KeyButton",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\keyboard.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\keyboard.h",
    "depends_on": [],
    "start_line": 9,
    "end_line": 15,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class KeyButton : public QPushButton {\n  Q_OBJECT\n\npublic:\n  KeyButton(const QString &text, QWidget *parent = 0);\n  bool event(QEvent *event) override;\n};\n"
  },
  "selfdrive.ui.qt.widgets.keyboard.KeyboardLayout": {
    "id": "selfdrive.ui.qt.widgets.keyboard.KeyboardLayout",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\keyboard.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\keyboard.h",
    "depends_on": [],
    "start_line": 17,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class KeyboardLayout : public QWidget {\n  Q_OBJECT\n\npublic:\n  explicit KeyboardLayout(QWidget* parent, const std::vector<QVector<QString>>& layout);\n};\n"
  },
  "selfdrive.ui.qt.widgets.keyboard.Keyboard": {
    "id": "selfdrive.ui.qt.widgets.keyboard.Keyboard",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\keyboard.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\keyboard.h",
    "depends_on": [],
    "start_line": 24,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class Keyboard : public QFrame {\n  Q_OBJECT\n\npublic:\n  explicit Keyboard(QWidget *parent = 0);\n\nprivate:\n  QStackedLayout* main_layout;\n  int shift_state = 0;\n\nprivate slots:\n  void handleButton(QAbstractButton* m_button);\n  void handleCapsPress();\n\nsignals:\n  void emitKey(const QString &s);\n  void emitBackspace();\n  void emitEnter();\n};\n"
  },
  "selfdrive.ui.qt.widgets.offroad_alerts.AbstractAlert": {
    "id": "selfdrive.ui.qt.widgets.offroad_alerts.AbstractAlert",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\offroad_alerts.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\offroad_alerts.h",
    "depends_on": [],
    "start_line": 12,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class AbstractAlert : public QFrame {\n  Q_OBJECT\n\nprotected:\n  AbstractAlert(bool hasRebootBtn, QWidget *parent = nullptr);\n\n  QPushButton *snooze_btn;\n  QVBoxLayout *scrollable_layout;\n  Params params;\n\nsignals:\n  void dismiss();\n};\n"
  },
  "selfdrive.ui.qt.widgets.offroad_alerts.UpdateAlert": {
    "id": "selfdrive.ui.qt.widgets.offroad_alerts.UpdateAlert",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\offroad_alerts.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\offroad_alerts.h",
    "depends_on": [],
    "start_line": 26,
    "end_line": 35,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class UpdateAlert : public AbstractAlert {\n  Q_OBJECT\n\npublic:\n  UpdateAlert(QWidget *parent = 0);\n  bool refresh();\n\nprivate:\n  QLabel *releaseNotes = nullptr;\n};\n"
  },
  "selfdrive.ui.qt.widgets.offroad_alerts.OffroadAlert": {
    "id": "selfdrive.ui.qt.widgets.offroad_alerts.OffroadAlert",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\offroad_alerts.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\offroad_alerts.h",
    "depends_on": [],
    "start_line": 37,
    "end_line": 46,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class OffroadAlert : public AbstractAlert {\n  Q_OBJECT\n\npublic:\n  explicit OffroadAlert(QWidget *parent = 0) : AbstractAlert(false, parent) {}\n  int refresh();\n\nprivate:\n  std::map<std::string, QLabel*> alerts;\n};\n"
  },
  "selfdrive.ui.qt.widgets.prime.PairingQRWidget": {
    "id": "selfdrive.ui.qt.widgets.prime.PairingQRWidget",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\prime.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\prime.h",
    "depends_on": [],
    "start_line": 11,
    "end_line": 27,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class PairingQRWidget : public QWidget {\n  Q_OBJECT\n\npublic:\n  explicit PairingQRWidget(QWidget* parent = 0);\n  void paintEvent(QPaintEvent*) override;\n\nprivate:\n  QPixmap img;\n  QTimer *timer;\n  void updateQrCode(const QString &text);\n  void showEvent(QShowEvent *event) override;\n  void hideEvent(QHideEvent *event) override;\n\nprivate slots:\n  void refresh();\n};\n"
  },
  "selfdrive.ui.qt.widgets.prime.PairingPopup": {
    "id": "selfdrive.ui.qt.widgets.prime.PairingPopup",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\prime.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\prime.h",
    "depends_on": [],
    "start_line": 31,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class PairingPopup : public DialogBase {\n  Q_OBJECT\n\npublic:\n  explicit PairingPopup(QWidget* parent);\n  int exec() override;\n};\n"
  },
  "selfdrive.ui.qt.widgets.prime.PrimeUserWidget": {
    "id": "selfdrive.ui.qt.widgets.prime.PrimeUserWidget",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\prime.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\prime.h",
    "depends_on": [],
    "start_line": 41,
    "end_line": 46,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class PrimeUserWidget : public QFrame {\n  Q_OBJECT\n\npublic:\n  explicit PrimeUserWidget(QWidget* parent = 0);\n};\n"
  },
  "selfdrive.ui.qt.widgets.prime.PrimeAdWidget": {
    "id": "selfdrive.ui.qt.widgets.prime.PrimeAdWidget",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\prime.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\prime.h",
    "depends_on": [],
    "start_line": 50,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class PrimeAdWidget : public QFrame {\n  Q_OBJECT\npublic:\n  explicit PrimeAdWidget(QWidget* parent = 0);\n};\n"
  },
  "selfdrive.ui.qt.widgets.prime.SetupWidget": {
    "id": "selfdrive.ui.qt.widgets.prime.SetupWidget",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\prime.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\prime.h",
    "depends_on": [],
    "start_line": 58,
    "end_line": 70,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class SetupWidget : public QFrame {\n  Q_OBJECT\n\npublic:\n  explicit SetupWidget(QWidget* parent = 0);\n\nsignals:\n  void openSettings(int index = 0, const QString &param = \"\");\n\nprivate:\n  PairingPopup *popup;\n  QStackedWidget *mainLayout;\n};\n"
  },
  "selfdrive.ui.qt.widgets.scrollview.ScrollView": {
    "id": "selfdrive.ui.qt.widgets.scrollview.ScrollView",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\scrollview.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\scrollview.h",
    "depends_on": [],
    "start_line": 5,
    "end_line": 12,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ScrollView : public QScrollArea {\n  Q_OBJECT\n\npublic:\n  explicit ScrollView(QWidget *w = nullptr, QWidget *parent = nullptr);\nprotected:\n  void hideEvent(QHideEvent *e) override;\n};\n"
  },
  "selfdrive.ui.qt.widgets.ssh_keys.SshToggle": {
    "id": "selfdrive.ui.qt.widgets.ssh_keys.SshToggle",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\ssh_keys.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\ssh_keys.h",
    "depends_on": [],
    "start_line": 9,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class SshToggle : public ToggleControl {\n  Q_OBJECT\n\npublic:\n  SshToggle() : ToggleControl(tr(\"Enable SSH\"), \"\", \"\", Hardware::get_ssh_enabled()) {\n    QObject::connect(this, &SshToggle::toggleFlipped, [=](bool state) {\n      Hardware::set_ssh_enabled(state);\n    });\n  }\n};\n"
  },
  "selfdrive.ui.qt.widgets.ssh_keys.SshControl": {
    "id": "selfdrive.ui.qt.widgets.ssh_keys.SshControl",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\ssh_keys.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\ssh_keys.h",
    "depends_on": [],
    "start_line": 21,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class SshControl : public ButtonControl {\n  Q_OBJECT\n\npublic:\n  SshControl();\n\nprivate:\n  Params params;\n\n  void refresh();\n  void getUserKeys(const QString &username);\n};\n"
  },
  "selfdrive.ui.qt.widgets.toggle.Toggle": {
    "id": "selfdrive.ui.qt.widgets.toggle.Toggle",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\toggle.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\toggle.h",
    "depends_on": [],
    "start_line": 7,
    "end_line": 44,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class Toggle : public QAbstractButton {\n  Q_OBJECT\n  Q_PROPERTY(int offset_circle READ offset_circle WRITE set_offset_circle CONSTANT)\n\npublic:\n  Toggle(QWidget* parent = nullptr);\n  void togglePosition();\n  bool on;\n  int animation_duration = 150;\n  int immediateOffset = 0;\n  int offset_circle() const {\n    return _x_circle;\n  }\n\n  void set_offset_circle(int o) {\n    _x_circle = o;\n    update();\n  }\n  bool getEnabled();\n  void setEnabled(bool value);\n\nprotected:\n  void paintEvent(QPaintEvent*) override;\n  void mouseReleaseEvent(QMouseEvent*) override;\n  void enterEvent(QEvent*) override;\n\nprivate:\n  QColor circleColor;\n  QColor green;\n  bool enabled = true;\n  int _x_circle, _y_circle;\n  int _height, _radius;\n  int _height_rect, _y_rect;\n  QPropertyAnimation *_anim = nullptr;\n\nsignals:\n  void stateChanged(bool new_state);\n};\n"
  },
  "selfdrive.ui.qt.widgets.toggle.Toggle.offset_circle": {
    "id": "selfdrive.ui.qt.widgets.toggle.Toggle.offset_circle",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\toggle.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\toggle.h",
    "depends_on": [],
    "start_line": 17,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  int offset_circle() const {\n    return _x_circle;\n  }\n"
  },
  "selfdrive.ui.qt.widgets.toggle.Toggle.set_offset_circle": {
    "id": "selfdrive.ui.qt.widgets.toggle.Toggle.set_offset_circle",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\toggle.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\toggle.h",
    "depends_on": [],
    "start_line": 21,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  void set_offset_circle(int o) {\n    _x_circle = o;\n    update();\n  }\n"
  },
  "selfdrive.ui.qt.widgets.wifi.WiFiPromptWidget": {
    "id": "selfdrive.ui.qt.widgets.wifi.WiFiPromptWidget",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\qt\\widgets\\wifi.h",
    "relative_path": "selfdrive\\ui\\qt\\widgets\\wifi.h",
    "depends_on": [],
    "start_line": 6,
    "end_line": 14,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class WiFiPromptWidget : public QFrame {\n  Q_OBJECT\n\npublic:\n  explicit WiFiPromptWidget(QWidget* parent = 0);\n\nsignals:\n  void openSettings(int index = 0, const QString &param = \"\");\n};\n"
  },
  "selfdrive.ui.tests.test_runner.main": {
    "id": "selfdrive.ui.tests.test_runner.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_runner.cc",
    "relative_path": "selfdrive\\ui\\tests\\test_runner.cc",
    "depends_on": [],
    "start_line": 9,
    "end_line": 26,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int main(int argc, char **argv) {\n  // unit tests for Qt\n  QApplication app(argc, argv);\n\n  QString language_file = \"main_test_en\";\n  // FIXME: pytest-cpp considers this print as a test case\n  qDebug() << \"Loading language:\" << language_file;\n\n  QTranslator translator;\n  QString translationsPath = QDir::cleanPath(qApp->applicationDirPath() + \"/../translations\");\n  if (!translator.load(language_file, translationsPath)) {\n    qDebug() << \"Failed to load translation file!\";\n  }\n  app.installTranslator(&translator);\n\n  const int res = Catch::Session().run(argc, argv);\n  return (res < 0xff ? res : 0xff);\n}\n"
  },
  "selfdrive.ui.tests.test_soundd.TestSoundd": {
    "id": "selfdrive.ui.tests.test_soundd.TestSoundd",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_soundd.py",
    "relative_path": "selfdrive\\ui\\tests\\test_soundd.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_soundd.TestSoundd.test_check_selfdrive_timeout_alert": {
    "id": "selfdrive.ui.tests.test_soundd.TestSoundd.test_check_selfdrive_timeout_alert",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_soundd.py",
    "relative_path": "selfdrive\\ui\\tests\\test_soundd.py",
    "depends_on": [],
    "start_line": 12,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_translations.getParentWidgets": {
    "id": "selfdrive.ui.tests.test_translations.getParentWidgets",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_translations.cc",
    "relative_path": "selfdrive\\ui\\tests\\test_translations.cc",
    "depends_on": [],
    "start_line": 9,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QStringList getParentWidgets(QWidget* widget){\n  QStringList parentWidgets;\n  while (widget->parentWidget() != Q_NULLPTR) {\n    widget = widget->parentWidget();\n    parentWidgets.append(widget->metaObject()->className());\n  }\n  return parentWidgets;\n}\n"
  },
  "selfdrive.ui.tests.test_translations.TestTranslations": {
    "id": "selfdrive.ui.tests.test_translations.TestTranslations",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_translations.py",
    "relative_path": "selfdrive\\ui\\tests\\test_translations.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 117,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_translations.TestTranslations._read_translation_file": {
    "id": "selfdrive.ui.tests.test_translations.TestTranslations._read_translation_file",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_translations.py",
    "relative_path": "selfdrive\\ui\\tests\\test_translations.py",
    "depends_on": [],
    "start_line": 26,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_translations.TestTranslations.test_missing_translation_files": {
    "id": "selfdrive.ui.tests.test_translations.TestTranslations.test_missing_translation_files",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_translations.py",
    "relative_path": "selfdrive\\ui\\tests\\test_translations.py",
    "depends_on": [],
    "start_line": 31,
    "end_line": 33,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_translations.TestTranslations.test_unfinished_translations": {
    "id": "selfdrive.ui.tests.test_translations.TestTranslations.test_unfinished_translations",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_translations.py",
    "relative_path": "selfdrive\\ui\\tests\\test_translations.py",
    "depends_on": [],
    "start_line": 36,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_translations.TestTranslations.test_vanished_translations": {
    "id": "selfdrive.ui.tests.test_translations.TestTranslations.test_vanished_translations",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_translations.py",
    "relative_path": "selfdrive\\ui\\tests\\test_translations.py",
    "depends_on": [],
    "start_line": 41,
    "end_line": 44,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_translations.TestTranslations.test_finished_translations": {
    "id": "selfdrive.ui.tests.test_translations.TestTranslations.test_finished_translations",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_translations.py",
    "relative_path": "selfdrive\\ui\\tests\\test_translations.py",
    "depends_on": [],
    "start_line": 46,
    "end_line": 81,
    "has_docstring": true,
    "docstring": "\n      Tests ran on each translation marked \"finished\"\n      Plural:\n      - that any numerus (plural) translations have all plural forms non-empty\n      - that the correct format specifier is used (%n)\n      Non-plural:\n      - that translation is not empty\n      - that translation format arguments are consistent\n    ",
    "language": "python"
  },
  "selfdrive.ui.tests.test_translations.TestTranslations.test_no_locations": {
    "id": "selfdrive.ui.tests.test_translations.TestTranslations.test_no_locations",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_translations.py",
    "relative_path": "selfdrive\\ui\\tests\\test_translations.py",
    "depends_on": [],
    "start_line": 83,
    "end_line": 86,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_translations.TestTranslations.test_entities_error": {
    "id": "selfdrive.ui.tests.test_translations.TestTranslations.test_entities_error",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_translations.py",
    "relative_path": "selfdrive\\ui\\tests\\test_translations.py",
    "depends_on": [],
    "start_line": 88,
    "end_line": 91,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_translations.TestTranslations.test_bad_language": {
    "id": "selfdrive.ui.tests.test_translations.TestTranslations.test_bad_language",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_translations.py",
    "relative_path": "selfdrive\\ui\\tests\\test_translations.py",
    "depends_on": [],
    "start_line": 93,
    "end_line": 117,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.setup_homescreen": {
    "id": "selfdrive.ui.tests.test_ui.run.setup_homescreen",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [],
    "start_line": 38,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.setup_settings_device": {
    "id": "selfdrive.ui.tests.test_ui.run.setup_settings_device",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [],
    "start_line": 41,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.setup_settings_toggles": {
    "id": "selfdrive.ui.tests.test_ui.run.setup_settings_toggles",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [
      "selfdrive.ui.tests.test_ui.run.setup_settings_device"
    ],
    "start_line": 44,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.setup_settings_software": {
    "id": "selfdrive.ui.tests.test_ui.run.setup_settings_software",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [
      "selfdrive.ui.tests.test_ui.run.setup_settings_device"
    ],
    "start_line": 49,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.setup_settings_firehose": {
    "id": "selfdrive.ui.tests.test_ui.run.setup_settings_firehose",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [],
    "start_line": 54,
    "end_line": 55,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.setup_settings_developer": {
    "id": "selfdrive.ui.tests.test_ui.run.setup_settings_developer",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [
      "selfdrive.ui.tests.test_ui.run.setup_settings_device"
    ],
    "start_line": 57,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.setup_onroad": {
    "id": "selfdrive.ui.tests.test_ui.run.setup_onroad",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [],
    "start_line": 66,
    "end_line": 96,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.setup_onroad_disengaged": {
    "id": "selfdrive.ui.tests.test_ui.run.setup_onroad_disengaged",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [
      "selfdrive.ui.tests.test_ui.run.setup_onroad"
    ],
    "start_line": 98,
    "end_line": 101,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.setup_onroad_override": {
    "id": "selfdrive.ui.tests.test_ui.run.setup_onroad_override",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [
      "selfdrive.ui.tests.test_ui.run.setup_onroad"
    ],
    "start_line": 103,
    "end_line": 106,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.setup_onroad_wide": {
    "id": "selfdrive.ui.tests.test_ui.run.setup_onroad_wide",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [
      "selfdrive.ui.tests.test_ui.run.setup_onroad"
    ],
    "start_line": 109,
    "end_line": 112,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.setup_onroad_sidebar": {
    "id": "selfdrive.ui.tests.test_ui.run.setup_onroad_sidebar",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [
      "selfdrive.ui.tests.test_ui.run.setup_onroad"
    ],
    "start_line": 114,
    "end_line": 117,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.setup_onroad_wide_sidebar": {
    "id": "selfdrive.ui.tests.test_ui.run.setup_onroad_wide_sidebar",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [
      "selfdrive.ui.tests.test_ui.run.setup_onroad_wide"
    ],
    "start_line": 119,
    "end_line": 122,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.setup_body": {
    "id": "selfdrive.ui.tests.test_ui.run.setup_body",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [
      "selfdrive.ui.tests.test_ui.run.setup_onroad"
    ],
    "start_line": 124,
    "end_line": 129,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.setup_keyboard": {
    "id": "selfdrive.ui.tests.test_ui.run.setup_keyboard",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [
      "selfdrive.ui.tests.test_ui.run.setup_settings_device"
    ],
    "start_line": 131,
    "end_line": 134,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.setup_keyboard_uppercase": {
    "id": "selfdrive.ui.tests.test_ui.run.setup_keyboard_uppercase",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [
      "selfdrive.ui.tests.test_ui.run.setup_keyboard"
    ],
    "start_line": 136,
    "end_line": 138,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.setup_driver_camera": {
    "id": "selfdrive.ui.tests.test_ui.run.setup_driver_camera",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [
      "selfdrive.ui.tests.test_ui.run.setup_onroad",
      "selfdrive.ui.tests.test_ui.run.setup_settings_device"
    ],
    "start_line": 140,
    "end_line": 145,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.setup_onroad_alert": {
    "id": "selfdrive.ui.tests.test_ui.run.setup_onroad_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [
      "selfdrive.ui.tests.test_ui.run.setup_onroad"
    ],
    "start_line": 147,
    "end_line": 158,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.setup_onroad_alert_small": {
    "id": "selfdrive.ui.tests.test_ui.run.setup_onroad_alert_small",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [
      "selfdrive.ui.tests.test_ui.run.setup_onroad_alert"
    ],
    "start_line": 160,
    "end_line": 161,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.setup_onroad_alert_mid": {
    "id": "selfdrive.ui.tests.test_ui.run.setup_onroad_alert_mid",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [
      "selfdrive.ui.tests.test_ui.run.setup_onroad_alert"
    ],
    "start_line": 163,
    "end_line": 164,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.setup_onroad_alert_full": {
    "id": "selfdrive.ui.tests.test_ui.run.setup_onroad_alert_full",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [
      "selfdrive.ui.tests.test_ui.run.setup_onroad_alert"
    ],
    "start_line": 166,
    "end_line": 167,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.setup_offroad_alert": {
    "id": "selfdrive.ui.tests.test_ui.run.setup_offroad_alert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [
      "selfdrive.ui.tests.test_ui.run.setup_settings_device"
    ],
    "start_line": 169,
    "end_line": 175,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.setup_update_available": {
    "id": "selfdrive.ui.tests.test_ui.run.setup_update_available",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [
      "selfdrive.ui.tests.test_ui.run.setup_settings_device"
    ],
    "start_line": 177,
    "end_line": 185,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.setup_pair_device": {
    "id": "selfdrive.ui.tests.test_ui.run.setup_pair_device",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [],
    "start_line": 187,
    "end_line": 189,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.TestUI": {
    "id": "selfdrive.ui.tests.test_ui.run.TestUI",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [],
    "start_line": 223,
    "end_line": 255,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.TestUI.__init__": {
    "id": "selfdrive.ui.tests.test_ui.run.TestUI.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [],
    "start_line": 224,
    "end_line": 226,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.TestUI.setup": {
    "id": "selfdrive.ui.tests.test_ui.run.TestUI.setup",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [],
    "start_line": 228,
    "end_line": 240,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.TestUI.screenshot": {
    "id": "selfdrive.ui.tests.test_ui.run.TestUI.screenshot",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [],
    "start_line": 242,
    "end_line": 245,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.TestUI.click": {
    "id": "selfdrive.ui.tests.test_ui.run.TestUI.click",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [],
    "start_line": 247,
    "end_line": 249,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.TestUI.test_ui": {
    "id": "selfdrive.ui.tests.test_ui.run.TestUI.test_ui",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [],
    "start_line": 252,
    "end_line": 255,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.tests.test_ui.run.create_screenshots": {
    "id": "selfdrive.ui.tests.test_ui.run.create_screenshots",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\tests\\test_ui\\run.py",
    "relative_path": "selfdrive\\ui\\tests\\test_ui\\run.py",
    "depends_on": [
      "selfdrive.ui.tests.test_ui.run.TestUI"
    ],
    "start_line": 257,
    "end_line": 306,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.translations.auto_translate.get_language_files": {
    "id": "selfdrive.ui.translations.auto_translate.get_language_files",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\translations\\auto_translate.py",
    "relative_path": "selfdrive\\ui\\translations\\auto_translate.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.translations.auto_translate.translate_phrase": {
    "id": "selfdrive.ui.translations.auto_translate.translate_phrase",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\translations\\auto_translate.py",
    "relative_path": "selfdrive\\ui\\translations\\auto_translate.py",
    "depends_on": [],
    "start_line": 37,
    "end_line": 67,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.translations.auto_translate.translate_file": {
    "id": "selfdrive.ui.translations.auto_translate.translate_file",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\translations\\auto_translate.py",
    "relative_path": "selfdrive\\ui\\translations\\auto_translate.py",
    "depends_on": [
      "selfdrive.ui.translations.auto_translate.translate_phrase"
    ],
    "start_line": 70,
    "end_line": 103,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "selfdrive.ui.translations.auto_translate.main": {
    "id": "selfdrive.ui.translations.auto_translate.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\selfdrive\\ui\\translations\\auto_translate.py",
    "relative_path": "selfdrive\\ui\\translations\\auto_translate.py",
    "depends_on": [
      "selfdrive.ui.translations.auto_translate.translate_file",
      "selfdrive.ui.translations.auto_translate.get_language_files"
    ],
    "start_line": 106,
    "end_line": 134,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "site_scons.site_tools.cython.pyx_scan": {
    "id": "site_scons.site_tools.cython.pyx_scan",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\site_scons\\site_tools\\cython.py",
    "relative_path": "site_scons\\site_tools\\cython.py",
    "depends_on": [],
    "start_line": 13,
    "end_line": 35,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "site_scons.site_tools.cython.create_builder": {
    "id": "site_scons.site_tools.cython.create_builder",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\site_scons\\site_tools\\cython.py",
    "relative_path": "site_scons\\site_tools\\cython.py",
    "depends_on": [
      "site_scons.site_tools.cython.cython_suffix_emitter"
    ],
    "start_line": 42,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "site_scons.site_tools.cython.cython_suffix_emitter": {
    "id": "site_scons.site_tools.cython.cython_suffix_emitter",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\site_scons\\site_tools\\cython.py",
    "relative_path": "site_scons\\site_tools\\cython.py",
    "depends_on": [],
    "start_line": 56,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "site_scons.site_tools.cython.generate": {
    "id": "site_scons.site_tools.cython.generate",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\site_scons\\site_tools\\cython.py",
    "relative_path": "site_scons\\site_tools\\cython.py",
    "depends_on": [
      "site_scons.site_tools.cython.cython_suffix_emitter",
      "site_scons.site_tools.cython.create_builder"
    ],
    "start_line": 59,
    "end_line": 72,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "site_scons.site_tools.cython.exists": {
    "id": "site_scons.site_tools.cython.exists",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\site_scons\\site_tools\\cython.py",
    "relative_path": "site_scons\\site_tools\\cython.py",
    "depends_on": [],
    "start_line": 74,
    "end_line": 75,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.logmessaged.main": {
    "id": "system.logmessaged.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\logmessaged.py",
    "relative_path": "system\\logmessaged.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.micd.get_a_weighting_filter": {
    "id": "system.micd.get_a_weighting_filter",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\micd.py",
    "relative_path": "system\\micd.py",
    "depends_on": [],
    "start_line": 19,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.micd.calculate_spl": {
    "id": "system.micd.calculate_spl",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\micd.py",
    "relative_path": "system\\micd.py",
    "depends_on": [],
    "start_line": 27,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.micd.apply_a_weighting": {
    "id": "system.micd.apply_a_weighting",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\micd.py",
    "relative_path": "system\\micd.py",
    "depends_on": [
      "system.micd.get_a_weighting_filter"
    ],
    "start_line": 37,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.micd.Mic": {
    "id": "system.micd.Mic",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\micd.py",
    "relative_path": "system\\micd.py",
    "depends_on": [
      "system.micd.calculate_spl",
      "system.micd.apply_a_weighting"
    ],
    "start_line": 45,
    "end_line": 105,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.micd.Mic.__init__": {
    "id": "system.micd.Mic.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\micd.py",
    "relative_path": "system\\micd.py",
    "depends_on": [],
    "start_line": 46,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.micd.Mic.update": {
    "id": "system.micd.Mic.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\micd.py",
    "relative_path": "system\\micd.py",
    "depends_on": [],
    "start_line": 58,
    "end_line": 70,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.micd.Mic.callback": {
    "id": "system.micd.Mic.callback",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\micd.py",
    "relative_path": "system\\micd.py",
    "depends_on": [
      "system.micd.calculate_spl",
      "system.micd.apply_a_weighting"
    ],
    "start_line": 72,
    "end_line": 89,
    "has_docstring": true,
    "docstring": "\n    Using amplitude measurements, calculate an uncalibrated sound pressure and sound pressure level.\n    Then apply A-weighting to the raw amplitudes and run the same calculations again.\n\n    Logged A-weighted equivalents are rough approximations of the human-perceived loudness.\n    ",
    "language": "python"
  },
  "system.micd.Mic.get_stream": {
    "id": "system.micd.Mic.get_stream",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\micd.py",
    "relative_path": "system\\micd.py",
    "depends_on": [],
    "start_line": 92,
    "end_line": 96,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.micd.Mic.micd_thread": {
    "id": "system.micd.Mic.micd_thread",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\micd.py",
    "relative_path": "system\\micd.py",
    "depends_on": [],
    "start_line": 98,
    "end_line": 105,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.micd.main": {
    "id": "system.micd.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\micd.py",
    "relative_path": "system\\micd.py",
    "depends_on": [
      "system.micd.Mic"
    ],
    "start_line": 108,
    "end_line": 110,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.sentry.SentryProject": {
    "id": "system.sentry.SentryProject",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sentry.py",
    "relative_path": "system\\sentry.py",
    "depends_on": [],
    "start_line": 13,
    "end_line": 17,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.sentry.report_tombstone": {
    "id": "system.sentry.report_tombstone",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sentry.py",
    "relative_path": "system\\sentry.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 27,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.sentry.capture_exception": {
    "id": "system.sentry.capture_exception",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sentry.py",
    "relative_path": "system\\sentry.py",
    "depends_on": [],
    "start_line": 30,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.sentry.set_tag": {
    "id": "system.sentry.set_tag",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sentry.py",
    "relative_path": "system\\sentry.py",
    "depends_on": [],
    "start_line": 40,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.sentry.init": {
    "id": "system.sentry.init",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sentry.py",
    "relative_path": "system\\sentry.py",
    "depends_on": [
      "system.sentry.SentryProject"
    ],
    "start_line": 44,
    "end_line": 73,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.statsd.METRIC_TYPE": {
    "id": "system.statsd.METRIC_TYPE",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\statsd.py",
    "relative_path": "system\\statsd.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 23,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.statsd.StatLog": {
    "id": "system.statsd.StatLog",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\statsd.py",
    "relative_path": "system\\statsd.py",
    "depends_on": [
      "system.statsd.METRIC_TYPE"
    ],
    "start_line": 25,
    "end_line": 60,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.statsd.StatLog.__init__": {
    "id": "system.statsd.StatLog.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\statsd.py",
    "relative_path": "system\\statsd.py",
    "depends_on": [],
    "start_line": 26,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.statsd.StatLog.connect": {
    "id": "system.statsd.StatLog.connect",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\statsd.py",
    "relative_path": "system\\statsd.py",
    "depends_on": [],
    "start_line": 31,
    "end_line": 36,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.statsd.StatLog.__del__": {
    "id": "system.statsd.StatLog.__del__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\statsd.py",
    "relative_path": "system\\statsd.py",
    "depends_on": [],
    "start_line": 38,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.statsd.StatLog._send": {
    "id": "system.statsd.StatLog._send",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\statsd.py",
    "relative_path": "system\\statsd.py",
    "depends_on": [],
    "start_line": 44,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.statsd.StatLog.gauge": {
    "id": "system.statsd.StatLog.gauge",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\statsd.py",
    "relative_path": "system\\statsd.py",
    "depends_on": [
      "system.statsd.METRIC_TYPE"
    ],
    "start_line": 54,
    "end_line": 55,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.statsd.StatLog.sample": {
    "id": "system.statsd.StatLog.sample",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\statsd.py",
    "relative_path": "system\\statsd.py",
    "depends_on": [
      "system.statsd.METRIC_TYPE"
    ],
    "start_line": 59,
    "end_line": 60,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.statsd.main": {
    "id": "system.statsd.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\statsd.py",
    "relative_path": "system\\statsd.py",
    "depends_on": [
      "system.statsd.METRIC_TYPE"
    ],
    "start_line": 63,
    "end_line": 177,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.timed.set_time": {
    "id": "system.timed.set_time",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\timed.py",
    "relative_path": "system\\timed.py",
    "depends_on": [],
    "start_line": 14,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.timed.main": {
    "id": "system.timed.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\timed.py",
    "relative_path": "system\\timed.py",
    "depends_on": [
      "system.timed.set_time"
    ],
    "start_line": 27,
    "end_line": 59,
    "has_docstring": true,
    "docstring": "\n    timed has two responsibilities:\n    - getting the current time from GPS\n    - publishing the time in the logs\n\n    AGNOS will also use NTP to update the time.\n  ",
    "language": "python"
  },
  "system.tombstoned.safe_fn": {
    "id": "system.tombstoned.safe_fn",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\tombstoned.py",
    "relative_path": "system\\tombstoned.py",
    "depends_on": [],
    "start_line": 24,
    "end_line": 26,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.tombstoned.clear_apport_folder": {
    "id": "system.tombstoned.clear_apport_folder",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\tombstoned.py",
    "relative_path": "system\\tombstoned.py",
    "depends_on": [],
    "start_line": 29,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.tombstoned.get_apport_stacktrace": {
    "id": "system.tombstoned.get_apport_stacktrace",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\tombstoned.py",
    "relative_path": "system\\tombstoned.py",
    "depends_on": [],
    "start_line": 37,
    "end_line": 44,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.tombstoned.get_tombstones": {
    "id": "system.tombstoned.get_tombstones",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\tombstoned.py",
    "relative_path": "system\\tombstoned.py",
    "depends_on": [],
    "start_line": 47,
    "end_line": 58,
    "has_docstring": true,
    "docstring": "Returns list of (filename, ctime) for all crashlogs",
    "language": "python"
  },
  "system.tombstoned.report_tombstone_apport": {
    "id": "system.tombstoned.report_tombstone_apport",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\tombstoned.py",
    "relative_path": "system\\tombstoned.py",
    "depends_on": [
      "system.tombstoned.get_apport_stacktrace",
      "system.tombstoned.safe_fn"
    ],
    "start_line": 61,
    "end_line": 140,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.tombstoned.main": {
    "id": "system.tombstoned.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\tombstoned.py",
    "relative_path": "system\\tombstoned.py",
    "depends_on": [
      "system.tombstoned.clear_apport_folder",
      "system.tombstoned.report_tombstone_apport",
      "system.tombstoned.get_tombstones"
    ],
    "start_line": 143,
    "end_line": 172,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.version.get_version": {
    "id": "system.version.get_version",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\version.py",
    "relative_path": "system\\version.py",
    "depends_on": [],
    "start_line": 22,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.version.get_release_notes": {
    "id": "system.version.get_release_notes",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\version.py",
    "relative_path": "system\\version.py",
    "depends_on": [],
    "start_line": 28,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.version.is_prebuilt": {
    "id": "system.version.is_prebuilt",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\version.py",
    "relative_path": "system\\version.py",
    "depends_on": [],
    "start_line": 34,
    "end_line": 35,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.version.is_dirty": {
    "id": "system.version.is_dirty",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\version.py",
    "relative_path": "system\\version.py",
    "depends_on": [
      "system.version.is_prebuilt"
    ],
    "start_line": 39,
    "end_line": 60,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.version.OpenpilotMetadata": {
    "id": "system.version.OpenpilotMetadata",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\version.py",
    "relative_path": "system\\version.py",
    "depends_on": [],
    "start_line": 64,
    "end_line": 89,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.version.OpenpilotMetadata.short_version": {
    "id": "system.version.OpenpilotMetadata.short_version",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\version.py",
    "relative_path": "system\\version.py",
    "depends_on": [],
    "start_line": 74,
    "end_line": 75,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.version.OpenpilotMetadata.comma_remote": {
    "id": "system.version.OpenpilotMetadata.comma_remote",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\version.py",
    "relative_path": "system\\version.py",
    "depends_on": [],
    "start_line": 78,
    "end_line": 81,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.version.OpenpilotMetadata.git_normalized_origin": {
    "id": "system.version.OpenpilotMetadata.git_normalized_origin",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\version.py",
    "relative_path": "system\\version.py",
    "depends_on": [],
    "start_line": 84,
    "end_line": 89,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.version.BuildMetadata": {
    "id": "system.version.BuildMetadata",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\version.py",
    "relative_path": "system\\version.py",
    "depends_on": [
      "system.version.OpenpilotMetadata"
    ],
    "start_line": 93,
    "end_line": 111,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.version.BuildMetadata.tested_channel": {
    "id": "system.version.BuildMetadata.tested_channel",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\version.py",
    "relative_path": "system\\version.py",
    "depends_on": [],
    "start_line": 98,
    "end_line": 99,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.version.BuildMetadata.release_channel": {
    "id": "system.version.BuildMetadata.release_channel",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\version.py",
    "relative_path": "system\\version.py",
    "depends_on": [],
    "start_line": 102,
    "end_line": 103,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.version.BuildMetadata.canonical": {
    "id": "system.version.BuildMetadata.canonical",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\version.py",
    "relative_path": "system\\version.py",
    "depends_on": [],
    "start_line": 106,
    "end_line": 107,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.version.BuildMetadata.ui_description": {
    "id": "system.version.BuildMetadata.ui_description",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\version.py",
    "relative_path": "system\\version.py",
    "depends_on": [],
    "start_line": 110,
    "end_line": 111,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.version.build_metadata_from_dict": {
    "id": "system.version.build_metadata_from_dict",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\version.py",
    "relative_path": "system\\version.py",
    "depends_on": [
      "system.version.OpenpilotMetadata",
      "system.version.BuildMetadata"
    ],
    "start_line": 114,
    "end_line": 131,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.version.get_build_metadata": {
    "id": "system.version.get_build_metadata",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\version.py",
    "relative_path": "system\\version.py",
    "depends_on": [
      "system.version.BuildMetadata",
      "system.version.get_version",
      "system.version.build_metadata_from_dict",
      "system.version.OpenpilotMetadata",
      "system.version.is_dirty",
      "system.version.get_release_notes"
    ],
    "start_line": 134,
    "end_line": 155,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.UploadFile": {
    "id": "system.athena.athenad.UploadFile",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [
      "system.athena.athenad.UploadFile"
    ],
    "start_line": 67,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.UploadFile.from_dict": {
    "id": "system.athena.athenad.UploadFile.from_dict",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [
      "system.athena.athenad.UploadFile"
    ],
    "start_line": 75,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.UploadItem": {
    "id": "system.athena.athenad.UploadItem",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [
      "system.athena.athenad.UploadItem"
    ],
    "start_line": 81,
    "end_line": 106,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.UploadItem.from_dict": {
    "id": "system.athena.athenad.UploadItem.from_dict",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [
      "system.athena.athenad.UploadItem"
    ],
    "start_line": 94,
    "end_line": 96,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.UploadItem.__lt__": {
    "id": "system.athena.athenad.UploadItem.__lt__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [
      "system.athena.athenad.UploadItem"
    ],
    "start_line": 98,
    "end_line": 101,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.UploadItem.__eq__": {
    "id": "system.athena.athenad.UploadItem.__eq__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [
      "system.athena.athenad.UploadItem"
    ],
    "start_line": 103,
    "end_line": 106,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.strip_zst_extension": {
    "id": "system.athena.athenad.strip_zst_extension",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [],
    "start_line": 120,
    "end_line": 123,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.AbortTransferException": {
    "id": "system.athena.athenad.AbortTransferException",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [],
    "start_line": 126,
    "end_line": 127,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.UploadQueueCache": {
    "id": "system.athena.athenad.UploadQueueCache",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [
      "system.athena.athenad.UploadItem"
    ],
    "start_line": 130,
    "end_line": 149,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.UploadQueueCache.initialize": {
    "id": "system.athena.athenad.UploadQueueCache.initialize",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [
      "system.athena.athenad.UploadItem"
    ],
    "start_line": 133,
    "end_line": 140,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.UploadQueueCache.cache": {
    "id": "system.athena.athenad.UploadQueueCache.cache",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [
      "system.athena.athenad.UploadItem"
    ],
    "start_line": 143,
    "end_line": 149,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.handle_long_poll": {
    "id": "system.athena.athenad.handle_long_poll",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [
      "system.athena.athenad.upload_handler",
      "system.athena.athenad.jsonrpc_handler",
      "system.athena.athenad.ws_send",
      "system.athena.athenad.ws_manage",
      "system.athena.athenad.stat_handler",
      "system.athena.athenad.log_handler",
      "system.athena.athenad.ws_recv"
    ],
    "start_line": 152,
    "end_line": 182,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.jsonrpc_handler": {
    "id": "system.athena.athenad.jsonrpc_handler",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [
      "system.athena.athenad.startLocalProxy"
    ],
    "start_line": 185,
    "end_line": 202,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.retry_upload": {
    "id": "system.athena.athenad.retry_upload",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [
      "system.athena.athenad.UploadQueueCache"
    ],
    "start_line": 205,
    "end_line": 224,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.cb": {
    "id": "system.athena.athenad.cb",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [
      "system.athena.athenad.AbortTransferException"
    ],
    "start_line": 227,
    "end_line": 239,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.upload_handler": {
    "id": "system.athena.athenad.upload_handler",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [
      "system.athena.athenad.retry_upload",
      "system.athena.athenad.AbortTransferException",
      "system.athena.athenad.cb",
      "system.athena.athenad.UploadQueueCache",
      "system.athena.athenad._do_upload"
    ],
    "start_line": 242,
    "end_line": 297,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad._do_upload": {
    "id": "system.athena.athenad._do_upload",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [
      "system.athena.athenad.strip_zst_extension",
      "system.athena.athenad.UploadItem"
    ],
    "start_line": 300,
    "end_line": 319,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.getMessage": {
    "id": "system.athena.athenad.getMessage",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [],
    "start_line": 324,
    "end_line": 338,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.getVersion": {
    "id": "system.athena.athenad.getVersion",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [],
    "start_line": 342,
    "end_line": 349,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.scan_dir": {
    "id": "system.athena.athenad.scan_dir",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [
      "system.athena.athenad.scan_dir"
    ],
    "start_line": 352,
    "end_line": 369,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.listDataDirectory": {
    "id": "system.athena.athenad.listDataDirectory",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [
      "system.athena.athenad.scan_dir"
    ],
    "start_line": 372,
    "end_line": 373,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.uploadFileToUrl": {
    "id": "system.athena.athenad.uploadFileToUrl",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [
      "system.athena.athenad.uploadFilesToUrls"
    ],
    "start_line": 377,
    "end_line": 384,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.uploadFilesToUrls": {
    "id": "system.athena.athenad.uploadFilesToUrls",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [
      "system.athena.athenad.strip_zst_extension",
      "system.athena.athenad.listUploadQueue",
      "system.athena.athenad.UploadQueueCache",
      "system.athena.athenad.UploadFile",
      "system.athena.athenad.UploadItem"
    ],
    "start_line": 388,
    "end_line": 429,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.listUploadQueue": {
    "id": "system.athena.athenad.listUploadQueue",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [],
    "start_line": 433,
    "end_line": 435,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.cancelUpload": {
    "id": "system.athena.athenad.cancelUpload",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [],
    "start_line": 439,
    "end_line": 449,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.setRouteViewed": {
    "id": "system.athena.athenad.setRouteViewed",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [],
    "start_line": 452,
    "end_line": 464,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.startLocalProxy": {
    "id": "system.athena.athenad.startLocalProxy",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [
      "system.athena.athenad.ws_proxy_recv",
      "system.athena.athenad.ws_proxy_send"
    ],
    "start_line": 467,
    "end_line": 505,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.getPublicKey": {
    "id": "system.athena.athenad.getPublicKey",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [],
    "start_line": 509,
    "end_line": 514,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.getSshAuthorizedKeys": {
    "id": "system.athena.athenad.getSshAuthorizedKeys",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [],
    "start_line": 518,
    "end_line": 519,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.getGithubUsername": {
    "id": "system.athena.athenad.getGithubUsername",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [],
    "start_line": 523,
    "end_line": 524,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.getSimInfo": {
    "id": "system.athena.athenad.getSimInfo",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [],
    "start_line": 527,
    "end_line": 528,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.getNetworkType": {
    "id": "system.athena.athenad.getNetworkType",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [],
    "start_line": 532,
    "end_line": 533,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.getNetworkMetered": {
    "id": "system.athena.athenad.getNetworkMetered",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [],
    "start_line": 537,
    "end_line": 539,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.getNetworks": {
    "id": "system.athena.athenad.getNetworks",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [],
    "start_line": 543,
    "end_line": 544,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.takeSnapshot": {
    "id": "system.athena.athenad.takeSnapshot",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [],
    "start_line": 548,
    "end_line": 562,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.get_logs_to_send_sorted": {
    "id": "system.athena.athenad.get_logs_to_send_sorted",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [],
    "start_line": 565,
    "end_line": 582,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.log_handler": {
    "id": "system.athena.athenad.log_handler",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [
      "system.athena.athenad.get_logs_to_send_sorted"
    ],
    "start_line": 585,
    "end_line": 644,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.stat_handler": {
    "id": "system.athena.athenad.stat_handler",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [],
    "start_line": 647,
    "end_line": 672,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.ws_proxy_recv": {
    "id": "system.athena.athenad.ws_proxy_recv",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [],
    "start_line": 675,
    "end_line": 696,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.ws_proxy_send": {
    "id": "system.athena.athenad.ws_proxy_send",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [],
    "start_line": 699,
    "end_line": 721,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.ws_recv": {
    "id": "system.athena.athenad.ws_recv",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [],
    "start_line": 724,
    "end_line": 743,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.ws_send": {
    "id": "system.athena.athenad.ws_send",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [],
    "start_line": 746,
    "end_line": 762,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.ws_manage": {
    "id": "system.athena.athenad.ws_manage",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [],
    "start_line": 765,
    "end_line": 788,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.backoff": {
    "id": "system.athena.athenad.backoff",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [],
    "start_line": 791,
    "end_line": 792,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.athenad.main": {
    "id": "system.athena.athenad.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\athenad.py",
    "relative_path": "system\\athena\\athenad.py",
    "depends_on": [
      "system.athena.athenad.backoff",
      "system.athena.athenad.UploadQueueCache",
      "system.athena.athenad.handle_long_poll"
    ],
    "start_line": 795,
    "end_line": 841,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.manage_athenad.main": {
    "id": "system.athena.manage_athenad.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\manage_athenad.py",
    "relative_path": "system\\athena\\manage_athenad.py",
    "depends_on": [],
    "start_line": 15,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.registration.is_registered_device": {
    "id": "system.athena.registration.is_registered_device",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\registration.py",
    "relative_path": "system\\athena\\registration.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 20,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.registration.register": {
    "id": "system.athena.registration.register",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\registration.py",
    "relative_path": "system\\athena\\registration.py",
    "depends_on": [],
    "start_line": 23,
    "end_line": 101,
    "has_docstring": true,
    "docstring": "\n  All devices built since March 2024 come with all\n  info stored in /persist/. This is kept around\n  only for devices built before then.\n\n  With a backend update to take serial number instead\n  of dongle ID to some endpoints, this can be removed\n  entirely.\n  ",
    "language": "python"
  },
  "system.athena.tests.helpers.MockResponse": {
    "id": "system.athena.tests.helpers.MockResponse",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\helpers.py",
    "relative_path": "system\\athena\\tests\\helpers.py",
    "depends_on": [],
    "start_line": 5,
    "end_line": 9,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.helpers.MockResponse.__init__": {
    "id": "system.athena.tests.helpers.MockResponse.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\helpers.py",
    "relative_path": "system\\athena\\tests\\helpers.py",
    "depends_on": [],
    "start_line": 6,
    "end_line": 9,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.helpers.EchoSocket": {
    "id": "system.athena.tests.helpers.EchoSocket",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\helpers.py",
    "relative_path": "system\\athena\\tests\\helpers.py",
    "depends_on": [],
    "start_line": 12,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.helpers.EchoSocket.__init__": {
    "id": "system.athena.tests.helpers.EchoSocket.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\helpers.py",
    "relative_path": "system\\athena\\tests\\helpers.py",
    "depends_on": [],
    "start_line": 13,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.helpers.EchoSocket.run": {
    "id": "system.athena.tests.helpers.EchoSocket.run",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\helpers.py",
    "relative_path": "system\\athena\\tests\\helpers.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.helpers.MockApi": {
    "id": "system.athena.tests.helpers.MockApi",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\helpers.py",
    "relative_path": "system\\athena\\tests\\helpers.py",
    "depends_on": [],
    "start_line": 37,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.helpers.MockApi.__init__": {
    "id": "system.athena.tests.helpers.MockApi.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\helpers.py",
    "relative_path": "system\\athena\\tests\\helpers.py",
    "depends_on": [],
    "start_line": 38,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.helpers.MockApi.get_token": {
    "id": "system.athena.tests.helpers.MockApi.get_token",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\helpers.py",
    "relative_path": "system\\athena\\tests\\helpers.py",
    "depends_on": [],
    "start_line": 41,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.helpers.MockWebsocket": {
    "id": "system.athena.tests.helpers.MockWebsocket",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\helpers.py",
    "relative_path": "system\\athena\\tests\\helpers.py",
    "depends_on": [],
    "start_line": 45,
    "end_line": 62,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.helpers.MockWebsocket.__init__": {
    "id": "system.athena.tests.helpers.MockWebsocket.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\helpers.py",
    "relative_path": "system\\athena\\tests\\helpers.py",
    "depends_on": [],
    "start_line": 48,
    "end_line": 50,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.helpers.MockWebsocket.recv": {
    "id": "system.athena.tests.helpers.MockWebsocket.recv",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\helpers.py",
    "relative_path": "system\\athena\\tests\\helpers.py",
    "depends_on": [],
    "start_line": 52,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.helpers.MockWebsocket.send": {
    "id": "system.athena.tests.helpers.MockWebsocket.send",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\helpers.py",
    "relative_path": "system\\athena\\tests\\helpers.py",
    "depends_on": [],
    "start_line": 58,
    "end_line": 59,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.helpers.MockWebsocket.close": {
    "id": "system.athena.tests.helpers.MockWebsocket.close",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\helpers.py",
    "relative_path": "system\\athena\\tests\\helpers.py",
    "depends_on": [],
    "start_line": 61,
    "end_line": 62,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.helpers.HTTPRequestHandler": {
    "id": "system.athena.tests.helpers.HTTPRequestHandler",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\helpers.py",
    "relative_path": "system\\athena\\tests\\helpers.py",
    "depends_on": [],
    "start_line": 65,
    "end_line": 70,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.helpers.HTTPRequestHandler.do_PUT": {
    "id": "system.athena.tests.helpers.HTTPRequestHandler.do_PUT",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\helpers.py",
    "relative_path": "system\\athena\\tests\\helpers.py",
    "depends_on": [],
    "start_line": 66,
    "end_line": 70,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.seed_athena_server": {
    "id": "system.athena.tests.test_athenad.seed_athena_server",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 28,
    "end_line": 35,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.with_upload_handler": {
    "id": "system.athena.tests.test_athenad.with_upload_handler",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 37,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.mock_create_connection": {
    "id": "system.athena.tests.test_athenad.mock_create_connection",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 51,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.host": {
    "id": "system.athena.tests.test_athenad.host",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [
      "system.athena.tests.test_athenad.seed_athena_server",
      "system.athena.tests.test_athenad.host"
    ],
    "start_line": 55,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [
      "system.athena.tests.test_athenad.host",
      "system.athena.tests.test_athenad.mock_create_connection",
      "system.athena.tests.test_athenad.with_upload_handler"
    ],
    "start_line": 59,
    "end_line": 448,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.setup_class": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.setup_class",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 61,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.setup_method": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 66,
    "end_line": 88,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods._wait_for_upload": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods._wait_for_upload",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 93,
    "end_line": 97,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods._create_file": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods._create_file",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 100,
    "end_line": 105,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.test_echo": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.test_echo",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 110,
    "end_line": 111,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.test_get_message": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.test_get_message",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 113,
    "end_line": 135,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.test_list_data_directory": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.test_list_data_directory",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 137,
    "end_line": 175,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.test_strip_extension": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.test_strip_extension",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 177,
    "end_line": 185,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.test_do_upload": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.test_do_upload",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 188,
    "end_line": 199,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.test_upload_file_to_url": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.test_upload_file_to_url",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 201,
    "end_line": 209,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.test_upload_file_to_url_duplicate": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.test_upload_file_to_url_duplicate",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 211,
    "end_line": 220,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.test_upload_file_to_url_does_not_exist": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.test_upload_file_to_url_does_not_exist",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 222,
    "end_line": 224,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.test_upload_handler": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.test_upload_handler",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [
      "system.athena.tests.test_athenad.with_upload_handler"
    ],
    "start_line": 227,
    "end_line": 237,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.test_upload_handler_retry": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.test_upload_handler_retry",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [
      "system.athena.tests.test_athenad.with_upload_handler"
    ],
    "start_line": 241,
    "end_line": 254,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.test_upload_handler_timeout": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.test_upload_handler_timeout",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [
      "system.athena.tests.test_athenad.with_upload_handler"
    ],
    "start_line": 257,
    "end_line": 276,
    "has_docstring": true,
    "docstring": "When an upload times out or fails to connect it should be placed back in the queue",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.test_cancel_upload": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.test_cancel_upload",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [
      "system.athena.tests.test_athenad.with_upload_handler"
    ],
    "start_line": 279,
    "end_line": 291,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.test_cancel_expiry": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.test_cancel_expiry",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [
      "system.athena.tests.test_athenad.with_upload_handler"
    ],
    "start_line": 294,
    "end_line": 306,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.test_list_upload_queue_empty": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.test_list_upload_queue_empty",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 308,
    "end_line": 310,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.test_list_upload_queue_current": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.test_list_upload_queue_current",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [
      "system.athena.tests.test_athenad.with_upload_handler"
    ],
    "start_line": 313,
    "end_line": 322,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.test_list_upload_queue_priority": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.test_list_upload_queue_priority",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 324,
    "end_line": 342,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.test_list_upload_queue": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.test_list_upload_queue",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 344,
    "end_line": 356,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.test_upload_queue_persistence": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.test_upload_queue_persistence",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 358,
    "end_line": 376,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.test_start_local_proxy": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.test_start_local_proxy",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 378,
    "end_line": 399,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.test_get_ssh_authorized_keys": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.test_get_ssh_authorized_keys",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 401,
    "end_line": 403,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.test_get_github_username": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.test_get_github_username",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 405,
    "end_line": 407,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.test_get_version": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.test_get_version",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 409,
    "end_line": 415,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.test_jsonrpc_handler": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.test_jsonrpc_handler",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 417,
    "end_line": 437,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad.TestAthenadMethods.test_get_logs_to_send_sorted": {
    "id": "system.athena.tests.test_athenad.TestAthenadMethods.test_get_logs_to_send_sorted",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad.py",
    "relative_path": "system\\athena\\tests\\test_athenad.py",
    "depends_on": [],
    "start_line": 439,
    "end_line": 448,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad_ping.wifi_radio": {
    "id": "system.athena.tests.test_athenad_ping.wifi_radio",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad_ping.py",
    "relative_path": "system\\athena\\tests\\test_athenad_ping.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 20,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad_ping.TestAthenadPing": {
    "id": "system.athena.tests.test_athenad_ping.TestAthenadPing",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad_ping.py",
    "relative_path": "system\\athena\\tests\\test_athenad_ping.py",
    "depends_on": [
      "system.athena.tests.test_athenad_ping.wifi_radio"
    ],
    "start_line": 23,
    "end_line": 102,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad_ping.TestAthenadPing._get_ping_time": {
    "id": "system.athena.tests.test_athenad_ping.TestAthenadPing._get_ping_time",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad_ping.py",
    "relative_path": "system\\athena\\tests\\test_athenad_ping.py",
    "depends_on": [],
    "start_line": 30,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad_ping.TestAthenadPing._clear_ping_time": {
    "id": "system.athena.tests.test_athenad_ping.TestAthenadPing._clear_ping_time",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad_ping.py",
    "relative_path": "system\\athena\\tests\\test_athenad_ping.py",
    "depends_on": [],
    "start_line": 33,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad_ping.TestAthenadPing._received_ping": {
    "id": "system.athena.tests.test_athenad_ping.TestAthenadPing._received_ping",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad_ping.py",
    "relative_path": "system\\athena\\tests\\test_athenad_ping.py",
    "depends_on": [],
    "start_line": 36,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad_ping.TestAthenadPing.teardown_class": {
    "id": "system.athena.tests.test_athenad_ping.TestAthenadPing.teardown_class",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad_ping.py",
    "relative_path": "system\\athena\\tests\\test_athenad_ping.py",
    "depends_on": [
      "system.athena.tests.test_athenad_ping.wifi_radio"
    ],
    "start_line": 40,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad_ping.TestAthenadPing.setup_method": {
    "id": "system.athena.tests.test_athenad_ping.TestAthenadPing.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad_ping.py",
    "relative_path": "system\\athena\\tests\\test_athenad_ping.py",
    "depends_on": [
      "system.athena.tests.test_athenad_ping.wifi_radio"
    ],
    "start_line": 43,
    "end_line": 51,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad_ping.TestAthenadPing.teardown_method": {
    "id": "system.athena.tests.test_athenad_ping.TestAthenadPing.teardown_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad_ping.py",
    "relative_path": "system\\athena\\tests\\test_athenad_ping.py",
    "depends_on": [],
    "start_line": 53,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad_ping.TestAthenadPing.assertTimeout": {
    "id": "system.athena.tests.test_athenad_ping.TestAthenadPing.assertTimeout",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad_ping.py",
    "relative_path": "system\\athena\\tests\\test_athenad_ping.py",
    "depends_on": [
      "system.athena.tests.test_athenad_ping.wifi_radio"
    ],
    "start_line": 58,
    "end_line": 92,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad_ping.TestAthenadPing.test_offroad": {
    "id": "system.athena.tests.test_athenad_ping.TestAthenadPing.test_offroad",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad_ping.py",
    "relative_path": "system\\athena\\tests\\test_athenad_ping.py",
    "depends_on": [],
    "start_line": 95,
    "end_line": 97,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_athenad_ping.TestAthenadPing.test_onroad": {
    "id": "system.athena.tests.test_athenad_ping.TestAthenadPing.test_onroad",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_athenad_ping.py",
    "relative_path": "system\\athena\\tests\\test_athenad_ping.py",
    "depends_on": [],
    "start_line": 100,
    "end_line": 102,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_registration.TestRegistration": {
    "id": "system.athena.tests.test_registration.TestRegistration",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_registration.py",
    "relative_path": "system\\athena\\tests\\test_registration.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_registration.TestRegistration.setup_method": {
    "id": "system.athena.tests.test_registration.TestRegistration.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_registration.py",
    "relative_path": "system\\athena\\tests\\test_registration.py",
    "depends_on": [],
    "start_line": 13,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_registration.TestRegistration._generate_keys": {
    "id": "system.athena.tests.test_registration.TestRegistration._generate_keys",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_registration.py",
    "relative_path": "system\\athena\\tests\\test_registration.py",
    "depends_on": [],
    "start_line": 24,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_registration.TestRegistration.test_valid_cache": {
    "id": "system.athena.tests.test_registration.TestRegistration.test_valid_cache",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_registration.py",
    "relative_path": "system\\athena\\tests\\test_registration.py",
    "depends_on": [],
    "start_line": 32,
    "end_line": 44,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_registration.TestRegistration.test_no_keys": {
    "id": "system.athena.tests.test_registration.TestRegistration.test_no_keys",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_registration.py",
    "relative_path": "system\\athena\\tests\\test_registration.py",
    "depends_on": [],
    "start_line": 46,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_registration.TestRegistration.test_missing_cache": {
    "id": "system.athena.tests.test_registration.TestRegistration.test_missing_cache",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_registration.py",
    "relative_path": "system\\athena\\tests\\test_registration.py",
    "depends_on": [],
    "start_line": 54,
    "end_line": 66,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.athena.tests.test_registration.TestRegistration.test_unregistered": {
    "id": "system.athena.tests.test_registration.TestRegistration.test_unregistered",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\athena\\tests\\test_registration.py",
    "relative_path": "system\\athena\\tests\\test_registration.py",
    "depends_on": [],
    "start_line": 68,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.camerad.main.main": {
    "id": "system.camerad.main.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\main.cc",
    "relative_path": "system\\camerad\\main.cc",
    "depends_on": [],
    "start_line": 8,
    "end_line": 15,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int main(int argc, char *argv[]) {\n  // doesn't need RT priority since we're using isolcpus\n  int ret = util::set_core_affinity({6});\n  assert(ret == 0 || Params().getBool(\"IsOffroad\")); // failure ok while offroad due to offlining cores\n\n  camerad_thread();\n  return 0;\n}\n"
  },
  "system.camerad.cameras.camera_common.get_raw_frame_image": {
    "id": "system.camerad.cameras.camera_common.get_raw_frame_image",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\camera_common.cc",
    "relative_path": "system\\camerad\\cameras\\camera_common.cc",
    "depends_on": [],
    "start_line": 65,
    "end_line": 74,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "kj::Array<uint8_t> get_raw_frame_image(const CameraBuf *b) {\n  const uint8_t *dat = (const uint8_t *)b->cur_camera_buf->addr;\n\n  kj::Array<uint8_t> frame_image = kj::heapArray<uint8_t>(b->cur_camera_buf->len);\n  uint8_t *resized_dat = frame_image.begin();\n\n  memcpy(resized_dat, dat, b->cur_camera_buf->len);\n\n  return kj::mv(frame_image);\n}\n"
  },
  "system.camerad.cameras.camera_common.calculate_exposure_value": {
    "id": "system.camerad.cameras.camera_common.calculate_exposure_value",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\camera_common.cc",
    "relative_path": "system\\camerad\\cameras\\camera_common.cc",
    "depends_on": [],
    "start_line": 76,
    "end_line": 101,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "float calculate_exposure_value(const CameraBuf *b, Rect ae_xywh, int x_skip, int y_skip) {\n  int lum_med;\n  uint32_t lum_binning[256] = {0};\n  const uint8_t *pix_ptr = b->cur_yuv_buf->y;\n\n  unsigned int lum_total = 0;\n  for (int y = ae_xywh.y; y < ae_xywh.y + ae_xywh.h; y += y_skip) {\n    for (int x = ae_xywh.x; x < ae_xywh.x + ae_xywh.w; x += x_skip) {\n      uint8_t lum = pix_ptr[(y * b->out_img_width) + x];\n      lum_binning[lum]++;\n      lum_total += 1;\n    }\n  }\n\n  // Find mean lumimance value\n  unsigned int lum_cur = 0;\n  for (lum_med = 255; lum_med >= 0; lum_med--) {\n    lum_cur += lum_binning[lum_med];\n\n    if (lum_cur >= lum_total / 2) {\n      break;\n    }\n  }\n\n  return lum_med / 256.0;\n}\n"
  },
  "system.camerad.cameras.camera_common.open_v4l_by_name_and_index": {
    "id": "system.camerad.cameras.camera_common.open_v4l_by_name_and_index",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\camera_common.cc",
    "relative_path": "system\\camerad\\cameras\\camera_common.cc",
    "depends_on": [],
    "start_line": 103,
    "end_line": 114,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int open_v4l_by_name_and_index(const char name[], int index, int flags) {\n  for (int v4l_index = 0; /**/; ++v4l_index) {\n    std::string v4l_name = util::read_file(util::string_format(\"/sys/class/video4linux/v4l-subdev%d/name\", v4l_index));\n    if (v4l_name.empty()) return -1;\n    if (v4l_name.find(name) == 0) {\n      if (index == 0) {\n        return HANDLE_EINTR(open(util::string_format(\"/dev/v4l-subdev%d\", v4l_index).c_str(), flags));\n      }\n      index--;\n    }\n  }\n}\n"
  },
  "system.camerad.cameras.camera_common.CameraBuf": {
    "id": "system.camerad.cameras.camera_common.CameraBuf",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\camera_common.h",
    "relative_path": "system\\camerad\\cameras\\camera_common.h",
    "depends_on": [],
    "start_line": 22,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class CameraBuf {\nprivate:\n  int frame_buf_count;\n\npublic:\n  VisionIpcServer *vipc_server;\n  VisionStreamType stream_type;\n\n  int cur_buf_idx;\n  FrameMetadata cur_frame_data;\n  VisionBuf *cur_yuv_buf;\n  VisionBuf *cur_camera_buf;\n  std::unique_ptr<VisionBuf[]> camera_bufs_raw;\n  uint32_t out_img_width, out_img_height;\n\n  CameraBuf() = default;\n  ~CameraBuf();\n  void init(cl_device_id device_id, cl_context context, SpectraCamera *cam, VisionIpcServer * v, int frame_cnt, VisionStreamType type);\n  void sendFrameToVipc();\n};\n"
  },
  "system.camerad.cameras.camera_qcom2.CameraState": {
    "id": "system.camerad.cameras.camera_qcom2.CameraState",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\camera_qcom2.cc",
    "relative_path": "system\\camerad\\cameras\\camera_qcom2.cc",
    "depends_on": [],
    "start_line": 37,
    "end_line": 69,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class CameraState {\npublic:\n  SpectraCamera camera;\n  int exposure_time = 5;\n  bool dc_gain_enabled = false;\n  int dc_gain_weight = 0;\n  int gain_idx = 0;\n  float analog_gain_frac = 0;\n\n  float cur_ev[3] = {};\n  float best_ev_score = 0;\n  int new_exp_g = 0;\n  int new_exp_t = 0;\n\n  Rect ae_xywh = {};\n  float measured_grey_fraction = 0;\n  float target_grey_fraction = 0.3;\n\n  float fl_pix = 0;\n  std::unique_ptr<PubMaster> pm;\n\n  CameraState(SpectraMaster *master, const CameraConfig &config) : camera(master, config) {};\n  ~CameraState();\n  void init(VisionIpcServer *v, cl_device_id device_id, cl_context ctx);\n  void update_exposure_score(float desired_ev, int exp_t, int exp_g_idx, float exp_gain);\n  void set_camera_exposure(float grey_frac);\n  void set_exposure_rect();\n  void sendState();\n\n  float get_gain_factor() const {\n    return (1 + dc_gain_weight * (camera.sensor->dc_gain_factor-1) / camera.sensor->dc_gain_max_weight);\n  }\n};\n"
  },
  "system.camerad.cameras.camera_qcom2.CameraState.get_gain_factor": {
    "id": "system.camerad.cameras.camera_qcom2.CameraState.get_gain_factor",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\camera_qcom2.cc",
    "relative_path": "system\\camerad\\cameras\\camera_qcom2.cc",
    "depends_on": [],
    "start_line": 66,
    "end_line": 68,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  float get_gain_factor() const {\n    return (1 + dc_gain_weight * (camera.sensor->dc_gain_factor-1) / camera.sensor->dc_gain_max_weight);\n  }\n"
  },
  "system.camerad.cameras.camera_qcom2.CameraState.init": {
    "id": "system.camerad.cameras.camera_qcom2.CameraState.init",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\camera_qcom2.cc",
    "relative_path": "system\\camerad\\cameras\\camera_qcom2.cc",
    "depends_on": [],
    "start_line": 71,
    "end_line": 84,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void CameraState::init(VisionIpcServer *v, cl_device_id device_id, cl_context ctx) {\n  camera.camera_open(v, device_id, ctx);\n\n  if (!camera.enabled) return;\n\n  fl_pix = camera.cc.focal_len / camera.sensor->pixel_size_mm / camera.sensor->out_scale;\n  set_exposure_rect();\n\n  dc_gain_weight = camera.sensor->dc_gain_min_weight;\n  gain_idx = camera.sensor->analog_gain_rec_idx;\n  cur_ev[0] = cur_ev[1] = cur_ev[2] = get_gain_factor() * camera.sensor->sensor_analog_gains[gain_idx] * exposure_time;\n\n  pm = std::make_unique<PubMaster>(std::vector{camera.cc.publish_name});\n}\n"
  },
  "system.camerad.cameras.camera_qcom2.CameraState.set_exposure_rect": {
    "id": "system.camerad.cameras.camera_qcom2.CameraState.set_exposure_rect",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\camera_qcom2.cc",
    "relative_path": "system\\camerad\\cameras\\camera_qcom2.cc",
    "depends_on": [],
    "start_line": 88,
    "end_line": 115,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void CameraState::set_exposure_rect() {\n  // set areas for each camera, shouldn't be changed\n  std::vector<std::pair<Rect, float>> ae_targets = {\n    // (Rect, F)\n    std::make_pair((Rect){96, 250, 1734, 524}, 567.0),  // wide\n    std::make_pair((Rect){96, 160, 1734, 986}, 2648.0), // road\n    std::make_pair((Rect){96, 242, 1736, 906}, 567.0)   // driver\n  };\n  int h_ref = 1208;\n  /*\n    exposure target intrinsics is\n    [\n      [F, 0, 0.5*ae_xywh[2]]\n      [0, F, 0.5*H-ae_xywh[1]]\n      [0, 0, 1]\n    ]\n  */\n  auto ae_target = ae_targets[camera.cc.camera_num];\n  Rect xywh_ref = ae_target.first;\n  float fl_ref = ae_target.second;\n\n  ae_xywh = (Rect){\n    std::max(0, (int)camera.buf.out_img_width / 2 - (int)(fl_pix / fl_ref * xywh_ref.w / 2)),\n    std::max(0, (int)camera.buf.out_img_height / 2 - (int)(fl_pix / fl_ref * (h_ref / 2 - xywh_ref.y))),\n    std::min((int)(fl_pix / fl_ref * xywh_ref.w), (int)camera.buf.out_img_width / 2 + (int)(fl_pix / fl_ref * xywh_ref.w / 2)),\n    std::min((int)(fl_pix / fl_ref * xywh_ref.h), (int)camera.buf.out_img_height / 2 + (int)(fl_pix / fl_ref * (h_ref / 2 - xywh_ref.y)))\n  };\n}\n"
  },
  "system.camerad.cameras.camera_qcom2.CameraState.update_exposure_score": {
    "id": "system.camerad.cameras.camera_qcom2.CameraState.update_exposure_score",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\camera_qcom2.cc",
    "relative_path": "system\\camerad\\cameras\\camera_qcom2.cc",
    "depends_on": [],
    "start_line": 117,
    "end_line": 124,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void CameraState::update_exposure_score(float desired_ev, int exp_t, int exp_g_idx, float exp_gain) {\n  float score = camera.sensor->getExposureScore(desired_ev, exp_t, exp_g_idx, exp_gain, gain_idx);\n  if (score < best_ev_score) {\n    new_exp_t = exp_t;\n    new_exp_g = exp_g_idx;\n    best_ev_score = score;\n  }\n}\n"
  },
  "system.camerad.cameras.camera_qcom2.CameraState.set_camera_exposure": {
    "id": "system.camerad.cameras.camera_qcom2.CameraState.set_camera_exposure",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\camera_qcom2.cc",
    "relative_path": "system\\camerad\\cameras\\camera_qcom2.cc",
    "depends_on": [],
    "start_line": 126,
    "end_line": 222,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void CameraState::set_camera_exposure(float grey_frac) {\n  if (!camera.enabled) return;\n  std::vector<double> target_grey_minimums = {0.1, 0.1, 0.125}; // wide, road, driver\n\n  const float dt = 0.05;\n\n  const float ts_grey = 10.0;\n  const float ts_ev = 0.05;\n\n  const float k_grey = (dt / ts_grey) / (1.0 + dt / ts_grey);\n  const float k_ev = (dt / ts_ev) / (1.0 + dt / ts_ev);\n\n  // It takes 3 frames for the commanded exposure settings to take effect. The first frame is already started by the time\n  // we reach this function, the other 2 are due to the register buffering in the sensor.\n  // Therefore we use the target EV from 3 frames ago, the grey fraction that was just measured was the result of that control action.\n  // TODO: Lower latency to 2 frames, by using the histogram outputted by the sensor we can do AE before the debayering is complete\n\n  const auto &sensor = camera.sensor;\n  // Offset idx by one to not get stuck in self loop\n  const float cur_ev_ = cur_ev[(camera.buf.cur_frame_data.frame_id - 1) % 3] * sensor->ev_scale;\n\n  // Scale target grey between min and 0.4 depending on lighting conditions\n  float new_target_grey = std::clamp(0.4 - 0.3 * log2(1.0 + sensor->target_grey_factor*cur_ev_) / log2(6000.0), target_grey_minimums[camera.cc.camera_num], 0.4);\n  float target_grey = (1.0 - k_grey) * target_grey_fraction + k_grey * new_target_grey;\n\n  float desired_ev = std::clamp(cur_ev_ / sensor->ev_scale * target_grey / grey_frac, sensor->min_ev, sensor->max_ev);\n  float k = (1.0 - k_ev) / 3.0;\n  desired_ev = (k * cur_ev[0]) + (k * cur_ev[1]) + (k * cur_ev[2]) + (k_ev * desired_ev);\n\n  best_ev_score = 1e6;\n  new_exp_g = 0;\n  new_exp_t = 0;\n\n  // Hysteresis around high conversion gain\n  // We usually want this on since it results in lower noise, but turn off in very bright day scenes\n  bool enable_dc_gain = dc_gain_enabled;\n  if (!enable_dc_gain && target_grey < sensor->dc_gain_on_grey) {\n    enable_dc_gain = true;\n    dc_gain_weight = sensor->dc_gain_min_weight;\n  } else if (enable_dc_gain && target_grey > sensor->dc_gain_off_grey) {\n    enable_dc_gain = false;\n    dc_gain_weight = sensor->dc_gain_max_weight;\n  }\n\n  if (enable_dc_gain && dc_gain_weight < sensor->dc_gain_max_weight) {dc_gain_weight += 1;}\n  if (!enable_dc_gain && dc_gain_weight > sensor->dc_gain_min_weight) {dc_gain_weight -= 1;}\n\n  std::string gain_bytes, time_bytes;\n  if (env_ctrl_exp_from_params) {\n    static Params params;\n    gain_bytes = params.get(\"CameraDebugExpGain\");\n    time_bytes = params.get(\"CameraDebugExpTime\");\n  }\n\n  if (gain_bytes.size() > 0 && time_bytes.size() > 0) {\n    // Override gain and exposure time\n    gain_idx = std::stoi(gain_bytes);\n    exposure_time = std::stoi(time_bytes);\n\n    new_exp_g = gain_idx;\n    new_exp_t = exposure_time;\n    enable_dc_gain = false;\n  } else {\n    // Simple brute force optimizer to choose sensor parameters to reach desired EV\n    int min_g = std::max(gain_idx - 1, sensor->analog_gain_min_idx);\n    int max_g = std::min(gain_idx + 1, sensor->analog_gain_max_idx);\n    for (int g = min_g; g <= max_g; g++) {\n      float gain = sensor->sensor_analog_gains[g] * get_gain_factor();\n\n      // Compute optimal time for given gain\n      int t = std::clamp(int(std::round(desired_ev / gain)), sensor->exposure_time_min, sensor->exposure_time_max);\n\n      // Only go below recommended gain when absolutely necessary to not overexpose\n      if (g < sensor->analog_gain_rec_idx && t > 20 && g < gain_idx) {\n        continue;\n      }\n\n      update_exposure_score(desired_ev, t, g, gain);\n    }\n  }\n\n  measured_grey_fraction = grey_frac;\n  target_grey_fraction = target_grey;\n\n  analog_gain_frac = sensor->sensor_analog_gains[new_exp_g];\n  gain_idx = new_exp_g;\n  exposure_time = new_exp_t;\n  dc_gain_enabled = enable_dc_gain;\n\n  float gain = analog_gain_frac * get_gain_factor();\n  cur_ev[camera.buf.cur_frame_data.frame_id % 3] = exposure_time * gain;\n\n  // LOGE(\"ae - camera %d, cur_t %.5f, sof %.5f, dt %.5f\", camera.cc.camera_num, 1e-9 * nanos_since_boot(), 1e-9 * camera.buf.cur_frame_data.timestamp_sof, 1e-9 * (nanos_since_boot() - camera.buf.cur_frame_data.timestamp_sof));\n\n  auto exp_reg_array = sensor->getExposureRegisters(exposure_time, new_exp_g, dc_gain_enabled);\n  camera.sensors_i2c(exp_reg_array.data(), exp_reg_array.size(), CAM_SENSOR_PACKET_OPCODE_SENSOR_CONFIG, camera.sensor->data_word);\n}\n"
  },
  "system.camerad.cameras.camera_qcom2.CameraState.sendState": {
    "id": "system.camerad.cameras.camera_qcom2.CameraState.sendState",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\camera_qcom2.cc",
    "relative_path": "system\\camerad\\cameras\\camera_qcom2.cc",
    "depends_on": [],
    "start_line": 224,
    "end_line": 255,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void CameraState::sendState() {\n  camera.buf.sendFrameToVipc();\n\n  MessageBuilder msg;\n  auto framed = (msg.initEvent().*camera.cc.init_camera_state)();\n  const FrameMetadata &meta = camera.buf.cur_frame_data;\n  framed.setFrameId(meta.frame_id);\n  framed.setRequestId(meta.request_id);\n  framed.setTimestampEof(meta.timestamp_eof);\n  framed.setTimestampSof(meta.timestamp_sof);\n  framed.setIntegLines(exposure_time);\n  framed.setGain(analog_gain_frac * get_gain_factor());\n  framed.setHighConversionGain(dc_gain_enabled);\n  framed.setMeasuredGreyFraction(measured_grey_fraction);\n  framed.setTargetGreyFraction(target_grey_fraction);\n  framed.setProcessingTime(meta.processing_time);\n\n  const float ev = cur_ev[meta.frame_id % 3];\n  const float perc = util::map_val(ev, camera.sensor->min_ev, camera.sensor->max_ev, 0.0f, 100.0f);\n  framed.setExposureValPercent(perc);\n  framed.setSensor(camera.sensor->image_sensor);\n\n  // Log raw frames for road camera\n  if (env_log_raw_frames && camera.cc.stream_type == VISION_STREAM_ROAD && meta.frame_id % 100 == 5) {  // no overlap with qlog decimation\n    framed.setImage(get_raw_frame_image(&camera.buf));\n  }\n\n  set_camera_exposure(calculate_exposure_value(&camera.buf, ae_xywh, 2, camera.cc.stream_type != VISION_STREAM_DRIVER ? 2 : 4));\n\n  // Send the message\n  pm->send(camera.cc.publish_name, msg);\n}\n"
  },
  "system.camerad.cameras.camera_qcom2.camerad_thread": {
    "id": "system.camerad.cameras.camera_qcom2.camerad_thread",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\camera_qcom2.cc",
    "relative_path": "system\\camerad\\cameras\\camera_qcom2.cc",
    "depends_on": [],
    "start_line": 257,
    "end_line": 323,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void camerad_thread() {\n  // TODO: centralize enabled handling\n\n  cl_device_id device_id = cl_get_device_id(CL_DEVICE_TYPE_DEFAULT);\n  const cl_context_properties props[] = {CL_CONTEXT_PRIORITY_HINT_QCOM, CL_PRIORITY_HINT_HIGH_QCOM, 0};\n  cl_context ctx = CL_CHECK_ERR(clCreateContext(props, 1, &device_id, NULL, NULL, &err));\n\n  VisionIpcServer v(\"camerad\", device_id, ctx);\n\n  // *** initial ISP init ***\n  SpectraMaster m;\n  m.init();\n\n  // *** per-cam init ***\n  std::vector<std::unique_ptr<CameraState>> cams;\n  for (const auto &config : ALL_CAMERA_CONFIGS) {\n    auto cam = std::make_unique<CameraState>(&m, config);\n    cam->init(&v, device_id, ctx);\n    cams.emplace_back(std::move(cam));\n  }\n\n  v.start_listener();\n\n  // start devices\n  LOG(\"-- Starting devices\");\n  for (auto &cam : cams) cam->camera.sensors_start();\n\n  // poll events\n  LOG(\"-- Dequeueing Video events\");\n  while (!do_exit) {\n    struct pollfd fds[1] = {{.fd = m.video0_fd, .events = POLLPRI}};\n    int ret = poll(fds, std::size(fds), 1000);\n    if (ret < 0) {\n      if (errno == EINTR || errno == EAGAIN) continue;\n      LOGE(\"poll failed (%d - %d)\", ret, errno);\n      break;\n    }\n\n    if (!(fds[0].revents & POLLPRI)) continue;\n\n    struct v4l2_event ev = {0};\n    ret = HANDLE_EINTR(ioctl(fds[0].fd, VIDIOC_DQEVENT, &ev));\n    if (ret == 0) {\n      if (ev.type == V4L_EVENT_CAM_REQ_MGR_EVENT) {\n        struct cam_req_mgr_message *event_data = (struct cam_req_mgr_message *)ev.u.data;\n        if (env_debug_frames) {\n          printf(\"sess_hdl 0x%6X, link_hdl 0x%6X, frame_id %lu, req_id %lu, timestamp %.2f ms, sof_status %d\\n\", event_data->session_hdl, event_data->u.frame_msg.link_hdl,\n                 event_data->u.frame_msg.frame_id, event_data->u.frame_msg.request_id, event_data->u.frame_msg.timestamp/1e6, event_data->u.frame_msg.sof_status);\n          do_exit = do_exit || event_data->u.frame_msg.frame_id > (1*20);\n        }\n\n        for (auto &cam : cams) {\n          if (event_data->session_hdl == cam->camera.session_handle) {\n            if (cam->camera.handle_camera_event(event_data)) {\n              cam->sendState();\n            }\n            break;\n          }\n        }\n      } else {\n        LOGE(\"unhandled event %d\\n\", ev.type);\n      }\n    } else {\n      LOGE(\"VIDIOC_DQEVENT failed, errno=%d\", errno);\n    }\n  }\n}\n"
  },
  "system.camerad.cameras.cdm.write_dmi": {
    "id": "system.camerad.cameras.cdm.write_dmi",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\cdm.cc",
    "relative_path": "system\\camerad\\cameras\\cdm.cc",
    "depends_on": [],
    "start_line": 4,
    "end_line": 15,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int write_dmi(uint8_t *dst, uint64_t *addr, uint32_t length, uint32_t dmi_addr, uint8_t sel) {\n  struct cdm_dmi_cmd *cmd = (struct cdm_dmi_cmd*)dst;\n  cmd->cmd = CAM_CDM_CMD_DMI_32;\n  cmd->length = length - 1;\n  cmd->reserved = 0;\n  cmd->addr = 0; // gets patched in\n  cmd->DMIAddr = dmi_addr;\n  cmd->DMISel = sel;\n\n  *addr = (uint64_t)(dst + offsetof(struct cdm_dmi_cmd, addr));\n  return sizeof(struct cdm_dmi_cmd);\n}\n"
  },
  "system.camerad.cameras.cdm.write_cont": {
    "id": "system.camerad.cameras.cdm.write_cont",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\cdm.cc",
    "relative_path": "system\\camerad\\cameras\\cdm.cc",
    "depends_on": [],
    "start_line": 17,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int write_cont(uint8_t *dst, uint32_t reg, const std::vector<uint32_t> &vals) {\n  struct cdm_regcontinuous_cmd *cmd = (struct cdm_regcontinuous_cmd*)dst;\n  cmd->cmd = CAM_CDM_CMD_REG_CONT;\n  cmd->count = vals.size();\n  cmd->offset = reg;\n  cmd->reserved0 = 0;\n  cmd->reserved1 = 0;\n\n  uint32_t *vd = (uint32_t*)(dst + sizeof(struct cdm_regcontinuous_cmd));\n  for (int i = 0; i < vals.size(); i++) {\n    *vd = vals[i];\n    vd++;\n  }\n\n  return sizeof(struct cdm_regcontinuous_cmd) + vals.size()*sizeof(uint32_t);\n}\n"
  },
  "system.camerad.cameras.cdm.write_random": {
    "id": "system.camerad.cameras.cdm.write_random",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\cdm.cc",
    "relative_path": "system\\camerad\\cameras\\cdm.cc",
    "depends_on": [],
    "start_line": 34,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int write_random(uint8_t *dst, const std::vector<uint32_t> &vals) {\n  struct cdm_regrandom_cmd *cmd = (struct cdm_regrandom_cmd*)dst;\n  cmd->cmd = CAM_CDM_CMD_REG_RANDOM;\n  cmd->count = vals.size() / 2;\n  cmd->reserved = 0;\n\n  uint32_t *vd = (uint32_t*)(dst + sizeof(struct cdm_regrandom_cmd));\n  for (int i = 0; i < vals.size(); i++) {\n    *vd = vals[i];\n    vd++;\n  }\n\n  return sizeof(struct cdm_regrandom_cmd) + vals.size()*sizeof(uint32_t);\n}\n"
  },
  "system.camerad.cameras.ife.build_common_ife_bps": {
    "id": "system.camerad.cameras.ife.build_common_ife_bps",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\ife.h",
    "relative_path": "system\\camerad\\cameras\\ife.h",
    "depends_on": [],
    "start_line": 8,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int build_common_ife_bps(uint8_t *dst, const CameraConfig cam, const SensorInfo *s, std::vector<uint32_t> &patches, bool ife) {\n  uint8_t *start = dst;\n\n  /*\n    Common between IFE and BPS.\n  */\n\n  // IFE -> BPS addresses\n  /*\n  std::map<uint32_t, uint32_t> addrs = {\n    {0xf30, 0x3468},\n  };\n  */\n\n  // YUV\n  dst += write_cont(dst, ife ? 0xf30 : 0x3468, {\n    0x00680208,\n    0x00000108,\n    0x00400000,\n    0x03ff0000,\n    0x01c01ed8,\n    0x00001f68,\n    0x02000000,\n    0x03ff0000,\n    0x1fb81e88,\n    0x000001c0,\n    0x02000000,\n    0x03ff0000,\n  });\n\n  return dst - start;\n}\n"
  },
  "system.camerad.cameras.ife.build_update": {
    "id": "system.camerad.cameras.ife.build_update",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\ife.h",
    "relative_path": "system\\camerad\\cameras\\ife.h",
    "depends_on": [],
    "start_line": 41,
    "end_line": 105,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int build_update(uint8_t *dst, const CameraConfig cam, const SensorInfo *s, std::vector<uint32_t> &patches) {\n  uint8_t *start = dst;\n\n  // init sequence\n  dst += write_random(dst, {\n    0x2c, 0xffffffff,\n    0x30, 0xffffffff,\n    0x34, 0xffffffff,\n    0x38, 0xffffffff,\n    0x3c, 0xffffffff,\n  });\n\n  // demux cfg\n  dst += write_cont(dst, 0x560, {\n    0x00000001,\n    0x04440444,\n    0x04450445,\n    0x04440444,\n    0x04450445,\n    0x000000ca,\n    0x0000009c,\n  });\n\n  // white balance\n  dst += write_cont(dst, 0x6fc, {\n    0x00800080,\n    0x00000080,\n    0x00000000,\n    0x00000000,\n  });\n\n  // module config/enables (e.g. enable debayer, white balance, etc.)\n  dst += write_cont(dst, 0x40, {\n    0x00000c06 | ((uint32_t)(cam.vignetting_correction) << 8),\n  });\n  dst += write_cont(dst, 0x44, {\n    0x00000000,\n  });\n  dst += write_cont(dst, 0x48, {\n    (1 << 3) | (1 << 1),\n  });\n  dst += write_cont(dst, 0x4c, {\n    0x00000019,\n  });\n  dst += write_cont(dst, 0xf00, {\n    0x00000000,\n  });\n\n  // cropping\n  dst += write_cont(dst, 0xe0c, {\n    0x00000e00,\n  });\n  dst += write_cont(dst, 0xe2c, {\n    0x00000e00,\n  });\n\n  // black level scale + offset\n  dst += write_cont(dst, 0x6b0, {\n    ((uint32_t)(1 << 11) << 0xf) | (s->black_level << (14 - s->bits_per_pixel)),\n    0x0,\n    0x0,\n  });\n\n  return dst - start;\n}\n"
  },
  "system.camerad.cameras.ife.build_initial_config": {
    "id": "system.camerad.cameras.ife.build_initial_config",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\ife.h",
    "relative_path": "system\\camerad\\cameras\\ife.h",
    "depends_on": [],
    "start_line": 108,
    "end_line": 234,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int build_initial_config(uint8_t *dst, const CameraConfig cam, const SensorInfo *s, std::vector<uint32_t> &patches, uint32_t out_width, uint32_t out_height) {\n  uint8_t *start = dst;\n\n  // start with the every frame config\n  dst += build_update(dst, cam, s, patches);\n\n  uint64_t addr;\n\n  // setup\n  dst += write_cont(dst, 0x478, {\n    0x00000004,\n    0x004000c0,\n  });\n  dst += write_cont(dst, 0x488, {\n    0x00000000,\n    0x00000000,\n    0x00000f0f,\n  });\n  dst += write_cont(dst, 0x49c, {\n    0x00000001,\n  });\n  dst += write_cont(dst, 0xce4, {\n    0x00000000,\n    0x00000000,\n  });\n\n  // linearization\n  dst += write_cont(dst, 0x4dc, {\n    0x00000000,\n  });\n  dst += write_cont(dst, 0x4e0, s->linearization_pts);\n  dst += write_cont(dst, 0x4f0, s->linearization_pts);\n  dst += write_cont(dst, 0x500, s->linearization_pts);\n  dst += write_cont(dst, 0x510, s->linearization_pts);\n  // TODO: this is DMI64 in the dump, does that matter?\n  dst += write_dmi(dst, &addr, s->linearization_lut.size()*sizeof(uint32_t), 0xc24, 9);\n  patches.push_back(addr - (uint64_t)start);\n\n  // vignetting correction\n  dst += write_cont(dst, 0x6bc, {\n    0x0b3c0000,\n    0x00670067,\n    0xd3b1300c,\n    0x13b1300c,\n  });\n  dst += write_cont(dst, 0x6d8, {\n    0xec4e4000,\n    0x0100c003,\n  });\n  dst += write_dmi(dst, &addr, s->vignetting_lut.size()*sizeof(uint32_t), 0xc24, 14); // GRR\n  patches.push_back(addr - (uint64_t)start);\n  dst += write_dmi(dst, &addr, s->vignetting_lut.size()*sizeof(uint32_t), 0xc24, 15); // GBB\n  patches.push_back(addr - (uint64_t)start);\n\n  // debayer\n  dst += write_cont(dst, 0x6f8, {\n    0x00000100,\n  });\n  dst += write_cont(dst, 0x71c, {\n    0x00008000,\n    0x08000066,\n  });\n\n  // color correction\n  dst += write_cont(dst, 0x760, s->color_correct_matrix);\n\n  // gamma\n  dst += write_cont(dst, 0x798, {\n    0x00000000,\n  });\n  dst += write_dmi(dst, &addr, s->gamma_lut_rgb.size()*sizeof(uint32_t), 0xc24, 26);  // G\n  patches.push_back(addr - (uint64_t)start);\n  dst += write_dmi(dst, &addr, s->gamma_lut_rgb.size()*sizeof(uint32_t), 0xc24, 28);  // B\n  patches.push_back(addr - (uint64_t)start);\n  dst += write_dmi(dst, &addr, s->gamma_lut_rgb.size()*sizeof(uint32_t), 0xc24, 30);  // R\n  patches.push_back(addr - (uint64_t)start);\n\n  // output size/scaling\n  dst += write_cont(dst, 0xa3c, {\n    0x00000003,\n    ((out_width - 1) << 16) | (s->frame_width - 1),\n    0x30036666,\n    0x00000000,\n    0x00000000,\n    s->frame_width - 1,\n    ((out_height - 1) << 16) | (s->frame_height - 1),\n    0x30036666,\n    0x00000000,\n    0x00000000,\n    s->frame_height - 1,\n  });\n  dst += write_cont(dst, 0xa68, {\n    0x00000003,\n    ((out_width / 2 - 1) << 16) | (s->frame_width - 1),\n    0x3006cccc,\n    0x00000000,\n    0x00000000,\n    s->frame_width - 1,\n    ((out_height / 2 - 1) << 16) | (s->frame_height - 1),\n    0x3006cccc,\n    0x00000000,\n    0x00000000,\n    s->frame_height - 1,\n  });\n\n  // cropping\n  dst += write_cont(dst, 0xe10, {\n    out_height - 1,\n    out_width - 1,\n  });\n  dst += write_cont(dst, 0xe30, {\n    out_height / 2 - 1,\n    out_width - 1,\n  });\n  dst += write_cont(dst, 0xe18, {\n    0x0ff00000,\n    0x00000016,\n  });\n  dst += write_cont(dst, 0xe38, {\n    0x0ff00000,\n    0x00000017,\n  });\n\n  dst += build_common_ife_bps(dst, cam, s, patches, true);\n\n  return dst - start;\n}\n"
  },
  "system.camerad.cameras.spectra.do_cam_control": {
    "id": "system.camerad.cameras.spectra.do_cam_control",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\spectra.cc",
    "relative_path": "system\\camerad\\cameras\\spectra.cc",
    "depends_on": [],
    "start_line": 26,
    "end_line": 43,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int do_cam_control(int fd, int op_code, void *handle, int size) {\n  struct cam_control camcontrol = {0};\n  camcontrol.op_code = op_code;\n  camcontrol.handle = (uint64_t)handle;\n  if (size == 0) {\n    camcontrol.size = 8;\n    camcontrol.handle_type = CAM_HANDLE_MEM_HANDLE;\n  } else {\n    camcontrol.size = size;\n    camcontrol.handle_type = CAM_HANDLE_USER_POINTER;\n  }\n\n  int ret = HANDLE_EINTR(ioctl(fd, VIDIOC_CAM_CONTROL, &camcontrol));\n  if (ret == -1) {\n    LOGE(\"VIDIOC_CAM_CONTROL error: op_code %d - errno %d\", op_code, errno);\n  }\n  return ret;\n}\n"
  },
  "system.camerad.cameras.spectra.do_sync_control": {
    "id": "system.camerad.cameras.spectra.do_sync_control",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\spectra.cc",
    "relative_path": "system\\camerad\\cameras\\spectra.cc",
    "depends_on": [],
    "start_line": 45,
    "end_line": 63,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int do_sync_control(int fd, uint32_t id, void *handle, uint32_t size) {\n  struct cam_private_ioctl_arg arg = {\n    .id = id,\n    .size = size,\n    .ioctl_ptr = (uint64_t)handle,\n  };\n  int ret = HANDLE_EINTR(ioctl(fd, CAM_PRIVATE_IOCTL_CMD, &arg));\n\n  int32_t ioctl_result = static_cast<int32_t>(arg.result);\n  if (ret < 0) {\n    LOGE(\"CAM_SYNC error: id %u - errno %d - ret %d - ioctl_result %d\", id, errno, ret, ioctl_result);\n    return ret;\n  }\n  if (ioctl_result != 0) {\n    LOGE(\"CAM_SYNC error: id %u - errno %d - ret %d - ioctl_result %d\", id, errno, ret, ioctl_result);\n    return ioctl_result;\n  }\n  return ret;\n}\n"
  },
  "system.camerad.cameras.spectra.device_acquire": {
    "id": "system.camerad.cameras.spectra.device_acquire",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\spectra.cc",
    "relative_path": "system\\camerad\\cameras\\spectra.cc",
    "depends_on": [],
    "start_line": 65,
    "end_line": 74,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::optional<int32_t> device_acquire(int fd, int32_t session_handle, void *data, uint32_t num_resources) {\n  struct cam_acquire_dev_cmd cmd = {\n    .session_handle = session_handle,\n    .handle_type = CAM_HANDLE_USER_POINTER,\n    .num_resources = (uint32_t)(data ? num_resources : 0),\n    .resource_hdl = (uint64_t)data,\n  };\n  int err = do_cam_control(fd, CAM_ACQUIRE_DEV, &cmd, sizeof(cmd));\n  return err == 0 ? std::make_optional(cmd.dev_handle) : std::nullopt;\n}\n"
  },
  "system.camerad.cameras.spectra.device_config": {
    "id": "system.camerad.cameras.spectra.device_config",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\spectra.cc",
    "relative_path": "system\\camerad\\cameras\\spectra.cc",
    "depends_on": [],
    "start_line": 76,
    "end_line": 83,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int device_config(int fd, int32_t session_handle, int32_t dev_handle, uint64_t packet_handle) {\n  struct cam_config_dev_cmd cmd = {\n    .session_handle = session_handle,\n    .dev_handle = dev_handle,\n    .packet_handle = packet_handle,\n  };\n  return do_cam_control(fd, CAM_CONFIG_DEV, &cmd, sizeof(cmd));\n}\n"
  },
  "system.camerad.cameras.spectra.device_control": {
    "id": "system.camerad.cameras.spectra.device_control",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\spectra.cc",
    "relative_path": "system\\camerad\\cameras\\spectra.cc",
    "depends_on": [],
    "start_line": 85,
    "end_line": 89,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int device_control(int fd, int op_code, int session_handle, int dev_handle) {\n  // start stop and release are all the same\n  struct cam_start_stop_dev_cmd cmd { .session_handle = session_handle, .dev_handle = dev_handle };\n  return do_cam_control(fd, op_code, &cmd, sizeof(cmd));\n}\n"
  },
  "system.camerad.cameras.spectra.alloc_w_mmu_hdl": {
    "id": "system.camerad.cameras.spectra.alloc_w_mmu_hdl",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\spectra.cc",
    "relative_path": "system\\camerad\\cameras\\spectra.cc",
    "depends_on": [],
    "start_line": 91,
    "end_line": 118,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void *alloc_w_mmu_hdl(int video0_fd, int len, uint32_t *handle, int align, int flags, int mmu_hdl, int mmu_hdl2) {\n  struct cam_mem_mgr_alloc_cmd mem_mgr_alloc_cmd = {0};\n  mem_mgr_alloc_cmd.len = len;\n  mem_mgr_alloc_cmd.align = align;\n  mem_mgr_alloc_cmd.flags = flags;\n  mem_mgr_alloc_cmd.num_hdl = 0;\n  if (mmu_hdl != 0) {\n    mem_mgr_alloc_cmd.mmu_hdls[0] = mmu_hdl;\n    mem_mgr_alloc_cmd.num_hdl++;\n  }\n  if (mmu_hdl2 != 0) {\n    mem_mgr_alloc_cmd.mmu_hdls[1] = mmu_hdl2;\n    mem_mgr_alloc_cmd.num_hdl++;\n  }\n\n  do_cam_control(video0_fd, CAM_REQ_MGR_ALLOC_BUF, &mem_mgr_alloc_cmd, sizeof(mem_mgr_alloc_cmd));\n  *handle = mem_mgr_alloc_cmd.out.buf_handle;\n\n  void *ptr = NULL;\n  if (mem_mgr_alloc_cmd.out.fd > 0) {\n    ptr = mmap(NULL, len, PROT_READ | PROT_WRITE, MAP_SHARED, mem_mgr_alloc_cmd.out.fd, 0);\n    assert(ptr != MAP_FAILED);\n  }\n\n  // LOGD(\"allocated: %x %d %llx mapped %p\", mem_mgr_alloc_cmd.out.buf_handle, mem_mgr_alloc_cmd.out.fd, mem_mgr_alloc_cmd.out.vaddr, ptr);\n\n  return ptr;\n}\n"
  },
  "system.camerad.cameras.spectra.release": {
    "id": "system.camerad.cameras.spectra.release",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\spectra.cc",
    "relative_path": "system\\camerad\\cameras\\spectra.cc",
    "depends_on": [],
    "start_line": 120,
    "end_line": 126,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void release(int video0_fd, uint32_t handle) {\n  struct cam_mem_mgr_release_cmd mem_mgr_release_cmd = {0};\n  mem_mgr_release_cmd.buf_handle = handle;\n\n  int ret = do_cam_control(video0_fd, CAM_REQ_MGR_RELEASE_BUF, &mem_mgr_release_cmd, sizeof(mem_mgr_release_cmd));\n  assert(ret == 0);\n}\n"
  },
  "system.camerad.cameras.spectra.power_set_wait": {
    "id": "system.camerad.cameras.spectra.power_set_wait",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\spectra.cc",
    "relative_path": "system\\camerad\\cameras\\spectra.cc",
    "depends_on": [],
    "start_line": 128,
    "end_line": 134,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static cam_cmd_power *power_set_wait(cam_cmd_power *power, int16_t delay_ms) {\n  cam_cmd_unconditional_wait *unconditional_wait = (cam_cmd_unconditional_wait *)((char *)power + (sizeof(struct cam_cmd_power) + (power->count - 1) * sizeof(struct cam_power_settings)));\n  unconditional_wait->cmd_type = CAMERA_SENSOR_CMD_TYPE_WAIT;\n  unconditional_wait->delay = delay_ms;\n  unconditional_wait->op_code = CAMERA_SENSOR_WAIT_OP_SW_UCND;\n  return (struct cam_cmd_power *)(unconditional_wait + 1);\n}\n"
  },
  "system.camerad.cameras.spectra.add_patch": {
    "id": "system.camerad.cameras.spectra.add_patch",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\spectra.cc",
    "relative_path": "system\\camerad\\cameras\\spectra.cc",
    "depends_on": [],
    "start_line": 462,
    "end_line": 470,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void add_patch(struct cam_packet *pkt, int32_t dst_hdl, uint32_t dst_offset, int32_t src_hdl, uint32_t src_offset) {\n  void *ptr = (char*)&pkt->payload + pkt->patch_offset;\n  struct cam_patch_desc *p = (struct cam_patch_desc *)((unsigned char*)ptr + sizeof(struct cam_patch_desc)*pkt->num_patches);\n  p->dst_buf_hdl = dst_hdl;\n  p->src_buf_hdl = src_hdl;\n  p->dst_offset = dst_offset;\n  p->src_offset = src_offset;\n  pkt->num_patches++;\n};\n"
  },
  "system.camerad.cameras.spectra.MemoryManager": {
    "id": "system.camerad.cameras.spectra.MemoryManager",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\spectra.h",
    "relative_path": "system\\camerad\\cameras\\spectra.h",
    "depends_on": [],
    "start_line": 41,
    "end_line": 59,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class MemoryManager {\npublic:\n  void init(int _video0_fd) { video0_fd = _video0_fd; }\n  ~MemoryManager();\n\n  template <class T>\n  auto alloc(int len, uint32_t *handle) {\n    return std::unique_ptr<T, std::function<void(void *)>>((T*)alloc_buf(len, handle), [this](void *ptr) { this->free(ptr); });\n  }\n\nprivate:\n  void *alloc_buf(int len, uint32_t *handle);\n  void free(void *ptr);\n\n  std::map<void *, uint32_t> handle_lookup;\n  std::map<void *, int> size_lookup;\n  std::map<int, std::queue<void *> > cached_allocations;\n  int video0_fd;\n};\n"
  },
  "system.camerad.cameras.spectra.SpectraMaster": {
    "id": "system.camerad.cameras.spectra.SpectraMaster",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\spectra.h",
    "relative_path": "system\\camerad\\cameras\\spectra.h",
    "depends_on": [],
    "start_line": 61,
    "end_line": 73,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class SpectraMaster {\npublic:\n  void init();\n\n  unique_fd video0_fd;\n  unique_fd cam_sync_fd;\n  unique_fd isp_fd;\n  unique_fd icp_fd;\n  int device_iommu = -1;\n  int cdm_iommu = -1;\n  int icp_device_iommu = -1;\n  MemoryManager mem_mgr;\n};\n"
  },
  "system.camerad.cameras.spectra.SpectraBuf": {
    "id": "system.camerad.cameras.spectra.SpectraBuf",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\spectra.h",
    "relative_path": "system\\camerad\\cameras\\spectra.h",
    "depends_on": [],
    "start_line": 75,
    "end_line": 109,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class SpectraBuf {\npublic:\n  SpectraBuf() = default;\n\n  ~SpectraBuf() {\n    if (video_fd >= 0 && ptr) {\n      munmap(ptr, mmap_size);\n      release(video_fd, handle);\n    }\n  }\n\n  void init(SpectraMaster *m, int s, int a, bool shared_access, int mmu_hdl = 0, int mmu_hdl2 = 0, int count = 1) {\n    video_fd = m->video0_fd;\n    size = s;\n    alignment = a;\n    mmap_size = aligned_size() * count;\n\n    uint32_t flags = CAM_MEM_FLAG_HW_READ_WRITE | CAM_MEM_FLAG_KMD_ACCESS | CAM_MEM_FLAG_UMD_ACCESS | CAM_MEM_FLAG_CMD_BUF_TYPE;\n    if (shared_access) {\n      flags |= CAM_MEM_FLAG_HW_SHARED_ACCESS;\n    }\n\n    void *p = alloc_w_mmu_hdl(video_fd, mmap_size, (uint32_t*)&handle, alignment, flags, mmu_hdl, mmu_hdl2);\n    ptr = (unsigned char*)p;\n    assert(ptr != NULL);\n  };\n\n  uint32_t aligned_size() {\n    return ALIGNED_SIZE(size, alignment);\n  };\n\n  int video_fd = -1;\n  unsigned char *ptr = nullptr;\n  int size = 0, alignment = 0, handle = 0, mmap_size = 0;\n};\n"
  },
  "system.camerad.cameras.spectra.SpectraBuf.init": {
    "id": "system.camerad.cameras.spectra.SpectraBuf.init",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\spectra.h",
    "relative_path": "system\\camerad\\cameras\\spectra.h",
    "depends_on": [],
    "start_line": 86,
    "end_line": 100,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  void init(SpectraMaster *m, int s, int a, bool shared_access, int mmu_hdl = 0, int mmu_hdl2 = 0, int count = 1) {\n    video_fd = m->video0_fd;\n    size = s;\n    alignment = a;\n    mmap_size = aligned_size() * count;\n\n    uint32_t flags = CAM_MEM_FLAG_HW_READ_WRITE | CAM_MEM_FLAG_KMD_ACCESS | CAM_MEM_FLAG_UMD_ACCESS | CAM_MEM_FLAG_CMD_BUF_TYPE;\n    if (shared_access) {\n      flags |= CAM_MEM_FLAG_HW_SHARED_ACCESS;\n    }\n\n    void *p = alloc_w_mmu_hdl(video_fd, mmap_size, (uint32_t*)&handle, alignment, flags, mmu_hdl, mmu_hdl2);\n    ptr = (unsigned char*)p;\n    assert(ptr != NULL);\n  };\n"
  },
  "system.camerad.cameras.spectra.SpectraBuf.aligned_size": {
    "id": "system.camerad.cameras.spectra.SpectraBuf.aligned_size",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\spectra.h",
    "relative_path": "system\\camerad\\cameras\\spectra.h",
    "depends_on": [],
    "start_line": 102,
    "end_line": 104,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  uint32_t aligned_size() {\n    return ALIGNED_SIZE(size, alignment);\n  };\n"
  },
  "system.camerad.cameras.spectra.SpectraCamera": {
    "id": "system.camerad.cameras.spectra.SpectraCamera",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\spectra.h",
    "relative_path": "system\\camerad\\cameras\\spectra.h",
    "depends_on": [],
    "start_line": 111,
    "end_line": 219,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class SpectraCamera {\npublic:\n  SpectraCamera(SpectraMaster *master, const CameraConfig &config);\n  ~SpectraCamera();\n\n  void camera_open(VisionIpcServer *v, cl_device_id device_id, cl_context ctx);\n  bool handle_camera_event(const cam_req_mgr_message *event_data);\n  void camera_close();\n  void camera_map_bufs();\n  void config_bps(int idx, int request_id);\n  void config_ife(int idx, int request_id, bool init=false);\n\n  int clear_req_queue();\n  void enqueue_frame(uint64_t request_id);\n\n  int sensors_init();\n  void sensors_start();\n  void sensors_poke(int request_id);\n  void sensors_i2c(const struct i2c_random_wr_payload* dat, int len, int op_code, bool data_word);\n\n  bool openSensor();\n  void configISP();\n  void configICP();\n  void configCSIPHY();\n  void linkDevices();\n  void destroySyncObjectAt(int index);\n\n  // *** state ***\n\n  int ife_buf_depth = -1;\n  bool open = false;\n  bool enabled = true;\n  CameraConfig cc;\n  std::unique_ptr<const SensorInfo> sensor;\n\n  // YUV image size\n  uint32_t stride;\n  uint32_t y_height;\n  uint32_t uv_height;\n  uint32_t uv_offset;\n  uint32_t yuv_size;\n\n  unique_fd sensor_fd;\n  unique_fd csiphy_fd;\n\n  int32_t session_handle = -1;\n  int32_t sensor_dev_handle = -1;\n  int32_t isp_dev_handle = -1;\n  int32_t icp_dev_handle = -1;\n  int32_t csiphy_dev_handle = -1;\n\n  int32_t link_handle = -1;\n\n  SpectraBuf ife_cmd;\n  SpectraBuf ife_gamma_lut;\n  SpectraBuf ife_linearization_lut;\n  SpectraBuf ife_vignetting_lut;\n\n  SpectraBuf bps_cmd;\n  SpectraBuf bps_cdm_buffer;\n  SpectraBuf bps_cdm_program_array;\n  SpectraBuf bps_cdm_striping_bl;\n  SpectraBuf bps_iq;\n  SpectraBuf bps_striping;\n  SpectraBuf bps_linearization_lut;\n  std::vector<uint32_t> bps_lin_reg;\n  std::vector<uint32_t> bps_ccm_reg;\n\n  int buf_handle_yuv[MAX_IFE_BUFS] = {};\n  int buf_handle_raw[MAX_IFE_BUFS] = {};\n  int sync_objs_ife[MAX_IFE_BUFS] = {};\n  int sync_objs_bps[MAX_IFE_BUFS] = {};\n  uint64_t request_id_last = 0;\n  uint64_t last_requeue_ts = 0;\n  uint64_t frame_id_raw_last = 0;\n  int invalid_request_count = 0;\n  bool skip_expected = true;\n\n  CameraBuf buf;\n  SpectraMaster *m;\n\nprivate:\n  void clearAndRequeue(uint64_t from_request_id);\n  bool validateEvent(uint64_t request_id, uint64_t frame_id_raw);\n  bool waitForFrameReady(uint64_t request_id);\n  bool processFrame(int buf_idx, uint64_t request_id, uint64_t frame_id_raw, uint64_t timestamp);\n  static bool syncFirstFrame(int camera_id, uint64_t request_id, uint64_t raw_id, uint64_t timestamp);\n  struct SyncData {\n    uint64_t timestamp;\n    uint64_t frame_id_offset = 0;\n  };\n  inline static std::map<int, SyncData> camera_sync_data;\n  inline static bool first_frame_synced = false;\n\n  // a mode for stressing edge cases: realignment, sync failures, etc.\n  inline bool stress_test(std::string log) {\n    static double last_trigger = 0;\n    static double prob = std::stod(util::getenv(\"SPECTRA_ERROR_PROB\", \"-1\"));\n    static double dt = std::stod(util::getenv(\"SPECTRA_ERROR_DT\", \"1\"));\n    bool triggered = (prob > 0) && \\\n                     ((static_cast<double>(rand()) / RAND_MAX) < prob) && \\\n                     (millis_since_boot() - last_trigger) > dt;\n    if (triggered) {\n      last_trigger = millis_since_boot();\n      LOGE(\"stress test (cam %d): %s\", cc.camera_num, log.c_str());\n    }\n    return triggered;\n  }\n};\n"
  },
  "system.camerad.cameras.spectra.SpectraCamera.stress_test": {
    "id": "system.camerad.cameras.spectra.SpectraCamera.stress_test",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\cameras\\spectra.h",
    "relative_path": "system\\camerad\\cameras\\spectra.h",
    "depends_on": [],
    "start_line": 206,
    "end_line": 218,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  inline bool stress_test(std::string log) {\n    static double last_trigger = 0;\n    static double prob = std::stod(util::getenv(\"SPECTRA_ERROR_PROB\", \"-1\"));\n    static double dt = std::stod(util::getenv(\"SPECTRA_ERROR_DT\", \"1\"));\n    bool triggered = (prob > 0) && \\\n                     ((static_cast<double>(rand()) / RAND_MAX) < prob) && \\\n                     (millis_since_boot() - last_trigger) > dt;\n    if (triggered) {\n      last_trigger = millis_since_boot();\n      LOGE(\"stress test (cam %d): %s\", cc.camera_num, log.c_str());\n    }\n    return triggered;\n  }\n"
  },
  "system.camerad.sensors.sensor.SensorInfo": {
    "id": "system.camerad.sensors.sensor.SensorInfo",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\sensors\\sensor.h",
    "relative_path": "system\\camerad\\sensors\\sensor.h",
    "depends_on": [],
    "start_line": 19,
    "end_line": 89,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class SensorInfo {\npublic:\n  SensorInfo() = default;\n  virtual std::vector<i2c_random_wr_payload> getExposureRegisters(int exposure_time, int new_exp_g, bool dc_gain_enabled) const { return {}; }\n  virtual float getExposureScore(float desired_ev, int exp_t, int exp_g_idx, float exp_gain, int gain_idx) const {return 0; }\n  virtual int getSlaveAddress(int port) const { assert(0); }\n\n  cereal::FrameData::ImageSensor image_sensor = cereal::FrameData::ImageSensor::UNKNOWN;\n  float pixel_size_mm;\n  uint32_t frame_width, frame_height;\n  uint32_t frame_stride;\n  uint32_t frame_offset = 0;\n  uint32_t extra_height = 0;\n  int out_scale = 1;\n  int registers_offset = -1;\n  int stats_offset = -1;\n  int hdr_offset = -1;\n\n  int exposure_time_min;\n  int exposure_time_max;\n\n  float dc_gain_factor;\n  int dc_gain_min_weight;\n  int dc_gain_max_weight;\n  float dc_gain_on_grey;\n  float dc_gain_off_grey;\n\n  float ev_scale = 1.0;\n  float sensor_analog_gains[ANALOG_GAIN_MAX_CNT];\n  int analog_gain_min_idx;\n  int analog_gain_max_idx;\n  int analog_gain_rec_idx;\n  int analog_gain_cost_delta;\n  float analog_gain_cost_low;\n  float analog_gain_cost_high;\n  float target_grey_factor;\n  float min_ev;\n  float max_ev;\n\n  bool data_word;\n  uint32_t probe_reg_addr;\n  uint32_t probe_expected_data;\n  std::vector<i2c_random_wr_payload> start_reg_array;\n  std::vector<i2c_random_wr_payload> init_reg_array;\n\n  uint32_t bits_per_pixel;\n  uint32_t bayer_pattern;\n  uint32_t mipi_format;\n  uint32_t mclk_frequency;\n  uint32_t frame_data_type;\n\n  uint32_t readout_time_ns;  // used to recover EOF from SOF\n\n  // ISP image processing params\n  uint32_t black_level;\n  std::vector<uint32_t> color_correct_matrix;  // 3x3\n  std::vector<uint32_t> gamma_lut_rgb;         // gamma LUTs are length 64 * sizeof(uint32_t); same for r/g/b here\n  void prepare_gamma_lut() {\n    for (int i = 0; i < 64; i++) {\n      gamma_lut_rgb[i] |= ((uint32_t)(gamma_lut_rgb[i+1] - gamma_lut_rgb[i]) << 10);\n    }\n    gamma_lut_rgb.pop_back();\n  }\n  std::vector<uint32_t> linearization_lut;     // length 36\n  std::vector<uint32_t> linearization_pts;     // length 4\n  std::vector<uint32_t> vignetting_lut;        // length 221\n\n  const int num() const {\n    return static_cast<int>(image_sensor);\n  };\n};\n"
  },
  "system.camerad.sensors.sensor.SensorInfo.prepare_gamma_lut": {
    "id": "system.camerad.sensors.sensor.SensorInfo.prepare_gamma_lut",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\sensors\\sensor.h",
    "relative_path": "system\\camerad\\sensors\\sensor.h",
    "depends_on": [],
    "start_line": 76,
    "end_line": 81,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  void prepare_gamma_lut() {\n    for (int i = 0; i < 64; i++) {\n      gamma_lut_rgb[i] |= ((uint32_t)(gamma_lut_rgb[i+1] - gamma_lut_rgb[i]) << 10);\n    }\n    gamma_lut_rgb.pop_back();\n  }\n"
  },
  "system.camerad.sensors.sensor.SensorInfo.num": {
    "id": "system.camerad.sensors.sensor.SensorInfo.num",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\sensors\\sensor.h",
    "relative_path": "system\\camerad\\sensors\\sensor.h",
    "depends_on": [],
    "start_line": 86,
    "end_line": 88,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  const int num() const {\n    return static_cast<int>(image_sensor);\n  };\n"
  },
  "system.camerad.sensors.sensor.AR0231": {
    "id": "system.camerad.sensors.sensor.AR0231",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\sensors\\sensor.h",
    "relative_path": "system\\camerad\\sensors\\sensor.h",
    "depends_on": [],
    "start_line": 91,
    "end_line": 100,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class AR0231 : public SensorInfo {\npublic:\n  AR0231();\n  std::vector<i2c_random_wr_payload> getExposureRegisters(int exposure_time, int new_exp_g, bool dc_gain_enabled) const override;\n  float getExposureScore(float desired_ev, int exp_t, int exp_g_idx, float exp_gain, int gain_idx) const override;\n  int getSlaveAddress(int port) const override;\n\nprivate:\n  mutable std::map<uint16_t, std::pair<int, int>> ar0231_register_lut;\n};\n"
  },
  "system.camerad.sensors.sensor.OX03C10": {
    "id": "system.camerad.sensors.sensor.OX03C10",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\sensors\\sensor.h",
    "relative_path": "system\\camerad\\sensors\\sensor.h",
    "depends_on": [],
    "start_line": 102,
    "end_line": 108,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class OX03C10 : public SensorInfo {\npublic:\n  OX03C10();\n  std::vector<i2c_random_wr_payload> getExposureRegisters(int exposure_time, int new_exp_g, bool dc_gain_enabled) const override;\n  float getExposureScore(float desired_ev, int exp_t, int exp_g_idx, float exp_gain, int gain_idx) const override;\n  int getSlaveAddress(int port) const override;\n};\n"
  },
  "system.camerad.sensors.sensor.OS04C10": {
    "id": "system.camerad.sensors.sensor.OS04C10",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\sensors\\sensor.h",
    "relative_path": "system\\camerad\\sensors\\sensor.h",
    "depends_on": [],
    "start_line": 110,
    "end_line": 117,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class OS04C10 : public SensorInfo {\npublic:\n  OS04C10();\n  void ife_downscale_configure();\n  std::vector<i2c_random_wr_payload> getExposureRegisters(int exposure_time, int new_exp_g, bool dc_gain_enabled) const override;\n  float getExposureScore(float desired_ev, int exp_t, int exp_g_idx, float exp_gain, int gain_idx) const override;\n  int getSlaveAddress(int port) const override;\n};\n"
  },
  "system.camerad.snapshot.snapshot.jpeg_write": {
    "id": "system.camerad.snapshot.snapshot.jpeg_write",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\snapshot\\snapshot.py",
    "relative_path": "system\\camerad\\snapshot\\snapshot.py",
    "depends_on": [],
    "start_line": 24,
    "end_line": 26,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.camerad.snapshot.snapshot.yuv_to_rgb": {
    "id": "system.camerad.snapshot.snapshot.yuv_to_rgb",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\snapshot\\snapshot.py",
    "relative_path": "system\\camerad\\snapshot\\snapshot.py",
    "depends_on": [],
    "start_line": 29,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.camerad.snapshot.snapshot.extract_image": {
    "id": "system.camerad.snapshot.snapshot.extract_image",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\snapshot\\snapshot.py",
    "relative_path": "system\\camerad\\snapshot\\snapshot.py",
    "depends_on": [
      "system.camerad.snapshot.snapshot.yuv_to_rgb"
    ],
    "start_line": 45,
    "end_line": 50,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.camerad.snapshot.snapshot.get_snapshots": {
    "id": "system.camerad.snapshot.snapshot.get_snapshots",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\snapshot\\snapshot.py",
    "relative_path": "system\\camerad\\snapshot\\snapshot.py",
    "depends_on": [
      "system.camerad.snapshot.snapshot.extract_image"
    ],
    "start_line": 53,
    "end_line": 73,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.camerad.snapshot.snapshot.snapshot": {
    "id": "system.camerad.snapshot.snapshot.snapshot",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\snapshot\\snapshot.py",
    "relative_path": "system\\camerad\\snapshot\\snapshot.py",
    "depends_on": [
      "system.camerad.snapshot.snapshot.get_snapshots"
    ],
    "start_line": 76,
    "end_line": 114,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.camerad.test.test_camerad.run_and_log": {
    "id": "system.camerad.test.test_camerad.run_and_log",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\test\\test_camerad.py",
    "relative_path": "system\\camerad\\test\\test_camerad.py",
    "depends_on": [],
    "start_line": 15,
    "end_line": 33,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.camerad.test.test_camerad.logs": {
    "id": "system.camerad.test.test_camerad.logs",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\test\\test_camerad.py",
    "relative_path": "system\\camerad\\test\\test_camerad.py",
    "depends_on": [
      "system.camerad.test.test_camerad.run_and_log"
    ],
    "start_line": 36,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.camerad.test.test_camerad.TestCamerad": {
    "id": "system.camerad.test.test_camerad.TestCamerad",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\test\\test_camerad.py",
    "relative_path": "system\\camerad\\test\\test_camerad.py",
    "depends_on": [
      "system.camerad.test.test_camerad.run_and_log",
      "system.camerad.test.test_camerad.logs"
    ],
    "start_line": 50,
    "end_line": 98,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.camerad.test.test_camerad.TestCamerad.test_frame_skips": {
    "id": "system.camerad.test.test_camerad.TestCamerad.test_frame_skips",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\test\\test_camerad.py",
    "relative_path": "system\\camerad\\test\\test_camerad.py",
    "depends_on": [],
    "start_line": 51,
    "end_line": 53,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.camerad.test.test_camerad.TestCamerad.test_frame_sync": {
    "id": "system.camerad.test.test_camerad.TestCamerad.test_frame_sync",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\test\\test_camerad.py",
    "relative_path": "system\\camerad\\test\\test_camerad.py",
    "depends_on": [],
    "start_line": 55,
    "end_line": 65,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.camerad.test.test_camerad.TestCamerad.test_sanity_checks": {
    "id": "system.camerad.test.test_camerad.TestCamerad.test_sanity_checks",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\test\\test_camerad.py",
    "relative_path": "system\\camerad\\test\\test_camerad.py",
    "depends_on": [],
    "start_line": 67,
    "end_line": 68,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.camerad.test.test_camerad.TestCamerad._sanity_checks": {
    "id": "system.camerad.test.test_camerad.TestCamerad._sanity_checks",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\test\\test_camerad.py",
    "relative_path": "system\\camerad\\test\\test_camerad.py",
    "depends_on": [],
    "start_line": 70,
    "end_line": 87,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.camerad.test.test_camerad.TestCamerad.test_stress_test": {
    "id": "system.camerad.test.test_camerad.TestCamerad.test_stress_test",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\test\\test_camerad.py",
    "relative_path": "system\\camerad\\test\\test_camerad.py",
    "depends_on": [
      "system.camerad.test.test_camerad.run_and_log"
    ],
    "start_line": 89,
    "end_line": 98,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.camerad.test.test_exposure.TestCamerad": {
    "id": "system.camerad.test.test_exposure.TestCamerad",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\test\\test_exposure.py",
    "relative_path": "system\\camerad\\test\\test_exposure.py",
    "depends_on": [],
    "start_line": 12,
    "end_line": 51,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.camerad.test.test_exposure.TestCamerad.setup_class": {
    "id": "system.camerad.test.test_exposure.TestCamerad.setup_class",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\test\\test_exposure.py",
    "relative_path": "system\\camerad\\test\\test_exposure.py",
    "depends_on": [],
    "start_line": 14,
    "end_line": 15,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.camerad.test.test_exposure.TestCamerad._numpy_rgb2gray": {
    "id": "system.camerad.test.test_exposure.TestCamerad._numpy_rgb2gray",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\test\\test_exposure.py",
    "relative_path": "system\\camerad\\test\\test_exposure.py",
    "depends_on": [],
    "start_line": 17,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.camerad.test.test_exposure.TestCamerad._is_exposure_okay": {
    "id": "system.camerad.test.test_exposure.TestCamerad._is_exposure_okay",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\test\\test_exposure.py",
    "relative_path": "system\\camerad\\test\\test_exposure.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.camerad.test.test_exposure.TestCamerad.test_camera_operation": {
    "id": "system.camerad.test.test_exposure.TestCamerad.test_camera_operation",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\camerad\\test\\test_exposure.py",
    "relative_path": "system\\camerad\\test\\test_exposure.py",
    "depends_on": [],
    "start_line": 34,
    "end_line": 51,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareNone": {
    "id": "system.hardware.base.HardwareNone",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.h",
    "relative_path": "system\\hardware\\base.h",
    "depends_on": [],
    "start_line": 11,
    "end_line": 40,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class HardwareNone {\npublic:\n  static constexpr float MAX_VOLUME = 0.7;\n  static constexpr float MIN_VOLUME = 0.2;\n\n  static std::string get_os_version() { return \"\"; }\n  static std::string get_name() { return \"\"; }\n  static cereal::InitData::DeviceType get_device_type() { return cereal::InitData::DeviceType::UNKNOWN; }\n  static int get_voltage() { return 0; }\n  static int get_current() { return 0; }\n\n  static std::string get_serial() { return \"cccccc\"; }\n\n  static std::map<std::string, std::string> get_init_logs() {\n    return {};\n  }\n\n  static void reboot() {}\n  static void poweroff() {}\n  static void set_brightness(int percent) {}\n  static void set_ir_power(int percentage) {}\n  static void set_display_power(bool on) {}\n\n  static bool get_ssh_enabled() { return false; }\n  static void set_ssh_enabled(bool enabled) {}\n\n  static bool PC() { return false; }\n  static bool TICI() { return false; }\n  static bool AGNOS() { return false; }\n};\n"
  },
  "system.hardware.base.HardwareNone.get_init_logs": {
    "id": "system.hardware.base.HardwareNone.get_init_logs",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.h",
    "relative_path": "system\\hardware\\base.h",
    "depends_on": [],
    "start_line": 24,
    "end_line": 26,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  static std::map<std::string, std::string> get_init_logs() {\n    return {};\n  }\n"
  },
  "system.hardware.base.ThermalZone": {
    "id": "system.hardware.base.ThermalZone",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 10,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.ThermalZone.read": {
    "id": "system.hardware.base.ThermalZone.read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.ThermalConfig": {
    "id": "system.hardware.base.ThermalConfig",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [
      "system.hardware.base.ThermalZone",
      "system.hardware.base.ThermalConfig"
    ],
    "start_line": 33,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.ThermalConfig.get_msg": {
    "id": "system.hardware.base.ThermalConfig.get_msg",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [
      "system.hardware.base.ThermalConfig"
    ],
    "start_line": 43,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase": {
    "id": "system.hardware.base.HardwareBase",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [
      "system.hardware.base.ThermalConfig"
    ],
    "start_line": 54,
    "end_line": 185,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.get_cmdline": {
    "id": "system.hardware.base.HardwareBase.get_cmdline",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 56,
    "end_line": 59,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.read_param_file": {
    "id": "system.hardware.base.HardwareBase.read_param_file",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 62,
    "end_line": 67,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.booted": {
    "id": "system.hardware.base.HardwareBase.booted",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 69,
    "end_line": 70,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.reboot": {
    "id": "system.hardware.base.HardwareBase.reboot",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 73,
    "end_line": 74,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.uninstall": {
    "id": "system.hardware.base.HardwareBase.uninstall",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 77,
    "end_line": 78,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.get_os_version": {
    "id": "system.hardware.base.HardwareBase.get_os_version",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 81,
    "end_line": 82,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.get_device_type": {
    "id": "system.hardware.base.HardwareBase.get_device_type",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 85,
    "end_line": 86,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.get_imei": {
    "id": "system.hardware.base.HardwareBase.get_imei",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 89,
    "end_line": 90,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.get_serial": {
    "id": "system.hardware.base.HardwareBase.get_serial",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 93,
    "end_line": 94,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.get_network_info": {
    "id": "system.hardware.base.HardwareBase.get_network_info",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 97,
    "end_line": 98,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.get_network_type": {
    "id": "system.hardware.base.HardwareBase.get_network_type",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 101,
    "end_line": 102,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.get_sim_info": {
    "id": "system.hardware.base.HardwareBase.get_sim_info",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 105,
    "end_line": 106,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.get_network_strength": {
    "id": "system.hardware.base.HardwareBase.get_network_strength",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 109,
    "end_line": 110,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.get_network_metered": {
    "id": "system.hardware.base.HardwareBase.get_network_metered",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 112,
    "end_line": 113,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.set_bandwidth_limit": {
    "id": "system.hardware.base.HardwareBase.set_bandwidth_limit",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 116,
    "end_line": 117,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.get_current_power_draw": {
    "id": "system.hardware.base.HardwareBase.get_current_power_draw",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 120,
    "end_line": 121,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.get_som_power_draw": {
    "id": "system.hardware.base.HardwareBase.get_som_power_draw",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 124,
    "end_line": 125,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.shutdown": {
    "id": "system.hardware.base.HardwareBase.shutdown",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 128,
    "end_line": 129,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.get_thermal_config": {
    "id": "system.hardware.base.HardwareBase.get_thermal_config",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [
      "system.hardware.base.ThermalConfig"
    ],
    "start_line": 131,
    "end_line": 132,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.set_display_power": {
    "id": "system.hardware.base.HardwareBase.set_display_power",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 134,
    "end_line": 135,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.set_screen_brightness": {
    "id": "system.hardware.base.HardwareBase.set_screen_brightness",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 138,
    "end_line": 139,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.get_screen_brightness": {
    "id": "system.hardware.base.HardwareBase.get_screen_brightness",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 142,
    "end_line": 143,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.set_power_save": {
    "id": "system.hardware.base.HardwareBase.set_power_save",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 146,
    "end_line": 147,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.get_gpu_usage_percent": {
    "id": "system.hardware.base.HardwareBase.get_gpu_usage_percent",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 150,
    "end_line": 151,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.get_modem_version": {
    "id": "system.hardware.base.HardwareBase.get_modem_version",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 153,
    "end_line": 154,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.get_modem_temperatures": {
    "id": "system.hardware.base.HardwareBase.get_modem_temperatures",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 157,
    "end_line": 158,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.get_nvme_temperatures": {
    "id": "system.hardware.base.HardwareBase.get_nvme_temperatures",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 161,
    "end_line": 162,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.initialize_hardware": {
    "id": "system.hardware.base.HardwareBase.initialize_hardware",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 165,
    "end_line": 166,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.configure_modem": {
    "id": "system.hardware.base.HardwareBase.configure_modem",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 168,
    "end_line": 169,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.get_networks": {
    "id": "system.hardware.base.HardwareBase.get_networks",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 172,
    "end_line": 173,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.has_internal_panda": {
    "id": "system.hardware.base.HardwareBase.has_internal_panda",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 175,
    "end_line": 176,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.reset_internal_panda": {
    "id": "system.hardware.base.HardwareBase.reset_internal_panda",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 178,
    "end_line": 179,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.recover_internal_panda": {
    "id": "system.hardware.base.HardwareBase.recover_internal_panda",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 181,
    "end_line": 182,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.base.HardwareBase.get_modem_data_usage": {
    "id": "system.hardware.base.HardwareBase.get_modem_data_usage",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\base.py",
    "relative_path": "system\\hardware\\base.py",
    "depends_on": [],
    "start_line": 184,
    "end_line": 185,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.fan_controller.BaseFanController": {
    "id": "system.hardware.fan_controller.BaseFanController",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\fan_controller.py",
    "relative_path": "system\\hardware\\fan_controller.py",
    "depends_on": [],
    "start_line": 9,
    "end_line": 12,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.fan_controller.BaseFanController.update": {
    "id": "system.hardware.fan_controller.BaseFanController.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\fan_controller.py",
    "relative_path": "system\\hardware\\fan_controller.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 12,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.fan_controller.TiciFanController": {
    "id": "system.hardware.fan_controller.TiciFanController",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\fan_controller.py",
    "relative_path": "system\\hardware\\fan_controller.py",
    "depends_on": [
      "system.hardware.fan_controller.BaseFanController"
    ],
    "start_line": 15,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.fan_controller.TiciFanController.__init__": {
    "id": "system.hardware.fan_controller.TiciFanController.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\fan_controller.py",
    "relative_path": "system\\hardware\\fan_controller.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 21,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.fan_controller.TiciFanController.update": {
    "id": "system.hardware.fan_controller.TiciFanController.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\fan_controller.py",
    "relative_path": "system\\hardware\\fan_controller.py",
    "depends_on": [],
    "start_line": 23,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.hardwared.set_offroad_alert_if_changed": {
    "id": "system.hardware.hardwared.set_offroad_alert_if_changed",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\hardwared.py",
    "relative_path": "system\\hardware\\hardwared.py",
    "depends_on": [],
    "start_line": 58,
    "end_line": 62,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.hardwared.touch_thread": {
    "id": "system.hardware.hardwared.touch_thread",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\hardwared.py",
    "relative_path": "system\\hardware\\hardwared.py",
    "depends_on": [],
    "start_line": 64,
    "end_line": 96,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.hardwared.hw_state_thread": {
    "id": "system.hardware.hardwared.hw_state_thread",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\hardwared.py",
    "relative_path": "system\\hardware\\hardwared.py",
    "depends_on": [],
    "start_line": 99,
    "end_line": 162,
    "has_docstring": true,
    "docstring": "Handles non critical hardware state, and sends over queue",
    "language": "python"
  },
  "system.hardware.hardwared.hardware_thread": {
    "id": "system.hardware.hardwared.hardware_thread",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\hardwared.py",
    "relative_path": "system\\hardware\\hardwared.py",
    "depends_on": [
      "system.hardware.hardwared.set_offroad_alert_if_changed"
    ],
    "start_line": 165,
    "end_line": 447,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.hardwared.main": {
    "id": "system.hardware.hardwared.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\hardwared.py",
    "relative_path": "system\\hardware\\hardwared.py",
    "depends_on": [
      "system.hardware.hardwared.hw_state_thread",
      "system.hardware.hardwared.hardware_thread",
      "system.hardware.hardwared.touch_thread"
    ],
    "start_line": 450,
    "end_line": 474,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.hw.openpilot_prefix": {
    "id": "system.hardware.hw.openpilot_prefix",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\hw.h",
    "relative_path": "system\\hardware\\hw.h",
    "depends_on": [],
    "start_line": 17,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  inline std::string openpilot_prefix() {\n    return util::getenv(\"OPENPILOT_PREFIX\", \"\");\n  }\n"
  },
  "system.hardware.hw.comma_home": {
    "id": "system.hardware.hw.comma_home",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\hw.h",
    "relative_path": "system\\hardware\\hw.h",
    "depends_on": [],
    "start_line": 21,
    "end_line": 23,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  inline std::string comma_home() {\n    return util::getenv(\"HOME\") + \"/.comma\" + Path::openpilot_prefix();\n  }\n"
  },
  "system.hardware.hw.log_root": {
    "id": "system.hardware.hw.log_root",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\hw.h",
    "relative_path": "system\\hardware\\hw.h",
    "depends_on": [],
    "start_line": 25,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  inline std::string log_root() {\n    if (const char *env = getenv(\"LOG_ROOT\")) {\n      return env;\n    }\n    return Hardware::PC() ? Path::comma_home() + \"/media/0/realdata\" : \"/data/media/0/realdata\";\n  }\n"
  },
  "system.hardware.hw.params": {
    "id": "system.hardware.hw.params",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\hw.h",
    "relative_path": "system\\hardware\\hw.h",
    "depends_on": [],
    "start_line": 32,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  inline std::string params() {\n    return util::getenv(\"PARAMS_ROOT\", Hardware::PC() ? (Path::comma_home() + \"/params\") : \"/data/params\");\n  }\n"
  },
  "system.hardware.hw.rsa_file": {
    "id": "system.hardware.hw.rsa_file",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\hw.h",
    "relative_path": "system\\hardware\\hw.h",
    "depends_on": [],
    "start_line": 36,
    "end_line": 38,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  inline std::string rsa_file() {\n    return Hardware::PC() ? Path::comma_home() + \"/persist/comma/id_rsa\" : \"/persist/comma/id_rsa\";\n  }\n"
  },
  "system.hardware.hw.swaglog_ipc": {
    "id": "system.hardware.hw.swaglog_ipc",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\hw.h",
    "relative_path": "system\\hardware\\hw.h",
    "depends_on": [],
    "start_line": 40,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  inline std::string swaglog_ipc() {\n    return \"ipc:///tmp/logmessage\" + Path::openpilot_prefix();\n  }\n"
  },
  "system.hardware.hw.download_cache_root": {
    "id": "system.hardware.hw.download_cache_root",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\hw.h",
    "relative_path": "system\\hardware\\hw.h",
    "depends_on": [],
    "start_line": 44,
    "end_line": 49,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  inline std::string download_cache_root() {\n    if (const char *env = getenv(\"COMMA_CACHE\")) {\n      return env;\n    }\n    return \"/tmp/comma_download_cache\" + Path::openpilot_prefix() + \"/\";\n  }\n"
  },
  "system.hardware.hw.shm_path": {
    "id": "system.hardware.hw.shm_path",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\hw.h",
    "relative_path": "system\\hardware\\hw.h",
    "depends_on": [],
    "start_line": 51,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": " inline std::string shm_path() {\n    #ifdef __APPLE__\n     return\"/tmp\";\n    #else\n     return \"/dev/shm\";\n    #endif\n }\n"
  },
  "system.hardware.hw.Paths": {
    "id": "system.hardware.hw.Paths",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\hw.py",
    "relative_path": "system\\hardware\\hw.py",
    "depends_on": [
      "system.hardware.hw.Paths"
    ],
    "start_line": 9,
    "end_line": 65,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.hw.Paths.comma_home": {
    "id": "system.hardware.hw.Paths.comma_home",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\hw.py",
    "relative_path": "system\\hardware\\hw.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 12,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.hw.Paths.log_root": {
    "id": "system.hardware.hw.Paths.log_root",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\hw.py",
    "relative_path": "system\\hardware\\hw.py",
    "depends_on": [
      "system.hardware.hw.Paths"
    ],
    "start_line": 15,
    "end_line": 21,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.hw.Paths.swaglog_root": {
    "id": "system.hardware.hw.Paths.swaglog_root",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\hw.py",
    "relative_path": "system\\hardware\\hw.py",
    "depends_on": [
      "system.hardware.hw.Paths"
    ],
    "start_line": 24,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.hw.Paths.swaglog_ipc": {
    "id": "system.hardware.hw.Paths.swaglog_ipc",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\hw.py",
    "relative_path": "system\\hardware\\hw.py",
    "depends_on": [],
    "start_line": 31,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.hw.Paths.download_cache_root": {
    "id": "system.hardware.hw.Paths.download_cache_root",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\hw.py",
    "relative_path": "system\\hardware\\hw.py",
    "depends_on": [],
    "start_line": 35,
    "end_line": 38,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.hw.Paths.persist_root": {
    "id": "system.hardware.hw.Paths.persist_root",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\hw.py",
    "relative_path": "system\\hardware\\hw.py",
    "depends_on": [
      "system.hardware.hw.Paths"
    ],
    "start_line": 41,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.hw.Paths.stats_root": {
    "id": "system.hardware.hw.Paths.stats_root",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\hw.py",
    "relative_path": "system\\hardware\\hw.py",
    "depends_on": [
      "system.hardware.hw.Paths"
    ],
    "start_line": 48,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.hw.Paths.config_root": {
    "id": "system.hardware.hw.Paths.config_root",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\hw.py",
    "relative_path": "system\\hardware\\hw.py",
    "depends_on": [
      "system.hardware.hw.Paths"
    ],
    "start_line": 55,
    "end_line": 59,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.hw.Paths.shm_path": {
    "id": "system.hardware.hw.Paths.shm_path",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\hw.py",
    "relative_path": "system\\hardware\\hw.py",
    "depends_on": [],
    "start_line": 62,
    "end_line": 65,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.power_monitoring.PowerMonitoring": {
    "id": "system.hardware.power_monitoring.PowerMonitoring",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\power_monitoring.py",
    "relative_path": "system\\hardware\\power_monitoring.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 128,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.power_monitoring.PowerMonitoring.__init__": {
    "id": "system.hardware.power_monitoring.PowerMonitoring.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\power_monitoring.py",
    "relative_path": "system\\hardware\\power_monitoring.py",
    "depends_on": [],
    "start_line": 22,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.power_monitoring.PowerMonitoring.calculate": {
    "id": "system.hardware.power_monitoring.PowerMonitoring.calculate",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\power_monitoring.py",
    "relative_path": "system\\hardware\\power_monitoring.py",
    "depends_on": [],
    "start_line": 40,
    "end_line": 86,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.power_monitoring.PowerMonitoring._perform_integration": {
    "id": "system.hardware.power_monitoring.PowerMonitoring._perform_integration",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\power_monitoring.py",
    "relative_path": "system\\hardware\\power_monitoring.py",
    "depends_on": [],
    "start_line": 88,
    "end_line": 100,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.power_monitoring.PowerMonitoring.get_power_used": {
    "id": "system.hardware.power_monitoring.PowerMonitoring.get_power_used",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\power_monitoring.py",
    "relative_path": "system\\hardware\\power_monitoring.py",
    "depends_on": [],
    "start_line": 103,
    "end_line": 104,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.power_monitoring.PowerMonitoring.get_car_battery_capacity": {
    "id": "system.hardware.power_monitoring.PowerMonitoring.get_car_battery_capacity",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\power_monitoring.py",
    "relative_path": "system\\hardware\\power_monitoring.py",
    "depends_on": [],
    "start_line": 106,
    "end_line": 107,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.power_monitoring.PowerMonitoring.should_shutdown": {
    "id": "system.hardware.power_monitoring.PowerMonitoring.should_shutdown",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\power_monitoring.py",
    "relative_path": "system\\hardware\\power_monitoring.py",
    "depends_on": [],
    "start_line": 110,
    "end_line": 128,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.pc.hardware.HardwarePC": {
    "id": "system.hardware.pc.hardware.HardwarePC",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\pc\\hardware.h",
    "relative_path": "system\\hardware\\pc\\hardware.h",
    "depends_on": [],
    "start_line": 7,
    "end_line": 15,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class HardwarePC : public HardwareNone {\npublic:\n  static std::string get_os_version() { return \"openpilot for PC\"; }\n  static std::string get_name() { return \"pc\"; }\n  static cereal::InitData::DeviceType get_device_type() { return cereal::InitData::DeviceType::PC; }\n  static bool PC() { return true; }\n  static bool TICI() { return util::getenv(\"TICI\", 0) == 1; }\n  static bool AGNOS() { return util::getenv(\"TICI\", 0) == 1; }\n};\n"
  },
  "system.hardware.pc.hardware.Pc": {
    "id": "system.hardware.pc.hardware.Pc",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\pc\\hardware.py",
    "relative_path": "system\\hardware\\pc\\hardware.py",
    "depends_on": [],
    "start_line": 10,
    "end_line": 78,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.pc.hardware.Pc.get_os_version": {
    "id": "system.hardware.pc.hardware.Pc.get_os_version",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\pc\\hardware.py",
    "relative_path": "system\\hardware\\pc\\hardware.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 12,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.pc.hardware.Pc.get_device_type": {
    "id": "system.hardware.pc.hardware.Pc.get_device_type",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\pc\\hardware.py",
    "relative_path": "system\\hardware\\pc\\hardware.py",
    "depends_on": [],
    "start_line": 14,
    "end_line": 15,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.pc.hardware.Pc.reboot": {
    "id": "system.hardware.pc.hardware.Pc.reboot",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\pc\\hardware.py",
    "relative_path": "system\\hardware\\pc\\hardware.py",
    "depends_on": [],
    "start_line": 17,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.pc.hardware.Pc.uninstall": {
    "id": "system.hardware.pc.hardware.Pc.uninstall",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\pc\\hardware.py",
    "relative_path": "system\\hardware\\pc\\hardware.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 21,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.pc.hardware.Pc.get_imei": {
    "id": "system.hardware.pc.hardware.Pc.get_imei",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\pc\\hardware.py",
    "relative_path": "system\\hardware\\pc\\hardware.py",
    "depends_on": [],
    "start_line": 23,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.pc.hardware.Pc.get_serial": {
    "id": "system.hardware.pc.hardware.Pc.get_serial",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\pc\\hardware.py",
    "relative_path": "system\\hardware\\pc\\hardware.py",
    "depends_on": [],
    "start_line": 26,
    "end_line": 27,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.pc.hardware.Pc.get_network_info": {
    "id": "system.hardware.pc.hardware.Pc.get_network_info",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\pc\\hardware.py",
    "relative_path": "system\\hardware\\pc\\hardware.py",
    "depends_on": [],
    "start_line": 29,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.pc.hardware.Pc.get_network_type": {
    "id": "system.hardware.pc.hardware.Pc.get_network_type",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\pc\\hardware.py",
    "relative_path": "system\\hardware\\pc\\hardware.py",
    "depends_on": [],
    "start_line": 32,
    "end_line": 33,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.pc.hardware.Pc.get_sim_info": {
    "id": "system.hardware.pc.hardware.Pc.get_sim_info",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\pc\\hardware.py",
    "relative_path": "system\\hardware\\pc\\hardware.py",
    "depends_on": [],
    "start_line": 35,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.pc.hardware.Pc.get_network_strength": {
    "id": "system.hardware.pc.hardware.Pc.get_network_strength",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\pc\\hardware.py",
    "relative_path": "system\\hardware\\pc\\hardware.py",
    "depends_on": [],
    "start_line": 44,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.pc.hardware.Pc.get_current_power_draw": {
    "id": "system.hardware.pc.hardware.Pc.get_current_power_draw",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\pc\\hardware.py",
    "relative_path": "system\\hardware\\pc\\hardware.py",
    "depends_on": [],
    "start_line": 47,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.pc.hardware.Pc.get_som_power_draw": {
    "id": "system.hardware.pc.hardware.Pc.get_som_power_draw",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\pc\\hardware.py",
    "relative_path": "system\\hardware\\pc\\hardware.py",
    "depends_on": [],
    "start_line": 50,
    "end_line": 51,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.pc.hardware.Pc.shutdown": {
    "id": "system.hardware.pc.hardware.Pc.shutdown",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\pc\\hardware.py",
    "relative_path": "system\\hardware\\pc\\hardware.py",
    "depends_on": [],
    "start_line": 53,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.pc.hardware.Pc.set_screen_brightness": {
    "id": "system.hardware.pc.hardware.Pc.set_screen_brightness",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\pc\\hardware.py",
    "relative_path": "system\\hardware\\pc\\hardware.py",
    "depends_on": [],
    "start_line": 56,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.pc.hardware.Pc.get_screen_brightness": {
    "id": "system.hardware.pc.hardware.Pc.get_screen_brightness",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\pc\\hardware.py",
    "relative_path": "system\\hardware\\pc\\hardware.py",
    "depends_on": [],
    "start_line": 59,
    "end_line": 60,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.pc.hardware.Pc.set_power_save": {
    "id": "system.hardware.pc.hardware.Pc.set_power_save",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\pc\\hardware.py",
    "relative_path": "system\\hardware\\pc\\hardware.py",
    "depends_on": [],
    "start_line": 62,
    "end_line": 63,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.pc.hardware.Pc.get_gpu_usage_percent": {
    "id": "system.hardware.pc.hardware.Pc.get_gpu_usage_percent",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\pc\\hardware.py",
    "relative_path": "system\\hardware\\pc\\hardware.py",
    "depends_on": [],
    "start_line": 65,
    "end_line": 66,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.pc.hardware.Pc.get_modem_temperatures": {
    "id": "system.hardware.pc.hardware.Pc.get_modem_temperatures",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\pc\\hardware.py",
    "relative_path": "system\\hardware\\pc\\hardware.py",
    "depends_on": [],
    "start_line": 68,
    "end_line": 69,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.pc.hardware.Pc.get_nvme_temperatures": {
    "id": "system.hardware.pc.hardware.Pc.get_nvme_temperatures",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\pc\\hardware.py",
    "relative_path": "system\\hardware\\pc\\hardware.py",
    "depends_on": [],
    "start_line": 71,
    "end_line": 72,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.pc.hardware.Pc.initialize_hardware": {
    "id": "system.hardware.pc.hardware.Pc.initialize_hardware",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\pc\\hardware.py",
    "relative_path": "system\\hardware\\pc\\hardware.py",
    "depends_on": [],
    "start_line": 74,
    "end_line": 75,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.pc.hardware.Pc.get_networks": {
    "id": "system.hardware.pc.hardware.Pc.get_networks",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\pc\\hardware.py",
    "relative_path": "system\\hardware\\pc\\hardware.py",
    "depends_on": [],
    "start_line": 77,
    "end_line": 78,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_fan_controller.patched_controller": {
    "id": "system.hardware.tests.test_fan_controller.patched_controller",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_fan_controller.py",
    "relative_path": "system\\hardware\\tests\\test_fan_controller.py",
    "depends_on": [],
    "start_line": 7,
    "end_line": 9,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_fan_controller.TestFanController": {
    "id": "system.hardware.tests.test_fan_controller.TestFanController",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_fan_controller.py",
    "relative_path": "system\\hardware\\tests\\test_fan_controller.py",
    "depends_on": [
      "system.hardware.tests.test_fan_controller.patched_controller"
    ],
    "start_line": 11,
    "end_line": 50,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_fan_controller.TestFanController.wind_up": {
    "id": "system.hardware.tests.test_fan_controller.TestFanController.wind_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_fan_controller.py",
    "relative_path": "system\\hardware\\tests\\test_fan_controller.py",
    "depends_on": [],
    "start_line": 12,
    "end_line": 14,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_fan_controller.TestFanController.wind_down": {
    "id": "system.hardware.tests.test_fan_controller.TestFanController.wind_down",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_fan_controller.py",
    "relative_path": "system\\hardware\\tests\\test_fan_controller.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_fan_controller.TestFanController.test_hot_onroad": {
    "id": "system.hardware.tests.test_fan_controller.TestFanController.test_hot_onroad",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_fan_controller.py",
    "relative_path": "system\\hardware\\tests\\test_fan_controller.py",
    "depends_on": [
      "system.hardware.tests.test_fan_controller.patched_controller"
    ],
    "start_line": 21,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_fan_controller.TestFanController.test_offroad_limits": {
    "id": "system.hardware.tests.test_fan_controller.TestFanController.test_offroad_limits",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_fan_controller.py",
    "relative_path": "system\\hardware\\tests\\test_fan_controller.py",
    "depends_on": [
      "system.hardware.tests.test_fan_controller.patched_controller"
    ],
    "start_line": 27,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_fan_controller.TestFanController.test_no_fan_wear": {
    "id": "system.hardware.tests.test_fan_controller.TestFanController.test_no_fan_wear",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_fan_controller.py",
    "relative_path": "system\\hardware\\tests\\test_fan_controller.py",
    "depends_on": [
      "system.hardware.tests.test_fan_controller.patched_controller"
    ],
    "start_line": 33,
    "end_line": 36,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_fan_controller.TestFanController.test_limited": {
    "id": "system.hardware.tests.test_fan_controller.TestFanController.test_limited",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_fan_controller.py",
    "relative_path": "system\\hardware\\tests\\test_fan_controller.py",
    "depends_on": [
      "system.hardware.tests.test_fan_controller.patched_controller"
    ],
    "start_line": 39,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_fan_controller.TestFanController.test_windup_speed": {
    "id": "system.hardware.tests.test_fan_controller.TestFanController.test_windup_speed",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_fan_controller.py",
    "relative_path": "system\\hardware\\tests\\test_fan_controller.py",
    "depends_on": [
      "system.hardware.tests.test_fan_controller.patched_controller"
    ],
    "start_line": 45,
    "end_line": 50,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_power_monitoring.mock_time_monotonic": {
    "id": "system.hardware.tests.test_power_monitoring.mock_time_monotonic",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_power_monitoring.py",
    "relative_path": "system\\hardware\\tests\\test_power_monitoring.py",
    "depends_on": [],
    "start_line": 9,
    "end_line": 12,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_power_monitoring.pm_patch": {
    "id": "system.hardware.tests.test_power_monitoring.pm_patch",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_power_monitoring.py",
    "relative_path": "system\\hardware\\tests\\test_power_monitoring.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_power_monitoring.mock_time": {
    "id": "system.hardware.tests.test_power_monitoring.mock_time",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_power_monitoring.py",
    "relative_path": "system\\hardware\\tests\\test_power_monitoring.py",
    "depends_on": [
      "system.hardware.tests.test_power_monitoring.mock_time_monotonic"
    ],
    "start_line": 26,
    "end_line": 27,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_power_monitoring.TestPowerMonitoring": {
    "id": "system.hardware.tests.test_power_monitoring.TestPowerMonitoring",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_power_monitoring.py",
    "relative_path": "system\\hardware\\tests\\test_power_monitoring.py",
    "depends_on": [
      "system.hardware.tests.test_power_monitoring.pm_patch"
    ],
    "start_line": 30,
    "end_line": 199,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.setup_method": {
    "id": "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_power_monitoring.py",
    "relative_path": "system\\hardware\\tests\\test_power_monitoring.py",
    "depends_on": [],
    "start_line": 31,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_panda_state_present": {
    "id": "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_panda_state_present",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_power_monitoring.py",
    "relative_path": "system\\hardware\\tests\\test_power_monitoring.py",
    "depends_on": [],
    "start_line": 35,
    "end_line": 40,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_offroad_ignition": {
    "id": "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_offroad_ignition",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_power_monitoring.py",
    "relative_path": "system\\hardware\\tests\\test_power_monitoring.py",
    "depends_on": [],
    "start_line": 43,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_offroad_integration_discharging": {
    "id": "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_offroad_integration_discharging",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_power_monitoring.py",
    "relative_path": "system\\hardware\\tests\\test_power_monitoring.py",
    "depends_on": [
      "system.hardware.tests.test_power_monitoring.pm_patch"
    ],
    "start_line": 50,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_car_battery_integration_onroad": {
    "id": "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_car_battery_integration_onroad",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_power_monitoring.py",
    "relative_path": "system\\hardware\\tests\\test_power_monitoring.py",
    "depends_on": [
      "system.hardware.tests.test_power_monitoring.pm_patch"
    ],
    "start_line": 60,
    "end_line": 68,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_car_battery_integration_upper_limit": {
    "id": "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_car_battery_integration_upper_limit",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_power_monitoring.py",
    "relative_path": "system\\hardware\\tests\\test_power_monitoring.py",
    "depends_on": [
      "system.hardware.tests.test_power_monitoring.pm_patch"
    ],
    "start_line": 71,
    "end_line": 79,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_car_battery_integration_offroad": {
    "id": "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_car_battery_integration_offroad",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_power_monitoring.py",
    "relative_path": "system\\hardware\\tests\\test_power_monitoring.py",
    "depends_on": [
      "system.hardware.tests.test_power_monitoring.pm_patch"
    ],
    "start_line": 82,
    "end_line": 90,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_car_battery_integration_lower_limit": {
    "id": "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_car_battery_integration_lower_limit",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_power_monitoring.py",
    "relative_path": "system\\hardware\\tests\\test_power_monitoring.py",
    "depends_on": [
      "system.hardware.tests.test_power_monitoring.pm_patch"
    ],
    "start_line": 93,
    "end_line": 101,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_max_time_offroad": {
    "id": "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_max_time_offroad",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_power_monitoring.py",
    "relative_path": "system\\hardware\\tests\\test_power_monitoring.py",
    "depends_on": [
      "system.hardware.tests.test_power_monitoring.pm_patch"
    ],
    "start_line": 104,
    "end_line": 117,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_car_voltage": {
    "id": "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_car_voltage",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_power_monitoring.py",
    "relative_path": "system\\hardware\\tests\\test_power_monitoring.py",
    "depends_on": [
      "system.hardware.tests.test_power_monitoring.pm_patch"
    ],
    "start_line": 119,
    "end_line": 136,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_disable_power_down": {
    "id": "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_disable_power_down",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_power_monitoring.py",
    "relative_path": "system\\hardware\\tests\\test_power_monitoring.py",
    "depends_on": [
      "system.hardware.tests.test_power_monitoring.pm_patch"
    ],
    "start_line": 139,
    "end_line": 151,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_ignition": {
    "id": "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_ignition",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_power_monitoring.py",
    "relative_path": "system\\hardware\\tests\\test_power_monitoring.py",
    "depends_on": [
      "system.hardware.tests.test_power_monitoring.pm_patch"
    ],
    "start_line": 154,
    "end_line": 165,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_harness_connection": {
    "id": "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_harness_connection",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_power_monitoring.py",
    "relative_path": "system\\hardware\\tests\\test_power_monitoring.py",
    "depends_on": [
      "system.hardware.tests.test_power_monitoring.pm_patch"
    ],
    "start_line": 168,
    "end_line": 180,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_delay_shutdown_time": {
    "id": "system.hardware.tests.test_power_monitoring.TestPowerMonitoring.test_delay_shutdown_time",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tests\\test_power_monitoring.py",
    "relative_path": "system\\hardware\\tests\\test_power_monitoring.py",
    "depends_on": [],
    "start_line": 182,
    "end_line": 199,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.agnos.StreamingDecompressor": {
    "id": "system.hardware.tici.agnos.StreamingDecompressor",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\agnos.py",
    "relative_path": "system\\hardware\\tici\\agnos.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.agnos.StreamingDecompressor.__init__": {
    "id": "system.hardware.tici.agnos.StreamingDecompressor.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\agnos.py",
    "relative_path": "system\\hardware\\tici\\agnos.py",
    "depends_on": [],
    "start_line": 22,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.agnos.StreamingDecompressor.read": {
    "id": "system.hardware.tici.agnos.StreamingDecompressor.read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\agnos.py",
    "relative_path": "system\\hardware\\tici\\agnos.py",
    "depends_on": [],
    "start_line": 31,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.agnos.unsparsify": {
    "id": "system.hardware.tici.agnos.unsparsify",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\agnos.py",
    "relative_path": "system\\hardware\\tici\\agnos.py",
    "depends_on": [
      "system.hardware.tici.agnos.StreamingDecompressor"
    ],
    "start_line": 57,
    "end_line": 88,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.agnos.noop": {
    "id": "system.hardware.tici.agnos.noop",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\agnos.py",
    "relative_path": "system\\hardware\\tici\\agnos.py",
    "depends_on": [
      "system.hardware.tici.agnos.StreamingDecompressor"
    ],
    "start_line": 92,
    "end_line": 94,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.agnos.get_target_slot_number": {
    "id": "system.hardware.tici.agnos.get_target_slot_number",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\agnos.py",
    "relative_path": "system\\hardware\\tici\\agnos.py",
    "depends_on": [],
    "start_line": 97,
    "end_line": 99,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.agnos.slot_number_to_suffix": {
    "id": "system.hardware.tici.agnos.slot_number_to_suffix",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\agnos.py",
    "relative_path": "system\\hardware\\tici\\agnos.py",
    "depends_on": [],
    "start_line": 102,
    "end_line": 104,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.agnos.get_partition_path": {
    "id": "system.hardware.tici.agnos.get_partition_path",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\agnos.py",
    "relative_path": "system\\hardware\\tici\\agnos.py",
    "depends_on": [
      "system.hardware.tici.agnos.slot_number_to_suffix"
    ],
    "start_line": 107,
    "end_line": 113,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.agnos.get_raw_hash": {
    "id": "system.hardware.tici.agnos.get_raw_hash",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\agnos.py",
    "relative_path": "system\\hardware\\tici\\agnos.py",
    "depends_on": [],
    "start_line": 116,
    "end_line": 126,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.agnos.verify_partition": {
    "id": "system.hardware.tici.agnos.verify_partition",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\agnos.py",
    "relative_path": "system\\hardware\\tici\\agnos.py",
    "depends_on": [
      "system.hardware.tici.agnos.get_raw_hash",
      "system.hardware.tici.agnos.get_partition_path"
    ],
    "start_line": 129,
    "end_line": 148,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.agnos.clear_partition_hash": {
    "id": "system.hardware.tici.agnos.clear_partition_hash",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\agnos.py",
    "relative_path": "system\\hardware\\tici\\agnos.py",
    "depends_on": [
      "system.hardware.tici.agnos.get_partition_path"
    ],
    "start_line": 151,
    "end_line": 158,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.agnos.extract_compressed_image": {
    "id": "system.hardware.tici.agnos.extract_compressed_image",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\agnos.py",
    "relative_path": "system\\hardware\\tici\\agnos.py",
    "depends_on": [
      "system.hardware.tici.agnos.noop",
      "system.hardware.tici.agnos.get_partition_path",
      "system.hardware.tici.agnos.unsparsify",
      "system.hardware.tici.agnos.StreamingDecompressor"
    ],
    "start_line": 161,
    "end_line": 187,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.agnos.extract_casync_image": {
    "id": "system.hardware.tici.agnos.extract_casync_image",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\agnos.py",
    "relative_path": "system\\hardware\\tici\\agnos.py",
    "depends_on": [
      "system.hardware.tici.agnos.get_raw_hash",
      "system.hardware.tici.agnos.verify_partition",
      "system.hardware.tici.agnos.get_partition_path"
    ],
    "start_line": 190,
    "end_line": 231,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.agnos.flash_partition": {
    "id": "system.hardware.tici.agnos.flash_partition",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\agnos.py",
    "relative_path": "system\\hardware\\tici\\agnos.py",
    "depends_on": [
      "system.hardware.tici.agnos.extract_casync_image",
      "system.hardware.tici.agnos.verify_partition",
      "system.hardware.tici.agnos.get_partition_path",
      "system.hardware.tici.agnos.clear_partition_hash",
      "system.hardware.tici.agnos.extract_compressed_image"
    ],
    "start_line": 234,
    "end_line": 257,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.agnos.swap": {
    "id": "system.hardware.tici.agnos.swap",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\agnos.py",
    "relative_path": "system\\hardware\\tici\\agnos.py",
    "depends_on": [
      "system.hardware.tici.agnos.clear_partition_hash"
    ],
    "start_line": 260,
    "end_line": 272,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.agnos.flash_agnos_update": {
    "id": "system.hardware.tici.agnos.flash_agnos_update",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\agnos.py",
    "relative_path": "system\\hardware\\tici\\agnos.py",
    "depends_on": [
      "system.hardware.tici.agnos.flash_partition"
    ],
    "start_line": 275,
    "end_line": 301,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.agnos.verify_agnos_update": {
    "id": "system.hardware.tici.agnos.verify_agnos_update",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\agnos.py",
    "relative_path": "system\\hardware\\tici\\agnos.py",
    "depends_on": [
      "system.hardware.tici.agnos.verify_partition"
    ],
    "start_line": 304,
    "end_line": 306,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.amplifier.configs_from_eq_params": {
    "id": "system.hardware.tici.amplifier.configs_from_eq_params",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\amplifier.py",
    "relative_path": "system\\hardware\\tici\\amplifier.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 23,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.amplifier.Amplifier": {
    "id": "system.hardware.tici.amplifier.Amplifier",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\amplifier.py",
    "relative_path": "system\\hardware\\tici\\amplifier.py",
    "depends_on": [],
    "start_line": 102,
    "end_line": 149,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.amplifier.Amplifier.__init__": {
    "id": "system.hardware.tici.amplifier.Amplifier.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\amplifier.py",
    "relative_path": "system\\hardware\\tici\\amplifier.py",
    "depends_on": [],
    "start_line": 106,
    "end_line": 107,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.amplifier.Amplifier._get_shutdown_config": {
    "id": "system.hardware.tici.amplifier.Amplifier._get_shutdown_config",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\amplifier.py",
    "relative_path": "system\\hardware\\tici\\amplifier.py",
    "depends_on": [],
    "start_line": 109,
    "end_line": 110,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.amplifier.Amplifier._set_configs": {
    "id": "system.hardware.tici.amplifier.Amplifier._set_configs",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\amplifier.py",
    "relative_path": "system\\hardware\\tici\\amplifier.py",
    "depends_on": [],
    "start_line": 112,
    "end_line": 123,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.amplifier.Amplifier.set_configs": {
    "id": "system.hardware.tici.amplifier.Amplifier.set_configs",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\amplifier.py",
    "relative_path": "system\\hardware\\tici\\amplifier.py",
    "depends_on": [],
    "start_line": 125,
    "end_line": 137,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.amplifier.Amplifier.set_global_shutdown": {
    "id": "system.hardware.tici.amplifier.Amplifier.set_global_shutdown",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\amplifier.py",
    "relative_path": "system\\hardware\\tici\\amplifier.py",
    "depends_on": [],
    "start_line": 139,
    "end_line": 140,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.amplifier.Amplifier.initialize_configuration": {
    "id": "system.hardware.tici.amplifier.Amplifier.initialize_configuration",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\amplifier.py",
    "relative_path": "system\\hardware\\tici\\amplifier.py",
    "depends_on": [],
    "start_line": 142,
    "end_line": 149,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.esim.post": {
    "id": "system.hardware.tici.esim.post",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\esim.py",
    "relative_path": "system\\hardware\\tici\\esim.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.esim.LPA": {
    "id": "system.hardware.tici.esim.LPA",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\esim.py",
    "relative_path": "system\\hardware\\tici\\esim.py",
    "depends_on": [
      "system.hardware.tici.esim.post"
    ],
    "start_line": 35,
    "end_line": 97,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.esim.LPA.__init__": {
    "id": "system.hardware.tici.esim.LPA.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\esim.py",
    "relative_path": "system\\hardware\\tici\\esim.py",
    "depends_on": [],
    "start_line": 36,
    "end_line": 40,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.esim.LPA.at": {
    "id": "system.hardware.tici.esim.LPA.at",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\esim.py",
    "relative_path": "system\\hardware\\tici\\esim.py",
    "depends_on": [],
    "start_line": 42,
    "end_line": 53,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.esim.LPA.download_ota": {
    "id": "system.hardware.tici.esim.LPA.download_ota",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\esim.py",
    "relative_path": "system\\hardware\\tici\\esim.py",
    "depends_on": [],
    "start_line": 55,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.esim.LPA.download": {
    "id": "system.hardware.tici.esim.LPA.download",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\esim.py",
    "relative_path": "system\\hardware\\tici\\esim.py",
    "depends_on": [
      "system.hardware.tici.esim.post"
    ],
    "start_line": 58,
    "end_line": 84,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.esim.LPA.enable": {
    "id": "system.hardware.tici.esim.LPA.enable",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\esim.py",
    "relative_path": "system\\hardware\\tici\\esim.py",
    "depends_on": [],
    "start_line": 86,
    "end_line": 87,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.esim.LPA.disable": {
    "id": "system.hardware.tici.esim.LPA.disable",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\esim.py",
    "relative_path": "system\\hardware\\tici\\esim.py",
    "depends_on": [],
    "start_line": 89,
    "end_line": 90,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.esim.LPA.delete": {
    "id": "system.hardware.tici.esim.LPA.delete",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\esim.py",
    "relative_path": "system\\hardware\\tici\\esim.py",
    "depends_on": [],
    "start_line": 92,
    "end_line": 93,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.esim.LPA.list_profiles": {
    "id": "system.hardware.tici.esim.LPA.list_profiles",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\esim.py",
    "relative_path": "system\\hardware\\tici\\esim.py",
    "depends_on": [],
    "start_line": 95,
    "end_line": 97,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.HardwareTici": {
    "id": "system.hardware.tici.hardware.HardwareTici",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.h",
    "relative_path": "system\\hardware\\tici\\hardware.h",
    "depends_on": [],
    "start_line": 14,
    "end_line": 112,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class HardwareTici : public HardwareNone {\npublic:\n  static constexpr float MAX_VOLUME = 0.9;\n  static constexpr float MIN_VOLUME = 0.1;\n  static bool TICI() { return true; }\n  static bool AGNOS() { return true; }\n  static std::string get_os_version() {\n    return \"AGNOS \" + util::read_file(\"/VERSION\");\n  }\n\n  static std::string get_name() {\n    std::string model = util::read_file(\"/sys/firmware/devicetree/base/model\");\n    return util::strip(model.substr(std::string(\"comma \").size()));\n  }\n\n  static cereal::InitData::DeviceType get_device_type() {\n    static const std::map<std::string, cereal::InitData::DeviceType> device_map = {\n      {\"tici\", cereal::InitData::DeviceType::TICI},\n      {\"tizi\", cereal::InitData::DeviceType::TIZI},\n      {\"mici\", cereal::InitData::DeviceType::MICI}\n    };\n    auto it = device_map.find(get_name());\n    assert(it != device_map.end());\n    return it->second;\n  }\n\n  static int get_voltage() { return std::atoi(util::read_file(\"/sys/class/hwmon/hwmon1/in1_input\").c_str()); }\n  static int get_current() { return std::atoi(util::read_file(\"/sys/class/hwmon/hwmon1/curr1_input\").c_str()); }\n\n  static std::string get_serial() {\n    static std::string serial(\"\");\n    if (serial.empty()) {\n      std::ifstream stream(\"/proc/cmdline\");\n      std::string cmdline;\n      std::getline(stream, cmdline);\n\n      auto start = cmdline.find(\"serialno=\");\n      if (start == std::string::npos) {\n        serial = \"cccccc\";\n      } else {\n        auto end = cmdline.find(\" \", start + 9);\n        serial = cmdline.substr(start + 9, end - start - 9);\n      }\n    }\n    return serial;\n  }\n\n  static void reboot() { std::system(\"sudo reboot\"); }\n  static void poweroff() { std::system(\"sudo poweroff\"); }\n  static void set_brightness(int percent) {\n    float max = std::stof(util::read_file(\"/sys/class/backlight/panel0-backlight/max_brightness\"));\n    std::ofstream(\"/sys/class/backlight/panel0-backlight/brightness\") << int(percent * (max / 100.0f)) << \"\\n\";\n  }\n  static void set_display_power(bool on) {\n    std::ofstream(\"/sys/class/backlight/panel0-backlight/bl_power\") << (on ? \"0\" : \"4\") << \"\\n\";\n  }\n\n  static void set_ir_power(int percent) {\n    auto device = get_device_type();\n    if (device == cereal::InitData::DeviceType::TICI ||\n        device == cereal::InitData::DeviceType::TIZI) {\n      return;\n    }\n\n    int value = util::map_val(std::clamp(percent, 0, 100), 0, 100, 0, 255);\n    std::ofstream(\"/sys/class/leds/led:switch_2/brightness\") << 0 << \"\\n\";\n    std::ofstream(\"/sys/class/leds/led:torch_2/brightness\") << value << \"\\n\";\n    std::ofstream(\"/sys/class/leds/led:switch_2/brightness\") << value << \"\\n\";\n  }\n\n  static std::map<std::string, std::string> get_init_logs() {\n    std::map<std::string, std::string> ret = {\n      {\"/BUILD\", util::read_file(\"/BUILD\")},\n      {\"lsblk\", util::check_output(\"lsblk -o NAME,SIZE,STATE,VENDOR,MODEL,REV,SERIAL\")},\n      {\"SOM ID\", util::read_file(\"/sys/devices/platform/vendor/vendor:gpio-som-id/som_id\")},\n    };\n\n    std::string bs = util::check_output(\"abctl --boot_slot\");\n    ret[\"boot slot\"] = bs.substr(0, bs.find_first_of(\"\\n\"));\n\n    std::string temp = util::read_file(\"/dev/disk/by-partlabel/ssd\");\n    temp.erase(temp.find_last_not_of(std::string(\"\\0\\r\\n\", 3))+1);\n    ret[\"boot temp\"] = temp;\n\n    // TODO: log something from system and boot\n    for (std::string part : {\"xbl\", \"abl\", \"aop\", \"devcfg\", \"xbl_config\"}) {\n      for (std::string slot : {\"a\", \"b\"}) {\n        std::string partition = part + \"_\" + slot;\n        std::string hash = util::check_output(\"sha256sum /dev/disk/by-partlabel/\" + partition);\n        ret[partition] = hash.substr(0, hash.find_first_of(\" \"));\n      }\n    }\n\n    return ret;\n  }\n\n  static bool get_ssh_enabled() { return Params().getBool(\"SshEnabled\"); }\n  static void set_ssh_enabled(bool enabled) { Params().putBool(\"SshEnabled\", enabled); }\n};\n"
  },
  "system.hardware.tici.hardware.HardwareTici.get_os_version": {
    "id": "system.hardware.tici.hardware.HardwareTici.get_os_version",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.h",
    "relative_path": "system\\hardware\\tici\\hardware.h",
    "depends_on": [],
    "start_line": 20,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  static std::string get_os_version() {\n    return \"AGNOS \" + util::read_file(\"/VERSION\");\n  }\n"
  },
  "system.hardware.tici.hardware.HardwareTici.get_name": {
    "id": "system.hardware.tici.hardware.HardwareTici.get_name",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.h",
    "relative_path": "system\\hardware\\tici\\hardware.h",
    "depends_on": [],
    "start_line": 24,
    "end_line": 27,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  static std::string get_name() {\n    std::string model = util::read_file(\"/sys/firmware/devicetree/base/model\");\n    return util::strip(model.substr(std::string(\"comma \").size()));\n  }\n"
  },
  "system.hardware.tici.hardware.HardwareTici.get_device_type": {
    "id": "system.hardware.tici.hardware.HardwareTici.get_device_type",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.h",
    "relative_path": "system\\hardware\\tici\\hardware.h",
    "depends_on": [],
    "start_line": 29,
    "end_line": 38,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  static cereal::InitData::DeviceType get_device_type() {\n    static const std::map<std::string, cereal::InitData::DeviceType> device_map = {\n      {\"tici\", cereal::InitData::DeviceType::TICI},\n      {\"tizi\", cereal::InitData::DeviceType::TIZI},\n      {\"mici\", cereal::InitData::DeviceType::MICI}\n    };\n    auto it = device_map.find(get_name());\n    assert(it != device_map.end());\n    return it->second;\n  }\n"
  },
  "system.hardware.tici.hardware.HardwareTici.get_serial": {
    "id": "system.hardware.tici.hardware.HardwareTici.get_serial",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.h",
    "relative_path": "system\\hardware\\tici\\hardware.h",
    "depends_on": [],
    "start_line": 43,
    "end_line": 59,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  static std::string get_serial() {\n    static std::string serial(\"\");\n    if (serial.empty()) {\n      std::ifstream stream(\"/proc/cmdline\");\n      std::string cmdline;\n      std::getline(stream, cmdline);\n\n      auto start = cmdline.find(\"serialno=\");\n      if (start == std::string::npos) {\n        serial = \"cccccc\";\n      } else {\n        auto end = cmdline.find(\" \", start + 9);\n        serial = cmdline.substr(start + 9, end - start - 9);\n      }\n    }\n    return serial;\n  }\n"
  },
  "system.hardware.tici.hardware.HardwareTici.set_brightness": {
    "id": "system.hardware.tici.hardware.HardwareTici.set_brightness",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.h",
    "relative_path": "system\\hardware\\tici\\hardware.h",
    "depends_on": [],
    "start_line": 63,
    "end_line": 66,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  static void set_brightness(int percent) {\n    float max = std::stof(util::read_file(\"/sys/class/backlight/panel0-backlight/max_brightness\"));\n    std::ofstream(\"/sys/class/backlight/panel0-backlight/brightness\") << int(percent * (max / 100.0f)) << \"\\n\";\n  }\n"
  },
  "system.hardware.tici.hardware.HardwareTici.set_display_power": {
    "id": "system.hardware.tici.hardware.HardwareTici.set_display_power",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.h",
    "relative_path": "system\\hardware\\tici\\hardware.h",
    "depends_on": [],
    "start_line": 67,
    "end_line": 69,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  static void set_display_power(bool on) {\n    std::ofstream(\"/sys/class/backlight/panel0-backlight/bl_power\") << (on ? \"0\" : \"4\") << \"\\n\";\n  }\n"
  },
  "system.hardware.tici.hardware.HardwareTici.set_ir_power": {
    "id": "system.hardware.tici.hardware.HardwareTici.set_ir_power",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.h",
    "relative_path": "system\\hardware\\tici\\hardware.h",
    "depends_on": [],
    "start_line": 71,
    "end_line": 82,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  static void set_ir_power(int percent) {\n    auto device = get_device_type();\n    if (device == cereal::InitData::DeviceType::TICI ||\n        device == cereal::InitData::DeviceType::TIZI) {\n      return;\n    }\n\n    int value = util::map_val(std::clamp(percent, 0, 100), 0, 100, 0, 255);\n    std::ofstream(\"/sys/class/leds/led:switch_2/brightness\") << 0 << \"\\n\";\n    std::ofstream(\"/sys/class/leds/led:torch_2/brightness\") << value << \"\\n\";\n    std::ofstream(\"/sys/class/leds/led:switch_2/brightness\") << value << \"\\n\";\n  }\n"
  },
  "system.hardware.tici.hardware.HardwareTici.get_init_logs": {
    "id": "system.hardware.tici.hardware.HardwareTici.get_init_logs",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.h",
    "relative_path": "system\\hardware\\tici\\hardware.h",
    "depends_on": [],
    "start_line": 84,
    "end_line": 108,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  static std::map<std::string, std::string> get_init_logs() {\n    std::map<std::string, std::string> ret = {\n      {\"/BUILD\", util::read_file(\"/BUILD\")},\n      {\"lsblk\", util::check_output(\"lsblk -o NAME,SIZE,STATE,VENDOR,MODEL,REV,SERIAL\")},\n      {\"SOM ID\", util::read_file(\"/sys/devices/platform/vendor/vendor:gpio-som-id/som_id\")},\n    };\n\n    std::string bs = util::check_output(\"abctl --boot_slot\");\n    ret[\"boot slot\"] = bs.substr(0, bs.find_first_of(\"\\n\"));\n\n    std::string temp = util::read_file(\"/dev/disk/by-partlabel/ssd\");\n    temp.erase(temp.find_last_not_of(std::string(\"\\0\\r\\n\", 3))+1);\n    ret[\"boot temp\"] = temp;\n\n    // TODO: log something from system and boot\n    for (std::string part : {\"xbl\", \"abl\", \"aop\", \"devcfg\", \"xbl_config\"}) {\n      for (std::string slot : {\"a\", \"b\"}) {\n        std::string partition = part + \"_\" + slot;\n        std::string hash = util::check_output(\"sha256sum /dev/disk/by-partlabel/\" + partition);\n        ret[partition] = hash.substr(0, hash.find_first_of(\" \"));\n      }\n    }\n\n    return ret;\n  }\n"
  },
  "system.hardware.tici.hardware.MM_MODEM_STATE": {
    "id": "system.hardware.tici.hardware.MM_MODEM_STATE",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 31,
    "end_line": 44,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.NMMetered": {
    "id": "system.hardware.tici.hardware.NMMetered",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 46,
    "end_line": 51,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.sudo_write": {
    "id": "system.hardware.tici.hardware.sudo_write",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 64,
    "end_line": 75,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.sudo_read": {
    "id": "system.hardware.tici.hardware.sudo_read",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 77,
    "end_line": 81,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.affine_irq": {
    "id": "system.hardware.tici.hardware.affine_irq",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [
      "system.hardware.tici.hardware.sudo_write"
    ],
    "start_line": 83,
    "end_line": 90,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.get_device_type": {
    "id": "system.hardware.tici.hardware.get_device_type",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 93,
    "end_line": 97,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici": {
    "id": "system.hardware.tici.hardware.Tici",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [
      "system.hardware.tici.hardware.MM_MODEM_STATE",
      "system.hardware.tici.hardware.sudo_write",
      "system.hardware.tici.hardware.get_device_type",
      "system.hardware.tici.hardware.sudo_read",
      "system.hardware.tici.hardware.NMMetered",
      "system.hardware.tici.hardware.affine_irq"
    ],
    "start_line": 99,
    "end_line": 601,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.bus": {
    "id": "system.hardware.tici.hardware.Tici.bus",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 101,
    "end_line": 103,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.nm": {
    "id": "system.hardware.tici.hardware.Tici.nm",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 106,
    "end_line": 107,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.mm": {
    "id": "system.hardware.tici.hardware.Tici.mm",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 110,
    "end_line": 111,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.amplifier": {
    "id": "system.hardware.tici.hardware.Tici.amplifier",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 114,
    "end_line": 117,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.get_os_version": {
    "id": "system.hardware.tici.hardware.Tici.get_os_version",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 119,
    "end_line": 121,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.get_device_type": {
    "id": "system.hardware.tici.hardware.Tici.get_device_type",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [
      "system.hardware.tici.hardware.get_device_type"
    ],
    "start_line": 123,
    "end_line": 124,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.reboot": {
    "id": "system.hardware.tici.hardware.Tici.reboot",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 126,
    "end_line": 127,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.uninstall": {
    "id": "system.hardware.tici.hardware.Tici.uninstall",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 129,
    "end_line": 132,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.get_serial": {
    "id": "system.hardware.tici.hardware.Tici.get_serial",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 134,
    "end_line": 135,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.get_network_type": {
    "id": "system.hardware.tici.hardware.Tici.get_network_type",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 137,
    "end_line": 164,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.get_modem": {
    "id": "system.hardware.tici.hardware.Tici.get_modem",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 166,
    "end_line": 169,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.get_wlan": {
    "id": "system.hardware.tici.hardware.Tici.get_wlan",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 171,
    "end_line": 173,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.get_wwan": {
    "id": "system.hardware.tici.hardware.Tici.get_wwan",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 175,
    "end_line": 177,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.get_sim_info": {
    "id": "system.hardware.tici.hardware.Tici.get_sim_info",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [
      "system.hardware.tici.hardware.MM_MODEM_STATE"
    ],
    "start_line": 179,
    "end_line": 199,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.get_imei": {
    "id": "system.hardware.tici.hardware.Tici.get_imei",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 201,
    "end_line": 205,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.get_network_info": {
    "id": "system.hardware.tici.hardware.Tici.get_network_info",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [
      "system.hardware.tici.hardware.MM_MODEM_STATE"
    ],
    "start_line": 207,
    "end_line": 237,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.parse_strength": {
    "id": "system.hardware.tici.hardware.Tici.parse_strength",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 239,
    "end_line": 247,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.get_network_strength": {
    "id": "system.hardware.tici.hardware.Tici.get_network_strength",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 249,
    "end_line": 269,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.get_network_metered": {
    "id": "system.hardware.tici.hardware.Tici.get_network_metered",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [
      "system.hardware.tici.hardware.NMMetered"
    ],
    "start_line": 271,
    "end_line": 290,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.get_modem_version": {
    "id": "system.hardware.tici.hardware.Tici.get_modem_version",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 292,
    "end_line": 297,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.get_modem_temperatures": {
    "id": "system.hardware.tici.hardware.Tici.get_modem_temperatures",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 299,
    "end_line": 306,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.get_nvme_temperatures": {
    "id": "system.hardware.tici.hardware.Tici.get_nvme_temperatures",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 308,
    "end_line": 316,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.get_current_power_draw": {
    "id": "system.hardware.tici.hardware.Tici.get_current_power_draw",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 318,
    "end_line": 319,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.get_som_power_draw": {
    "id": "system.hardware.tici.hardware.Tici.get_som_power_draw",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 321,
    "end_line": 322,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.shutdown": {
    "id": "system.hardware.tici.hardware.Tici.shutdown",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 324,
    "end_line": 325,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.get_thermal_config": {
    "id": "system.hardware.tici.hardware.Tici.get_thermal_config",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 327,
    "end_line": 341,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.set_display_power": {
    "id": "system.hardware.tici.hardware.Tici.set_display_power",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 343,
    "end_line": 348,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.set_screen_brightness": {
    "id": "system.hardware.tici.hardware.Tici.set_screen_brightness",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 350,
    "end_line": 359,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.get_screen_brightness": {
    "id": "system.hardware.tici.hardware.Tici.get_screen_brightness",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 361,
    "end_line": 369,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.set_power_save": {
    "id": "system.hardware.tici.hardware.Tici.set_power_save",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [
      "system.hardware.tici.hardware.affine_irq",
      "system.hardware.tici.hardware.sudo_write"
    ],
    "start_line": 371,
    "end_line": 399,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.get_gpu_usage_percent": {
    "id": "system.hardware.tici.hardware.Tici.get_gpu_usage_percent",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 401,
    "end_line": 407,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.initialize_hardware": {
    "id": "system.hardware.tici.hardware.Tici.initialize_hardware",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [
      "system.hardware.tici.hardware.affine_irq",
      "system.hardware.tici.hardware.sudo_write"
    ],
    "start_line": 409,
    "end_line": 460,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.configure_modem": {
    "id": "system.hardware.tici.hardware.Tici.configure_modem",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 462,
    "end_line": 528,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.get_networks": {
    "id": "system.hardware.tici.hardware.Tici.get_networks",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 530,
    "end_line": 555,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.get_modem_data_usage": {
    "id": "system.hardware.tici.hardware.Tici.get_modem_data_usage",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 557,
    "end_line": 571,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.has_internal_panda": {
    "id": "system.hardware.tici.hardware.Tici.has_internal_panda",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 573,
    "end_line": 574,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.reset_internal_panda": {
    "id": "system.hardware.tici.hardware.Tici.reset_internal_panda",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 576,
    "end_line": 583,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.recover_internal_panda": {
    "id": "system.hardware.tici.hardware.Tici.recover_internal_panda",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [],
    "start_line": 585,
    "end_line": 594,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.hardware.Tici.booted": {
    "id": "system.hardware.tici.hardware.Tici.booted",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\hardware.py",
    "relative_path": "system\\hardware\\tici\\hardware.py",
    "depends_on": [
      "system.hardware.tici.hardware.sudo_read"
    ],
    "start_line": 596,
    "end_line": 601,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.iwlist.scan": {
    "id": "system.hardware.tici.iwlist.scan",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\iwlist.py",
    "relative_path": "system\\hardware\\tici\\iwlist.py",
    "depends_on": [],
    "start_line": 4,
    "end_line": 35,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.pins.GPIO": {
    "id": "system.hardware.tici.pins.GPIO",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\pins.py",
    "relative_path": "system\\hardware\\tici\\pins.py",
    "depends_on": [],
    "start_line": 4,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.power_monitor.read_power": {
    "id": "system.hardware.tici.power_monitor.read_power",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\power_monitor.py",
    "relative_path": "system\\hardware\\tici\\power_monitor.py",
    "depends_on": [],
    "start_line": 12,
    "end_line": 14,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.power_monitor.sample_power": {
    "id": "system.hardware.tici.power_monitor.sample_power",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\power_monitor.py",
    "relative_path": "system\\hardware\\tici\\power_monitor.py",
    "depends_on": [
      "system.hardware.tici.power_monitor.read_power"
    ],
    "start_line": 16,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.power_monitor.get_power": {
    "id": "system.hardware.tici.power_monitor.get_power",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\power_monitor.py",
    "relative_path": "system\\hardware\\tici\\power_monitor.py",
    "depends_on": [
      "system.hardware.tici.power_monitor.sample_power"
    ],
    "start_line": 26,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.power_monitor.wait_for_power": {
    "id": "system.hardware.tici.power_monitor.wait_for_power",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\power_monitor.py",
    "relative_path": "system\\hardware\\tici\\power_monitor.py",
    "depends_on": [
      "system.hardware.tici.power_monitor.get_power"
    ],
    "start_line": 30,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.tests.compare_casync_manifest.get_chunk_download_size": {
    "id": "system.hardware.tici.tests.compare_casync_manifest.get_chunk_download_size",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\tests\\compare_casync_manifest.py",
    "relative_path": "system\\hardware\\tici\\tests\\compare_casync_manifest.py",
    "depends_on": [],
    "start_line": 13,
    "end_line": 21,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.tests.test_agnos_updater.TestAgnosUpdater": {
    "id": "system.hardware.tici.tests.test_agnos_updater.TestAgnosUpdater",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\tests\\test_agnos_updater.py",
    "relative_path": "system\\hardware\\tici\\tests\\test_agnos_updater.py",
    "depends_on": [],
    "start_line": 9,
    "end_line": 20,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.tests.test_agnos_updater.TestAgnosUpdater.test_manifest": {
    "id": "system.hardware.tici.tests.test_agnos_updater.TestAgnosUpdater.test_manifest",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\tests\\test_agnos_updater.py",
    "relative_path": "system\\hardware\\tici\\tests\\test_agnos_updater.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 20,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.tests.test_amplifier.TestAmplifier": {
    "id": "system.hardware.tici.tests.test_amplifier.TestAmplifier",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\tests\\test_amplifier.py",
    "relative_path": "system\\hardware\\tici\\tests\\test_amplifier.py",
    "depends_on": [],
    "start_line": 12,
    "end_line": 70,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.tests.test_amplifier.TestAmplifier.setup_class": {
    "id": "system.hardware.tici.tests.test_amplifier.TestAmplifier.setup_class",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\tests\\test_amplifier.py",
    "relative_path": "system\\hardware\\tici\\tests\\test_amplifier.py",
    "depends_on": [],
    "start_line": 15,
    "end_line": 17,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.tests.test_amplifier.TestAmplifier.setup_method": {
    "id": "system.hardware.tici.tests.test_amplifier.TestAmplifier.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\tests\\test_amplifier.py",
    "relative_path": "system\\hardware\\tici\\tests\\test_amplifier.py",
    "depends_on": [],
    "start_line": 19,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.tests.test_amplifier.TestAmplifier.teardown_method": {
    "id": "system.hardware.tici.tests.test_amplifier.TestAmplifier.teardown_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\tests\\test_amplifier.py",
    "relative_path": "system\\hardware\\tici\\tests\\test_amplifier.py",
    "depends_on": [],
    "start_line": 27,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.tests.test_amplifier.TestAmplifier._check_for_i2c_errors": {
    "id": "system.hardware.tici.tests.test_amplifier.TestAmplifier._check_for_i2c_errors",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\tests\\test_amplifier.py",
    "relative_path": "system\\hardware\\tici\\tests\\test_amplifier.py",
    "depends_on": [],
    "start_line": 30,
    "end_line": 38,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.tests.test_amplifier.TestAmplifier.test_init": {
    "id": "system.hardware.tici.tests.test_amplifier.TestAmplifier.test_init",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\tests\\test_amplifier.py",
    "relative_path": "system\\hardware\\tici\\tests\\test_amplifier.py",
    "depends_on": [],
    "start_line": 40,
    "end_line": 44,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.tests.test_amplifier.TestAmplifier.test_shutdown": {
    "id": "system.hardware.tici.tests.test_amplifier.TestAmplifier.test_shutdown",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\tests\\test_amplifier.py",
    "relative_path": "system\\hardware\\tici\\tests\\test_amplifier.py",
    "depends_on": [],
    "start_line": 46,
    "end_line": 53,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.tests.test_amplifier.TestAmplifier.test_init_while_siren_play": {
    "id": "system.hardware.tici.tests.test_amplifier.TestAmplifier.test_init_while_siren_play",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\tests\\test_amplifier.py",
    "relative_path": "system\\hardware\\tici\\tests\\test_amplifier.py",
    "depends_on": [],
    "start_line": 55,
    "end_line": 70,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.tests.test_power_draw.Proc": {
    "id": "system.hardware.tici.tests.test_power_draw.Proc",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\tests\\test_power_draw.py",
    "relative_path": "system\\hardware\\tici\\tests\\test_power_draw.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.tests.test_power_draw.Proc.name": {
    "id": "system.hardware.tici.tests.test_power_draw.Proc.name",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\tests\\test_power_draw.py",
    "relative_path": "system\\hardware\\tici\\tests\\test_power_draw.py",
    "depends_on": [],
    "start_line": 29,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.tests.test_power_draw.TestPowerDraw": {
    "id": "system.hardware.tici.tests.test_power_draw.TestPowerDraw",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\tests\\test_power_draw.py",
    "relative_path": "system\\hardware\\tici\\tests\\test_power_draw.py",
    "depends_on": [],
    "start_line": 42,
    "end_line": 128,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.tests.test_power_draw.TestPowerDraw.setup_method": {
    "id": "system.hardware.tici.tests.test_power_draw.TestPowerDraw.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\tests\\test_power_draw.py",
    "relative_path": "system\\hardware\\tici\\tests\\test_power_draw.py",
    "depends_on": [],
    "start_line": 44,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.tests.test_power_draw.TestPowerDraw.teardown_method": {
    "id": "system.hardware.tici.tests.test_power_draw.TestPowerDraw.teardown_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\tests\\test_power_draw.py",
    "relative_path": "system\\hardware\\tici\\tests\\test_power_draw.py",
    "depends_on": [],
    "start_line": 50,
    "end_line": 51,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.tests.test_power_draw.TestPowerDraw.get_expected_messages": {
    "id": "system.hardware.tici.tests.test_power_draw.TestPowerDraw.get_expected_messages",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\tests\\test_power_draw.py",
    "relative_path": "system\\hardware\\tici\\tests\\test_power_draw.py",
    "depends_on": [],
    "start_line": 53,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.tests.test_power_draw.TestPowerDraw.valid_msg_count": {
    "id": "system.hardware.tici.tests.test_power_draw.TestPowerDraw.valid_msg_count",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\tests\\test_power_draw.py",
    "relative_path": "system\\hardware\\tici\\tests\\test_power_draw.py",
    "depends_on": [],
    "start_line": 56,
    "end_line": 59,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.tests.test_power_draw.TestPowerDraw.valid_power_draw": {
    "id": "system.hardware.tici.tests.test_power_draw.TestPowerDraw.valid_power_draw",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\tests\\test_power_draw.py",
    "relative_path": "system\\hardware\\tici\\tests\\test_power_draw.py",
    "depends_on": [],
    "start_line": 61,
    "end_line": 62,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.tests.test_power_draw.TestPowerDraw.tabulate_msg_counts": {
    "id": "system.hardware.tici.tests.test_power_draw.TestPowerDraw.tabulate_msg_counts",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\tests\\test_power_draw.py",
    "relative_path": "system\\hardware\\tici\\tests\\test_power_draw.py",
    "depends_on": [],
    "start_line": 64,
    "end_line": 69,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.tests.test_power_draw.TestPowerDraw.get_power_with_warmup_for_target": {
    "id": "system.hardware.tici.tests.test_power_draw.TestPowerDraw.get_power_with_warmup_for_target",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\tests\\test_power_draw.py",
    "relative_path": "system\\hardware\\tici\\tests\\test_power_draw.py",
    "depends_on": [],
    "start_line": 71,
    "end_line": 96,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.hardware.tici.tests.test_power_draw.TestPowerDraw.test_camera_procs": {
    "id": "system.hardware.tici.tests.test_power_draw.TestPowerDraw.test_camera_procs",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\hardware\\tici\\tests\\test_power_draw.py",
    "relative_path": "system\\hardware\\tici\\tests\\test_power_draw.py",
    "depends_on": [],
    "start_line": 99,
    "end_line": 128,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.logcatd.logcatd_systemd.main": {
    "id": "system.logcatd.logcatd_systemd.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\logcatd\\logcatd_systemd.cc",
    "relative_path": "system\\logcatd\\logcatd_systemd.cc",
    "depends_on": [],
    "start_line": 15,
    "end_line": 75,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int main(int argc, char *argv[]) {\n\n  PubMaster pm({\"androidLog\"});\n\n  sd_journal *journal;\n  int err = sd_journal_open(&journal, 0);\n  assert(err >= 0);\n  err = sd_journal_get_fd(journal); // needed so sd_journal_wait() works properly if files rotate\n  assert(err >= 0);\n  err = sd_journal_seek_tail(journal);\n  assert(err >= 0);\n\n  // workaround for bug https://github.com/systemd/systemd/issues/9934\n  // call sd_journal_previous_skip after sd_journal_seek_tail (like journalctl -f does) to makes things work.\n  sd_journal_previous_skip(journal, 1);\n\n  while (!do_exit) {\n    err = sd_journal_next(journal);\n    assert(err >= 0);\n\n    // Wait for new message if we didn't receive anything\n    if (err == 0) {\n      err = sd_journal_wait(journal, 1000 * 1000);\n      assert(err >= 0);\n      continue; // Try again\n    }\n\n    uint64_t timestamp = 0;\n    err = sd_journal_get_realtime_usec(journal, &timestamp);\n    assert(err >= 0);\n\n    const void *data;\n    size_t length;\n    std::map<std::string, std::string> kv;\n\n    SD_JOURNAL_FOREACH_DATA(journal, data, length) {\n      std::string str((char*)data, length);\n\n      // Split \"KEY=VALUE\"\" on \"=\" and put in map\n      std::size_t found = str.find(\"=\");\n      if (found != std::string::npos) {\n        kv[str.substr(0, found)] = str.substr(found + 1, std::string::npos);\n      }\n    }\n\n    MessageBuilder msg;\n\n    // Build message\n    auto androidEntry = msg.initEvent().initAndroidLog();\n    androidEntry.setTs(timestamp);\n    androidEntry.setMessage(json11::Json(kv).dump());\n    if (kv.count(\"_PID\")) androidEntry.setPid(std::atoi(kv[\"_PID\"].c_str()));\n    if (kv.count(\"PRIORITY\")) androidEntry.setPriority(std::atoi(kv[\"PRIORITY\"].c_str()));\n    if (kv.count(\"SYSLOG_IDENTIFIER\")) androidEntry.setTag(kv[\"SYSLOG_IDENTIFIER\"]);\n\n    pm.send(\"androidLog\", msg);\n  }\n\n  sd_journal_close(journal);\n  return 0;\n}\n"
  },
  "system.loggerd.bootlog.build_boot_log": {
    "id": "system.loggerd.bootlog.build_boot_log",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\bootlog.cc",
    "relative_path": "system\\loggerd\\bootlog.cc",
    "depends_on": [],
    "start_line": 11,
    "end_line": 50,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static kj::Array<capnp::word> build_boot_log() {\n  MessageBuilder msg;\n  auto boot = msg.initEvent().initBoot();\n\n  boot.setWallTimeNanos(nanos_since_epoch());\n\n  std::string pstore = \"/sys/fs/pstore\";\n  std::map<std::string, std::string> pstore_map = util::read_files_in_dir(pstore);\n\n  int i = 0;\n  auto lpstore = boot.initPstore().initEntries(pstore_map.size());\n  for (auto& kv : pstore_map) {\n    auto lentry = lpstore[i];\n    lentry.setKey(kv.first);\n    lentry.setValue(capnp::Data::Reader((const kj::byte*)kv.second.data(), kv.second.size()));\n    i++;\n  }\n\n  // Gather output of commands\n  std::vector<std::string> bootlog_commands = {\n    \"[ -x \\\"$(command -v journalctl)\\\" ] && journalctl -o short-monotonic\",\n  };\n\n  if (Hardware::TICI()) {\n    bootlog_commands.push_back(\"[ -e /dev/nvme0 ] && sudo nvme smart-log --output-format=json /dev/nvme0\");\n  }\n\n  auto commands = boot.initCommands().initEntries(bootlog_commands.size());\n  for (int j = 0; j < bootlog_commands.size(); j++) {\n    auto lentry = commands[j];\n\n    lentry.setKey(bootlog_commands[j]);\n\n    const std::string result = util::check_output(bootlog_commands[j]);\n    lentry.setValue(capnp::Data::Reader((const kj::byte*)result.data(), result.size()));\n  }\n\n  boot.setLaunchLog(util::read_file(\"/tmp/launch_log\"));\n  return capnp::messageToFlatArray(msg);\n}\n"
  },
  "system.loggerd.bootlog.main": {
    "id": "system.loggerd.bootlog.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\bootlog.cc",
    "relative_path": "system\\loggerd\\bootlog.cc",
    "depends_on": [],
    "start_line": 52,
    "end_line": 71,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int main(int argc, char** argv) {\n  const std::string id = logger_get_identifier(\"BootCount\");\n  const std::string path = Path::log_root() + \"/boot/\" + id + \".zst\";\n  LOGW(\"bootlog to %s\", path.c_str());\n\n  // Open bootlog\n  bool r = util::create_directories(Path::log_root() + \"/boot/\", 0775);\n  assert(r);\n\n  ZstdFileWriter file(path, LOG_COMPRESSION_LEVEL);\n  // Write initdata\n  file.write(logger_build_init_data().asBytes());\n  // Write bootlog\n  file.write(build_boot_log().asBytes());\n\n  // Write out bootlog param to match routes with bootlog\n  Params().put(\"CurrentBootlog\", id.c_str());\n\n  return 0;\n}\n"
  },
  "system.loggerd.config.get_available_percent": {
    "id": "system.loggerd.config.get_available_percent",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\config.py",
    "relative_path": "system\\loggerd\\config.py",
    "depends_on": [],
    "start_line": 12,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.config.get_available_bytes": {
    "id": "system.loggerd.config.get_available_bytes",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\config.py",
    "relative_path": "system\\loggerd\\config.py",
    "depends_on": [],
    "start_line": 22,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.deleter.has_preserve_xattr": {
    "id": "system.loggerd.deleter.has_preserve_xattr",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\deleter.py",
    "relative_path": "system\\loggerd\\deleter.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.deleter.get_preserved_segments": {
    "id": "system.loggerd.deleter.get_preserved_segments",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\deleter.py",
    "relative_path": "system\\loggerd\\deleter.py",
    "depends_on": [
      "system.loggerd.deleter.has_preserve_xattr"
    ],
    "start_line": 25,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.deleter.deleter_thread": {
    "id": "system.loggerd.deleter.deleter_thread",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\deleter.py",
    "relative_path": "system\\loggerd\\deleter.py",
    "depends_on": [
      "system.loggerd.deleter.get_preserved_segments"
    ],
    "start_line": 48,
    "end_line": 72,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.deleter.main": {
    "id": "system.loggerd.deleter.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\deleter.py",
    "relative_path": "system\\loggerd\\deleter.py",
    "depends_on": [
      "system.loggerd.deleter.deleter_thread"
    ],
    "start_line": 75,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.encoderd.sync_encoders": {
    "id": "system.loggerd.encoderd.sync_encoders",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\encoderd.cc",
    "relative_path": "system\\loggerd\\encoderd.cc",
    "depends_on": [],
    "start_line": 27,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "bool sync_encoders(EncoderdState *s, VisionStreamType cam_type, uint32_t frame_id) {\n  if (s->camera_synced[cam_type]) return true;\n\n  if (s->max_waiting > 1 && s->encoders_ready != s->max_waiting) {\n    // add a small margin to the start frame id in case one of the encoders already dropped the next frame\n    update_max_atomic(s->start_frame_id, frame_id + 2);\n    if (std::exchange(s->camera_ready[cam_type], true) == false) {\n      ++s->encoders_ready;\n      LOGD(\"camera %d encoder ready\", cam_type);\n    }\n    return false;\n  } else {\n    if (s->max_waiting == 1) update_max_atomic(s->start_frame_id, frame_id);\n    bool synced = frame_id >= s->start_frame_id;\n    s->camera_synced[cam_type] = synced;\n    if (!synced) LOGD(\"camera %d waiting for frame %d, cur %d\", cam_type, (int)s->start_frame_id, frame_id);\n    return synced;\n  }\n}\n"
  },
  "system.loggerd.encoderd.encoder_thread": {
    "id": "system.loggerd.encoderd.encoder_thread",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\encoderd.cc",
    "relative_path": "system\\loggerd\\encoderd.cc",
    "depends_on": [],
    "start_line": 48,
    "end_line": 125,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void encoder_thread(EncoderdState *s, const LogCameraInfo &cam_info) {\n  util::set_thread_name(cam_info.thread_name);\n\n  std::vector<std::unique_ptr<Encoder>> encoders;\n  VisionIpcClient vipc_client = VisionIpcClient(\"camerad\", cam_info.stream_type, false);\n\n  std::unique_ptr<JpegEncoder> jpeg_encoder;\n\n  int cur_seg = 0;\n  while (!do_exit) {\n    if (!vipc_client.connect(false)) {\n      util::sleep_for(5);\n      continue;\n    }\n\n    // init encoders\n    if (encoders.empty()) {\n      const VisionBuf &buf_info = vipc_client.buffers[0];\n      LOGW(\"encoder %s init %zux%zu\", cam_info.thread_name, buf_info.width, buf_info.height);\n      assert(buf_info.width > 0 && buf_info.height > 0);\n\n      for (const auto &encoder_info : cam_info.encoder_infos) {\n        auto &e = encoders.emplace_back(new Encoder(encoder_info, buf_info.width, buf_info.height));\n        e->encoder_open();\n      }\n\n      // Only one thumbnail can be generated per camera stream\n      if (auto thumbnail_name = cam_info.encoder_infos[0].thumbnail_name) {\n        jpeg_encoder = std::make_unique<JpegEncoder>(thumbnail_name, buf_info.width / 4, buf_info.height / 4);\n      }\n    }\n\n    bool lagging = false;\n    while (!do_exit) {\n      VisionIpcBufExtra extra;\n      VisionBuf* buf = vipc_client.recv(&extra);\n      if (buf == nullptr) continue;\n\n      // detect loop around and drop the frames\n      if (buf->get_frame_id() != extra.frame_id) {\n        if (!lagging) {\n          LOGE(\"encoder %s lag  buffer id: %\" PRIu64 \" extra id: %d\", cam_info.thread_name, buf->get_frame_id(), extra.frame_id);\n          lagging = true;\n        }\n        continue;\n      }\n      lagging = false;\n\n      if (!sync_encoders(s, cam_info.stream_type, extra.frame_id)) {\n        continue;\n      }\n      if (do_exit) break;\n\n      // do rotation if required\n      const int frames_per_seg = SEGMENT_LENGTH * MAIN_FPS;\n      if (cur_seg >= 0 && extra.frame_id >= ((cur_seg + 1) * frames_per_seg) + s->start_frame_id) {\n        for (auto &e : encoders) {\n          e->encoder_close();\n          e->encoder_open();\n        }\n        ++cur_seg;\n      }\n\n      // encode a frame\n      for (int i = 0; i < encoders.size(); ++i) {\n        int out_id = encoders[i]->encode_frame(buf, &extra);\n\n        if (out_id == -1) {\n          LOGE(\"Failed to encode frame. frame_id: %d\", extra.frame_id);\n        }\n      }\n\n      if (jpeg_encoder && (extra.frame_id % 1200 == 100)) {\n        jpeg_encoder->pushThumbnail(buf, extra);\n      }\n    }\n  }\n}\n"
  },
  "system.loggerd.encoderd.main": {
    "id": "system.loggerd.encoderd.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\encoderd.cc",
    "relative_path": "system\\loggerd\\encoderd.cc",
    "depends_on": [],
    "start_line": 154,
    "end_line": 173,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int main(int argc, char* argv[]) {\n  if (!Hardware::PC()) {\n    int ret;\n    ret = util::set_realtime_priority(52);\n    assert(ret == 0);\n    ret = util::set_core_affinity({3});\n    assert(ret == 0);\n  }\n  if (argc > 1) {\n    std::string arg1(argv[1]);\n    if (arg1 == \"--stream\") {\n      encoderd_thread(stream_cameras_logged);\n    } else {\n      LOGE(\"Argument '%s' is not supported\", arg1.c_str());\n    }\n  } else {\n    encoderd_thread(cameras_logged);\n  }\n  return 0;\n}\n"
  },
  "system.loggerd.logger.logger_build_init_data": {
    "id": "system.loggerd.logger.logger_build_init_data",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\logger.cc",
    "relative_path": "system\\loggerd\\logger.cc",
    "depends_on": [],
    "start_line": 15,
    "end_line": 94,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "kj::Array<capnp::word> logger_build_init_data() {\n  uint64_t wall_time = nanos_since_epoch();\n\n  MessageBuilder msg;\n  auto init = msg.initEvent().initInitData();\n\n  init.setWallTimeNanos(wall_time);\n  init.setVersion(COMMA_VERSION);\n  init.setDirty(!getenv(\"CLEAN\"));\n  init.setDeviceType(Hardware::get_device_type());\n\n  // log kernel args\n  std::ifstream cmdline_stream(\"/proc/cmdline\");\n  std::vector<std::string> kernel_args;\n  std::string buf;\n  while (cmdline_stream >> buf) {\n    kernel_args.push_back(buf);\n  }\n\n  auto lkernel_args = init.initKernelArgs(kernel_args.size());\n  for (int i=0; i<kernel_args.size(); i++) {\n    lkernel_args.set(i, kernel_args[i]);\n  }\n\n  init.setKernelVersion(util::read_file(\"/proc/version\"));\n  init.setOsVersion(util::read_file(\"/VERSION\"));\n\n  // log params\n  Params params(util::getenv(\"PARAMS_COPY_PATH\", \"\"));\n  std::map<std::string, std::string> params_map = params.readAll();\n\n  init.setGitCommit(params_map[\"GitCommit\"]);\n  init.setGitCommitDate(params_map[\"GitCommitDate\"]);\n  init.setGitBranch(params_map[\"GitBranch\"]);\n  init.setGitRemote(params_map[\"GitRemote\"]);\n  init.setPassive(false);\n  init.setDongleId(params_map[\"DongleId\"]);\n\n  // for prebuilt branches\n  init.setGitSrcCommit(util::read_file(\"../../git_src_commit\"));\n  init.setGitSrcCommitDate(util::read_file(\"../../git_src_commit_date\"));\n\n  auto lparams = init.initParams().initEntries(params_map.size());\n  int j = 0;\n  for (auto& [key, value] : params_map) {\n    auto lentry = lparams[j];\n    lentry.setKey(key);\n    if ( !(params.getKeyType(key) & DONT_LOG) ) {\n      lentry.setValue(capnp::Data::Reader((const kj::byte*)value.data(), value.size()));\n    }\n    j++;\n  }\n\n  // log commands\n  std::vector<std::string> log_commands = {\n    \"df -h\",  // usage for all filesystems\n  };\n\n  auto hw_logs = Hardware::get_init_logs();\n\n  auto commands = init.initCommands().initEntries(log_commands.size() + hw_logs.size());\n  for (int i = 0; i < log_commands.size(); i++) {\n    auto lentry = commands[i];\n\n    lentry.setKey(log_commands[i]);\n\n    const std::string result = util::check_output(log_commands[i]);\n    lentry.setValue(capnp::Data::Reader((const kj::byte*)result.data(), result.size()));\n  }\n\n  int i = log_commands.size();\n  for (auto &[key, value] : hw_logs) {\n    auto lentry = commands[i];\n    lentry.setKey(key);\n    lentry.setValue(capnp::Data::Reader((const kj::byte*)value.data(), value.size()));\n    i++;\n  }\n\n  return capnp::messageToFlatArray(msg);\n}\n"
  },
  "system.loggerd.logger.logger_get_identifier": {
    "id": "system.loggerd.logger.logger_get_identifier",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\logger.cc",
    "relative_path": "system\\loggerd\\logger.cc",
    "depends_on": [],
    "start_line": 96,
    "end_line": 118,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string logger_get_identifier(std::string key) {\n  // a log identifier is a 32 bit counter, plus a 10 character unique ID.\n  // e.g. 000001a3--c20ba54385\n\n  Params params;\n  uint32_t cnt;\n  try {\n    cnt = std::stoul(params.get(key));\n  } catch (std::exception &e) {\n    cnt = 0;\n  }\n  params.put(key, std::to_string(cnt + 1));\n\n  std::stringstream ss;\n  std::random_device rd;\n  std::mt19937 mt(rd());\n  std::uniform_int_distribution<int> dist(0, 15);\n  for (int i = 0; i < 10; ++i) {\n    ss << std::hex << dist(mt);\n  }\n\n  return util::string_format(\"%08x--%s\", cnt, ss.str().c_str());\n}\n"
  },
  "system.loggerd.logger.zstd_decompress": {
    "id": "system.loggerd.logger.zstd_decompress",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\logger.cc",
    "relative_path": "system\\loggerd\\logger.cc",
    "depends_on": [],
    "start_line": 120,
    "end_line": 153,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string zstd_decompress(const std::string &in) {\n  ZSTD_DCtx *dctx = ZSTD_createDCtx();\n  assert(dctx != nullptr);\n\n  // Initialize input and output buffers\n  ZSTD_inBuffer input = {in.data(), in.size(), 0};\n\n  // Estimate and reserve memory for decompressed data\n  size_t estimatedDecompressedSize = ZSTD_getFrameContentSize(in.data(), in.size());\n  if (estimatedDecompressedSize == ZSTD_CONTENTSIZE_ERROR || estimatedDecompressedSize == ZSTD_CONTENTSIZE_UNKNOWN) {\n    estimatedDecompressedSize = in.size() * 2;  // Use a fallback size\n  }\n\n  std::string decompressedData;\n  decompressedData.reserve(estimatedDecompressedSize);\n\n  const size_t bufferSize = ZSTD_DStreamOutSize();  // Recommended output buffer size\n  std::string outputBuffer(bufferSize, '\\0');\n\n  while (input.pos < input.size) {\n    ZSTD_outBuffer output = {outputBuffer.data(), bufferSize, 0};\n\n    size_t result = ZSTD_decompressStream(dctx, &output, &input);\n    if (ZSTD_isError(result)) {\n      break;\n    }\n\n    decompressedData.append(outputBuffer.data(), output.pos);\n  }\n\n  ZSTD_freeDCtx(dctx);\n  decompressedData.shrink_to_fit();\n  return decompressedData;\n}\n"
  },
  "system.loggerd.logger.log_sentinel": {
    "id": "system.loggerd.logger.log_sentinel",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\logger.cc",
    "relative_path": "system\\loggerd\\logger.cc",
    "depends_on": [],
    "start_line": 156,
    "end_line": 162,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static void log_sentinel(LoggerState *log, SentinelType type, int exit_signal = 0) {\n  MessageBuilder msg;\n  auto sen = msg.initEvent().initSentinel();\n  sen.setType(type);\n  sen.setSignal(exit_signal);\n  log->write(msg.toBytes(), true);\n}\n"
  },
  "system.loggerd.logger.LoggerState": {
    "id": "system.loggerd.logger.LoggerState",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\logger.h",
    "relative_path": "system\\loggerd\\logger.h",
    "depends_on": [],
    "start_line": 16,
    "end_line": 33,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class LoggerState {\npublic:\n  LoggerState(const std::string& log_root = Path::log_root());\n  ~LoggerState();\n  bool next();\n  void write(uint8_t* data, size_t size, bool in_qlog);\n  inline int segment() const { return part; }\n  inline const std::string& segmentPath() const { return segment_path; }\n  inline const std::string& routeName() const { return route_name; }\n  inline void write(kj::ArrayPtr<kj::byte> bytes, bool in_qlog) { write(bytes.begin(), bytes.size(), in_qlog); }\n  inline void setExitSignal(int signal) { exit_signal = signal; }\n\nprotected:\n  int part = -1, exit_signal = 0;\n  std::string route_path, route_name, segment_path, lock_file;\n  kj::Array<capnp::word> init_data;\n  std::unique_ptr<ZstdFileWriter> rlog, qlog;\n};\n"
  },
  "system.loggerd.loggerd.logger_rotate": {
    "id": "system.loggerd.loggerd.logger_rotate",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\loggerd.cc",
    "relative_path": "system\\loggerd\\loggerd.cc",
    "depends_on": [],
    "start_line": 24,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void logger_rotate(LoggerdState *s) {\n  bool ret =s->logger.next();\n  assert(ret);\n  s->ready_to_rotate = 0;\n  s->last_rotate_tms = millis_since_boot();\n  LOGW((s->logger.segment() == 0) ? \"logging to %s\" : \"rotated to %s\", s->logger.segmentPath().c_str());\n}\n"
  },
  "system.loggerd.loggerd.rotate_if_needed": {
    "id": "system.loggerd.loggerd.rotate_if_needed",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\loggerd.cc",
    "relative_path": "system\\loggerd\\loggerd.cc",
    "depends_on": [],
    "start_line": 32,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void rotate_if_needed(LoggerdState *s) {\n  // all encoders ready, trigger rotation\n  bool all_ready = s->ready_to_rotate == s->max_waiting;\n\n  // fallback logic to prevent extremely long segments in the case of camera, encoder, etc. malfunctions\n  bool timed_out = false;\n  double tms = millis_since_boot();\n  double seg_length_secs = (tms - s->last_rotate_tms) / 1000.;\n  if ((seg_length_secs > SEGMENT_LENGTH) && !LOGGERD_TEST) {\n    // TODO: might be nice to put these reasons in the sentinel\n    if ((tms - s->last_camera_seen_tms) > NO_CAMERA_PATIENCE) {\n      timed_out = true;\n      LOGE(\"no camera packets seen. auto rotating\");\n    } else if (seg_length_secs > SEGMENT_LENGTH*1.2) {\n      timed_out = true;\n      LOGE(\"segment too long. auto rotating\");\n    }\n  }\n\n  if (all_ready || timed_out) {\n    logger_rotate(s);\n  }\n}\n"
  },
  "system.loggerd.loggerd.write_encode_data": {
    "id": "system.loggerd.loggerd.write_encode_data",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\loggerd.cc",
    "relative_path": "system\\loggerd\\loggerd.cc",
    "depends_on": [],
    "start_line": 67,
    "end_line": 117,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "size_t write_encode_data(LoggerdState *s, cereal::Event::Reader event, RemoteEncoder &re, const EncoderInfo &encoder_info) {\n  auto edata = (event.*(encoder_info.get_encode_data_func))();\n  auto idx = edata.getIdx();\n  auto flags = idx.getFlags();\n\n  // if we aren't recording yet, try to start, since we are in the correct segment\n  if (!re.recording) {\n    if (flags & V4L2_BUF_FLAG_KEYFRAME) {\n      // only create on iframe\n      if (re.dropped_frames) {\n        // this should only happen for the first segment, maybe\n        LOGW(\"%s: dropped %d non iframe packets before init\", encoder_info.publish_name, re.dropped_frames);\n        re.dropped_frames = 0;\n      }\n      // if we aren't actually recording, don't create the writer\n      if (encoder_info.record) {\n        assert(encoder_info.filename != NULL);\n        re.writer.reset(new VideoWriter(s->logger.segmentPath().c_str(),\n                                        encoder_info.filename, idx.getType() != cereal::EncodeIndex::Type::FULL_H_E_V_C,\n                                        edata.getWidth(), edata.getHeight(), encoder_info.fps, idx.getType()));\n        // write the header\n        auto header = edata.getHeader();\n        re.writer->write((uint8_t *)header.begin(), header.size(), idx.getTimestampEof() / 1000, true, false);\n      }\n      re.recording = true;\n    } else {\n      // this is a sad case when we aren't recording, but don't have an iframe\n      // nothing we can do but drop the frame\n      ++re.dropped_frames;\n      return 0;\n    }\n  }\n\n  // we have to be recording if we are here\n  assert(re.recording);\n\n  // if we are actually writing the video file, do so\n  if (re.writer) {\n    auto data = edata.getData();\n    re.writer->write((uint8_t *)data.begin(), data.size(), idx.getTimestampEof() / 1000, false, flags & V4L2_BUF_FLAG_KEYFRAME);\n  }\n\n  // put it in log stream as the idx packet\n  MessageBuilder bmsg;\n  auto evt = bmsg.initEvent(event.getValid());\n  evt.setLogMonoTime(event.getLogMonoTime());\n  (evt.*(encoder_info.set_encode_idx_func))(idx);\n  auto new_msg = bmsg.toBytes();\n  s->logger.write((uint8_t *)new_msg.begin(), new_msg.size(), true);  // always in qlog?\n  return new_msg.size();\n}\n"
  },
  "system.loggerd.loggerd.handle_encoder_msg": {
    "id": "system.loggerd.loggerd.handle_encoder_msg",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\loggerd.cc",
    "relative_path": "system\\loggerd\\loggerd.cc",
    "depends_on": [],
    "start_line": 119,
    "end_line": 187,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int handle_encoder_msg(LoggerdState *s, Message *msg, std::string &name, struct RemoteEncoder &re, const EncoderInfo &encoder_info) {\n  int bytes_count = 0;\n\n  // extract the message\n  capnp::FlatArrayMessageReader cmsg(kj::ArrayPtr<capnp::word>((capnp::word *)msg->getData(), msg->getSize() / sizeof(capnp::word)));\n  auto event = cmsg.getRoot<cereal::Event>();\n  auto edata = (event.*(encoder_info.get_encode_data_func))();\n  auto idx = edata.getIdx();\n\n  // encoderd can have started long before loggerd\n  if (!re.seen_first_packet) {\n    re.seen_first_packet = true;\n    re.encoderd_segment_offset = idx.getSegmentNum();\n    LOGD(\"%s: has encoderd offset %d\", name.c_str(), re.encoderd_segment_offset);\n  }\n  int offset_segment_num = idx.getSegmentNum() - re.encoderd_segment_offset;\n\n  if (offset_segment_num == s->logger.segment()) {\n    // loggerd is now on the segment that matches this packet\n\n    // if this is a new segment, we close any possible old segments, move to the new, and process any queued packets\n    if (re.current_segment != s->logger.segment()) {\n      if (re.recording) {\n        re.writer.reset();\n        re.recording = false;\n      }\n      re.current_segment = s->logger.segment();\n      re.marked_ready_to_rotate = false;\n      // we are in this segment now, process any queued messages before this one\n      if (!re.q.empty()) {\n        for (auto qmsg : re.q) {\n          capnp::FlatArrayMessageReader reader({(capnp::word *)qmsg->getData(), qmsg->getSize() / sizeof(capnp::word)});\n          bytes_count += write_encode_data(s, reader.getRoot<cereal::Event>(), re, encoder_info);\n          delete qmsg;\n        }\n        re.q.clear();\n      }\n    }\n    bytes_count += write_encode_data(s, event, re, encoder_info);\n    delete msg;\n  } else if (offset_segment_num > s->logger.segment()) {\n    // encoderd packet has a newer segment, this means encoderd has rolled over\n    if (!re.marked_ready_to_rotate) {\n      re.marked_ready_to_rotate = true;\n      ++s->ready_to_rotate;\n      LOGD(\"rotate %d -> %d ready %d/%d for %s\",\n        s->logger.segment(), offset_segment_num,\n        s->ready_to_rotate.load(), s->max_waiting, name.c_str());\n    }\n\n    // TODO: define this behavior, but for now don't leak\n    if (re.q.size() > MAIN_FPS*10) {\n      LOGE_100(\"%s: dropping frame, queue is too large\", name.c_str());\n      delete msg;\n    } else {\n      // queue up all the new segment messages, they go in after the rotate\n      re.q.push_back(msg);\n    }\n  } else {\n    LOGE(\"%s: encoderd packet has a older segment!!! idx.getSegmentNum():%d s->logger.segment():%d re.encoderd_segment_offset:%d\",\n      name.c_str(), idx.getSegmentNum(), s->logger.segment(), re.encoderd_segment_offset);\n    // free the message, it's useless. this should never happen\n    // actually, this can happen if you restart encoderd\n    re.encoderd_segment_offset = -s->logger.segment();\n    delete msg;\n  }\n\n  return bytes_count;\n}\n"
  },
  "system.loggerd.loggerd.handle_user_flag": {
    "id": "system.loggerd.loggerd.handle_user_flag",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\loggerd.cc",
    "relative_path": "system\\loggerd\\loggerd.cc",
    "depends_on": [],
    "start_line": 189,
    "end_line": 210,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void handle_user_flag(LoggerdState *s) {\n  static int prev_segment = -1;\n  if (s->logger.segment() == prev_segment) return;\n\n  LOGW(\"preserving %s\", s->logger.segmentPath().c_str());\n\n#ifdef __APPLE__\n  int ret = setxattr(s->logger.segmentPath().c_str(), PRESERVE_ATTR_NAME, &PRESERVE_ATTR_VALUE, 1, 0, 0);\n#else\n  int ret = setxattr(s->logger.segmentPath().c_str(), PRESERVE_ATTR_NAME, &PRESERVE_ATTR_VALUE, 1, 0);\n#endif\n  if (ret) {\n    LOGE(\"setxattr %s failed for %s: %s\", PRESERVE_ATTR_NAME, s->logger.segmentPath().c_str(), strerror(errno));\n  }\n\n  // mark route for uploading\n  Params params;\n  std::string routes = params.get(\"AthenadRecentlyViewedRoutes\");\n  params.put(\"AthenadRecentlyViewedRoutes\", routes + \",\" + s->logger.routeName());\n\n  prev_segment = s->logger.segment();\n}\n"
  },
  "system.loggerd.loggerd.loggerd_thread": {
    "id": "system.loggerd.loggerd.loggerd_thread",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\loggerd.cc",
    "relative_path": "system\\loggerd\\loggerd.cc",
    "depends_on": [],
    "start_line": 212,
    "end_line": 310,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void loggerd_thread() {\n  // setup messaging\n  typedef struct ServiceState {\n    std::string name;\n    int counter, freq;\n    bool encoder, user_flag;\n  } ServiceState;\n  std::unordered_map<SubSocket*, ServiceState> service_state;\n  std::unordered_map<SubSocket*, struct RemoteEncoder> remote_encoders;\n\n  std::unique_ptr<Context> ctx(Context::create());\n  std::unique_ptr<Poller> poller(Poller::create());\n\n  // subscribe to all socks\n  for (const auto& [_, it] : services) {\n    const bool encoder = util::ends_with(it.name, \"EncodeData\");\n    const bool livestream_encoder = util::starts_with(it.name, \"livestream\");\n    if (!it.should_log && (!encoder || livestream_encoder)) continue;\n    LOGD(\"logging %s\", it.name.c_str());\n\n    SubSocket * sock = SubSocket::create(ctx.get(), it.name);\n    assert(sock != NULL);\n    poller->registerSocket(sock);\n    service_state[sock] = {\n      .name = it.name,\n      .counter = 0,\n      .freq = it.decimation,\n      .encoder = encoder,\n      .user_flag = it.name == \"userFlag\",\n    };\n  }\n\n  LoggerdState s;\n  // init logger\n  logger_rotate(&s);\n  Params().put(\"CurrentRoute\", s.logger.routeName());\n\n  std::map<std::string, EncoderInfo> encoder_infos_dict;\n  for (const auto &cam : cameras_logged) {\n    for (const auto &encoder_info : cam.encoder_infos) {\n      encoder_infos_dict[encoder_info.publish_name] = encoder_info;\n      s.max_waiting++;\n    }\n  }\n\n  uint64_t msg_count = 0, bytes_count = 0;\n  double start_ts = millis_since_boot();\n  while (!do_exit) {\n    // poll for new messages on all sockets\n    for (auto sock : poller->poll(1000)) {\n      if (do_exit) break;\n\n      ServiceState &service = service_state[sock];\n      if (service.user_flag) {\n        handle_user_flag(&s);\n      }\n\n      // drain socket\n      int count = 0;\n      Message *msg = nullptr;\n      while (!do_exit && (msg = sock->receive(true))) {\n        const bool in_qlog = service.freq != -1 && (service.counter++ % service.freq == 0);\n        if (service.encoder) {\n          s.last_camera_seen_tms = millis_since_boot();\n          bytes_count += handle_encoder_msg(&s, msg, service.name, remote_encoders[sock], encoder_infos_dict[service.name]);\n        } else {\n          s.logger.write((uint8_t *)msg->getData(), msg->getSize(), in_qlog);\n          bytes_count += msg->getSize();\n          delete msg;\n        }\n\n        rotate_if_needed(&s);\n\n        if ((++msg_count % 10000) == 0) {\n          double seconds = (millis_since_boot() - start_ts) / 1000.0;\n          LOGD(\"%\" PRIu64 \" messages, %.2f msg/sec, %.2f KB/sec\", msg_count, msg_count / seconds, bytes_count * 0.001 / seconds);\n        }\n\n        count++;\n        if (count >= 200) {\n          LOGD(\"large volume of '%s' messages\", service.name.c_str());\n          break;\n        }\n      }\n    }\n  }\n\n  LOGW(\"closing logger\");\n  s.logger.setExitSignal(do_exit.signal);\n\n  if (do_exit.power_failure) {\n    LOGE(\"power failure\");\n    sync();\n    LOGE(\"sync done\");\n  }\n\n  // messaging cleanup\n  for (auto &[sock, service] : service_state) delete sock;\n}\n"
  },
  "system.loggerd.loggerd.main": {
    "id": "system.loggerd.loggerd.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\loggerd.cc",
    "relative_path": "system\\loggerd\\loggerd.cc",
    "depends_on": [],
    "start_line": 312,
    "end_line": 325,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int main(int argc, char** argv) {\n  if (!Hardware::PC()) {\n    int ret;\n    ret = util::set_core_affinity({0, 1, 2, 3});\n    assert(ret == 0);\n    // TODO: why does this impact camerad timings?\n    //ret = util::set_realtime_priority(1);\n    //assert(ret == 0);\n  }\n\n  loggerd_thread();\n\n  return 0;\n}\n"
  },
  "system.loggerd.loggerd.EncoderInfo": {
    "id": "system.loggerd.loggerd.EncoderInfo",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\loggerd.h",
    "relative_path": "system\\loggerd\\loggerd.h",
    "depends_on": [],
    "start_line": 32,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class EncoderInfo {\npublic:\n  const char *publish_name;\n  const char *thumbnail_name = NULL;\n  const char *filename = NULL;\n  bool record = true;\n  int frame_width = -1;\n  int frame_height = -1;\n  int fps = MAIN_FPS;\n  int bitrate = MAIN_BITRATE;\n  cereal::EncodeIndex::Type encode_type = Hardware::PC() ? cereal::EncodeIndex::Type::BIG_BOX_LOSSLESS\n                                                         : cereal::EncodeIndex::Type::FULL_H_E_V_C;\n  ::cereal::EncodeData::Reader (cereal::Event::Reader::*get_encode_data_func)() const;\n  void (cereal::Event::Builder::*set_encode_idx_func)(::cereal::EncodeIndex::Reader);\n  cereal::EncodeData::Builder (cereal::Event::Builder::*init_encode_data_func)();\n};\n"
  },
  "system.loggerd.loggerd.LogCameraInfo": {
    "id": "system.loggerd.loggerd.LogCameraInfo",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\loggerd.h",
    "relative_path": "system\\loggerd\\loggerd.h",
    "depends_on": [],
    "start_line": 49,
    "end_line": 55,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class LogCameraInfo {\npublic:\n  const char *thread_name;\n  int fps = MAIN_FPS;\n  VisionStreamType stream_type;\n  std::vector<EncoderInfo> encoder_infos;\n};\n"
  },
  "system.loggerd.uploader.FakeRequest": {
    "id": "system.loggerd.uploader.FakeRequest",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\uploader.py",
    "relative_path": "system\\loggerd\\uploader.py",
    "depends_on": [],
    "start_line": 37,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.uploader.FakeRequest.__init__": {
    "id": "system.loggerd.uploader.FakeRequest.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\uploader.py",
    "relative_path": "system\\loggerd\\uploader.py",
    "depends_on": [],
    "start_line": 38,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.uploader.FakeResponse": {
    "id": "system.loggerd.uploader.FakeResponse",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\uploader.py",
    "relative_path": "system\\loggerd\\uploader.py",
    "depends_on": [
      "system.loggerd.uploader.FakeRequest"
    ],
    "start_line": 42,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.uploader.FakeResponse.__init__": {
    "id": "system.loggerd.uploader.FakeResponse.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\uploader.py",
    "relative_path": "system\\loggerd\\uploader.py",
    "depends_on": [
      "system.loggerd.uploader.FakeRequest"
    ],
    "start_line": 43,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.uploader.get_directory_sort": {
    "id": "system.loggerd.uploader.get_directory_sort",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\uploader.py",
    "relative_path": "system\\loggerd\\uploader.py",
    "depends_on": [],
    "start_line": 48,
    "end_line": 51,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.uploader.listdir_by_creation": {
    "id": "system.loggerd.uploader.listdir_by_creation",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\uploader.py",
    "relative_path": "system\\loggerd\\uploader.py",
    "depends_on": [
      "system.loggerd.uploader.get_directory_sort"
    ],
    "start_line": 53,
    "end_line": 63,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.uploader.clear_locks": {
    "id": "system.loggerd.uploader.clear_locks",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\uploader.py",
    "relative_path": "system\\loggerd\\uploader.py",
    "depends_on": [],
    "start_line": 65,
    "end_line": 73,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.uploader.Uploader": {
    "id": "system.loggerd.uploader.Uploader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\uploader.py",
    "relative_path": "system\\loggerd\\uploader.py",
    "depends_on": [
      "system.loggerd.uploader.FakeResponse",
      "system.loggerd.uploader.listdir_by_creation"
    ],
    "start_line": 76,
    "end_line": 226,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.uploader.Uploader.__init__": {
    "id": "system.loggerd.uploader.Uploader.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\uploader.py",
    "relative_path": "system\\loggerd\\uploader.py",
    "depends_on": [],
    "start_line": 77,
    "end_line": 88,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.uploader.Uploader.list_upload_files": {
    "id": "system.loggerd.uploader.Uploader.list_upload_files",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\uploader.py",
    "relative_path": "system\\loggerd\\uploader.py",
    "depends_on": [
      "system.loggerd.uploader.listdir_by_creation"
    ],
    "start_line": 90,
    "end_line": 127,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.uploader.Uploader.next_file_to_upload": {
    "id": "system.loggerd.uploader.Uploader.next_file_to_upload",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\uploader.py",
    "relative_path": "system\\loggerd\\uploader.py",
    "depends_on": [],
    "start_line": 129,
    "end_line": 140,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.uploader.Uploader.do_upload": {
    "id": "system.loggerd.uploader.Uploader.do_upload",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\uploader.py",
    "relative_path": "system\\loggerd\\uploader.py",
    "depends_on": [
      "system.loggerd.uploader.FakeResponse"
    ],
    "start_line": 142,
    "end_line": 163,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.uploader.Uploader.upload": {
    "id": "system.loggerd.uploader.Uploader.upload",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\uploader.py",
    "relative_path": "system\\loggerd\\uploader.py",
    "depends_on": [],
    "start_line": 165,
    "end_line": 212,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.uploader.Uploader.step": {
    "id": "system.loggerd.uploader.Uploader.step",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\uploader.py",
    "relative_path": "system\\loggerd\\uploader.py",
    "depends_on": [],
    "start_line": 215,
    "end_line": 226,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.uploader.main": {
    "id": "system.loggerd.uploader.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\uploader.py",
    "relative_path": "system\\loggerd\\uploader.py",
    "depends_on": [
      "system.loggerd.uploader.clear_locks",
      "system.loggerd.uploader.Uploader"
    ],
    "start_line": 229,
    "end_line": 269,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.video_writer.VideoWriter": {
    "id": "system.loggerd.video_writer.VideoWriter",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\video_writer.h",
    "relative_path": "system\\loggerd\\video_writer.h",
    "depends_on": [],
    "start_line": 12,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class VideoWriter {\npublic:\n  VideoWriter(const char *path, const char *filename, bool remuxing, int width, int height, int fps, cereal::EncodeIndex::Type codec);\n  void write(uint8_t *data, int len, long long timestamp, bool codecconfig, bool keyframe);\n  ~VideoWriter();\nprivate:\n  std::string vid_path, lock_path;\n  FILE *of = nullptr;\n\n  AVCodecContext *codec_ctx;\n  AVFormatContext *ofmt_ctx;\n  AVStream *out_stream;\n  bool remuxing;\n};\n"
  },
  "system.loggerd.xattr_cache.getxattr": {
    "id": "system.loggerd.xattr_cache.getxattr",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\xattr_cache.py",
    "relative_path": "system\\loggerd\\xattr_cache.py",
    "depends_on": [],
    "start_line": 7,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.xattr_cache.setxattr": {
    "id": "system.loggerd.xattr_cache.setxattr",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\xattr_cache.py",
    "relative_path": "system\\loggerd\\xattr_cache.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 23,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.zstd_writer.ZstdFileWriter": {
    "id": "system.loggerd.zstd_writer.ZstdFileWriter",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\zstd_writer.h",
    "relative_path": "system\\loggerd\\zstd_writer.h",
    "depends_on": [],
    "start_line": 9,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ZstdFileWriter {\npublic:\n  ZstdFileWriter(const std::string &filename, int compression_level);\n  ~ZstdFileWriter();\n  void write(void* data, size_t size);\n  inline void write(kj::ArrayPtr<capnp::byte> array) { write(array.begin(), array.size()); }\n\nprivate:\n  void flushCache(bool last_chunk);\n\n  size_t input_cache_capacity_ = 0;\n  std::vector<char> input_cache_;\n  std::vector<char> output_buffer_;\n  ZSTD_CStream *cstream_;\n  FILE* file_ = nullptr;\n};\n"
  },
  "system.loggerd.encoder.encoder.VideoEncoder": {
    "id": "system.loggerd.encoder.encoder.VideoEncoder",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\encoder\\encoder.h",
    "relative_path": "system\\loggerd\\encoder\\encoder.h",
    "depends_on": [],
    "start_line": 22,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class VideoEncoder {\npublic:\n  VideoEncoder(const EncoderInfo &encoder_info, int in_width, int in_height);\n  virtual ~VideoEncoder() {}\n  virtual int encode_frame(VisionBuf* buf, VisionIpcBufExtra *extra) = 0;\n  virtual void encoder_open() = 0;\n  virtual void encoder_close() = 0;\n\n  void publisher_publish(int segment_num, uint32_t idx, VisionIpcBufExtra &extra, unsigned int flags, kj::ArrayPtr<capnp::byte> header, kj::ArrayPtr<capnp::byte> dat);\n\nprotected:\n  int in_width, in_height;\n  int out_width, out_height;\n  const EncoderInfo encoder_info;\n\nprivate:\n  // total frames encoded\n  int cnt = 0;\n  std::unique_ptr<PubMaster> pm;\n  std::vector<capnp::byte> msg_cache;\n};\n"
  },
  "system.loggerd.encoder.ffmpeg_encoder.FfmpegEncoder": {
    "id": "system.loggerd.encoder.ffmpeg_encoder.FfmpegEncoder",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\encoder\\ffmpeg_encoder.h",
    "relative_path": "system\\loggerd\\encoder\\ffmpeg_encoder.h",
    "depends_on": [],
    "start_line": 17,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class FfmpegEncoder : public VideoEncoder {\npublic:\n  FfmpegEncoder(const EncoderInfo &encoder_info, int in_width, int in_height);\n  ~FfmpegEncoder();\n  int encode_frame(VisionBuf* buf, VisionIpcBufExtra *extra);\n  void encoder_open();\n  void encoder_close();\n\nprivate:\n  int segment_num = -1;\n  int counter = 0;\n  bool is_open = false;\n\n  AVCodecContext *codec_ctx;\n  AVFrame *frame = NULL;\n  std::vector<uint8_t> convert_buf;\n  std::vector<uint8_t> downscale_buf;\n};\n"
  },
  "system.loggerd.encoder.jpeg_encoder.JpegEncoder": {
    "id": "system.loggerd.encoder.jpeg_encoder.JpegEncoder",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\encoder\\jpeg_encoder.h",
    "relative_path": "system\\loggerd\\encoder\\jpeg_encoder.h",
    "depends_on": [],
    "start_line": 13,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class JpegEncoder {\npublic:\n  JpegEncoder(const std::string &pusblish_name, int width, int height);\n  ~JpegEncoder();\n  void pushThumbnail(VisionBuf *buf, const VisionIpcBufExtra &extra);\n\nprivate:\n  void generateThumbnail(const uint8_t *y, const uint8_t *uv, int width, int height, int stride);\n  void compressToJpeg(uint8_t *y_plane, uint8_t *u_plane, uint8_t *v_plane);\n\n  int thumbnail_width;\n  int thumbnail_height;\n  std::string publish_name;\n  std::vector<uint8_t> yuv_buffer;\n  std::unique_ptr<PubMaster> pm;\n\n  // JPEG output buffer\n  unsigned char* out_buffer = nullptr;\n  unsigned long out_size = 0;\n};\n"
  },
  "system.loggerd.encoder.v4l_encoder.checked_ioctl": {
    "id": "system.loggerd.encoder.v4l_encoder.checked_ioctl",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\encoder\\v4l_encoder.cc",
    "relative_path": "system\\loggerd\\encoder\\v4l_encoder.cc",
    "depends_on": [],
    "start_line": 27,
    "end_line": 33,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static void checked_ioctl(int fd, unsigned long request, void *argp) {\n  int ret = util::safe_ioctl(fd, request, argp);\n  if (ret != 0) {\n    LOGE(\"checked_ioctl failed with error %d (%d %lx %p)\", errno, fd, request, argp);\n    assert(0);\n  }\n}\n"
  },
  "system.loggerd.encoder.v4l_encoder.dequeue_buffer": {
    "id": "system.loggerd.encoder.v4l_encoder.dequeue_buffer",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\encoder\\v4l_encoder.cc",
    "relative_path": "system\\loggerd\\encoder\\v4l_encoder.cc",
    "depends_on": [],
    "start_line": 35,
    "end_line": 50,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static void dequeue_buffer(int fd, v4l2_buf_type buf_type, unsigned int *index=NULL, unsigned int *bytesused=NULL, unsigned int *flags=NULL, struct timeval *timestamp=NULL) {\n  v4l2_plane plane = {0};\n  v4l2_buffer v4l_buf = {\n    .type = buf_type,\n    .memory = V4L2_MEMORY_USERPTR,\n    .m = { .planes = &plane, },\n    .length = 1,\n  };\n  checked_ioctl(fd, VIDIOC_DQBUF, &v4l_buf);\n\n  if (index) *index = v4l_buf.index;\n  if (bytesused) *bytesused = v4l_buf.m.planes[0].bytesused;\n  if (flags) *flags = v4l_buf.flags;\n  if (timestamp) *timestamp = v4l_buf.timestamp;\n  assert(v4l_buf.m.planes[0].data_offset == 0);\n}\n"
  },
  "system.loggerd.encoder.v4l_encoder.queue_buffer": {
    "id": "system.loggerd.encoder.v4l_encoder.queue_buffer",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\encoder\\v4l_encoder.cc",
    "relative_path": "system\\loggerd\\encoder\\v4l_encoder.cc",
    "depends_on": [],
    "start_line": 52,
    "end_line": 71,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static void queue_buffer(int fd, v4l2_buf_type buf_type, unsigned int index, VisionBuf *buf, struct timeval timestamp={}) {\n  v4l2_plane plane = {\n    .length = (unsigned int)buf->len,\n    .m = { .userptr = (unsigned long)buf->addr, },\n    .bytesused = (uint32_t)buf->len,\n    .reserved = {(unsigned int)buf->fd}\n  };\n\n  v4l2_buffer v4l_buf = {\n    .type = buf_type,\n    .index = index,\n    .memory = V4L2_MEMORY_USERPTR,\n    .m = { .planes = &plane, },\n    .length = 1,\n    .flags = V4L2_BUF_FLAG_TIMESTAMP_COPY,\n    .timestamp = timestamp\n  };\n\n  checked_ioctl(fd, VIDIOC_QBUF, &v4l_buf);\n}\n"
  },
  "system.loggerd.encoder.v4l_encoder.request_buffers": {
    "id": "system.loggerd.encoder.v4l_encoder.request_buffers",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\encoder\\v4l_encoder.cc",
    "relative_path": "system\\loggerd\\encoder\\v4l_encoder.cc",
    "depends_on": [],
    "start_line": 73,
    "end_line": 80,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static void request_buffers(int fd, v4l2_buf_type buf_type, unsigned int count) {\n  struct v4l2_requestbuffers reqbuf = {\n    .type = buf_type,\n    .memory = V4L2_MEMORY_USERPTR,\n    .count = count\n  };\n  checked_ioctl(fd, VIDIOC_REQBUFS, &reqbuf);\n}\n"
  },
  "system.loggerd.encoder.v4l_encoder.V4LEncoder": {
    "id": "system.loggerd.encoder.v4l_encoder.V4LEncoder",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\encoder\\v4l_encoder.h",
    "relative_path": "system\\loggerd\\encoder\\v4l_encoder.h",
    "depends_on": [],
    "start_line": 9,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class V4LEncoder : public VideoEncoder {\npublic:\n  V4LEncoder(const EncoderInfo &encoder_info, int in_width, int in_height);\n  ~V4LEncoder();\n  int encode_frame(VisionBuf* buf, VisionIpcBufExtra *extra);\n  void encoder_open();\n  void encoder_close();\n\nprivate:\n  int fd;\n\n  bool is_open = false;\n  int segment_num = -1;\n  int counter = 0;\n\n  SafeQueue<VisionIpcBufExtra> extras;\n\n  static void dequeue_handler(V4LEncoder *e);\n  std::thread dequeue_handler_thread;\n\n  VisionBuf buf_out[BUF_OUT_COUNT];\n  SafeQueue<unsigned int> free_buf_in;\n};\n"
  },
  "system.loggerd.tests.loggerd_tests_common.create_random_file": {
    "id": "system.loggerd.tests.loggerd_tests_common.create_random_file",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\loggerd_tests_common.py",
    "relative_path": "system\\loggerd\\tests\\loggerd_tests_common.py",
    "depends_on": [],
    "start_line": 13,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.loggerd_tests_common.MockResponse": {
    "id": "system.loggerd.tests.loggerd_tests_common.MockResponse",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\loggerd_tests_common.py",
    "relative_path": "system\\loggerd\\tests\\loggerd_tests_common.py",
    "depends_on": [],
    "start_line": 31,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.loggerd_tests_common.MockResponse.__init__": {
    "id": "system.loggerd.tests.loggerd_tests_common.MockResponse.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\loggerd_tests_common.py",
    "relative_path": "system\\loggerd\\tests\\loggerd_tests_common.py",
    "depends_on": [],
    "start_line": 32,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.loggerd_tests_common.MockApi": {
    "id": "system.loggerd.tests.loggerd_tests_common.MockApi",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\loggerd_tests_common.py",
    "relative_path": "system\\loggerd\\tests\\loggerd_tests_common.py",
    "depends_on": [
      "system.loggerd.tests.loggerd_tests_common.MockResponse"
    ],
    "start_line": 36,
    "end_line": 44,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.loggerd_tests_common.MockApi.__init__": {
    "id": "system.loggerd.tests.loggerd_tests_common.MockApi.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\loggerd_tests_common.py",
    "relative_path": "system\\loggerd\\tests\\loggerd_tests_common.py",
    "depends_on": [],
    "start_line": 37,
    "end_line": 38,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.loggerd_tests_common.MockApi.get": {
    "id": "system.loggerd.tests.loggerd_tests_common.MockApi.get",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\loggerd_tests_common.py",
    "relative_path": "system\\loggerd\\tests\\loggerd_tests_common.py",
    "depends_on": [
      "system.loggerd.tests.loggerd_tests_common.MockResponse"
    ],
    "start_line": 40,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.loggerd_tests_common.MockApi.get_token": {
    "id": "system.loggerd.tests.loggerd_tests_common.MockApi.get_token",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\loggerd_tests_common.py",
    "relative_path": "system\\loggerd\\tests\\loggerd_tests_common.py",
    "depends_on": [],
    "start_line": 43,
    "end_line": 44,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.loggerd_tests_common.MockApiIgnore": {
    "id": "system.loggerd.tests.loggerd_tests_common.MockApiIgnore",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\loggerd_tests_common.py",
    "relative_path": "system\\loggerd\\tests\\loggerd_tests_common.py",
    "depends_on": [
      "system.loggerd.tests.loggerd_tests_common.MockResponse"
    ],
    "start_line": 46,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.loggerd_tests_common.MockApiIgnore.__init__": {
    "id": "system.loggerd.tests.loggerd_tests_common.MockApiIgnore.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\loggerd_tests_common.py",
    "relative_path": "system\\loggerd\\tests\\loggerd_tests_common.py",
    "depends_on": [],
    "start_line": 47,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.loggerd_tests_common.MockApiIgnore.get": {
    "id": "system.loggerd.tests.loggerd_tests_common.MockApiIgnore.get",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\loggerd_tests_common.py",
    "relative_path": "system\\loggerd\\tests\\loggerd_tests_common.py",
    "depends_on": [
      "system.loggerd.tests.loggerd_tests_common.MockResponse"
    ],
    "start_line": 50,
    "end_line": 51,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.loggerd_tests_common.MockApiIgnore.get_token": {
    "id": "system.loggerd.tests.loggerd_tests_common.MockApiIgnore.get_token",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\loggerd_tests_common.py",
    "relative_path": "system\\loggerd\\tests\\loggerd_tests_common.py",
    "depends_on": [],
    "start_line": 53,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.loggerd_tests_common.UploaderTestCase": {
    "id": "system.loggerd.tests.loggerd_tests_common.UploaderTestCase",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\loggerd_tests_common.py",
    "relative_path": "system\\loggerd\\tests\\loggerd_tests_common.py",
    "depends_on": [
      "system.loggerd.tests.loggerd_tests_common.MockApi",
      "system.loggerd.tests.loggerd_tests_common.create_random_file",
      "system.loggerd.tests.loggerd_tests_common.MockApiIgnore"
    ],
    "start_line": 56,
    "end_line": 90,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.loggerd_tests_common.UploaderTestCase.set_ignore": {
    "id": "system.loggerd.tests.loggerd_tests_common.UploaderTestCase.set_ignore",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\loggerd_tests_common.py",
    "relative_path": "system\\loggerd\\tests\\loggerd_tests_common.py",
    "depends_on": [
      "system.loggerd.tests.loggerd_tests_common.MockApiIgnore"
    ],
    "start_line": 65,
    "end_line": 66,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.loggerd_tests_common.UploaderTestCase.setup_method": {
    "id": "system.loggerd.tests.loggerd_tests_common.UploaderTestCase.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\loggerd_tests_common.py",
    "relative_path": "system\\loggerd\\tests\\loggerd_tests_common.py",
    "depends_on": [
      "system.loggerd.tests.loggerd_tests_common.MockApi"
    ],
    "start_line": 68,
    "end_line": 80,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.loggerd_tests_common.UploaderTestCase.make_file_with_data": {
    "id": "system.loggerd.tests.loggerd_tests_common.UploaderTestCase.make_file_with_data",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\loggerd_tests_common.py",
    "relative_path": "system\\loggerd\\tests\\loggerd_tests_common.py",
    "depends_on": [
      "system.loggerd.tests.loggerd_tests_common.create_random_file"
    ],
    "start_line": 82,
    "end_line": 90,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_deleter.TestDeleter": {
    "id": "system.loggerd.tests.test_deleter.TestDeleter",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_deleter.py",
    "relative_path": "system\\loggerd\\tests\\test_deleter.py",
    "depends_on": [],
    "start_line": 14,
    "end_line": 117,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_deleter.TestDeleter.fake_statvfs": {
    "id": "system.loggerd.tests.test_deleter.TestDeleter.fake_statvfs",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_deleter.py",
    "relative_path": "system\\loggerd\\tests\\test_deleter.py",
    "depends_on": [],
    "start_line": 15,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_deleter.TestDeleter.setup_method": {
    "id": "system.loggerd.tests.test_deleter.TestDeleter.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_deleter.py",
    "relative_path": "system\\loggerd\\tests\\test_deleter.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_deleter.TestDeleter.start_thread": {
    "id": "system.loggerd.tests.test_deleter.TestDeleter.start_thread",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_deleter.py",
    "relative_path": "system\\loggerd\\tests\\test_deleter.py",
    "depends_on": [],
    "start_line": 24,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_deleter.TestDeleter.join_thread": {
    "id": "system.loggerd.tests.test_deleter.TestDeleter.join_thread",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_deleter.py",
    "relative_path": "system\\loggerd\\tests\\test_deleter.py",
    "depends_on": [],
    "start_line": 30,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_deleter.TestDeleter.test_delete": {
    "id": "system.loggerd.tests.test_deleter.TestDeleter.test_delete",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_deleter.py",
    "relative_path": "system\\loggerd\\tests\\test_deleter.py",
    "depends_on": [],
    "start_line": 34,
    "end_line": 44,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_deleter.TestDeleter.assertDeleteOrder": {
    "id": "system.loggerd.tests.test_deleter.TestDeleter.assertDeleteOrder",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_deleter.py",
    "relative_path": "system\\loggerd\\tests\\test_deleter.py",
    "depends_on": [],
    "start_line": 46,
    "end_line": 65,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_deleter.TestDeleter.test_delete_order": {
    "id": "system.loggerd.tests.test_deleter.TestDeleter.test_delete_order",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_deleter.py",
    "relative_path": "system\\loggerd\\tests\\test_deleter.py",
    "depends_on": [],
    "start_line": 67,
    "end_line": 72,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_deleter.TestDeleter.test_delete_many_preserved": {
    "id": "system.loggerd.tests.test_deleter.TestDeleter.test_delete_many_preserved",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_deleter.py",
    "relative_path": "system\\loggerd\\tests\\test_deleter.py",
    "depends_on": [],
    "start_line": 74,
    "end_line": 82,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_deleter.TestDeleter.test_delete_last": {
    "id": "system.loggerd.tests.test_deleter.TestDeleter.test_delete_last",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_deleter.py",
    "relative_path": "system\\loggerd\\tests\\test_deleter.py",
    "depends_on": [],
    "start_line": 84,
    "end_line": 91,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_deleter.TestDeleter.test_no_delete_when_available_space": {
    "id": "system.loggerd.tests.test_deleter.TestDeleter.test_no_delete_when_available_space",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_deleter.py",
    "relative_path": "system\\loggerd\\tests\\test_deleter.py",
    "depends_on": [],
    "start_line": 93,
    "end_line": 106,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_deleter.TestDeleter.test_no_delete_with_lock_file": {
    "id": "system.loggerd.tests.test_deleter.TestDeleter.test_no_delete_with_lock_file",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_deleter.py",
    "relative_path": "system\\loggerd\\tests\\test_deleter.py",
    "depends_on": [],
    "start_line": 108,
    "end_line": 117,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_encoder.TestEncoder": {
    "id": "system.loggerd.tests.test_encoder.TestEncoder",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_encoder.py",
    "relative_path": "system\\loggerd\\tests\\test_encoder.py",
    "depends_on": [],
    "start_line": 34,
    "end_line": 150,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_encoder.TestEncoder.setup_method": {
    "id": "system.loggerd.tests.test_encoder.TestEncoder.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_encoder.py",
    "relative_path": "system\\loggerd\\tests\\test_encoder.py",
    "depends_on": [],
    "start_line": 36,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_encoder.TestEncoder.teardown_method": {
    "id": "system.loggerd.tests.test_encoder.TestEncoder.teardown_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_encoder.py",
    "relative_path": "system\\loggerd\\tests\\test_encoder.py",
    "depends_on": [],
    "start_line": 41,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_encoder.TestEncoder._clear_logs": {
    "id": "system.loggerd.tests.test_encoder.TestEncoder._clear_logs",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_encoder.py",
    "relative_path": "system\\loggerd\\tests\\test_encoder.py",
    "depends_on": [],
    "start_line": 44,
    "end_line": 46,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_encoder.TestEncoder._get_latest_segment_path": {
    "id": "system.loggerd.tests.test_encoder.TestEncoder._get_latest_segment_path",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_encoder.py",
    "relative_path": "system\\loggerd\\tests\\test_encoder.py",
    "depends_on": [],
    "start_line": 48,
    "end_line": 50,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_encoder.TestEncoder.test_log_rotation": {
    "id": "system.loggerd.tests.test_encoder.TestEncoder.test_log_rotation",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_encoder.py",
    "relative_path": "system\\loggerd\\tests\\test_encoder.py",
    "depends_on": [],
    "start_line": 54,
    "end_line": 150,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_logger.verify_segment": {
    "id": "system.loggerd.tests.test_logger.verify_segment",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_logger.cc",
    "relative_path": "system\\loggerd\\tests\\test_logger.cc",
    "depends_on": [],
    "start_line": 6,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void verify_segment(const std::string &route_path, int segment, int max_segment, int required_event_cnt) {\n  const std::string segment_path = route_path + \"--\" + std::to_string(segment);\n  SentinelType begin_sentinel = segment == 0 ? SentinelType::START_OF_ROUTE : SentinelType::START_OF_SEGMENT;\n  SentinelType end_sentinel = segment == max_segment - 1 ? SentinelType::END_OF_ROUTE : SentinelType::END_OF_SEGMENT;\n\n  REQUIRE(!util::file_exists(segment_path + \"/rlog.lock\"));\n  for (const char *fn : {\"/rlog.zst\", \"/qlog.zst\"}) {\n    const std::string log_file = segment_path + fn;\n    std::string log = util::read_file(log_file);\n    REQUIRE(!log.empty());\n    std::string decompressed_log = zstd_decompress(log);\n    int event_cnt = 0, i = 0;\n    kj::ArrayPtr<const capnp::word> words((capnp::word *)decompressed_log.data(), decompressed_log.size() / sizeof(capnp::word));\n    while (words.size() > 0) {\n      try {\n        capnp::FlatArrayMessageReader reader(words);\n        auto event = reader.getRoot<cereal::Event>();\n        words = kj::arrayPtr(reader.getEnd(), words.end());\n        if (i == 0) {\n          REQUIRE(event.which() == cereal::Event::INIT_DATA);\n        } else if (i == 1) {\n          REQUIRE(event.which() == cereal::Event::SENTINEL);\n          REQUIRE(event.getSentinel().getType() == begin_sentinel);\n          REQUIRE(event.getSentinel().getSignal() == 0);\n        } else if (words.size() > 0) {\n          REQUIRE(event.which() == cereal::Event::CLOCKS);\n          ++event_cnt;\n        } else {\n          // the last event must be SENTINEL\n          REQUIRE(event.which() == cereal::Event::SENTINEL);\n          REQUIRE(event.getSentinel().getType() == end_sentinel);\n          REQUIRE(event.getSentinel().getSignal() == (end_sentinel == SentinelType::END_OF_ROUTE ? 1 : 0));\n        }\n        ++i;\n      } catch (const kj::Exception &ex) {\n        INFO(\"failed parse \" << i << \" exception :\" << ex.getDescription());\n        REQUIRE(0);\n        break;\n      }\n    }\n    REQUIRE(event_cnt == required_event_cnt);\n  }\n}\n"
  },
  "system.loggerd.tests.test_logger.write_msg": {
    "id": "system.loggerd.tests.test_logger.write_msg",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_logger.cc",
    "relative_path": "system\\loggerd\\tests\\test_logger.cc",
    "depends_on": [],
    "start_line": 50,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void write_msg(LoggerState *logger) {\n  MessageBuilder msg;\n  msg.initEvent().initClocks();\n  logger->write(msg.toBytes(), true);\n}\n"
  },
  "system.loggerd.tests.test_loggerd.TestLoggerd": {
    "id": "system.loggerd.tests.test_loggerd.TestLoggerd",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_loggerd.py",
    "relative_path": "system\\loggerd\\tests\\test_loggerd.py",
    "depends_on": [],
    "start_line": 34,
    "end_line": 283,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_loggerd.TestLoggerd._get_latest_log_dir": {
    "id": "system.loggerd.tests.test_loggerd.TestLoggerd._get_latest_log_dir",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_loggerd.py",
    "relative_path": "system\\loggerd\\tests\\test_loggerd.py",
    "depends_on": [],
    "start_line": 35,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_loggerd.TestLoggerd._get_log_dir": {
    "id": "system.loggerd.tests.test_loggerd.TestLoggerd._get_log_dir",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_loggerd.py",
    "relative_path": "system\\loggerd\\tests\\test_loggerd.py",
    "depends_on": [],
    "start_line": 39,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_loggerd.TestLoggerd._get_log_fn": {
    "id": "system.loggerd.tests.test_loggerd.TestLoggerd._get_log_fn",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_loggerd.py",
    "relative_path": "system\\loggerd\\tests\\test_loggerd.py",
    "depends_on": [],
    "start_line": 47,
    "end_line": 53,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_loggerd.TestLoggerd._gen_bootlog": {
    "id": "system.loggerd.tests.test_loggerd.TestLoggerd._gen_bootlog",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_loggerd.py",
    "relative_path": "system\\loggerd\\tests\\test_loggerd.py",
    "depends_on": [],
    "start_line": 55,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_loggerd.TestLoggerd._check_init_data": {
    "id": "system.loggerd.tests.test_loggerd.TestLoggerd._check_init_data",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_loggerd.py",
    "relative_path": "system\\loggerd\\tests\\test_loggerd.py",
    "depends_on": [],
    "start_line": 66,
    "end_line": 68,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_loggerd.TestLoggerd._check_sentinel": {
    "id": "system.loggerd.tests.test_loggerd.TestLoggerd._check_sentinel",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_loggerd.py",
    "relative_path": "system\\loggerd\\tests\\test_loggerd.py",
    "depends_on": [],
    "start_line": 70,
    "end_line": 75,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_loggerd.TestLoggerd._publish_random_messages": {
    "id": "system.loggerd.tests.test_loggerd.TestLoggerd._publish_random_messages",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_loggerd.py",
    "relative_path": "system\\loggerd\\tests\\test_loggerd.py",
    "depends_on": [],
    "start_line": 77,
    "end_line": 98,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_loggerd.TestLoggerd.test_init_data_values": {
    "id": "system.loggerd.tests.test_loggerd.TestLoggerd.test_init_data_values",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_loggerd.py",
    "relative_path": "system\\loggerd\\tests\\test_loggerd.py",
    "depends_on": [],
    "start_line": 100,
    "end_line": 137,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_loggerd.TestLoggerd.test_rotation": {
    "id": "system.loggerd.tests.test_loggerd.TestLoggerd.test_rotation",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_loggerd.py",
    "relative_path": "system\\loggerd\\tests\\test_loggerd.py",
    "depends_on": [],
    "start_line": 140,
    "end_line": 185,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_loggerd.TestLoggerd.test_bootlog": {
    "id": "system.loggerd.tests.test_loggerd.TestLoggerd.test_bootlog",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_loggerd.py",
    "relative_path": "system\\loggerd\\tests\\test_loggerd.py",
    "depends_on": [],
    "start_line": 187,
    "end_line": 222,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_loggerd.TestLoggerd.test_qlog": {
    "id": "system.loggerd.tests.test_loggerd.TestLoggerd.test_qlog",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_loggerd.py",
    "relative_path": "system\\loggerd\\tests\\test_loggerd.py",
    "depends_on": [],
    "start_line": 224,
    "end_line": 252,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_loggerd.TestLoggerd.test_rlog": {
    "id": "system.loggerd.tests.test_loggerd.TestLoggerd.test_rlog",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_loggerd.py",
    "relative_path": "system\\loggerd\\tests\\test_loggerd.py",
    "depends_on": [],
    "start_line": 254,
    "end_line": 269,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_loggerd.TestLoggerd.test_preserving_flagged_segments": {
    "id": "system.loggerd.tests.test_loggerd.TestLoggerd.test_preserving_flagged_segments",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_loggerd.py",
    "relative_path": "system\\loggerd\\tests\\test_loggerd.py",
    "depends_on": [],
    "start_line": 271,
    "end_line": 276,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_loggerd.TestLoggerd.test_not_preserving_unflagged_segments": {
    "id": "system.loggerd.tests.test_loggerd.TestLoggerd.test_not_preserving_unflagged_segments",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_loggerd.py",
    "relative_path": "system\\loggerd\\tests\\test_loggerd.py",
    "depends_on": [],
    "start_line": 278,
    "end_line": 283,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_uploader.FakeLogHandler": {
    "id": "system.loggerd.tests.test_uploader.FakeLogHandler",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_uploader.py",
    "relative_path": "system\\loggerd\\tests\\test_uploader.py",
    "depends_on": [],
    "start_line": 15,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_uploader.FakeLogHandler.__init__": {
    "id": "system.loggerd.tests.test_uploader.FakeLogHandler.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_uploader.py",
    "relative_path": "system\\loggerd\\tests\\test_uploader.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_uploader.FakeLogHandler.reset": {
    "id": "system.loggerd.tests.test_uploader.FakeLogHandler.reset",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_uploader.py",
    "relative_path": "system\\loggerd\\tests\\test_uploader.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_uploader.FakeLogHandler.emit": {
    "id": "system.loggerd.tests.test_uploader.FakeLogHandler.emit",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_uploader.py",
    "relative_path": "system\\loggerd\\tests\\test_uploader.py",
    "depends_on": [],
    "start_line": 24,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_uploader.TestUploader": {
    "id": "system.loggerd.tests.test_uploader.TestUploader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_uploader.py",
    "relative_path": "system\\loggerd\\tests\\test_uploader.py",
    "depends_on": [],
    "start_line": 38,
    "end_line": 184,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_uploader.TestUploader.setup_method": {
    "id": "system.loggerd.tests.test_uploader.TestUploader.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_uploader.py",
    "relative_path": "system\\loggerd\\tests\\test_uploader.py",
    "depends_on": [],
    "start_line": 39,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_uploader.TestUploader.start_thread": {
    "id": "system.loggerd.tests.test_uploader.TestUploader.start_thread",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_uploader.py",
    "relative_path": "system\\loggerd\\tests\\test_uploader.py",
    "depends_on": [],
    "start_line": 43,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_uploader.TestUploader.join_thread": {
    "id": "system.loggerd.tests.test_uploader.TestUploader.join_thread",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_uploader.py",
    "relative_path": "system\\loggerd\\tests\\test_uploader.py",
    "depends_on": [],
    "start_line": 49,
    "end_line": 51,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_uploader.TestUploader.gen_files": {
    "id": "system.loggerd.tests.test_uploader.TestUploader.gen_files",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_uploader.py",
    "relative_path": "system\\loggerd\\tests\\test_uploader.py",
    "depends_on": [],
    "start_line": 53,
    "end_line": 60,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_uploader.TestUploader.gen_order": {
    "id": "system.loggerd.tests.test_uploader.TestUploader.gen_order",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_uploader.py",
    "relative_path": "system\\loggerd\\tests\\test_uploader.py",
    "depends_on": [],
    "start_line": 62,
    "end_line": 69,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_uploader.TestUploader.test_upload": {
    "id": "system.loggerd.tests.test_uploader.TestUploader.test_upload",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_uploader.py",
    "relative_path": "system\\loggerd\\tests\\test_uploader.py",
    "depends_on": [],
    "start_line": 71,
    "end_line": 87,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_uploader.TestUploader.test_upload_with_wrong_xattr": {
    "id": "system.loggerd.tests.test_uploader.TestUploader.test_upload_with_wrong_xattr",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_uploader.py",
    "relative_path": "system\\loggerd\\tests\\test_uploader.py",
    "depends_on": [],
    "start_line": 89,
    "end_line": 105,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_uploader.TestUploader.test_upload_ignored": {
    "id": "system.loggerd.tests.test_uploader.TestUploader.test_upload_ignored",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_uploader.py",
    "relative_path": "system\\loggerd\\tests\\test_uploader.py",
    "depends_on": [],
    "start_line": 107,
    "end_line": 124,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_uploader.TestUploader.test_upload_files_in_create_order": {
    "id": "system.loggerd.tests.test_uploader.TestUploader.test_upload_files_in_create_order",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_uploader.py",
    "relative_path": "system\\loggerd\\tests\\test_uploader.py",
    "depends_on": [],
    "start_line": 126,
    "end_line": 149,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_uploader.TestUploader.test_no_upload_with_lock_file": {
    "id": "system.loggerd.tests.test_uploader.TestUploader.test_no_upload_with_lock_file",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_uploader.py",
    "relative_path": "system\\loggerd\\tests\\test_uploader.py",
    "depends_on": [],
    "start_line": 151,
    "end_line": 164,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_uploader.TestUploader.test_no_upload_with_xattr": {
    "id": "system.loggerd.tests.test_uploader.TestUploader.test_no_upload_with_xattr",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_uploader.py",
    "relative_path": "system\\loggerd\\tests\\test_uploader.py",
    "depends_on": [],
    "start_line": 166,
    "end_line": 174,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.loggerd.tests.test_uploader.TestUploader.test_clear_locks_on_startup": {
    "id": "system.loggerd.tests.test_uploader.TestUploader.test_clear_locks_on_startup",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\loggerd\\tests\\test_uploader.py",
    "relative_path": "system\\loggerd\\tests\\test_uploader.py",
    "depends_on": [],
    "start_line": 176,
    "end_line": 184,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.build.build": {
    "id": "system.manager.build.build",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\build.py",
    "relative_path": "system\\manager\\build.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 87,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.helpers.unblock_stdout": {
    "id": "system.manager.helpers.unblock_stdout",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\helpers.py",
    "relative_path": "system\\manager\\helpers.py",
    "depends_on": [],
    "start_line": 15,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.helpers.write_onroad_params": {
    "id": "system.manager.helpers.write_onroad_params",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\helpers.py",
    "relative_path": "system\\manager\\helpers.py",
    "depends_on": [],
    "start_line": 48,
    "end_line": 50,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.helpers.save_bootlog": {
    "id": "system.manager.helpers.save_bootlog",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\helpers.py",
    "relative_path": "system\\manager\\helpers.py",
    "depends_on": [],
    "start_line": 53,
    "end_line": 67,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.manager.manager_init": {
    "id": "system.manager.manager.manager_init",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\manager.py",
    "relative_path": "system\\manager\\manager.py",
    "depends_on": [],
    "start_line": 22,
    "end_line": 99,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.manager.manager_cleanup": {
    "id": "system.manager.manager.manager_cleanup",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\manager.py",
    "relative_path": "system\\manager\\manager.py",
    "depends_on": [],
    "start_line": 102,
    "end_line": 111,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.manager.manager_thread": {
    "id": "system.manager.manager.manager_thread",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\manager.py",
    "relative_path": "system\\manager\\manager.py",
    "depends_on": [],
    "start_line": 114,
    "end_line": 173,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.manager.main": {
    "id": "system.manager.manager.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\manager.py",
    "relative_path": "system\\manager\\manager.py",
    "depends_on": [
      "system.manager.manager.manager_thread",
      "system.manager.manager.manager_cleanup",
      "system.manager.manager.manager_init"
    ],
    "start_line": 176,
    "end_line": 201,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.launcher": {
    "id": "system.manager.process.launcher",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [],
    "start_line": 25,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.nativelauncher": {
    "id": "system.manager.process.nativelauncher",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [],
    "start_line": 51,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.join_process": {
    "id": "system.manager.process.join_process",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [],
    "start_line": 59,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.ManagerProcess": {
    "id": "system.manager.process.ManagerProcess",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [
      "system.manager.process.join_process"
    ],
    "start_line": 67,
    "end_line": 168,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.ManagerProcess.prepare": {
    "id": "system.manager.process.ManagerProcess.prepare",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [],
    "start_line": 81,
    "end_line": 82,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.ManagerProcess.start": {
    "id": "system.manager.process.ManagerProcess.start",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [],
    "start_line": 85,
    "end_line": 86,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.ManagerProcess.restart": {
    "id": "system.manager.process.ManagerProcess.restart",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [],
    "start_line": 88,
    "end_line": 90,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.ManagerProcess.check_watchdog": {
    "id": "system.manager.process.ManagerProcess.check_watchdog",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [],
    "start_line": 92,
    "end_line": 111,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.ManagerProcess.stop": {
    "id": "system.manager.process.ManagerProcess.stop",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [
      "system.manager.process.join_process"
    ],
    "start_line": 113,
    "end_line": 143,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.ManagerProcess.signal": {
    "id": "system.manager.process.ManagerProcess.signal",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [],
    "start_line": 145,
    "end_line": 158,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.ManagerProcess.get_process_state_msg": {
    "id": "system.manager.process.ManagerProcess.get_process_state_msg",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [],
    "start_line": 160,
    "end_line": 168,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.NativeProcess": {
    "id": "system.manager.process.NativeProcess",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [
      "system.manager.process.ManagerProcess",
      "system.manager.process.nativelauncher"
    ],
    "start_line": 171,
    "end_line": 198,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.NativeProcess.__init__": {
    "id": "system.manager.process.NativeProcess.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [
      "system.manager.process.nativelauncher"
    ],
    "start_line": 172,
    "end_line": 180,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.NativeProcess.prepare": {
    "id": "system.manager.process.NativeProcess.prepare",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [],
    "start_line": 182,
    "end_line": 183,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.NativeProcess.start": {
    "id": "system.manager.process.NativeProcess.start",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [],
    "start_line": 185,
    "end_line": 198,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.PythonProcess": {
    "id": "system.manager.process.PythonProcess",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [
      "system.manager.process.launcher",
      "system.manager.process.ManagerProcess"
    ],
    "start_line": 201,
    "end_line": 232,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.PythonProcess.__init__": {
    "id": "system.manager.process.PythonProcess.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [
      "system.manager.process.launcher"
    ],
    "start_line": 202,
    "end_line": 209,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.PythonProcess.prepare": {
    "id": "system.manager.process.PythonProcess.prepare",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [],
    "start_line": 211,
    "end_line": 214,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.PythonProcess.start": {
    "id": "system.manager.process.PythonProcess.start",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [],
    "start_line": 216,
    "end_line": 232,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.DaemonProcess": {
    "id": "system.manager.process.DaemonProcess",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [
      "system.manager.process.ManagerProcess"
    ],
    "start_line": 235,
    "end_line": 278,
    "has_docstring": true,
    "docstring": "Python process that has to stay running across manager restart.\n  This is used for athena so you don't lose SSH access when restarting manager.",
    "language": "python"
  },
  "system.manager.process.DaemonProcess.__init__": {
    "id": "system.manager.process.DaemonProcess.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [],
    "start_line": 238,
    "end_line": 243,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.DaemonProcess.should_run": {
    "id": "system.manager.process.DaemonProcess.should_run",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [],
    "start_line": 246,
    "end_line": 247,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.DaemonProcess.prepare": {
    "id": "system.manager.process.DaemonProcess.prepare",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [],
    "start_line": 249,
    "end_line": 250,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.DaemonProcess.start": {
    "id": "system.manager.process.DaemonProcess.start",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [],
    "start_line": 252,
    "end_line": 275,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.DaemonProcess.stop": {
    "id": "system.manager.process.DaemonProcess.stop",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [],
    "start_line": 277,
    "end_line": 278,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process.ensure_running": {
    "id": "system.manager.process.ensure_running",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process.py",
    "relative_path": "system\\manager\\process.py",
    "depends_on": [
      "system.manager.process.ManagerProcess"
    ],
    "start_line": 281,
    "end_line": 298,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process_config.driverview": {
    "id": "system.manager.process_config.driverview",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process_config.py",
    "relative_path": "system\\manager\\process_config.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 12,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process_config.notcar": {
    "id": "system.manager.process_config.notcar",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process_config.py",
    "relative_path": "system\\manager\\process_config.py",
    "depends_on": [],
    "start_line": 14,
    "end_line": 15,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process_config.iscar": {
    "id": "system.manager.process_config.iscar",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process_config.py",
    "relative_path": "system\\manager\\process_config.py",
    "depends_on": [],
    "start_line": 17,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process_config.logging": {
    "id": "system.manager.process_config.logging",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process_config.py",
    "relative_path": "system\\manager\\process_config.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process_config.ublox_available": {
    "id": "system.manager.process_config.ublox_available",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process_config.py",
    "relative_path": "system\\manager\\process_config.py",
    "depends_on": [],
    "start_line": 24,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process_config.ublox": {
    "id": "system.manager.process_config.ublox",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process_config.py",
    "relative_path": "system\\manager\\process_config.py",
    "depends_on": [
      "system.manager.process_config.ublox_available"
    ],
    "start_line": 27,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process_config.joystick": {
    "id": "system.manager.process_config.joystick",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process_config.py",
    "relative_path": "system\\manager\\process_config.py",
    "depends_on": [],
    "start_line": 33,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process_config.not_joystick": {
    "id": "system.manager.process_config.not_joystick",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process_config.py",
    "relative_path": "system\\manager\\process_config.py",
    "depends_on": [],
    "start_line": 36,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process_config.long_maneuver": {
    "id": "system.manager.process_config.long_maneuver",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process_config.py",
    "relative_path": "system\\manager\\process_config.py",
    "depends_on": [],
    "start_line": 39,
    "end_line": 40,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process_config.not_long_maneuver": {
    "id": "system.manager.process_config.not_long_maneuver",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process_config.py",
    "relative_path": "system\\manager\\process_config.py",
    "depends_on": [],
    "start_line": 42,
    "end_line": 43,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process_config.qcomgps": {
    "id": "system.manager.process_config.qcomgps",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process_config.py",
    "relative_path": "system\\manager\\process_config.py",
    "depends_on": [
      "system.manager.process_config.ublox_available"
    ],
    "start_line": 45,
    "end_line": 46,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process_config.always_run": {
    "id": "system.manager.process_config.always_run",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process_config.py",
    "relative_path": "system\\manager\\process_config.py",
    "depends_on": [],
    "start_line": 48,
    "end_line": 49,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process_config.only_onroad": {
    "id": "system.manager.process_config.only_onroad",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process_config.py",
    "relative_path": "system\\manager\\process_config.py",
    "depends_on": [],
    "start_line": 51,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process_config.only_offroad": {
    "id": "system.manager.process_config.only_offroad",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process_config.py",
    "relative_path": "system\\manager\\process_config.py",
    "depends_on": [],
    "start_line": 54,
    "end_line": 55,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process_config.or_": {
    "id": "system.manager.process_config.or_",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process_config.py",
    "relative_path": "system\\manager\\process_config.py",
    "depends_on": [],
    "start_line": 57,
    "end_line": 58,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.process_config.and_": {
    "id": "system.manager.process_config.and_",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\process_config.py",
    "relative_path": "system\\manager\\process_config.py",
    "depends_on": [],
    "start_line": 60,
    "end_line": 61,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.test.test_manager.TestManager": {
    "id": "system.manager.test.test_manager.TestManager",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\test\\test_manager.py",
    "relative_path": "system\\manager\\test\\test_manager.py",
    "depends_on": [],
    "start_line": 19,
    "end_line": 68,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.test.test_manager.TestManager.setup_method": {
    "id": "system.manager.test.test_manager.TestManager.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\test\\test_manager.py",
    "relative_path": "system\\manager\\test\\test_manager.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.test.test_manager.TestManager.teardown_method": {
    "id": "system.manager.test.test_manager.TestManager.teardown_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\test\\test_manager.py",
    "relative_path": "system\\manager\\test\\test_manager.py",
    "depends_on": [],
    "start_line": 27,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.test.test_manager.TestManager.test_manager_prepare": {
    "id": "system.manager.test.test_manager.TestManager.test_manager_prepare",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\test\\test_manager.py",
    "relative_path": "system\\manager\\test\\test_manager.py",
    "depends_on": [],
    "start_line": 30,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.test.test_manager.TestManager.test_duplicate_procs": {
    "id": "system.manager.test.test_manager.TestManager.test_duplicate_procs",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\test\\test_manager.py",
    "relative_path": "system\\manager\\test\\test_manager.py",
    "depends_on": [],
    "start_line": 34,
    "end_line": 35,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.test.test_manager.TestManager.test_blacklisted_procs": {
    "id": "system.manager.test.test_manager.TestManager.test_blacklisted_procs",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\test\\test_manager.py",
    "relative_path": "system\\manager\\test\\test_manager.py",
    "depends_on": [],
    "start_line": 37,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.manager.test.test_manager.TestManager.test_clean_exit": {
    "id": "system.manager.test.test_manager.TestManager.test_clean_exit",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\manager\\test\\test_manager.py",
    "relative_path": "system\\manager\\test\\test_manager.py",
    "depends_on": [],
    "start_line": 42,
    "end_line": 68,
    "has_docstring": true,
    "docstring": "\n      Ensure all processes exit cleanly when stopped.\n    ",
    "language": "python"
  },
  "system.proclogd.main.main": {
    "id": "system.proclogd.main.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\proclogd\\main.cc",
    "relative_path": "system\\proclogd\\main.cc",
    "depends_on": [],
    "start_line": 10,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int main(int argc, char **argv) {\n  setpriority(PRIO_PROCESS, 0, -15);\n\n  RateKeeper rk(\"proclogd\", 0.5);\n  PubMaster publisher({\"procLog\"});\n\n  while (!do_exit) {\n    MessageBuilder msg;\n    buildProcLogMessage(msg);\n    publisher.send(\"procLog\", msg);\n\n    rk.keepTime();\n  }\n\n  return 0;\n}\n"
  },
  "system.proclogd.proclog.cpuTimes": {
    "id": "system.proclogd.proclog.cpuTimes",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\proclogd\\proclog.cc",
    "relative_path": "system\\proclogd\\proclog.cc",
    "depends_on": [],
    "start_line": 16,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::vector<CPUTime> cpuTimes(std::istream &stream) {\n  std::vector<CPUTime> cpu_times;\n  std::string line;\n  // skip the first line for cpu total\n  std::getline(stream, line);\n  while (std::getline(stream, line)) {\n    if (line.compare(0, 3, \"cpu\") != 0) break;\n\n    CPUTime t = {};\n    std::istringstream iss(line);\n    if (iss.ignore(3) >> t.id >> t.utime >> t.ntime >> t.stime >> t.itime >> t.iowtime >> t.irqtime >> t.sirqtime)\n      cpu_times.push_back(t);\n  }\n  return cpu_times;\n}\n"
  },
  "system.proclogd.proclog.memInfo": {
    "id": "system.proclogd.proclog.memInfo",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\proclogd\\proclog.cc",
    "relative_path": "system\\proclogd\\proclog.cc",
    "depends_on": [],
    "start_line": 33,
    "end_line": 44,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::unordered_map<std::string, uint64_t> memInfo(std::istream &stream) {\n  std::unordered_map<std::string, uint64_t> mem_info;\n  std::string line, key;\n  while (std::getline(stream, line)) {\n    uint64_t val = 0;\n    std::istringstream iss(line);\n    if (iss >> key >> val) {\n      mem_info[key] = val * 1024;\n    }\n  }\n  return mem_info;\n}\n"
  },
  "system.proclogd.proclog.procStat": {
    "id": "system.proclogd.proclog.procStat",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\proclogd\\proclog.cc",
    "relative_path": "system\\proclogd\\proclog.cc",
    "depends_on": [],
    "start_line": 66,
    "end_line": 108,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::optional<ProcStat> procStat(std::string stat) {\n  // To avoid being fooled by names containing a closing paren, scan backwards.\n  auto open_paren = stat.find('(');\n  auto close_paren = stat.rfind(')');\n  if (open_paren == std::string::npos || close_paren == std::string::npos || open_paren > close_paren) {\n    return std::nullopt;\n  }\n\n  std::string name = stat.substr(open_paren + 1, close_paren - open_paren - 1);\n  // replace space in name with _\n  std::replace(&stat[open_paren], &stat[close_paren], ' ', '_');\n  std::istringstream iss(stat);\n  std::vector<std::string> v{std::istream_iterator<std::string>(iss),\n                             std::istream_iterator<std::string>()};\n  try {\n    if (v.size() != StatPos::MAX_FIELD) {\n      throw std::invalid_argument(\"stat\");\n    }\n    ProcStat p = {\n      .name = name,\n      .pid = stoi(v[StatPos::pid - 1]),\n      .state = v[StatPos::state - 1][0],\n      .ppid = stoi(v[StatPos::ppid - 1]),\n      .utime = stoul(v[StatPos::utime - 1]),\n      .stime = stoul(v[StatPos::stime - 1]),\n      .cutime = stol(v[StatPos::cutime - 1]),\n      .cstime = stol(v[StatPos::cstime - 1]),\n      .priority = stol(v[StatPos::priority - 1]),\n      .nice = stol(v[StatPos::nice - 1]),\n      .num_threads = stol(v[StatPos::num_threads - 1]),\n      .starttime = stoull(v[StatPos::starttime - 1]),\n      .vms = stoul(v[StatPos::vsize - 1]),\n      .rss = stol(v[StatPos::rss - 1]),\n      .processor = stoi(v[StatPos::processor - 1]),\n    };\n    return p;\n  } catch (const std::invalid_argument &e) {\n    LOGE(\"failed to parse procStat (%s) :%s\", e.what(), stat.c_str());\n  } catch (const std::out_of_range &e) {\n    LOGE(\"failed to parse procStat (%s) :%s\", e.what(), stat.c_str());\n  }\n  return std::nullopt;\n}\n"
  },
  "system.proclogd.proclog.pids": {
    "id": "system.proclogd.proclog.pids",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\proclogd\\proclog.cc",
    "relative_path": "system\\proclogd\\proclog.cc",
    "depends_on": [],
    "start_line": 111,
    "end_line": 127,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::vector<int> pids() {\n  std::vector<int> ids;\n  DIR *d = opendir(\"/proc\");\n  assert(d);\n  char *p_end;\n  struct dirent *de = NULL;\n  while ((de = readdir(d))) {\n    if (de->d_type == DT_DIR) {\n      int pid = strtol(de->d_name, &p_end, 10);\n      if (p_end == (de->d_name + strlen(de->d_name))) {\n        ids.push_back(pid);\n      }\n    }\n  }\n  closedir(d);\n  return ids;\n}\n"
  },
  "system.proclogd.proclog.cmdline": {
    "id": "system.proclogd.proclog.cmdline",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\proclogd\\proclog.cc",
    "relative_path": "system\\proclogd\\proclog.cc",
    "depends_on": [],
    "start_line": 130,
    "end_line": 139,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::vector<std::string> cmdline(std::istream &stream) {\n  std::vector<std::string> ret;\n  std::string line;\n  while (std::getline(stream, line, '\\0')) {\n    if (!line.empty()) {\n      ret.push_back(line);\n    }\n  }\n  return ret;\n}\n"
  },
  "system.proclogd.proclog.getProcExtraInfo": {
    "id": "system.proclogd.proclog.getProcExtraInfo",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\proclogd\\proclog.cc",
    "relative_path": "system\\proclogd\\proclog.cc",
    "depends_on": [],
    "start_line": 141,
    "end_line": 153,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "const ProcCache &getProcExtraInfo(int pid, const std::string &name) {\n  static std::unordered_map<pid_t, ProcCache> proc_cache;\n  ProcCache &cache = proc_cache[pid];\n  if (cache.pid != pid || cache.name != name) {\n    cache.pid = pid;\n    cache.name = name;\n    std::string proc_path = \"/proc/\" + std::to_string(pid);\n    cache.exe = util::readlink(proc_path + \"/exe\");\n    std::ifstream stream(proc_path + \"/cmdline\");\n    cache.cmdline = cmdline(stream);\n  }\n  return cache;\n}\n"
  },
  "system.proclogd.proclog.buildCPUTimes": {
    "id": "system.proclogd.proclog.buildCPUTimes",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\proclogd\\proclog.cc",
    "relative_path": "system\\proclogd\\proclog.cc",
    "depends_on": [],
    "start_line": 160,
    "end_line": 177,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void buildCPUTimes(cereal::ProcLog::Builder &builder) {\n  std::ifstream stream(\"/proc/stat\");\n  std::vector<CPUTime> stats = Parser::cpuTimes(stream);\n\n  auto log_cpu_times = builder.initCpuTimes(stats.size());\n  for (int i = 0; i < stats.size(); ++i) {\n    auto l = log_cpu_times[i];\n    const CPUTime &r = stats[i];\n    l.setCpuNum(r.id);\n    l.setUser(r.utime / jiffy);\n    l.setNice(r.ntime / jiffy);\n    l.setSystem(r.stime / jiffy);\n    l.setIdle(r.itime / jiffy);\n    l.setIowait(r.iowtime / jiffy);\n    l.setIrq(r.irqtime / jiffy);\n    l.setSoftirq(r.sirqtime / jiffy);\n  }\n}\n"
  },
  "system.proclogd.proclog.buildMemInfo": {
    "id": "system.proclogd.proclog.buildMemInfo",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\proclogd\\proclog.cc",
    "relative_path": "system\\proclogd\\proclog.cc",
    "depends_on": [],
    "start_line": 179,
    "end_line": 192,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void buildMemInfo(cereal::ProcLog::Builder &builder) {\n  std::ifstream stream(\"/proc/meminfo\");\n  auto mem_info = Parser::memInfo(stream);\n\n  auto mem = builder.initMem();\n  mem.setTotal(mem_info[\"MemTotal:\"]);\n  mem.setFree(mem_info[\"MemFree:\"]);\n  mem.setAvailable(mem_info[\"MemAvailable:\"]);\n  mem.setBuffers(mem_info[\"Buffers:\"]);\n  mem.setCached(mem_info[\"Cached:\"]);\n  mem.setActive(mem_info[\"Active:\"]);\n  mem.setInactive(mem_info[\"Inactive:\"]);\n  mem.setShared(mem_info[\"Shmem:\"]);\n}\n"
  },
  "system.proclogd.proclog.buildProcs": {
    "id": "system.proclogd.proclog.buildProcs",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\proclogd\\proclog.cc",
    "relative_path": "system\\proclogd\\proclog.cc",
    "depends_on": [],
    "start_line": 194,
    "end_line": 232,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void buildProcs(cereal::ProcLog::Builder &builder) {\n  auto pids = Parser::pids();\n  std::vector<ProcStat> proc_stats;\n  proc_stats.reserve(pids.size());\n  for (int pid : pids) {\n    std::string path = \"/proc/\" + std::to_string(pid) + \"/stat\";\n    if (auto stat = Parser::procStat(util::read_file(path))) {\n      proc_stats.push_back(*stat);\n    }\n  }\n\n  auto procs = builder.initProcs(proc_stats.size());\n  for (size_t i = 0; i < proc_stats.size(); i++) {\n    auto l = procs[i];\n    const ProcStat &r = proc_stats[i];\n    l.setPid(r.pid);\n    l.setState(r.state);\n    l.setPpid(r.ppid);\n    l.setCpuUser(r.utime / jiffy);\n    l.setCpuSystem(r.stime / jiffy);\n    l.setCpuChildrenUser(r.cutime / jiffy);\n    l.setCpuChildrenSystem(r.cstime / jiffy);\n    l.setPriority(r.priority);\n    l.setNice(r.nice);\n    l.setNumThreads(r.num_threads);\n    l.setStartTime(r.starttime / jiffy);\n    l.setMemVms(r.vms);\n    l.setMemRss((uint64_t)r.rss * page_size);\n    l.setProcessor(r.processor);\n    l.setName(r.name);\n\n    const ProcCache &extra_info = Parser::getProcExtraInfo(r.pid, r.name);\n    l.setExe(extra_info.exe);\n    auto lcmdline = l.initCmdline(extra_info.cmdline.size());\n    for (size_t j = 0; j < lcmdline.size(); j++) {\n      lcmdline.set(j, extra_info.cmdline[j]);\n    }\n  }\n}\n"
  },
  "system.proclogd.proclog.buildProcLogMessage": {
    "id": "system.proclogd.proclog.buildProcLogMessage",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\proclogd\\proclog.cc",
    "relative_path": "system\\proclogd\\proclog.cc",
    "depends_on": [],
    "start_line": 234,
    "end_line": 239,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void buildProcLogMessage(MessageBuilder &msg) {\n  auto procLog = msg.initEvent().initProcLog();\n  buildProcs(procLog);\n  buildCPUTimes(procLog);\n  buildMemInfo(procLog);\n}\n"
  },
  "system.proclogd.tests.test_proclog.test_cmdline": {
    "id": "system.proclogd.tests.test_proclog.test_cmdline",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\proclogd\\tests\\test_proclog.cc",
    "relative_path": "system\\proclogd\\tests\\test_proclog.cc",
    "depends_on": [],
    "start_line": 97,
    "end_line": 105,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void test_cmdline(std::string cmdline, const std::vector<std::string> requires) {\n  std::stringstream ss;\n  ss.write(&cmdline[0], cmdline.size());\n  auto cmds = Parser::cmdline(ss);\n  REQUIRE(cmds.size() == requires.size());\n  for (int i = 0; i < requires.size(); ++i) {\n    REQUIRE(cmds[i] == requires[i]);\n  }\n}\n"
  },
  "system.qcomgpsd.modemdiag.ModemDiag": {
    "id": "system.qcomgpsd.modemdiag.ModemDiag",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\modemdiag.py",
    "relative_path": "system\\qcomgpsd\\modemdiag.py",
    "depends_on": [
      "system.qcomgpsd.modemdiag.ModemDiag"
    ],
    "start_line": 6,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.modemdiag.ModemDiag.__init__": {
    "id": "system.qcomgpsd.modemdiag.ModemDiag.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\modemdiag.py",
    "relative_path": "system\\qcomgpsd\\modemdiag.py",
    "depends_on": [],
    "start_line": 7,
    "end_line": 9,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.modemdiag.ModemDiag.open_serial": {
    "id": "system.qcomgpsd.modemdiag.ModemDiag.open_serial",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\modemdiag.py",
    "relative_path": "system\\qcomgpsd\\modemdiag.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.modemdiag.ModemDiag.hdlc_encapsulate": {
    "id": "system.qcomgpsd.modemdiag.ModemDiag.hdlc_encapsulate",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\modemdiag.py",
    "relative_path": "system\\qcomgpsd\\modemdiag.py",
    "depends_on": [
      "system.qcomgpsd.modemdiag.ModemDiag"
    ],
    "start_line": 22,
    "end_line": 27,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.modemdiag.ModemDiag.hdlc_decapsulate": {
    "id": "system.qcomgpsd.modemdiag.ModemDiag.hdlc_decapsulate",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\modemdiag.py",
    "relative_path": "system\\qcomgpsd\\modemdiag.py",
    "depends_on": [
      "system.qcomgpsd.modemdiag.ModemDiag"
    ],
    "start_line": 29,
    "end_line": 36,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.modemdiag.ModemDiag.recv": {
    "id": "system.qcomgpsd.modemdiag.ModemDiag.recv",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\modemdiag.py",
    "relative_path": "system\\qcomgpsd\\modemdiag.py",
    "depends_on": [],
    "start_line": 38,
    "end_line": 49,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.modemdiag.ModemDiag.send": {
    "id": "system.qcomgpsd.modemdiag.ModemDiag.send",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\modemdiag.py",
    "relative_path": "system\\qcomgpsd\\modemdiag.py",
    "depends_on": [],
    "start_line": 51,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.modemdiag.send_recv": {
    "id": "system.qcomgpsd.modemdiag.send_recv",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\modemdiag.py",
    "relative_path": "system\\qcomgpsd\\modemdiag.py",
    "depends_on": [],
    "start_line": 62,
    "end_line": 68,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.modemdiag.setup_logs": {
    "id": "system.qcomgpsd.modemdiag.setup_logs",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\modemdiag.py",
    "relative_path": "system\\qcomgpsd\\modemdiag.py",
    "depends_on": [
      "system.qcomgpsd.modemdiag.send_recv"
    ],
    "start_line": 70,
    "end_line": 94,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.nmeaport.GnssClockNmeaPort": {
    "id": "system.qcomgpsd.nmeaport.GnssClockNmeaPort",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\nmeaport.py",
    "relative_path": "system\\qcomgpsd\\nmeaport.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 33,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.nmeaport.GnssClockNmeaPort.__post_init__": {
    "id": "system.qcomgpsd.nmeaport.GnssClockNmeaPort.__post_init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\nmeaport.py",
    "relative_path": "system\\qcomgpsd\\nmeaport.py",
    "depends_on": [],
    "start_line": 30,
    "end_line": 33,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.nmeaport.GnssMeasNmeaPort": {
    "id": "system.qcomgpsd.nmeaport.GnssMeasNmeaPort",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\nmeaport.py",
    "relative_path": "system\\qcomgpsd\\nmeaport.py",
    "depends_on": [],
    "start_line": 36,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.nmeaport.GnssMeasNmeaPort.__post_init__": {
    "id": "system.qcomgpsd.nmeaport.GnssMeasNmeaPort.__post_init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\nmeaport.py",
    "relative_path": "system\\qcomgpsd\\nmeaport.py",
    "depends_on": [],
    "start_line": 73,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.nmeaport.nmea_checksum_ok": {
    "id": "system.qcomgpsd.nmeaport.nmea_checksum_ok",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\nmeaport.py",
    "relative_path": "system\\qcomgpsd\\nmeaport.py",
    "depends_on": [],
    "start_line": 78,
    "end_line": 91,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.nmeaport.process_nmea_port_messages": {
    "id": "system.qcomgpsd.nmeaport.process_nmea_port_messages",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\nmeaport.py",
    "relative_path": "system\\qcomgpsd\\nmeaport.py",
    "depends_on": [
      "system.qcomgpsd.nmeaport.GnssMeasNmeaPort",
      "system.qcomgpsd.nmeaport.GnssClockNmeaPort",
      "system.qcomgpsd.nmeaport.nmea_checksum_ok"
    ],
    "start_line": 93,
    "end_line": 118,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.nmeaport.main": {
    "id": "system.qcomgpsd.nmeaport.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\nmeaport.py",
    "relative_path": "system\\qcomgpsd\\nmeaport.py",
    "depends_on": [
      "system.qcomgpsd.nmeaport.process_nmea_port_messages"
    ],
    "start_line": 120,
    "end_line": 166,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.qcomgpsd.try_setup_logs": {
    "id": "system.qcomgpsd.qcomgpsd.try_setup_logs",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\qcomgpsd.py",
    "relative_path": "system\\qcomgpsd\\qcomgpsd.py",
    "depends_on": [],
    "start_line": 90,
    "end_line": 91,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.qcomgpsd.at_cmd": {
    "id": "system.qcomgpsd.qcomgpsd.at_cmd",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\qcomgpsd.py",
    "relative_path": "system\\qcomgpsd\\qcomgpsd.py",
    "depends_on": [],
    "start_line": 94,
    "end_line": 95,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.qcomgpsd.gps_enabled": {
    "id": "system.qcomgpsd.qcomgpsd.gps_enabled",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\qcomgpsd.py",
    "relative_path": "system\\qcomgpsd\\qcomgpsd.py",
    "depends_on": [
      "system.qcomgpsd.qcomgpsd.at_cmd"
    ],
    "start_line": 97,
    "end_line": 98,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.qcomgpsd.download_assistance": {
    "id": "system.qcomgpsd.qcomgpsd.download_assistance",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\qcomgpsd.py",
    "relative_path": "system\\qcomgpsd\\qcomgpsd.py",
    "depends_on": [],
    "start_line": 100,
    "end_line": 115,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.qcomgpsd.downloader_loop": {
    "id": "system.qcomgpsd.qcomgpsd.downloader_loop",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\qcomgpsd.py",
    "relative_path": "system\\qcomgpsd\\qcomgpsd.py",
    "depends_on": [
      "system.qcomgpsd.qcomgpsd.download_assistance"
    ],
    "start_line": 117,
    "end_line": 130,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.qcomgpsd.inject_assistance": {
    "id": "system.qcomgpsd.qcomgpsd.inject_assistance",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\qcomgpsd.py",
    "relative_path": "system\\qcomgpsd\\qcomgpsd.py",
    "depends_on": [],
    "start_line": 133,
    "end_line": 136,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.qcomgpsd.setup_quectel": {
    "id": "system.qcomgpsd.qcomgpsd.setup_quectel",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\qcomgpsd.py",
    "relative_path": "system\\qcomgpsd\\qcomgpsd.py",
    "depends_on": [
      "system.qcomgpsd.qcomgpsd.at_cmd",
      "system.qcomgpsd.qcomgpsd.try_setup_logs",
      "system.qcomgpsd.qcomgpsd.inject_assistance",
      "system.qcomgpsd.qcomgpsd.gps_enabled"
    ],
    "start_line": 139,
    "end_line": 201,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.qcomgpsd.teardown_quectel": {
    "id": "system.qcomgpsd.qcomgpsd.teardown_quectel",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\qcomgpsd.py",
    "relative_path": "system\\qcomgpsd\\qcomgpsd.py",
    "depends_on": [
      "system.qcomgpsd.qcomgpsd.at_cmd",
      "system.qcomgpsd.qcomgpsd.try_setup_logs",
      "system.qcomgpsd.qcomgpsd.gps_enabled"
    ],
    "start_line": 203,
    "end_line": 207,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.qcomgpsd.wait_for_modem": {
    "id": "system.qcomgpsd.qcomgpsd.wait_for_modem",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\qcomgpsd.py",
    "relative_path": "system\\qcomgpsd\\qcomgpsd.py",
    "depends_on": [],
    "start_line": 210,
    "end_line": 216,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.qcomgpsd.main": {
    "id": "system.qcomgpsd.qcomgpsd.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\qcomgpsd.py",
    "relative_path": "system\\qcomgpsd\\qcomgpsd.py",
    "depends_on": [
      "system.qcomgpsd.qcomgpsd.teardown_quectel",
      "system.qcomgpsd.qcomgpsd.setup_quectel",
      "system.qcomgpsd.qcomgpsd.wait_for_modem",
      "system.qcomgpsd.qcomgpsd.downloader_loop"
    ],
    "start_line": 219,
    "end_line": 460,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.structs.name_to_camelcase": {
    "id": "system.qcomgpsd.structs.name_to_camelcase",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\structs.py",
    "relative_path": "system\\qcomgpsd\\structs.py",
    "depends_on": [],
    "start_line": 281,
    "end_line": 291,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.structs.parse_struct": {
    "id": "system.qcomgpsd.structs.parse_struct",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\structs.py",
    "relative_path": "system\\qcomgpsd\\structs.py",
    "depends_on": [],
    "start_line": 293,
    "end_line": 328,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.structs.dict_unpacker": {
    "id": "system.qcomgpsd.structs.dict_unpacker",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\structs.py",
    "relative_path": "system\\qcomgpsd\\structs.py",
    "depends_on": [
      "system.qcomgpsd.structs.name_to_camelcase",
      "system.qcomgpsd.structs.parse_struct"
    ],
    "start_line": 330,
    "end_line": 335,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.structs.relist": {
    "id": "system.qcomgpsd.structs.relist",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\structs.py",
    "relative_path": "system\\qcomgpsd\\structs.py",
    "depends_on": [],
    "start_line": 337,
    "end_line": 353,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd": {
    "id": "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "relative_path": "system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 119,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd.setup_class": {
    "id": "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd.setup_class",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "relative_path": "system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd.teardown_class": {
    "id": "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd.teardown_class",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "relative_path": "system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "depends_on": [],
    "start_line": 25,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd.setup_method": {
    "id": "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "relative_path": "system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "depends_on": [],
    "start_line": 30,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd.teardown_method": {
    "id": "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd.teardown_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "relative_path": "system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "depends_on": [],
    "start_line": 33,
    "end_line": 35,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd._wait_for_output": {
    "id": "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd._wait_for_output",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "relative_path": "system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "depends_on": [],
    "start_line": 37,
    "end_line": 44,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd.test_no_crash_double_command": {
    "id": "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd.test_no_crash_double_command",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "relative_path": "system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "depends_on": [],
    "start_line": 46,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd.test_wait_for_modem": {
    "id": "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd.test_wait_for_modem",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "relative_path": "system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "depends_on": [],
    "start_line": 50,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd.test_startup_time": {
    "id": "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd.test_startup_time",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "relative_path": "system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "depends_on": [],
    "start_line": 58,
    "end_line": 65,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd.test_turns_off_gnss": {
    "id": "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd.test_turns_off_gnss",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "relative_path": "system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "depends_on": [],
    "start_line": 67,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd.check_assistance": {
    "id": "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd.check_assistance",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "relative_path": "system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "depends_on": [],
    "start_line": 79,
    "end_line": 93,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd.test_assistance_loading": {
    "id": "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd.test_assistance_loading",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "relative_path": "system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "depends_on": [],
    "start_line": 95,
    "end_line": 99,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd.test_no_assistance_loading": {
    "id": "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd.test_no_assistance_loading",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "relative_path": "system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "depends_on": [],
    "start_line": 101,
    "end_line": 107,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd.test_late_assistance_loading": {
    "id": "system.qcomgpsd.tests.test_qcomgpsd.TestRawgpsd.test_late_assistance_loading",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "relative_path": "system\\qcomgpsd\\tests\\test_qcomgpsd.py",
    "depends_on": [],
    "start_line": 109,
    "end_line": 119,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.sensord.sensors_qcom2.polling_loop": {
    "id": "system.sensord.sensors_qcom2.polling_loop",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\sensors_qcom2.cc",
    "relative_path": "system\\sensord\\sensors_qcom2.cc",
    "depends_on": [],
    "start_line": 105,
    "end_line": 115,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void polling_loop(Sensor *sensor, std::string msg_name) {\n  PubMaster pm({msg_name.c_str()});\n  RateKeeper rk(msg_name, services.at(msg_name).frequency);\n  while (!do_exit) {\n    MessageBuilder msg;\n    if (sensor->get_event(msg) && sensor->is_data_valid(nanos_since_boot())) {\n      pm.send(msg_name.c_str(), msg);\n    }\n    rk.keepTime();\n  }\n}\n"
  },
  "system.sensord.sensors_qcom2.sensor_loop": {
    "id": "system.sensord.sensors_qcom2.sensor_loop",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\sensors_qcom2.cc",
    "relative_path": "system\\sensord\\sensors_qcom2.cc",
    "depends_on": [],
    "start_line": 117,
    "end_line": 169,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int sensor_loop(I2CBus *i2c_bus_imu) {\n  // Sensor init\n  std::vector<std::tuple<Sensor *, std::string>> sensors_init = {\n    {new BMX055_Accel(i2c_bus_imu), \"accelerometer2\"},\n    {new BMX055_Gyro(i2c_bus_imu), \"gyroscope2\"},\n    {new BMX055_Magn(i2c_bus_imu), \"magnetometer\"},\n    {new BMX055_Temp(i2c_bus_imu), \"temperatureSensor2\"},\n\n    {new LSM6DS3_Accel(i2c_bus_imu, GPIO_LSM_INT), \"accelerometer\"},\n    {new LSM6DS3_Gyro(i2c_bus_imu, GPIO_LSM_INT, true), \"gyroscope\"},\n    {new LSM6DS3_Temp(i2c_bus_imu), \"temperatureSensor\"},\n\n    {new MMC5603NJ_Magn(i2c_bus_imu), \"magnetometer\"},\n  };\n\n  // Initialize sensors\n  std::vector<std::thread> threads;\n  for (auto &[sensor, msg_name] : sensors_init) {\n    int err = sensor->init();\n    if (err < 0) {\n      continue;\n    }\n\n    if (!sensor->has_interrupt_enabled()) {\n      threads.emplace_back(polling_loop, sensor, msg_name);\n    }\n  }\n\n  // increase interrupt quality by pinning interrupt and process to core 1\n  setpriority(PRIO_PROCESS, 0, -18);\n  util::set_core_affinity({1});\n\n  // TODO: get the IRQ number from gpiochip\n  std::string irq_path = \"/proc/irq/336/smp_affinity_list\";\n  if (!util::file_exists(irq_path)) {\n    irq_path = \"/proc/irq/335/smp_affinity_list\";\n  }\n  std::system(util::string_format(\"sudo su -c 'echo 1 > %s'\", irq_path.c_str()).c_str());\n\n  // thread for reading events via interrupts\n  threads.emplace_back(&interrupt_loop, std::ref(sensors_init));\n\n  // wait for all threads to finish\n  for (auto &t : threads) {\n    t.join();\n  }\n\n  for (auto &[sensor, msg_name] : sensors_init) {\n    sensor->shutdown();\n    delete sensor;\n  }\n  return 0;\n}\n"
  },
  "system.sensord.sensors_qcom2.main": {
    "id": "system.sensord.sensors_qcom2.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\sensors_qcom2.cc",
    "relative_path": "system\\sensord\\sensors_qcom2.cc",
    "depends_on": [],
    "start_line": 171,
    "end_line": 179,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int main(int argc, char *argv[]) {\n  try {\n    auto i2c_bus_imu = std::make_unique<I2CBus>(I2C_BUS_IMU);\n    return sensor_loop(i2c_bus_imu.get());\n  } catch (std::exception &e) {\n    LOGE(\"I2CBus init failed\");\n    return -1;\n  }\n}\n"
  },
  "system.sensord.sensors.bmx055_accel.BMX055_Accel": {
    "id": "system.sensord.sensors.bmx055_accel.BMX055_Accel",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\sensors\\bmx055_accel.h",
    "relative_path": "system\\sensord\\sensors\\bmx055_accel.h",
    "depends_on": [],
    "start_line": 34,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class BMX055_Accel : public I2CSensor {\n  uint8_t get_device_address() {return BMX055_ACCEL_I2C_ADDR;}\npublic:\n  BMX055_Accel(I2CBus *bus);\n  int init();\n  bool get_event(MessageBuilder &msg, uint64_t ts = 0);\n  int shutdown();\n};\n"
  },
  "system.sensord.sensors.bmx055_gyro.BMX055_Gyro": {
    "id": "system.sensord.sensors.bmx055_gyro.BMX055_Gyro",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\sensors\\bmx055_gyro.h",
    "relative_path": "system\\sensord\\sensors\\bmx055_gyro.h",
    "depends_on": [],
    "start_line": 34,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class BMX055_Gyro : public I2CSensor {\n  uint8_t get_device_address() {return BMX055_GYRO_I2C_ADDR;}\npublic:\n  BMX055_Gyro(I2CBus *bus);\n  int init();\n  bool get_event(MessageBuilder &msg, uint64_t ts = 0);\n  int shutdown();\n};\n"
  },
  "system.sensord.sensors.bmx055_magn.compensate_x": {
    "id": "system.sensord.sensors.bmx055_magn.compensate_x",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\sensors\\bmx055_magn.cc",
    "relative_path": "system\\sensord\\sensors\\bmx055_magn.cc",
    "depends_on": [],
    "start_line": 12,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static int16_t compensate_x(trim_data_t trim_data, int16_t mag_data_x, uint16_t data_rhall) {\n  uint16_t process_comp_x0 = data_rhall;\n  int32_t process_comp_x1 = ((int32_t)trim_data.dig_xyz1) * 16384;\n  uint16_t process_comp_x2 = ((uint16_t)(process_comp_x1 / process_comp_x0)) - ((uint16_t)0x4000);\n  int16_t retval = ((int16_t)process_comp_x2);\n  int32_t process_comp_x3 = (((int32_t)retval) * ((int32_t)retval));\n  int32_t process_comp_x4 = (((int32_t)trim_data.dig_xy2) * (process_comp_x3 / 128));\n  int32_t process_comp_x5 = (int32_t)(((int16_t)trim_data.dig_xy1) * 128);\n  int32_t process_comp_x6 = ((int32_t)retval) * process_comp_x5;\n  int32_t process_comp_x7 = (((process_comp_x4 + process_comp_x6) / 512) + ((int32_t)0x100000));\n  int32_t process_comp_x8 = ((int32_t)(((int16_t)trim_data.dig_x2) + ((int16_t)0xA0)));\n  int32_t process_comp_x9 = ((process_comp_x7 * process_comp_x8) / 4096);\n  int32_t process_comp_x10 = ((int32_t)mag_data_x) * process_comp_x9;\n  retval = ((int16_t)(process_comp_x10 / 8192));\n  retval = (retval + (((int16_t)trim_data.dig_x1) * 8)) / 16;\n\n  return retval;\n}\n"
  },
  "system.sensord.sensors.bmx055_magn.compensate_y": {
    "id": "system.sensord.sensors.bmx055_magn.compensate_y",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\sensors\\bmx055_magn.cc",
    "relative_path": "system\\sensord\\sensors\\bmx055_magn.cc",
    "depends_on": [],
    "start_line": 31,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static int16_t compensate_y(trim_data_t trim_data, int16_t mag_data_y, uint16_t data_rhall) {\n  uint16_t process_comp_y0 = trim_data.dig_xyz1;\n  int32_t process_comp_y1 = (((int32_t)trim_data.dig_xyz1) * 16384) / process_comp_y0;\n  uint16_t process_comp_y2 = ((uint16_t)process_comp_y1) - ((uint16_t)0x4000);\n  int16_t retval = ((int16_t)process_comp_y2);\n  int32_t process_comp_y3 = ((int32_t) retval) * ((int32_t)retval);\n  int32_t process_comp_y4 = ((int32_t)trim_data.dig_xy2) * (process_comp_y3 / 128);\n  int32_t process_comp_y5 = ((int32_t)(((int16_t)trim_data.dig_xy1) * 128));\n  int32_t process_comp_y6 = ((process_comp_y4 + (((int32_t)retval) * process_comp_y5)) / 512);\n  int32_t process_comp_y7 = ((int32_t)(((int16_t)trim_data.dig_y2) + ((int16_t)0xA0)));\n  int32_t process_comp_y8 = (((process_comp_y6 + ((int32_t)0x100000)) * process_comp_y7) / 4096);\n  int32_t process_comp_y9 = (((int32_t)mag_data_y) * process_comp_y8);\n  retval = (int16_t)(process_comp_y9 / 8192);\n  retval = (retval + (((int16_t)trim_data.dig_y1) * 8)) / 16;\n\n  return retval;\n}\n"
  },
  "system.sensord.sensors.bmx055_magn.compensate_z": {
    "id": "system.sensord.sensors.bmx055_magn.compensate_z",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\sensors\\bmx055_magn.cc",
    "relative_path": "system\\sensord\\sensors\\bmx055_magn.cc",
    "depends_on": [],
    "start_line": 49,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static int16_t compensate_z(trim_data_t trim_data, int16_t mag_data_z, uint16_t data_rhall) {\n  int16_t process_comp_z0 = ((int16_t)data_rhall) - ((int16_t) trim_data.dig_xyz1);\n  int32_t process_comp_z1 = (((int32_t)trim_data.dig_z3) * ((int32_t)(process_comp_z0))) / 4;\n  int32_t process_comp_z2 = (((int32_t)(mag_data_z - trim_data.dig_z4)) * 32768);\n  int32_t process_comp_z3 = ((int32_t)trim_data.dig_z1) * (((int16_t)data_rhall) * 2);\n  int16_t process_comp_z4 = (int16_t)((process_comp_z3 + (32768)) / 65536);\n  int32_t retval = ((process_comp_z2 - process_comp_z1) / (trim_data.dig_z2 + process_comp_z4));\n\n  /* saturate result to +/- 2 micro-tesla */\n  retval = std::clamp(retval, -32767, 32767);\n\n  /* Conversion of LSB to micro-tesla*/\n  retval = retval / 16;\n\n  return (int16_t)retval;\n}\n"
  },
  "system.sensord.sensors.bmx055_magn.BMX055_Magn": {
    "id": "system.sensord.sensors.bmx055_magn.BMX055_Magn",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\sensors\\bmx055_magn.h",
    "relative_path": "system\\sensord\\sensors\\bmx055_magn.h",
    "depends_on": [],
    "start_line": 54,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class BMX055_Magn : public I2CSensor{\n  uint8_t get_device_address() {return BMX055_MAGN_I2C_ADDR;}\n  trim_data_t trim_data = {0};\n  bool perform_self_test();\n  bool parse_xyz(uint8_t buffer[8], int16_t *x, int16_t *y, int16_t *z);\npublic:\n  BMX055_Magn(I2CBus *bus);\n  int init();\n  bool get_event(MessageBuilder &msg, uint64_t ts = 0);\n  int shutdown();\n};\n"
  },
  "system.sensord.sensors.bmx055_temp.BMX055_Temp": {
    "id": "system.sensord.sensors.bmx055_temp.BMX055_Temp",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\sensors\\bmx055_temp.h",
    "relative_path": "system\\sensord\\sensors\\bmx055_temp.h",
    "depends_on": [],
    "start_line": 6,
    "end_line": 13,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class BMX055_Temp : public I2CSensor {\n  uint8_t get_device_address() {return BMX055_ACCEL_I2C_ADDR;}\npublic:\n  BMX055_Temp(I2CBus *bus);\n  int init();\n  bool get_event(MessageBuilder &msg, uint64_t ts = 0);\n  int shutdown() { return 0; }\n};\n"
  },
  "system.sensord.sensors.i2c_sensor.read_12_bit": {
    "id": "system.sensord.sensors.i2c_sensor.read_12_bit",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\sensors\\i2c_sensor.cc",
    "relative_path": "system\\sensord\\sensors\\i2c_sensor.cc",
    "depends_on": [],
    "start_line": 3,
    "end_line": 6,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int16_t read_12_bit(uint8_t lsb, uint8_t msb) {\n  uint16_t combined = (uint16_t(msb) << 8) | uint16_t(lsb & 0xF0);\n  return int16_t(combined) / (1 << 4);\n}\n"
  },
  "system.sensord.sensors.i2c_sensor.read_16_bit": {
    "id": "system.sensord.sensors.i2c_sensor.read_16_bit",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\sensors\\i2c_sensor.cc",
    "relative_path": "system\\sensord\\sensors\\i2c_sensor.cc",
    "depends_on": [],
    "start_line": 8,
    "end_line": 11,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int16_t read_16_bit(uint8_t lsb, uint8_t msb) {\n  uint16_t combined = (uint16_t(msb) << 8) | uint16_t(lsb);\n  return int16_t(combined);\n}\n"
  },
  "system.sensord.sensors.i2c_sensor.read_20_bit": {
    "id": "system.sensord.sensors.i2c_sensor.read_20_bit",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\sensors\\i2c_sensor.cc",
    "relative_path": "system\\sensord\\sensors\\i2c_sensor.cc",
    "depends_on": [],
    "start_line": 13,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int32_t read_20_bit(uint8_t b2, uint8_t b1, uint8_t b0) {\n  uint32_t combined = (uint32_t(b0) << 16) | (uint32_t(b1) << 8) | uint32_t(b2);\n  return int32_t(combined) / (1 << 4);\n}\n"
  },
  "system.sensord.sensors.i2c_sensor.I2CSensor": {
    "id": "system.sensord.sensors.i2c_sensor.I2CSensor",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\sensors\\i2c_sensor.h",
    "relative_path": "system\\sensord\\sensors\\i2c_sensor.h",
    "depends_on": [],
    "start_line": 20,
    "end_line": 51,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class I2CSensor : public Sensor {\nprivate:\n  I2CBus *bus;\n  int gpio_nr;\n  bool shared_gpio;\n  virtual uint8_t get_device_address() = 0;\n\npublic:\n  I2CSensor(I2CBus *bus, int gpio_nr = 0, bool shared_gpio = false);\n  ~I2CSensor();\n  int read_register(uint register_address, uint8_t *buffer, uint8_t len);\n  int set_register(uint register_address, uint8_t data);\n  int init_gpio();\n  bool has_interrupt_enabled();\n  virtual int init() = 0;\n  virtual bool get_event(MessageBuilder &msg, uint64_t ts = 0) = 0;\n  virtual int shutdown() = 0;\n\n  int verify_chip_id(uint8_t address, const std::vector<uint8_t> &expected_ids) {\n    uint8_t chip_id = 0;\n    int ret = read_register(address, &chip_id, 1);\n    if (ret < 0) {\n      LOGD(\"Reading chip ID failed: %d\", ret);\n      return -1;\n    }\n    for (int i = 0; i < expected_ids.size(); ++i) {\n      if (chip_id == expected_ids[i]) return chip_id;\n    }\n    LOGE(\"Chip ID wrong. Got: %d, Expected %d\", chip_id, expected_ids[0]);\n    return -1;\n  }\n};\n"
  },
  "system.sensord.sensors.i2c_sensor.I2CSensor.verify_chip_id": {
    "id": "system.sensord.sensors.i2c_sensor.I2CSensor.verify_chip_id",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\sensors\\i2c_sensor.h",
    "relative_path": "system\\sensord\\sensors\\i2c_sensor.h",
    "depends_on": [],
    "start_line": 38,
    "end_line": 50,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  int verify_chip_id(uint8_t address, const std::vector<uint8_t> &expected_ids) {\n    uint8_t chip_id = 0;\n    int ret = read_register(address, &chip_id, 1);\n    if (ret < 0) {\n      LOGD(\"Reading chip ID failed: %d\", ret);\n      return -1;\n    }\n    for (int i = 0; i < expected_ids.size(); ++i) {\n      if (chip_id == expected_ids[i]) return chip_id;\n    }\n    LOGE(\"Chip ID wrong. Got: %d, Expected %d\", chip_id, expected_ids[0]);\n    return -1;\n  }\n"
  },
  "system.sensord.sensors.lsm6ds3_accel.LSM6DS3_Accel": {
    "id": "system.sensord.sensors.lsm6ds3_accel.LSM6DS3_Accel",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\sensors\\lsm6ds3_accel.h",
    "relative_path": "system\\sensord\\sensors\\lsm6ds3_accel.h",
    "depends_on": [],
    "start_line": 36,
    "end_line": 49,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class LSM6DS3_Accel : public I2CSensor {\n  uint8_t get_device_address() {return LSM6DS3_ACCEL_I2C_ADDR;}\n  cereal::SensorEventData::SensorSource source = cereal::SensorEventData::SensorSource::LSM6DS3;\n\n  // self test functions\n  int self_test(int test_type);\n  void wait_for_data_ready();\n  void read_and_avg_data(float* val_st_off);\npublic:\n  LSM6DS3_Accel(I2CBus *bus, int gpio_nr = 0, bool shared_gpio = false);\n  int init();\n  bool get_event(MessageBuilder &msg, uint64_t ts = 0);\n  int shutdown();\n};\n"
  },
  "system.sensord.sensors.lsm6ds3_gyro.LSM6DS3_Gyro": {
    "id": "system.sensord.sensors.lsm6ds3_gyro.LSM6DS3_Gyro",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\sensors\\lsm6ds3_gyro.h",
    "relative_path": "system\\sensord\\sensors\\lsm6ds3_gyro.h",
    "depends_on": [],
    "start_line": 32,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class LSM6DS3_Gyro : public I2CSensor {\n  uint8_t get_device_address() {return LSM6DS3_GYRO_I2C_ADDR;}\n  cereal::SensorEventData::SensorSource source = cereal::SensorEventData::SensorSource::LSM6DS3;\n\n  // self test functions\n  int self_test(int test_type);\n  void wait_for_data_ready();\n  void read_and_avg_data(float* val_st_off);\npublic:\n  LSM6DS3_Gyro(I2CBus *bus, int gpio_nr = 0, bool shared_gpio = false);\n  int init();\n  bool get_event(MessageBuilder &msg, uint64_t ts = 0);\n  int shutdown();\n};\n"
  },
  "system.sensord.sensors.lsm6ds3_temp.LSM6DS3_Temp": {
    "id": "system.sensord.sensors.lsm6ds3_temp.LSM6DS3_Temp",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\sensors\\lsm6ds3_temp.h",
    "relative_path": "system\\sensord\\sensors\\lsm6ds3_temp.h",
    "depends_on": [],
    "start_line": 17,
    "end_line": 26,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class LSM6DS3_Temp : public I2CSensor {\n  uint8_t get_device_address() {return LSM6DS3_TEMP_I2C_ADDR;}\n  cereal::SensorEventData::SensorSource source = cereal::SensorEventData::SensorSource::LSM6DS3;\n\npublic:\n  LSM6DS3_Temp(I2CBus *bus);\n  int init();\n  bool get_event(MessageBuilder &msg, uint64_t ts = 0);\n  int shutdown() { return 0; }\n};\n"
  },
  "system.sensord.sensors.mmc5603nj_magn.MMC5603NJ_Magn": {
    "id": "system.sensord.sensors.mmc5603nj_magn.MMC5603NJ_Magn",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\sensors\\mmc5603nj_magn.h",
    "relative_path": "system\\sensord\\sensors\\mmc5603nj_magn.h",
    "depends_on": [],
    "start_line": 27,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class MMC5603NJ_Magn : public I2CSensor {\nprivate:\n  uint8_t get_device_address() {return MMC5603NJ_I2C_ADDR;}\n  void start_measurement();\n  std::vector<float> read_measurement();\npublic:\n  MMC5603NJ_Magn(I2CBus *bus);\n  int init();\n  bool get_event(MessageBuilder &msg, uint64_t ts = 0);\n  int shutdown();\n};\n"
  },
  "system.sensord.sensors.sensor.Sensor": {
    "id": "system.sensord.sensors.sensor.Sensor",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\sensors\\sensor.h",
    "relative_path": "system\\sensord\\sensors\\sensor.h",
    "depends_on": [],
    "start_line": 5,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class Sensor {\npublic:\n  int gpio_fd = -1;\n  bool enabled = false;\n  uint64_t start_ts = 0;\n  uint64_t init_delay = 500e6; // default dealy 500ms\n\n  virtual ~Sensor() {}\n  virtual int init() = 0;\n  virtual bool get_event(MessageBuilder &msg, uint64_t ts = 0) = 0;\n  virtual bool has_interrupt_enabled() = 0;\n  virtual int shutdown() = 0;\n\n  virtual bool is_data_valid(uint64_t current_ts) {\n    if (start_ts == 0) {\n      start_ts = current_ts;\n    }\n    return (current_ts - start_ts) > init_delay;\n  }\n};\n"
  },
  "system.sensord.sensors.sensor.Sensor.is_data_valid": {
    "id": "system.sensord.sensors.sensor.Sensor.is_data_valid",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\sensors\\sensor.h",
    "relative_path": "system\\sensord\\sensors\\sensor.h",
    "depends_on": [],
    "start_line": 18,
    "end_line": 23,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  virtual bool is_data_valid(uint64_t current_ts) {\n    if (start_ts == 0) {\n      start_ts = current_ts;\n    }\n    return (current_ts - start_ts) > init_delay;\n  }\n"
  },
  "system.sensord.tests.test_sensord.get_irq_count": {
    "id": "system.sensord.tests.test_sensord.get_irq_count",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\tests\\test_sensord.py",
    "relative_path": "system\\sensord\\tests\\test_sensord.py",
    "depends_on": [],
    "start_line": 73,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.sensord.tests.test_sensord.read_sensor_events": {
    "id": "system.sensord.tests.test_sensord.read_sensor_events",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\tests\\test_sensord.py",
    "relative_path": "system\\sensord\\tests\\test_sensord.py",
    "depends_on": [],
    "start_line": 78,
    "end_line": 103,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.sensord.tests.test_sensord.TestSensord": {
    "id": "system.sensord.tests.test_sensord.TestSensord",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\tests\\test_sensord.py",
    "relative_path": "system\\sensord\\tests\\test_sensord.py",
    "depends_on": [
      "system.sensord.tests.test_sensord.get_irq_count",
      "system.sensord.tests.test_sensord.read_sensor_events"
    ],
    "start_line": 106,
    "end_line": 251,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.sensord.tests.test_sensord.TestSensord.setup_class": {
    "id": "system.sensord.tests.test_sensord.TestSensord.setup_class",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\tests\\test_sensord.py",
    "relative_path": "system\\sensord\\tests\\test_sensord.py",
    "depends_on": [
      "system.sensord.tests.test_sensord.read_sensor_events"
    ],
    "start_line": 108,
    "end_line": 123,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.sensord.tests.test_sensord.TestSensord.teardown_class": {
    "id": "system.sensord.tests.test_sensord.TestSensord.teardown_class",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\tests\\test_sensord.py",
    "relative_path": "system\\sensord\\tests\\test_sensord.py",
    "depends_on": [],
    "start_line": 126,
    "end_line": 127,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.sensord.tests.test_sensord.TestSensord.teardown_method": {
    "id": "system.sensord.tests.test_sensord.TestSensord.teardown_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\tests\\test_sensord.py",
    "relative_path": "system\\sensord\\tests\\test_sensord.py",
    "depends_on": [],
    "start_line": 129,
    "end_line": 130,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.sensord.tests.test_sensord.TestSensord.test_sensors_present": {
    "id": "system.sensord.tests.test_sensord.TestSensord.test_sensors_present",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\tests\\test_sensord.py",
    "relative_path": "system\\sensord\\tests\\test_sensord.py",
    "depends_on": [],
    "start_line": 132,
    "end_line": 140,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.sensord.tests.test_sensord.TestSensord.test_lsm6ds3_timing": {
    "id": "system.sensord.tests.test_sensord.TestSensord.test_lsm6ds3_timing",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\tests\\test_sensord.py",
    "relative_path": "system\\sensord\\tests\\test_sensord.py",
    "depends_on": [],
    "start_line": 142,
    "end_line": 171,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.sensord.tests.test_sensord.TestSensord.test_sensor_frequency": {
    "id": "system.sensord.tests.test_sensord.TestSensord.test_sensor_frequency",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\tests\\test_sensord.py",
    "relative_path": "system\\sensord\\tests\\test_sensord.py",
    "depends_on": [],
    "start_line": 173,
    "end_line": 178,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.sensord.tests.test_sensord.TestSensord.test_logmonottime_timestamp_diff": {
    "id": "system.sensord.tests.test_sensord.TestSensord.test_logmonottime_timestamp_diff",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\tests\\test_sensord.py",
    "relative_path": "system\\sensord\\tests\\test_sensord.py",
    "depends_on": [],
    "start_line": 180,
    "end_line": 202,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.sensord.tests.test_sensord.TestSensord.test_sensor_values": {
    "id": "system.sensord.tests.test_sensord.TestSensord.test_sensor_values",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\tests\\test_sensord.py",
    "relative_path": "system\\sensord\\tests\\test_sensord.py",
    "depends_on": [],
    "start_line": 204,
    "end_line": 230,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.sensord.tests.test_sensord.TestSensord.test_sensor_verify_no_interrupts_after_stop": {
    "id": "system.sensord.tests.test_sensord.TestSensord.test_sensor_verify_no_interrupts_after_stop",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\tests\\test_sensord.py",
    "relative_path": "system\\sensord\\tests\\test_sensord.py",
    "depends_on": [
      "system.sensord.tests.test_sensord.get_irq_count"
    ],
    "start_line": 232,
    "end_line": 251,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.sensord.tests.ttff_test.kill": {
    "id": "system.sensord.tests.ttff_test.kill",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\sensord\\tests\\ttff_test.py",
    "relative_path": "system\\sensord\\tests\\ttff_test.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 13,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.tests.test_logmessaged.TestLogmessaged": {
    "id": "system.tests.test_logmessaged.TestLogmessaged",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\tests\\test_logmessaged.py",
    "relative_path": "system\\tests\\test_logmessaged.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.tests.test_logmessaged.TestLogmessaged.setup_method": {
    "id": "system.tests.test_logmessaged.TestLogmessaged.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\tests\\test_logmessaged.py",
    "relative_path": "system\\tests\\test_logmessaged.py",
    "depends_on": [],
    "start_line": 12,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.tests.test_logmessaged.TestLogmessaged.teardown_method": {
    "id": "system.tests.test_logmessaged.TestLogmessaged.teardown_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\tests\\test_logmessaged.py",
    "relative_path": "system\\tests\\test_logmessaged.py",
    "depends_on": [],
    "start_line": 26,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.tests.test_logmessaged.TestLogmessaged._get_log_files": {
    "id": "system.tests.test_logmessaged.TestLogmessaged._get_log_files",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\tests\\test_logmessaged.py",
    "relative_path": "system\\tests\\test_logmessaged.py",
    "depends_on": [],
    "start_line": 31,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.tests.test_logmessaged.TestLogmessaged.test_simple_log": {
    "id": "system.tests.test_logmessaged.TestLogmessaged.test_simple_log",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\tests\\test_logmessaged.py",
    "relative_path": "system\\tests\\test_logmessaged.py",
    "depends_on": [],
    "start_line": 34,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.tests.test_logmessaged.TestLogmessaged.test_big_log": {
    "id": "system.tests.test_logmessaged.TestLogmessaged.test_big_log",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\tests\\test_logmessaged.py",
    "relative_path": "system\\tests\\test_logmessaged.py",
    "depends_on": [],
    "start_line": 43,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.pigeond.set_power": {
    "id": "system.ubloxd.pigeond.set_power",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\pigeond.py",
    "relative_path": "system\\ubloxd\\pigeond.py",
    "depends_on": [],
    "start_line": 28,
    "end_line": 35,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.pigeond.add_ubx_checksum": {
    "id": "system.ubloxd.pigeond.add_ubx_checksum",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\pigeond.py",
    "relative_path": "system\\ubloxd\\pigeond.py",
    "depends_on": [],
    "start_line": 37,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.pigeond.get_assistnow_messages": {
    "id": "system.ubloxd.pigeond.get_assistnow_messages",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\pigeond.py",
    "relative_path": "system\\ubloxd\\pigeond.py",
    "depends_on": [],
    "start_line": 44,
    "end_line": 62,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.pigeond.TTYPigeon": {
    "id": "system.ubloxd.pigeond.TTYPigeon",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\pigeond.py",
    "relative_path": "system\\ubloxd\\pigeond.py",
    "depends_on": [
      "system.ubloxd.pigeond.init_baudrate"
    ],
    "start_line": 65,
    "end_line": 137,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.pigeond.TTYPigeon.__init__": {
    "id": "system.ubloxd.pigeond.TTYPigeon.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\pigeond.py",
    "relative_path": "system\\ubloxd\\pigeond.py",
    "depends_on": [],
    "start_line": 66,
    "end_line": 67,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.pigeond.TTYPigeon.send": {
    "id": "system.ubloxd.pigeond.TTYPigeon.send",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\pigeond.py",
    "relative_path": "system\\ubloxd\\pigeond.py",
    "depends_on": [],
    "start_line": 69,
    "end_line": 70,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.pigeond.TTYPigeon.receive": {
    "id": "system.ubloxd.pigeond.TTYPigeon.receive",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\pigeond.py",
    "relative_path": "system\\ubloxd\\pigeond.py",
    "depends_on": [],
    "start_line": 72,
    "end_line": 79,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.pigeond.TTYPigeon.set_baud": {
    "id": "system.ubloxd.pigeond.TTYPigeon.set_baud",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\pigeond.py",
    "relative_path": "system\\ubloxd\\pigeond.py",
    "depends_on": [],
    "start_line": 81,
    "end_line": 82,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.pigeond.TTYPigeon.wait_for_ack": {
    "id": "system.ubloxd.pigeond.TTYPigeon.wait_for_ack",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\pigeond.py",
    "relative_path": "system\\ubloxd\\pigeond.py",
    "depends_on": [],
    "start_line": 84,
    "end_line": 98,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.pigeond.TTYPigeon.send_with_ack": {
    "id": "system.ubloxd.pigeond.TTYPigeon.send_with_ack",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\pigeond.py",
    "relative_path": "system\\ubloxd\\pigeond.py",
    "depends_on": [],
    "start_line": 100,
    "end_line": 102,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.pigeond.TTYPigeon.wait_for_backup_restore_status": {
    "id": "system.ubloxd.pigeond.TTYPigeon.wait_for_backup_restore_status",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\pigeond.py",
    "relative_path": "system\\ubloxd\\pigeond.py",
    "depends_on": [],
    "start_line": 104,
    "end_line": 115,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.pigeond.TTYPigeon.reset_device": {
    "id": "system.ubloxd.pigeond.TTYPigeon.reset_device",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\pigeond.py",
    "relative_path": "system\\ubloxd\\pigeond.py",
    "depends_on": [
      "system.ubloxd.pigeond.init_baudrate"
    ],
    "start_line": 117,
    "end_line": 137,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.pigeond.init_baudrate": {
    "id": "system.ubloxd.pigeond.init_baudrate",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\pigeond.py",
    "relative_path": "system\\ubloxd\\pigeond.py",
    "depends_on": [
      "system.ubloxd.pigeond.TTYPigeon"
    ],
    "start_line": 139,
    "end_line": 146,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.pigeond.initialize_pigeon": {
    "id": "system.ubloxd.pigeond.initialize_pigeon",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\pigeond.py",
    "relative_path": "system\\ubloxd\\pigeond.py",
    "depends_on": [
      "system.ubloxd.pigeond.TTYPigeon",
      "system.ubloxd.pigeond.add_ubx_checksum",
      "system.ubloxd.pigeond.get_assistnow_messages"
    ],
    "start_line": 149,
    "end_line": 239,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.pigeond.deinitialize_and_exit": {
    "id": "system.ubloxd.pigeond.deinitialize_and_exit",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\pigeond.py",
    "relative_path": "system\\ubloxd\\pigeond.py",
    "depends_on": [
      "system.ubloxd.pigeond.set_power",
      "system.ubloxd.pigeond.TTYPigeon"
    ],
    "start_line": 241,
    "end_line": 260,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.pigeond.create_pigeon": {
    "id": "system.ubloxd.pigeond.create_pigeon",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\pigeond.py",
    "relative_path": "system\\ubloxd\\pigeond.py",
    "depends_on": [
      "system.ubloxd.pigeond.set_power",
      "system.ubloxd.pigeond.deinitialize_and_exit",
      "system.ubloxd.pigeond.TTYPigeon"
    ],
    "start_line": 262,
    "end_line": 276,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.pigeond.run_receiving": {
    "id": "system.ubloxd.pigeond.run_receiving",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\pigeond.py",
    "relative_path": "system\\ubloxd\\pigeond.py",
    "depends_on": [
      "system.ubloxd.pigeond.init_baudrate",
      "system.ubloxd.pigeond.initialize_pigeon",
      "system.ubloxd.pigeond.TTYPigeon"
    ],
    "start_line": 278,
    "end_line": 299,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.pigeond.main": {
    "id": "system.ubloxd.pigeond.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\pigeond.py",
    "relative_path": "system\\ubloxd\\pigeond.py",
    "depends_on": [
      "system.ubloxd.pigeond.create_pigeon",
      "system.ubloxd.pigeond.initialize_pigeon",
      "system.ubloxd.pigeond.init_baudrate",
      "system.ubloxd.pigeond.run_receiving"
    ],
    "start_line": 302,
    "end_line": 310,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.ubloxd.main": {
    "id": "system.ubloxd.ubloxd.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\ubloxd.cc",
    "relative_path": "system\\ubloxd\\ubloxd.cc",
    "depends_on": [],
    "start_line": 13,
    "end_line": 62,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int main() {\n  LOGW(\"starting ubloxd\");\n  AlignedBuffer aligned_buf;\n  UbloxMsgParser parser;\n\n  PubMaster pm({\"ubloxGnss\", \"gpsLocationExternal\"});\n\n  std::unique_ptr<Context> context(Context::create());\n  std::unique_ptr<SubSocket> subscriber(SubSocket::create(context.get(), \"ubloxRaw\"));\n  assert(subscriber != NULL);\n  subscriber->setTimeout(100);\n\n\n  while (!do_exit) {\n    std::unique_ptr<Message> msg(subscriber->receive());\n    if (!msg) {\n      continue;\n    }\n\n    capnp::FlatArrayMessageReader cmsg(aligned_buf.align(msg.get()));\n    cereal::Event::Reader event = cmsg.getRoot<cereal::Event>();\n    auto ubloxRaw = event.getUbloxRaw();\n    float log_time = 1e-9 * event.getLogMonoTime();\n\n    const uint8_t *data = ubloxRaw.begin();\n    size_t len = ubloxRaw.size();\n    size_t bytes_consumed = 0;\n\n    while (bytes_consumed < len && !do_exit) {\n      size_t bytes_consumed_this_time = 0U;\n      if (parser.add_data(log_time, data + bytes_consumed, (uint32_t)(len - bytes_consumed), bytes_consumed_this_time)) {\n\n        try {\n          auto ublox_msg = parser.gen_msg();\n          if (ublox_msg.second.size() > 0) {\n            auto bytes = ublox_msg.second.asBytes();\n            pm.send(ublox_msg.first.c_str(), bytes.begin(), bytes.size());\n          }\n        } catch (const std::exception& e) {\n          LOGE(\"Error parsing ublox message %s\", e.what());\n        }\n\n        parser.reset();\n      }\n      bytes_consumed += bytes_consumed_this_time;\n    }\n  }\n\n  return 0;\n}\n"
  },
  "system.ubloxd.ublox_msg.bit_to_bool": {
    "id": "system.ubloxd.ublox_msg.bit_to_bool",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\ublox_msg.cc",
    "relative_path": "system\\ubloxd\\ublox_msg.cc",
    "depends_on": [],
    "start_line": 20,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "inline static bool bit_to_bool(uint8_t val, int shifts) {\n  return (bool)(val & (1 << shifts));\n}\n"
  },
  "system.ubloxd.ublox_msg.ubx_add_checksum": {
    "id": "system.ubloxd.ublox_msg.ubx_add_checksum",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\ublox_msg.h",
    "relative_path": "system\\ubloxd\\ublox_msg.h",
    "depends_on": [],
    "start_line": 51,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  inline std::string ubx_add_checksum(const std::string &msg) {\n    assert(msg.size() > 2);\n\n    uint8_t ck_a = 0, ck_b = 0;\n    for (int i = 2; i < msg.size(); i++) {\n      ck_a = (ck_a + msg[i]) & 0xFF;\n      ck_b = (ck_b + ck_a) & 0xFF;\n    }\n\n    std::string r = msg;\n    r.push_back(ck_a);\n    r.push_back(ck_b);\n    return r;\n  }\n"
  },
  "system.ubloxd.ublox_msg.build_ubx_mga_ini_time_utc": {
    "id": "system.ubloxd.ublox_msg.build_ubx_mga_ini_time_utc",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\ublox_msg.h",
    "relative_path": "system\\ubloxd\\ublox_msg.h",
    "depends_on": [],
    "start_line": 66,
    "end_line": 90,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  inline std::string build_ubx_mga_ini_time_utc(struct tm time) {\n    ublox::ubx_mga_ini_time_utc_t payload = {\n      .type = 0x10,\n      .version = 0x0,\n      .ref = 0x0,\n      .leapSecs = -128, // Unknown\n      .year = (uint16_t)(1900 + time.tm_year),\n      .month = (uint8_t)(1 + time.tm_mon),\n      .day = (uint8_t)time.tm_mday,\n      .hour = (uint8_t)time.tm_hour,\n      .minute = (uint8_t)time.tm_min,\n      .second = (uint8_t)time.tm_sec,\n      .reserved1 = 0x0,\n      .ns = 0,\n      .tAccS = 30,\n      .reserved2 = 0x0,\n      .tAccNs = 0,\n    };\n    assert(sizeof(payload) == 24);\n\n    std::string msg = \"\\xb5\\x62\\x13\\x40\\x18\\x00\"s;\n    msg += std::string((char*)&payload, sizeof(payload));\n\n    return ubx_add_checksum(msg);\n  }\n"
  },
  "system.ubloxd.ublox_msg.UbloxMsgParser": {
    "id": "system.ubloxd.ublox_msg.UbloxMsgParser",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\ublox_msg.h",
    "relative_path": "system\\ubloxd\\ublox_msg.h",
    "depends_on": [],
    "start_line": 93,
    "end_line": 131,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class UbloxMsgParser {\n  public:\n    bool add_data(float log_time, const uint8_t *incoming_data, uint32_t incoming_data_len, size_t &bytes_consumed);\n    inline void reset() {bytes_in_parse_buf = 0;}\n    inline int needed_bytes();\n    inline std::string data() {return std::string((const char*)msg_parse_buf, bytes_in_parse_buf);}\n\n    std::pair<std::string, kj::Array<capnp::word>> gen_msg();\n    kj::Array<capnp::word> gen_nav_pvt(ubx_t::nav_pvt_t *msg);\n    kj::Array<capnp::word> gen_rxm_sfrbx(ubx_t::rxm_sfrbx_t *msg);\n    kj::Array<capnp::word> gen_rxm_rawx(ubx_t::rxm_rawx_t *msg);\n    kj::Array<capnp::word> gen_mon_hw(ubx_t::mon_hw_t *msg);\n    kj::Array<capnp::word> gen_mon_hw2(ubx_t::mon_hw2_t *msg);\n    kj::Array<capnp::word> gen_nav_sat(ubx_t::nav_sat_t *msg);\n\n  private:\n    inline bool valid_cheksum();\n    inline bool valid();\n    inline bool valid_so_far();\n\n    kj::Array<capnp::word> parse_gps_ephemeris(ubx_t::rxm_sfrbx_t *msg);\n    kj::Array<capnp::word> parse_glonass_ephemeris(ubx_t::rxm_sfrbx_t *msg);\n\n    std::unordered_map<int, std::unordered_map<int, std::string>> gps_subframes;\n\n    float last_log_time = 0.0;\n    size_t bytes_in_parse_buf = 0;\n    uint8_t msg_parse_buf[ublox::UBLOX_HEADER_SIZE + ublox::UBLOX_MAX_MSG_SIZE];\n\n    // user range accuracy in meters\n    const std::unordered_map<uint8_t, float> glonass_URA_lookup =\n      {{ 0,  1}, { 1,   2}, { 2, 2.5}, { 3,   4}, { 4,  5}, {5, 7},\n       { 6, 10}, { 7,  12}, { 8,  14}, { 9,  16}, {10, 32},\n       {11, 64}, {12, 128}, {13, 256}, {14, 512}, {15, 1024}};\n\n    std::unordered_map<int, std::unordered_map<int, std::string>> glonass_strings;\n    std::unordered_map<int, std::unordered_map<int, long>> glonass_string_times;\n    std::unordered_map<int, std::unordered_map<int, int>> glonass_string_superframes;\n};\n"
  },
  "system.ubloxd.generated.glonass.glonass_t._read": {
    "id": "system.ubloxd.generated.glonass.glonass_t._read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 17,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void glonass_t::_read() {\n    m_idle_chip = m__io->read_bits_int_be(1);\n    m_string_number = m__io->read_bits_int_be(4);\n    //m__io->align_to_byte();\n    switch (string_number()) {\n    case 4: {\n        m_data = new string_4_t(m__io, this, m__root);\n        break;\n    }\n    case 1: {\n        m_data = new string_1_t(m__io, this, m__root);\n        break;\n    }\n    case 3: {\n        m_data = new string_3_t(m__io, this, m__root);\n        break;\n    }\n    case 5: {\n        m_data = new string_5_t(m__io, this, m__root);\n        break;\n    }\n    case 2: {\n        m_data = new string_2_t(m__io, this, m__root);\n        break;\n    }\n    default: {\n        m_data = new string_non_immediate_t(m__io, this, m__root);\n        break;\n    }\n    }\n    m_hamming_code = m__io->read_bits_int_be(8);\n    m_pad_1 = m__io->read_bits_int_be(11);\n    m_superframe_number = m__io->read_bits_int_be(16);\n    m_pad_2 = m__io->read_bits_int_be(8);\n    m_frame_number = m__io->read_bits_int_be(8);\n}\n"
  },
  "system.ubloxd.generated.glonass.glonass_t._clean_up": {
    "id": "system.ubloxd.generated.glonass.glonass_t._clean_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 58,
    "end_line": 62,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void glonass_t::_clean_up() {\n    if (m_data) {\n        delete m_data; m_data = 0;\n    }\n}\n"
  },
  "system.ubloxd.generated.glonass.string_4_t._read": {
    "id": "system.ubloxd.generated.glonass.string_4_t._read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 78,
    "end_line": 91,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void glonass_t::string_4_t::_read() {\n    m_tau_n_sign = m__io->read_bits_int_be(1);\n    m_tau_n_value = m__io->read_bits_int_be(21);\n    m_delta_tau_n_sign = m__io->read_bits_int_be(1);\n    m_delta_tau_n_value = m__io->read_bits_int_be(4);\n    m_e_n = m__io->read_bits_int_be(5);\n    m_not_used_1 = m__io->read_bits_int_be(14);\n    m_p4 = m__io->read_bits_int_be(1);\n    m_f_t = m__io->read_bits_int_be(4);\n    m_not_used_2 = m__io->read_bits_int_be(3);\n    m_n_t = m__io->read_bits_int_be(11);\n    m_n = m__io->read_bits_int_be(5);\n    m_m = m__io->read_bits_int_be(2);\n}\n"
  },
  "system.ubloxd.generated.glonass.string_4_t._clean_up": {
    "id": "system.ubloxd.generated.glonass.string_4_t._clean_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 97,
    "end_line": 98,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void glonass_t::string_4_t::_clean_up() {\n}\n"
  },
  "system.ubloxd.generated.glonass.string_4_t.tau_n": {
    "id": "system.ubloxd.generated.glonass.string_4_t.tau_n",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 100,
    "end_line": 106,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int32_t glonass_t::string_4_t::tau_n() {\n    if (f_tau_n)\n        return m_tau_n;\n    m_tau_n = ((tau_n_sign()) ? ((tau_n_value() * -1)) : (tau_n_value()));\n    f_tau_n = true;\n    return m_tau_n;\n}\n"
  },
  "system.ubloxd.generated.glonass.string_4_t.delta_tau_n": {
    "id": "system.ubloxd.generated.glonass.string_4_t.delta_tau_n",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 108,
    "end_line": 114,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int32_t glonass_t::string_4_t::delta_tau_n() {\n    if (f_delta_tau_n)\n        return m_delta_tau_n;\n    m_delta_tau_n = ((delta_tau_n_sign()) ? ((delta_tau_n_value() * -1)) : (delta_tau_n_value()));\n    f_delta_tau_n = true;\n    return m_delta_tau_n;\n}\n"
  },
  "system.ubloxd.generated.glonass.string_non_immediate_t._read": {
    "id": "system.ubloxd.generated.glonass.string_non_immediate_t._read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 128,
    "end_line": 131,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void glonass_t::string_non_immediate_t::_read() {\n    m_data_1 = m__io->read_bits_int_be(64);\n    m_data_2 = m__io->read_bits_int_be(8);\n}\n"
  },
  "system.ubloxd.generated.glonass.string_non_immediate_t._clean_up": {
    "id": "system.ubloxd.generated.glonass.string_non_immediate_t._clean_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 137,
    "end_line": 138,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void glonass_t::string_non_immediate_t::_clean_up() {\n}\n"
  },
  "system.ubloxd.generated.glonass.string_5_t._read": {
    "id": "system.ubloxd.generated.glonass.string_5_t._read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 152,
    "end_line": 159,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void glonass_t::string_5_t::_read() {\n    m_n_a = m__io->read_bits_int_be(11);\n    m_tau_c = m__io->read_bits_int_be(32);\n    m_not_used = m__io->read_bits_int_be(1);\n    m_n_4 = m__io->read_bits_int_be(5);\n    m_tau_gps = m__io->read_bits_int_be(22);\n    m_l_n = m__io->read_bits_int_be(1);\n}\n"
  },
  "system.ubloxd.generated.glonass.string_5_t._clean_up": {
    "id": "system.ubloxd.generated.glonass.string_5_t._clean_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 165,
    "end_line": 166,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void glonass_t::string_5_t::_clean_up() {\n}\n"
  },
  "system.ubloxd.generated.glonass.string_1_t._read": {
    "id": "system.ubloxd.generated.glonass.string_1_t._read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 183,
    "end_line": 193,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void glonass_t::string_1_t::_read() {\n    m_not_used = m__io->read_bits_int_be(2);\n    m_p1 = m__io->read_bits_int_be(2);\n    m_t_k = m__io->read_bits_int_be(12);\n    m_x_vel_sign = m__io->read_bits_int_be(1);\n    m_x_vel_value = m__io->read_bits_int_be(23);\n    m_x_accel_sign = m__io->read_bits_int_be(1);\n    m_x_accel_value = m__io->read_bits_int_be(4);\n    m_x_sign = m__io->read_bits_int_be(1);\n    m_x_value = m__io->read_bits_int_be(26);\n}\n"
  },
  "system.ubloxd.generated.glonass.string_1_t._clean_up": {
    "id": "system.ubloxd.generated.glonass.string_1_t._clean_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 199,
    "end_line": 200,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void glonass_t::string_1_t::_clean_up() {\n}\n"
  },
  "system.ubloxd.generated.glonass.string_1_t.x_vel": {
    "id": "system.ubloxd.generated.glonass.string_1_t.x_vel",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 202,
    "end_line": 208,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int32_t glonass_t::string_1_t::x_vel() {\n    if (f_x_vel)\n        return m_x_vel;\n    m_x_vel = ((x_vel_sign()) ? ((x_vel_value() * -1)) : (x_vel_value()));\n    f_x_vel = true;\n    return m_x_vel;\n}\n"
  },
  "system.ubloxd.generated.glonass.string_1_t.x_accel": {
    "id": "system.ubloxd.generated.glonass.string_1_t.x_accel",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 210,
    "end_line": 216,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int32_t glonass_t::string_1_t::x_accel() {\n    if (f_x_accel)\n        return m_x_accel;\n    m_x_accel = ((x_accel_sign()) ? ((x_accel_value() * -1)) : (x_accel_value()));\n    f_x_accel = true;\n    return m_x_accel;\n}\n"
  },
  "system.ubloxd.generated.glonass.string_1_t.x": {
    "id": "system.ubloxd.generated.glonass.string_1_t.x",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 218,
    "end_line": 224,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int32_t glonass_t::string_1_t::x() {\n    if (f_x)\n        return m_x;\n    m_x = ((x_sign()) ? ((x_value() * -1)) : (x_value()));\n    f_x = true;\n    return m_x;\n}\n"
  },
  "system.ubloxd.generated.glonass.string_2_t._read": {
    "id": "system.ubloxd.generated.glonass.string_2_t._read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 241,
    "end_line": 252,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void glonass_t::string_2_t::_read() {\n    m_b_n = m__io->read_bits_int_be(3);\n    m_p2 = m__io->read_bits_int_be(1);\n    m_t_b = m__io->read_bits_int_be(7);\n    m_not_used = m__io->read_bits_int_be(5);\n    m_y_vel_sign = m__io->read_bits_int_be(1);\n    m_y_vel_value = m__io->read_bits_int_be(23);\n    m_y_accel_sign = m__io->read_bits_int_be(1);\n    m_y_accel_value = m__io->read_bits_int_be(4);\n    m_y_sign = m__io->read_bits_int_be(1);\n    m_y_value = m__io->read_bits_int_be(26);\n}\n"
  },
  "system.ubloxd.generated.glonass.string_2_t._clean_up": {
    "id": "system.ubloxd.generated.glonass.string_2_t._clean_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 258,
    "end_line": 259,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void glonass_t::string_2_t::_clean_up() {\n}\n"
  },
  "system.ubloxd.generated.glonass.string_2_t.y_vel": {
    "id": "system.ubloxd.generated.glonass.string_2_t.y_vel",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 261,
    "end_line": 267,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int32_t glonass_t::string_2_t::y_vel() {\n    if (f_y_vel)\n        return m_y_vel;\n    m_y_vel = ((y_vel_sign()) ? ((y_vel_value() * -1)) : (y_vel_value()));\n    f_y_vel = true;\n    return m_y_vel;\n}\n"
  },
  "system.ubloxd.generated.glonass.string_2_t.y_accel": {
    "id": "system.ubloxd.generated.glonass.string_2_t.y_accel",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 269,
    "end_line": 275,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int32_t glonass_t::string_2_t::y_accel() {\n    if (f_y_accel)\n        return m_y_accel;\n    m_y_accel = ((y_accel_sign()) ? ((y_accel_value() * -1)) : (y_accel_value()));\n    f_y_accel = true;\n    return m_y_accel;\n}\n"
  },
  "system.ubloxd.generated.glonass.string_2_t.y": {
    "id": "system.ubloxd.generated.glonass.string_2_t.y",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 277,
    "end_line": 283,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int32_t glonass_t::string_2_t::y() {\n    if (f_y)\n        return m_y;\n    m_y = ((y_sign()) ? ((y_value() * -1)) : (y_value()));\n    f_y = true;\n    return m_y;\n}\n"
  },
  "system.ubloxd.generated.glonass.string_3_t._read": {
    "id": "system.ubloxd.generated.glonass.string_3_t._read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 301,
    "end_line": 314,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void glonass_t::string_3_t::_read() {\n    m_p3 = m__io->read_bits_int_be(1);\n    m_gamma_n_sign = m__io->read_bits_int_be(1);\n    m_gamma_n_value = m__io->read_bits_int_be(10);\n    m_not_used = m__io->read_bits_int_be(1);\n    m_p = m__io->read_bits_int_be(2);\n    m_l_n = m__io->read_bits_int_be(1);\n    m_z_vel_sign = m__io->read_bits_int_be(1);\n    m_z_vel_value = m__io->read_bits_int_be(23);\n    m_z_accel_sign = m__io->read_bits_int_be(1);\n    m_z_accel_value = m__io->read_bits_int_be(4);\n    m_z_sign = m__io->read_bits_int_be(1);\n    m_z_value = m__io->read_bits_int_be(26);\n}\n"
  },
  "system.ubloxd.generated.glonass.string_3_t._clean_up": {
    "id": "system.ubloxd.generated.glonass.string_3_t._clean_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 320,
    "end_line": 321,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void glonass_t::string_3_t::_clean_up() {\n}\n"
  },
  "system.ubloxd.generated.glonass.string_3_t.gamma_n": {
    "id": "system.ubloxd.generated.glonass.string_3_t.gamma_n",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 323,
    "end_line": 329,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int32_t glonass_t::string_3_t::gamma_n() {\n    if (f_gamma_n)\n        return m_gamma_n;\n    m_gamma_n = ((gamma_n_sign()) ? ((gamma_n_value() * -1)) : (gamma_n_value()));\n    f_gamma_n = true;\n    return m_gamma_n;\n}\n"
  },
  "system.ubloxd.generated.glonass.string_3_t.z_vel": {
    "id": "system.ubloxd.generated.glonass.string_3_t.z_vel",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 331,
    "end_line": 337,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int32_t glonass_t::string_3_t::z_vel() {\n    if (f_z_vel)\n        return m_z_vel;\n    m_z_vel = ((z_vel_sign()) ? ((z_vel_value() * -1)) : (z_vel_value()));\n    f_z_vel = true;\n    return m_z_vel;\n}\n"
  },
  "system.ubloxd.generated.glonass.string_3_t.z_accel": {
    "id": "system.ubloxd.generated.glonass.string_3_t.z_accel",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 339,
    "end_line": 345,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int32_t glonass_t::string_3_t::z_accel() {\n    if (f_z_accel)\n        return m_z_accel;\n    m_z_accel = ((z_accel_sign()) ? ((z_accel_value() * -1)) : (z_accel_value()));\n    f_z_accel = true;\n    return m_z_accel;\n}\n"
  },
  "system.ubloxd.generated.glonass.string_3_t.z": {
    "id": "system.ubloxd.generated.glonass.string_3_t.z",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.cpp",
    "relative_path": "system\\ubloxd\\generated\\glonass.cpp",
    "depends_on": [],
    "start_line": 347,
    "end_line": 353,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int32_t glonass_t::string_3_t::z() {\n    if (f_z)\n        return m_z;\n    m_z = ((z_sign()) ? ((z_value() * -1)) : (z_value()));\n    f_z = true;\n    return m_z;\n}\n"
  },
  "system.ubloxd.generated.glonass.glonass_t": {
    "id": "system.ubloxd.generated.glonass.glonass_t",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.h",
    "relative_path": "system\\ubloxd\\generated\\glonass.h",
    "depends_on": [],
    "start_line": 13,
    "end_line": 373,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class glonass_t : public kaitai::kstruct {\n\npublic:\n    class string_4_t;\n    class string_non_immediate_t;\n    class string_5_t;\n    class string_1_t;\n    class string_2_t;\n    class string_3_t;\n\n    glonass_t(kaitai::kstream* p__io, kaitai::kstruct* p__parent = 0, glonass_t* p__root = 0);\n\nprivate:\n    void _read();\n    void _clean_up();\n\npublic:\n    ~glonass_t();\n\n    class string_4_t : public kaitai::kstruct {\n\n    public:\n\n        string_4_t(kaitai::kstream* p__io, glonass_t* p__parent = 0, glonass_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~string_4_t();\n\n    private:\n        bool f_tau_n;\n        int32_t m_tau_n;\n\n    public:\n        int32_t tau_n();\n\n    private:\n        bool f_delta_tau_n;\n        int32_t m_delta_tau_n;\n\n    public:\n        int32_t delta_tau_n();\n\n    private:\n        bool m_tau_n_sign;\n        uint64_t m_tau_n_value;\n        bool m_delta_tau_n_sign;\n        uint64_t m_delta_tau_n_value;\n        uint64_t m_e_n;\n        uint64_t m_not_used_1;\n        bool m_p4;\n        uint64_t m_f_t;\n        uint64_t m_not_used_2;\n        uint64_t m_n_t;\n        uint64_t m_n;\n        uint64_t m_m;\n        glonass_t* m__root;\n        glonass_t* m__parent;\n\n    public:\n        bool tau_n_sign() const { return m_tau_n_sign; }\n        uint64_t tau_n_value() const { return m_tau_n_value; }\n        bool delta_tau_n_sign() const { return m_delta_tau_n_sign; }\n        uint64_t delta_tau_n_value() const { return m_delta_tau_n_value; }\n        uint64_t e_n() const { return m_e_n; }\n        uint64_t not_used_1() const { return m_not_used_1; }\n        bool p4() const { return m_p4; }\n        uint64_t f_t() const { return m_f_t; }\n        uint64_t not_used_2() const { return m_not_used_2; }\n        uint64_t n_t() const { return m_n_t; }\n        uint64_t n() const { return m_n; }\n        uint64_t m() const { return m_m; }\n        glonass_t* _root() const { return m__root; }\n        glonass_t* _parent() const { return m__parent; }\n    };\n\n    class string_non_immediate_t : public kaitai::kstruct {\n\n    public:\n\n        string_non_immediate_t(kaitai::kstream* p__io, glonass_t* p__parent = 0, glonass_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~string_non_immediate_t();\n\n    private:\n        uint64_t m_data_1;\n        uint64_t m_data_2;\n        glonass_t* m__root;\n        glonass_t* m__parent;\n\n    public:\n        uint64_t data_1() const { return m_data_1; }\n        uint64_t data_2() const { return m_data_2; }\n        glonass_t* _root() const { return m__root; }\n        glonass_t* _parent() const { return m__parent; }\n    };\n\n    class string_5_t : public kaitai::kstruct {\n\n    public:\n\n        string_5_t(kaitai::kstream* p__io, glonass_t* p__parent = 0, glonass_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~string_5_t();\n\n    private:\n        uint64_t m_n_a;\n        uint64_t m_tau_c;\n        bool m_not_used;\n        uint64_t m_n_4;\n        uint64_t m_tau_gps;\n        bool m_l_n;\n        glonass_t* m__root;\n        glonass_t* m__parent;\n\n    public:\n        uint64_t n_a() const { return m_n_a; }\n        uint64_t tau_c() const { return m_tau_c; }\n        bool not_used() const { return m_not_used; }\n        uint64_t n_4() const { return m_n_4; }\n        uint64_t tau_gps() const { return m_tau_gps; }\n        bool l_n() const { return m_l_n; }\n        glonass_t* _root() const { return m__root; }\n        glonass_t* _parent() const { return m__parent; }\n    };\n\n    class string_1_t : public kaitai::kstruct {\n\n    public:\n\n        string_1_t(kaitai::kstream* p__io, glonass_t* p__parent = 0, glonass_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~string_1_t();\n\n    private:\n        bool f_x_vel;\n        int32_t m_x_vel;\n\n    public:\n        int32_t x_vel();\n\n    private:\n        bool f_x_accel;\n        int32_t m_x_accel;\n\n    public:\n        int32_t x_accel();\n\n    private:\n        bool f_x;\n        int32_t m_x;\n\n    public:\n        int32_t x();\n\n    private:\n        uint64_t m_not_used;\n        uint64_t m_p1;\n        uint64_t m_t_k;\n        bool m_x_vel_sign;\n        uint64_t m_x_vel_value;\n        bool m_x_accel_sign;\n        uint64_t m_x_accel_value;\n        bool m_x_sign;\n        uint64_t m_x_value;\n        glonass_t* m__root;\n        glonass_t* m__parent;\n\n    public:\n        uint64_t not_used() const { return m_not_used; }\n        uint64_t p1() const { return m_p1; }\n        uint64_t t_k() const { return m_t_k; }\n        bool x_vel_sign() const { return m_x_vel_sign; }\n        uint64_t x_vel_value() const { return m_x_vel_value; }\n        bool x_accel_sign() const { return m_x_accel_sign; }\n        uint64_t x_accel_value() const { return m_x_accel_value; }\n        bool x_sign() const { return m_x_sign; }\n        uint64_t x_value() const { return m_x_value; }\n        glonass_t* _root() const { return m__root; }\n        glonass_t* _parent() const { return m__parent; }\n    };\n\n    class string_2_t : public kaitai::kstruct {\n\n    public:\n\n        string_2_t(kaitai::kstream* p__io, glonass_t* p__parent = 0, glonass_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~string_2_t();\n\n    private:\n        bool f_y_vel;\n        int32_t m_y_vel;\n\n    public:\n        int32_t y_vel();\n\n    private:\n        bool f_y_accel;\n        int32_t m_y_accel;\n\n    public:\n        int32_t y_accel();\n\n    private:\n        bool f_y;\n        int32_t m_y;\n\n    public:\n        int32_t y();\n\n    private:\n        uint64_t m_b_n;\n        bool m_p2;\n        uint64_t m_t_b;\n        uint64_t m_not_used;\n        bool m_y_vel_sign;\n        uint64_t m_y_vel_value;\n        bool m_y_accel_sign;\n        uint64_t m_y_accel_value;\n        bool m_y_sign;\n        uint64_t m_y_value;\n        glonass_t* m__root;\n        glonass_t* m__parent;\n\n    public:\n        uint64_t b_n() const { return m_b_n; }\n        bool p2() const { return m_p2; }\n        uint64_t t_b() const { return m_t_b; }\n        uint64_t not_used() const { return m_not_used; }\n        bool y_vel_sign() const { return m_y_vel_sign; }\n        uint64_t y_vel_value() const { return m_y_vel_value; }\n        bool y_accel_sign() const { return m_y_accel_sign; }\n        uint64_t y_accel_value() const { return m_y_accel_value; }\n        bool y_sign() const { return m_y_sign; }\n        uint64_t y_value() const { return m_y_value; }\n        glonass_t* _root() const { return m__root; }\n        glonass_t* _parent() const { return m__parent; }\n    };\n\n    class string_3_t : public kaitai::kstruct {\n\n    public:\n\n        string_3_t(kaitai::kstream* p__io, glonass_t* p__parent = 0, glonass_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~string_3_t();\n\n    private:\n        bool f_gamma_n;\n        int32_t m_gamma_n;\n\n    public:\n        int32_t gamma_n();\n\n    private:\n        bool f_z_vel;\n        int32_t m_z_vel;\n\n    public:\n        int32_t z_vel();\n\n    private:\n        bool f_z_accel;\n        int32_t m_z_accel;\n\n    public:\n        int32_t z_accel();\n\n    private:\n        bool f_z;\n        int32_t m_z;\n\n    public:\n        int32_t z();\n\n    private:\n        bool m_p3;\n        bool m_gamma_n_sign;\n        uint64_t m_gamma_n_value;\n        bool m_not_used;\n        uint64_t m_p;\n        bool m_l_n;\n        bool m_z_vel_sign;\n        uint64_t m_z_vel_value;\n        bool m_z_accel_sign;\n        uint64_t m_z_accel_value;\n        bool m_z_sign;\n        uint64_t m_z_value;\n        glonass_t* m__root;\n        glonass_t* m__parent;\n\n    public:\n        bool p3() const { return m_p3; }\n        bool gamma_n_sign() const { return m_gamma_n_sign; }\n        uint64_t gamma_n_value() const { return m_gamma_n_value; }\n        bool not_used() const { return m_not_used; }\n        uint64_t p() const { return m_p; }\n        bool l_n() const { return m_l_n; }\n        bool z_vel_sign() const { return m_z_vel_sign; }\n        uint64_t z_vel_value() const { return m_z_vel_value; }\n        bool z_accel_sign() const { return m_z_accel_sign; }\n        uint64_t z_accel_value() const { return m_z_accel_value; }\n        bool z_sign() const { return m_z_sign; }\n        uint64_t z_value() const { return m_z_value; }\n        glonass_t* _root() const { return m__root; }\n        glonass_t* _parent() const { return m__parent; }\n    };\n\nprivate:\n    bool m_idle_chip;\n    uint64_t m_string_number;\n    kaitai::kstruct* m_data;\n    uint64_t m_hamming_code;\n    uint64_t m_pad_1;\n    uint64_t m_superframe_number;\n    uint64_t m_pad_2;\n    uint64_t m_frame_number;\n    glonass_t* m__root;\n    kaitai::kstruct* m__parent;\n\npublic:\n    bool idle_chip() const { return m_idle_chip; }\n    uint64_t string_number() const { return m_string_number; }\n    kaitai::kstruct* data() const { return m_data; }\n    uint64_t hamming_code() const { return m_hamming_code; }\n    uint64_t pad_1() const { return m_pad_1; }\n    uint64_t superframe_number() const { return m_superframe_number; }\n    uint64_t pad_2() const { return m_pad_2; }\n    uint64_t frame_number() const { return m_frame_number; }\n    glonass_t* _root() const { return m__root; }\n    kaitai::kstruct* _parent() const { return m__parent; }\n};\n"
  },
  "system.ubloxd.generated.glonass.string_4_t": {
    "id": "system.ubloxd.generated.glonass.string_4_t",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.h",
    "relative_path": "system\\ubloxd\\generated\\glonass.h",
    "depends_on": [],
    "start_line": 32,
    "end_line": 90,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class string_4_t : public kaitai::kstruct {\n\n    public:\n\n        string_4_t(kaitai::kstream* p__io, glonass_t* p__parent = 0, glonass_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~string_4_t();\n\n    private:\n        bool f_tau_n;\n        int32_t m_tau_n;\n\n    public:\n        int32_t tau_n();\n\n    private:\n        bool f_delta_tau_n;\n        int32_t m_delta_tau_n;\n\n    public:\n        int32_t delta_tau_n();\n\n    private:\n        bool m_tau_n_sign;\n        uint64_t m_tau_n_value;\n        bool m_delta_tau_n_sign;\n        uint64_t m_delta_tau_n_value;\n        uint64_t m_e_n;\n        uint64_t m_not_used_1;\n        bool m_p4;\n        uint64_t m_f_t;\n        uint64_t m_not_used_2;\n        uint64_t m_n_t;\n        uint64_t m_n;\n        uint64_t m_m;\n        glonass_t* m__root;\n        glonass_t* m__parent;\n\n    public:\n        bool tau_n_sign() const { return m_tau_n_sign; }\n        uint64_t tau_n_value() const { return m_tau_n_value; }\n        bool delta_tau_n_sign() const { return m_delta_tau_n_sign; }\n        uint64_t delta_tau_n_value() const { return m_delta_tau_n_value; }\n        uint64_t e_n() const { return m_e_n; }\n        uint64_t not_used_1() const { return m_not_used_1; }\n        bool p4() const { return m_p4; }\n        uint64_t f_t() const { return m_f_t; }\n        uint64_t not_used_2() const { return m_not_used_2; }\n        uint64_t n_t() const { return m_n_t; }\n        uint64_t n() const { return m_n; }\n        uint64_t m() const { return m_m; }\n        glonass_t* _root() const { return m__root; }\n        glonass_t* _parent() const { return m__parent; }\n    };\n"
  },
  "system.ubloxd.generated.glonass.string_non_immediate_t": {
    "id": "system.ubloxd.generated.glonass.string_non_immediate_t",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.h",
    "relative_path": "system\\ubloxd\\generated\\glonass.h",
    "depends_on": [],
    "start_line": 92,
    "end_line": 116,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class string_non_immediate_t : public kaitai::kstruct {\n\n    public:\n\n        string_non_immediate_t(kaitai::kstream* p__io, glonass_t* p__parent = 0, glonass_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~string_non_immediate_t();\n\n    private:\n        uint64_t m_data_1;\n        uint64_t m_data_2;\n        glonass_t* m__root;\n        glonass_t* m__parent;\n\n    public:\n        uint64_t data_1() const { return m_data_1; }\n        uint64_t data_2() const { return m_data_2; }\n        glonass_t* _root() const { return m__root; }\n        glonass_t* _parent() const { return m__parent; }\n    };\n"
  },
  "system.ubloxd.generated.glonass.string_5_t": {
    "id": "system.ubloxd.generated.glonass.string_5_t",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.h",
    "relative_path": "system\\ubloxd\\generated\\glonass.h",
    "depends_on": [],
    "start_line": 118,
    "end_line": 150,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class string_5_t : public kaitai::kstruct {\n\n    public:\n\n        string_5_t(kaitai::kstream* p__io, glonass_t* p__parent = 0, glonass_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~string_5_t();\n\n    private:\n        uint64_t m_n_a;\n        uint64_t m_tau_c;\n        bool m_not_used;\n        uint64_t m_n_4;\n        uint64_t m_tau_gps;\n        bool m_l_n;\n        glonass_t* m__root;\n        glonass_t* m__parent;\n\n    public:\n        uint64_t n_a() const { return m_n_a; }\n        uint64_t tau_c() const { return m_tau_c; }\n        bool not_used() const { return m_not_used; }\n        uint64_t n_4() const { return m_n_4; }\n        uint64_t tau_gps() const { return m_tau_gps; }\n        bool l_n() const { return m_l_n; }\n        glonass_t* _root() const { return m__root; }\n        glonass_t* _parent() const { return m__parent; }\n    };\n"
  },
  "system.ubloxd.generated.glonass.string_1_t": {
    "id": "system.ubloxd.generated.glonass.string_1_t",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.h",
    "relative_path": "system\\ubloxd\\generated\\glonass.h",
    "depends_on": [],
    "start_line": 152,
    "end_line": 211,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class string_1_t : public kaitai::kstruct {\n\n    public:\n\n        string_1_t(kaitai::kstream* p__io, glonass_t* p__parent = 0, glonass_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~string_1_t();\n\n    private:\n        bool f_x_vel;\n        int32_t m_x_vel;\n\n    public:\n        int32_t x_vel();\n\n    private:\n        bool f_x_accel;\n        int32_t m_x_accel;\n\n    public:\n        int32_t x_accel();\n\n    private:\n        bool f_x;\n        int32_t m_x;\n\n    public:\n        int32_t x();\n\n    private:\n        uint64_t m_not_used;\n        uint64_t m_p1;\n        uint64_t m_t_k;\n        bool m_x_vel_sign;\n        uint64_t m_x_vel_value;\n        bool m_x_accel_sign;\n        uint64_t m_x_accel_value;\n        bool m_x_sign;\n        uint64_t m_x_value;\n        glonass_t* m__root;\n        glonass_t* m__parent;\n\n    public:\n        uint64_t not_used() const { return m_not_used; }\n        uint64_t p1() const { return m_p1; }\n        uint64_t t_k() const { return m_t_k; }\n        bool x_vel_sign() const { return m_x_vel_sign; }\n        uint64_t x_vel_value() const { return m_x_vel_value; }\n        bool x_accel_sign() const { return m_x_accel_sign; }\n        uint64_t x_accel_value() const { return m_x_accel_value; }\n        bool x_sign() const { return m_x_sign; }\n        uint64_t x_value() const { return m_x_value; }\n        glonass_t* _root() const { return m__root; }\n        glonass_t* _parent() const { return m__parent; }\n    };\n"
  },
  "system.ubloxd.generated.glonass.string_2_t": {
    "id": "system.ubloxd.generated.glonass.string_2_t",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.h",
    "relative_path": "system\\ubloxd\\generated\\glonass.h",
    "depends_on": [],
    "start_line": 213,
    "end_line": 274,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class string_2_t : public kaitai::kstruct {\n\n    public:\n\n        string_2_t(kaitai::kstream* p__io, glonass_t* p__parent = 0, glonass_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~string_2_t();\n\n    private:\n        bool f_y_vel;\n        int32_t m_y_vel;\n\n    public:\n        int32_t y_vel();\n\n    private:\n        bool f_y_accel;\n        int32_t m_y_accel;\n\n    public:\n        int32_t y_accel();\n\n    private:\n        bool f_y;\n        int32_t m_y;\n\n    public:\n        int32_t y();\n\n    private:\n        uint64_t m_b_n;\n        bool m_p2;\n        uint64_t m_t_b;\n        uint64_t m_not_used;\n        bool m_y_vel_sign;\n        uint64_t m_y_vel_value;\n        bool m_y_accel_sign;\n        uint64_t m_y_accel_value;\n        bool m_y_sign;\n        uint64_t m_y_value;\n        glonass_t* m__root;\n        glonass_t* m__parent;\n\n    public:\n        uint64_t b_n() const { return m_b_n; }\n        bool p2() const { return m_p2; }\n        uint64_t t_b() const { return m_t_b; }\n        uint64_t not_used() const { return m_not_used; }\n        bool y_vel_sign() const { return m_y_vel_sign; }\n        uint64_t y_vel_value() const { return m_y_vel_value; }\n        bool y_accel_sign() const { return m_y_accel_sign; }\n        uint64_t y_accel_value() const { return m_y_accel_value; }\n        bool y_sign() const { return m_y_sign; }\n        uint64_t y_value() const { return m_y_value; }\n        glonass_t* _root() const { return m__root; }\n        glonass_t* _parent() const { return m__parent; }\n    };\n"
  },
  "system.ubloxd.generated.glonass.string_3_t": {
    "id": "system.ubloxd.generated.glonass.string_3_t",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\glonass.h",
    "relative_path": "system\\ubloxd\\generated\\glonass.h",
    "depends_on": [],
    "start_line": 276,
    "end_line": 348,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class string_3_t : public kaitai::kstruct {\n\n    public:\n\n        string_3_t(kaitai::kstream* p__io, glonass_t* p__parent = 0, glonass_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~string_3_t();\n\n    private:\n        bool f_gamma_n;\n        int32_t m_gamma_n;\n\n    public:\n        int32_t gamma_n();\n\n    private:\n        bool f_z_vel;\n        int32_t m_z_vel;\n\n    public:\n        int32_t z_vel();\n\n    private:\n        bool f_z_accel;\n        int32_t m_z_accel;\n\n    public:\n        int32_t z_accel();\n\n    private:\n        bool f_z;\n        int32_t m_z;\n\n    public:\n        int32_t z();\n\n    private:\n        bool m_p3;\n        bool m_gamma_n_sign;\n        uint64_t m_gamma_n_value;\n        bool m_not_used;\n        uint64_t m_p;\n        bool m_l_n;\n        bool m_z_vel_sign;\n        uint64_t m_z_vel_value;\n        bool m_z_accel_sign;\n        uint64_t m_z_accel_value;\n        bool m_z_sign;\n        uint64_t m_z_value;\n        glonass_t* m__root;\n        glonass_t* m__parent;\n\n    public:\n        bool p3() const { return m_p3; }\n        bool gamma_n_sign() const { return m_gamma_n_sign; }\n        uint64_t gamma_n_value() const { return m_gamma_n_value; }\n        bool not_used() const { return m_not_used; }\n        uint64_t p() const { return m_p; }\n        bool l_n() const { return m_l_n; }\n        bool z_vel_sign() const { return m_z_vel_sign; }\n        uint64_t z_vel_value() const { return m_z_vel_value; }\n        bool z_accel_sign() const { return m_z_accel_sign; }\n        uint64_t z_accel_value() const { return m_z_accel_value; }\n        bool z_sign() const { return m_z_sign; }\n        uint64_t z_value() const { return m_z_value; }\n        glonass_t* _root() const { return m__root; }\n        glonass_t* _parent() const { return m__parent; }\n    };\n"
  },
  "system.ubloxd.generated.gps.gps_t._read": {
    "id": "system.ubloxd.generated.gps.gps_t._read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.cpp",
    "relative_path": "system\\ubloxd\\generated\\gps.cpp",
    "depends_on": [],
    "start_line": 20,
    "end_line": 46,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void gps_t::_read() {\n    m_tlm = new tlm_t(m__io, this, m__root);\n    m_how = new how_t(m__io, this, m__root);\n    n_body = true;\n    switch (how()->subframe_id()) {\n    case 1: {\n        n_body = false;\n        m_body = new subframe_1_t(m__io, this, m__root);\n        break;\n    }\n    case 2: {\n        n_body = false;\n        m_body = new subframe_2_t(m__io, this, m__root);\n        break;\n    }\n    case 3: {\n        n_body = false;\n        m_body = new subframe_3_t(m__io, this, m__root);\n        break;\n    }\n    case 4: {\n        n_body = false;\n        m_body = new subframe_4_t(m__io, this, m__root);\n        break;\n    }\n    }\n}\n"
  },
  "system.ubloxd.generated.gps.gps_t._clean_up": {
    "id": "system.ubloxd.generated.gps.gps_t._clean_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.cpp",
    "relative_path": "system\\ubloxd\\generated\\gps.cpp",
    "depends_on": [],
    "start_line": 52,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void gps_t::_clean_up() {\n    if (m_tlm) {\n        delete m_tlm; m_tlm = 0;\n    }\n    if (m_how) {\n        delete m_how; m_how = 0;\n    }\n    if (!n_body) {\n        if (m_body) {\n            delete m_body; m_body = 0;\n        }\n    }\n}\n"
  },
  "system.ubloxd.generated.gps.subframe_1_t._read": {
    "id": "system.ubloxd.generated.gps.subframe_1_t._read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.cpp",
    "relative_path": "system\\ubloxd\\generated\\gps.cpp",
    "depends_on": [],
    "start_line": 79,
    "end_line": 99,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void gps_t::subframe_1_t::_read() {\n    m_week_no = m__io->read_bits_int_be(10);\n    m_code = m__io->read_bits_int_be(2);\n    m_sv_accuracy = m__io->read_bits_int_be(4);\n    m_sv_health = m__io->read_bits_int_be(6);\n    m_iodc_msb = m__io->read_bits_int_be(2);\n    m_l2_p_data_flag = m__io->read_bits_int_be(1);\n    m_reserved1 = m__io->read_bits_int_be(23);\n    m_reserved2 = m__io->read_bits_int_be(24);\n    m_reserved3 = m__io->read_bits_int_be(24);\n    m_reserved4 = m__io->read_bits_int_be(16);\n    m__io->align_to_byte();\n    m_t_gd = m__io->read_s1();\n    m_iodc_lsb = m__io->read_u1();\n    m_t_oc = m__io->read_u2be();\n    m_af_2 = m__io->read_s1();\n    m_af_1 = m__io->read_s2be();\n    m_af_0_sign = m__io->read_bits_int_be(1);\n    m_af_0_value = m__io->read_bits_int_be(21);\n    m_reserved5 = m__io->read_bits_int_be(2);\n}\n"
  },
  "system.ubloxd.generated.gps.subframe_1_t._clean_up": {
    "id": "system.ubloxd.generated.gps.subframe_1_t._clean_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.cpp",
    "relative_path": "system\\ubloxd\\generated\\gps.cpp",
    "depends_on": [],
    "start_line": 105,
    "end_line": 106,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void gps_t::subframe_1_t::_clean_up() {\n}\n"
  },
  "system.ubloxd.generated.gps.subframe_1_t.af_0": {
    "id": "system.ubloxd.generated.gps.subframe_1_t.af_0",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.cpp",
    "relative_path": "system\\ubloxd\\generated\\gps.cpp",
    "depends_on": [],
    "start_line": 108,
    "end_line": 114,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int32_t gps_t::subframe_1_t::af_0() {\n    if (f_af_0)\n        return m_af_0;\n    m_af_0 = ((af_0_sign()) ? ((af_0_value() - (1 << 21))) : (af_0_value()));\n    f_af_0 = true;\n    return m_af_0;\n}\n"
  },
  "system.ubloxd.generated.gps.subframe_3_t._read": {
    "id": "system.ubloxd.generated.gps.subframe_3_t._read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.cpp",
    "relative_path": "system\\ubloxd\\generated\\gps.cpp",
    "depends_on": [],
    "start_line": 130,
    "end_line": 144,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void gps_t::subframe_3_t::_read() {\n    m_c_ic = m__io->read_s2be();\n    m_omega_0 = m__io->read_s4be();\n    m_c_is = m__io->read_s2be();\n    m_i_0 = m__io->read_s4be();\n    m_c_rc = m__io->read_s2be();\n    m_omega = m__io->read_s4be();\n    m_omega_dot_sign = m__io->read_bits_int_be(1);\n    m_omega_dot_value = m__io->read_bits_int_be(23);\n    m__io->align_to_byte();\n    m_iode = m__io->read_u1();\n    m_idot_sign = m__io->read_bits_int_be(1);\n    m_idot_value = m__io->read_bits_int_be(13);\n    m_reserved = m__io->read_bits_int_be(2);\n}\n"
  },
  "system.ubloxd.generated.gps.subframe_3_t._clean_up": {
    "id": "system.ubloxd.generated.gps.subframe_3_t._clean_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.cpp",
    "relative_path": "system\\ubloxd\\generated\\gps.cpp",
    "depends_on": [],
    "start_line": 150,
    "end_line": 151,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void gps_t::subframe_3_t::_clean_up() {\n}\n"
  },
  "system.ubloxd.generated.gps.subframe_3_t.omega_dot": {
    "id": "system.ubloxd.generated.gps.subframe_3_t.omega_dot",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.cpp",
    "relative_path": "system\\ubloxd\\generated\\gps.cpp",
    "depends_on": [],
    "start_line": 153,
    "end_line": 159,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int32_t gps_t::subframe_3_t::omega_dot() {\n    if (f_omega_dot)\n        return m_omega_dot;\n    m_omega_dot = ((omega_dot_sign()) ? ((omega_dot_value() - (1 << 23))) : (omega_dot_value()));\n    f_omega_dot = true;\n    return m_omega_dot;\n}\n"
  },
  "system.ubloxd.generated.gps.subframe_3_t.idot": {
    "id": "system.ubloxd.generated.gps.subframe_3_t.idot",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.cpp",
    "relative_path": "system\\ubloxd\\generated\\gps.cpp",
    "depends_on": [],
    "start_line": 161,
    "end_line": 167,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int32_t gps_t::subframe_3_t::idot() {\n    if (f_idot)\n        return m_idot;\n    m_idot = ((idot_sign()) ? ((idot_value() - (1 << 13))) : (idot_value()));\n    f_idot = true;\n    return m_idot;\n}\n"
  },
  "system.ubloxd.generated.gps.subframe_4_t._read": {
    "id": "system.ubloxd.generated.gps.subframe_4_t._read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.cpp",
    "relative_path": "system\\ubloxd\\generated\\gps.cpp",
    "depends_on": [],
    "start_line": 181,
    "end_line": 193,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void gps_t::subframe_4_t::_read() {\n    m_data_id = m__io->read_bits_int_be(2);\n    m_page_id = m__io->read_bits_int_be(6);\n    m__io->align_to_byte();\n    n_body = true;\n    switch (page_id()) {\n    case 56: {\n        n_body = false;\n        m_body = new ionosphere_data_t(m__io, this, m__root);\n        break;\n    }\n    }\n}\n"
  },
  "system.ubloxd.generated.gps.subframe_4_t._clean_up": {
    "id": "system.ubloxd.generated.gps.subframe_4_t._clean_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.cpp",
    "relative_path": "system\\ubloxd\\generated\\gps.cpp",
    "depends_on": [],
    "start_line": 199,
    "end_line": 205,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void gps_t::subframe_4_t::_clean_up() {\n    if (!n_body) {\n        if (m_body) {\n            delete m_body; m_body = 0;\n        }\n    }\n}\n"
  },
  "system.ubloxd.generated.gps.ionosphere_data_t._read": {
    "id": "system.ubloxd.generated.gps.ionosphere_data_t._read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.cpp",
    "relative_path": "system\\ubloxd\\generated\\gps.cpp",
    "depends_on": [],
    "start_line": 219,
    "end_line": 228,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void gps_t::subframe_4_t::ionosphere_data_t::_read() {\n    m_a0 = m__io->read_s1();\n    m_a1 = m__io->read_s1();\n    m_a2 = m__io->read_s1();\n    m_a3 = m__io->read_s1();\n    m_b0 = m__io->read_s1();\n    m_b1 = m__io->read_s1();\n    m_b2 = m__io->read_s1();\n    m_b3 = m__io->read_s1();\n}\n"
  },
  "system.ubloxd.generated.gps.ionosphere_data_t._clean_up": {
    "id": "system.ubloxd.generated.gps.ionosphere_data_t._clean_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.cpp",
    "relative_path": "system\\ubloxd\\generated\\gps.cpp",
    "depends_on": [],
    "start_line": 234,
    "end_line": 235,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void gps_t::subframe_4_t::ionosphere_data_t::_clean_up() {\n}\n"
  },
  "system.ubloxd.generated.gps.how_t._read": {
    "id": "system.ubloxd.generated.gps.how_t._read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.cpp",
    "relative_path": "system\\ubloxd\\generated\\gps.cpp",
    "depends_on": [],
    "start_line": 249,
    "end_line": 255,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void gps_t::how_t::_read() {\n    m_tow_count = m__io->read_bits_int_be(17);\n    m_alert = m__io->read_bits_int_be(1);\n    m_anti_spoof = m__io->read_bits_int_be(1);\n    m_subframe_id = m__io->read_bits_int_be(3);\n    m_reserved = m__io->read_bits_int_be(2);\n}\n"
  },
  "system.ubloxd.generated.gps.how_t._clean_up": {
    "id": "system.ubloxd.generated.gps.how_t._clean_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.cpp",
    "relative_path": "system\\ubloxd\\generated\\gps.cpp",
    "depends_on": [],
    "start_line": 261,
    "end_line": 262,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void gps_t::how_t::_clean_up() {\n}\n"
  },
  "system.ubloxd.generated.gps.tlm_t._read": {
    "id": "system.ubloxd.generated.gps.tlm_t._read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.cpp",
    "relative_path": "system\\ubloxd\\generated\\gps.cpp",
    "depends_on": [],
    "start_line": 276,
    "end_line": 284,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void gps_t::tlm_t::_read() {\n    m_preamble = m__io->read_bytes(1);\n    if (!(preamble() == std::string(\"\\x8B\", 1))) {\n        throw kaitai::validation_not_equal_error<std::string>(std::string(\"\\x8B\", 1), preamble(), _io(), std::string(\"/types/tlm/seq/0\"));\n    }\n    m_tlm = m__io->read_bits_int_be(14);\n    m_integrity_status = m__io->read_bits_int_be(1);\n    m_reserved = m__io->read_bits_int_be(1);\n}\n"
  },
  "system.ubloxd.generated.gps.tlm_t._clean_up": {
    "id": "system.ubloxd.generated.gps.tlm_t._clean_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.cpp",
    "relative_path": "system\\ubloxd\\generated\\gps.cpp",
    "depends_on": [],
    "start_line": 290,
    "end_line": 291,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void gps_t::tlm_t::_clean_up() {\n}\n"
  },
  "system.ubloxd.generated.gps.subframe_2_t._read": {
    "id": "system.ubloxd.generated.gps.subframe_2_t._read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.cpp",
    "relative_path": "system\\ubloxd\\generated\\gps.cpp",
    "depends_on": [],
    "start_line": 305,
    "end_line": 318,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void gps_t::subframe_2_t::_read() {\n    m_iode = m__io->read_u1();\n    m_c_rs = m__io->read_s2be();\n    m_delta_n = m__io->read_s2be();\n    m_m_0 = m__io->read_s4be();\n    m_c_uc = m__io->read_s2be();\n    m_e = m__io->read_s4be();\n    m_c_us = m__io->read_s2be();\n    m_sqrt_a = m__io->read_u4be();\n    m_t_oe = m__io->read_u2be();\n    m_fit_interval_flag = m__io->read_bits_int_be(1);\n    m_aoda = m__io->read_bits_int_be(5);\n    m_reserved = m__io->read_bits_int_be(2);\n}\n"
  },
  "system.ubloxd.generated.gps.subframe_2_t._clean_up": {
    "id": "system.ubloxd.generated.gps.subframe_2_t._clean_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.cpp",
    "relative_path": "system\\ubloxd\\generated\\gps.cpp",
    "depends_on": [],
    "start_line": 324,
    "end_line": 325,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void gps_t::subframe_2_t::_clean_up() {\n}\n"
  },
  "system.ubloxd.generated.gps.gps_t": {
    "id": "system.ubloxd.generated.gps.gps_t",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.h",
    "relative_path": "system\\ubloxd\\generated\\gps.h",
    "depends_on": [],
    "start_line": 13,
    "end_line": 357,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class gps_t : public kaitai::kstruct {\n\npublic:\n    class subframe_1_t;\n    class subframe_3_t;\n    class subframe_4_t;\n    class how_t;\n    class tlm_t;\n    class subframe_2_t;\n\n    gps_t(kaitai::kstream* p__io, kaitai::kstruct* p__parent = 0, gps_t* p__root = 0);\n\nprivate:\n    void _read();\n    void _clean_up();\n\npublic:\n    ~gps_t();\n\n    class subframe_1_t : public kaitai::kstruct {\n\n    public:\n\n        subframe_1_t(kaitai::kstream* p__io, gps_t* p__parent = 0, gps_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~subframe_1_t();\n\n    private:\n        bool f_af_0;\n        int32_t m_af_0;\n\n    public:\n        int32_t af_0();\n\n    private:\n        uint64_t m_week_no;\n        uint64_t m_code;\n        uint64_t m_sv_accuracy;\n        uint64_t m_sv_health;\n        uint64_t m_iodc_msb;\n        bool m_l2_p_data_flag;\n        uint64_t m_reserved1;\n        uint64_t m_reserved2;\n        uint64_t m_reserved3;\n        uint64_t m_reserved4;\n        int8_t m_t_gd;\n        uint8_t m_iodc_lsb;\n        uint16_t m_t_oc;\n        int8_t m_af_2;\n        int16_t m_af_1;\n        bool m_af_0_sign;\n        uint64_t m_af_0_value;\n        uint64_t m_reserved5;\n        gps_t* m__root;\n        gps_t* m__parent;\n\n    public:\n        uint64_t week_no() const { return m_week_no; }\n        uint64_t code() const { return m_code; }\n        uint64_t sv_accuracy() const { return m_sv_accuracy; }\n        uint64_t sv_health() const { return m_sv_health; }\n        uint64_t iodc_msb() const { return m_iodc_msb; }\n        bool l2_p_data_flag() const { return m_l2_p_data_flag; }\n        uint64_t reserved1() const { return m_reserved1; }\n        uint64_t reserved2() const { return m_reserved2; }\n        uint64_t reserved3() const { return m_reserved3; }\n        uint64_t reserved4() const { return m_reserved4; }\n        int8_t t_gd() const { return m_t_gd; }\n        uint8_t iodc_lsb() const { return m_iodc_lsb; }\n        uint16_t t_oc() const { return m_t_oc; }\n        int8_t af_2() const { return m_af_2; }\n        int16_t af_1() const { return m_af_1; }\n        bool af_0_sign() const { return m_af_0_sign; }\n        uint64_t af_0_value() const { return m_af_0_value; }\n        uint64_t reserved5() const { return m_reserved5; }\n        gps_t* _root() const { return m__root; }\n        gps_t* _parent() const { return m__parent; }\n    };\n\n    class subframe_3_t : public kaitai::kstruct {\n\n    public:\n\n        subframe_3_t(kaitai::kstream* p__io, gps_t* p__parent = 0, gps_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~subframe_3_t();\n\n    private:\n        bool f_omega_dot;\n        int32_t m_omega_dot;\n\n    public:\n        int32_t omega_dot();\n\n    private:\n        bool f_idot;\n        int32_t m_idot;\n\n    public:\n        int32_t idot();\n\n    private:\n        int16_t m_c_ic;\n        int32_t m_omega_0;\n        int16_t m_c_is;\n        int32_t m_i_0;\n        int16_t m_c_rc;\n        int32_t m_omega;\n        bool m_omega_dot_sign;\n        uint64_t m_omega_dot_value;\n        uint8_t m_iode;\n        bool m_idot_sign;\n        uint64_t m_idot_value;\n        uint64_t m_reserved;\n        gps_t* m__root;\n        gps_t* m__parent;\n\n    public:\n        int16_t c_ic() const { return m_c_ic; }\n        int32_t omega_0() const { return m_omega_0; }\n        int16_t c_is() const { return m_c_is; }\n        int32_t i_0() const { return m_i_0; }\n        int16_t c_rc() const { return m_c_rc; }\n        int32_t omega() const { return m_omega; }\n        bool omega_dot_sign() const { return m_omega_dot_sign; }\n        uint64_t omega_dot_value() const { return m_omega_dot_value; }\n        uint8_t iode() const { return m_iode; }\n        bool idot_sign() const { return m_idot_sign; }\n        uint64_t idot_value() const { return m_idot_value; }\n        uint64_t reserved() const { return m_reserved; }\n        gps_t* _root() const { return m__root; }\n        gps_t* _parent() const { return m__parent; }\n    };\n\n    class subframe_4_t : public kaitai::kstruct {\n\n    public:\n        class ionosphere_data_t;\n\n        subframe_4_t(kaitai::kstream* p__io, gps_t* p__parent = 0, gps_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~subframe_4_t();\n\n        class ionosphere_data_t : public kaitai::kstruct {\n\n        public:\n\n            ionosphere_data_t(kaitai::kstream* p__io, gps_t::subframe_4_t* p__parent = 0, gps_t* p__root = 0);\n\n        private:\n            void _read();\n            void _clean_up();\n\n        public:\n            ~ionosphere_data_t();\n\n        private:\n            int8_t m_a0;\n            int8_t m_a1;\n            int8_t m_a2;\n            int8_t m_a3;\n            int8_t m_b0;\n            int8_t m_b1;\n            int8_t m_b2;\n            int8_t m_b3;\n            gps_t* m__root;\n            gps_t::subframe_4_t* m__parent;\n\n        public:\n            int8_t a0() const { return m_a0; }\n            int8_t a1() const { return m_a1; }\n            int8_t a2() const { return m_a2; }\n            int8_t a3() const { return m_a3; }\n            int8_t b0() const { return m_b0; }\n            int8_t b1() const { return m_b1; }\n            int8_t b2() const { return m_b2; }\n            int8_t b3() const { return m_b3; }\n            gps_t* _root() const { return m__root; }\n            gps_t::subframe_4_t* _parent() const { return m__parent; }\n        };\n\n    private:\n        uint64_t m_data_id;\n        uint64_t m_page_id;\n        ionosphere_data_t* m_body;\n        bool n_body;\n\n    public:\n        bool _is_null_body() { body(); return n_body; };\n\n    private:\n        gps_t* m__root;\n        gps_t* m__parent;\n\n    public:\n        uint64_t data_id() const { return m_data_id; }\n        uint64_t page_id() const { return m_page_id; }\n        ionosphere_data_t* body() const { return m_body; }\n        gps_t* _root() const { return m__root; }\n        gps_t* _parent() const { return m__parent; }\n    };\n\n    class how_t : public kaitai::kstruct {\n\n    public:\n\n        how_t(kaitai::kstream* p__io, gps_t* p__parent = 0, gps_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~how_t();\n\n    private:\n        uint64_t m_tow_count;\n        bool m_alert;\n        bool m_anti_spoof;\n        uint64_t m_subframe_id;\n        uint64_t m_reserved;\n        gps_t* m__root;\n        gps_t* m__parent;\n\n    public:\n        uint64_t tow_count() const { return m_tow_count; }\n        bool alert() const { return m_alert; }\n        bool anti_spoof() const { return m_anti_spoof; }\n        uint64_t subframe_id() const { return m_subframe_id; }\n        uint64_t reserved() const { return m_reserved; }\n        gps_t* _root() const { return m__root; }\n        gps_t* _parent() const { return m__parent; }\n    };\n\n    class tlm_t : public kaitai::kstruct {\n\n    public:\n\n        tlm_t(kaitai::kstream* p__io, gps_t* p__parent = 0, gps_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~tlm_t();\n\n    private:\n        std::string m_preamble;\n        uint64_t m_tlm;\n        bool m_integrity_status;\n        bool m_reserved;\n        gps_t* m__root;\n        gps_t* m__parent;\n\n    public:\n        std::string preamble() const { return m_preamble; }\n        uint64_t tlm() const { return m_tlm; }\n        bool integrity_status() const { return m_integrity_status; }\n        bool reserved() const { return m_reserved; }\n        gps_t* _root() const { return m__root; }\n        gps_t* _parent() const { return m__parent; }\n    };\n\n    class subframe_2_t : public kaitai::kstruct {\n\n    public:\n\n        subframe_2_t(kaitai::kstream* p__io, gps_t* p__parent = 0, gps_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~subframe_2_t();\n\n    private:\n        uint8_t m_iode;\n        int16_t m_c_rs;\n        int16_t m_delta_n;\n        int32_t m_m_0;\n        int16_t m_c_uc;\n        int32_t m_e;\n        int16_t m_c_us;\n        uint32_t m_sqrt_a;\n        uint16_t m_t_oe;\n        bool m_fit_interval_flag;\n        uint64_t m_aoda;\n        uint64_t m_reserved;\n        gps_t* m__root;\n        gps_t* m__parent;\n\n    public:\n        uint8_t iode() const { return m_iode; }\n        int16_t c_rs() const { return m_c_rs; }\n        int16_t delta_n() const { return m_delta_n; }\n        int32_t m_0() const { return m_m_0; }\n        int16_t c_uc() const { return m_c_uc; }\n        int32_t e() const { return m_e; }\n        int16_t c_us() const { return m_c_us; }\n        uint32_t sqrt_a() const { return m_sqrt_a; }\n        uint16_t t_oe() const { return m_t_oe; }\n        bool fit_interval_flag() const { return m_fit_interval_flag; }\n        uint64_t aoda() const { return m_aoda; }\n        uint64_t reserved() const { return m_reserved; }\n        gps_t* _root() const { return m__root; }\n        gps_t* _parent() const { return m__parent; }\n    };\n\nprivate:\n    tlm_t* m_tlm;\n    how_t* m_how;\n    kaitai::kstruct* m_body;\n    bool n_body;\n\npublic:\n    bool _is_null_body() { body(); return n_body; };\n\nprivate:\n    gps_t* m__root;\n    kaitai::kstruct* m__parent;\n\npublic:\n    tlm_t* tlm() const { return m_tlm; }\n    how_t* how() const { return m_how; }\n    kaitai::kstruct* body() const { return m_body; }\n    gps_t* _root() const { return m__root; }\n    kaitai::kstruct* _parent() const { return m__parent; }\n};\n"
  },
  "system.ubloxd.generated.gps.subframe_1_t": {
    "id": "system.ubloxd.generated.gps.subframe_1_t",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.h",
    "relative_path": "system\\ubloxd\\generated\\gps.h",
    "depends_on": [],
    "start_line": 32,
    "end_line": 95,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class subframe_1_t : public kaitai::kstruct {\n\n    public:\n\n        subframe_1_t(kaitai::kstream* p__io, gps_t* p__parent = 0, gps_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~subframe_1_t();\n\n    private:\n        bool f_af_0;\n        int32_t m_af_0;\n\n    public:\n        int32_t af_0();\n\n    private:\n        uint64_t m_week_no;\n        uint64_t m_code;\n        uint64_t m_sv_accuracy;\n        uint64_t m_sv_health;\n        uint64_t m_iodc_msb;\n        bool m_l2_p_data_flag;\n        uint64_t m_reserved1;\n        uint64_t m_reserved2;\n        uint64_t m_reserved3;\n        uint64_t m_reserved4;\n        int8_t m_t_gd;\n        uint8_t m_iodc_lsb;\n        uint16_t m_t_oc;\n        int8_t m_af_2;\n        int16_t m_af_1;\n        bool m_af_0_sign;\n        uint64_t m_af_0_value;\n        uint64_t m_reserved5;\n        gps_t* m__root;\n        gps_t* m__parent;\n\n    public:\n        uint64_t week_no() const { return m_week_no; }\n        uint64_t code() const { return m_code; }\n        uint64_t sv_accuracy() const { return m_sv_accuracy; }\n        uint64_t sv_health() const { return m_sv_health; }\n        uint64_t iodc_msb() const { return m_iodc_msb; }\n        bool l2_p_data_flag() const { return m_l2_p_data_flag; }\n        uint64_t reserved1() const { return m_reserved1; }\n        uint64_t reserved2() const { return m_reserved2; }\n        uint64_t reserved3() const { return m_reserved3; }\n        uint64_t reserved4() const { return m_reserved4; }\n        int8_t t_gd() const { return m_t_gd; }\n        uint8_t iodc_lsb() const { return m_iodc_lsb; }\n        uint16_t t_oc() const { return m_t_oc; }\n        int8_t af_2() const { return m_af_2; }\n        int16_t af_1() const { return m_af_1; }\n        bool af_0_sign() const { return m_af_0_sign; }\n        uint64_t af_0_value() const { return m_af_0_value; }\n        uint64_t reserved5() const { return m_reserved5; }\n        gps_t* _root() const { return m__root; }\n        gps_t* _parent() const { return m__parent; }\n    };\n"
  },
  "system.ubloxd.generated.gps.subframe_3_t": {
    "id": "system.ubloxd.generated.gps.subframe_3_t",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.h",
    "relative_path": "system\\ubloxd\\generated\\gps.h",
    "depends_on": [],
    "start_line": 97,
    "end_line": 155,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class subframe_3_t : public kaitai::kstruct {\n\n    public:\n\n        subframe_3_t(kaitai::kstream* p__io, gps_t* p__parent = 0, gps_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~subframe_3_t();\n\n    private:\n        bool f_omega_dot;\n        int32_t m_omega_dot;\n\n    public:\n        int32_t omega_dot();\n\n    private:\n        bool f_idot;\n        int32_t m_idot;\n\n    public:\n        int32_t idot();\n\n    private:\n        int16_t m_c_ic;\n        int32_t m_omega_0;\n        int16_t m_c_is;\n        int32_t m_i_0;\n        int16_t m_c_rc;\n        int32_t m_omega;\n        bool m_omega_dot_sign;\n        uint64_t m_omega_dot_value;\n        uint8_t m_iode;\n        bool m_idot_sign;\n        uint64_t m_idot_value;\n        uint64_t m_reserved;\n        gps_t* m__root;\n        gps_t* m__parent;\n\n    public:\n        int16_t c_ic() const { return m_c_ic; }\n        int32_t omega_0() const { return m_omega_0; }\n        int16_t c_is() const { return m_c_is; }\n        int32_t i_0() const { return m_i_0; }\n        int16_t c_rc() const { return m_c_rc; }\n        int32_t omega() const { return m_omega; }\n        bool omega_dot_sign() const { return m_omega_dot_sign; }\n        uint64_t omega_dot_value() const { return m_omega_dot_value; }\n        uint8_t iode() const { return m_iode; }\n        bool idot_sign() const { return m_idot_sign; }\n        uint64_t idot_value() const { return m_idot_value; }\n        uint64_t reserved() const { return m_reserved; }\n        gps_t* _root() const { return m__root; }\n        gps_t* _parent() const { return m__parent; }\n    };\n"
  },
  "system.ubloxd.generated.gps.subframe_4_t": {
    "id": "system.ubloxd.generated.gps.subframe_4_t",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.h",
    "relative_path": "system\\ubloxd\\generated\\gps.h",
    "depends_on": [],
    "start_line": 157,
    "end_line": 228,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class subframe_4_t : public kaitai::kstruct {\n\n    public:\n        class ionosphere_data_t;\n\n        subframe_4_t(kaitai::kstream* p__io, gps_t* p__parent = 0, gps_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~subframe_4_t();\n\n        class ionosphere_data_t : public kaitai::kstruct {\n\n        public:\n\n            ionosphere_data_t(kaitai::kstream* p__io, gps_t::subframe_4_t* p__parent = 0, gps_t* p__root = 0);\n\n        private:\n            void _read();\n            void _clean_up();\n\n        public:\n            ~ionosphere_data_t();\n\n        private:\n            int8_t m_a0;\n            int8_t m_a1;\n            int8_t m_a2;\n            int8_t m_a3;\n            int8_t m_b0;\n            int8_t m_b1;\n            int8_t m_b2;\n            int8_t m_b3;\n            gps_t* m__root;\n            gps_t::subframe_4_t* m__parent;\n\n        public:\n            int8_t a0() const { return m_a0; }\n            int8_t a1() const { return m_a1; }\n            int8_t a2() const { return m_a2; }\n            int8_t a3() const { return m_a3; }\n            int8_t b0() const { return m_b0; }\n            int8_t b1() const { return m_b1; }\n            int8_t b2() const { return m_b2; }\n            int8_t b3() const { return m_b3; }\n            gps_t* _root() const { return m__root; }\n            gps_t::subframe_4_t* _parent() const { return m__parent; }\n        };\n\n    private:\n        uint64_t m_data_id;\n        uint64_t m_page_id;\n        ionosphere_data_t* m_body;\n        bool n_body;\n\n    public:\n        bool _is_null_body() { body(); return n_body; };\n\n    private:\n        gps_t* m__root;\n        gps_t* m__parent;\n\n    public:\n        uint64_t data_id() const { return m_data_id; }\n        uint64_t page_id() const { return m_page_id; }\n        ionosphere_data_t* body() const { return m_body; }\n        gps_t* _root() const { return m__root; }\n        gps_t* _parent() const { return m__parent; }\n    };\n"
  },
  "system.ubloxd.generated.gps.ionosphere_data_t": {
    "id": "system.ubloxd.generated.gps.ionosphere_data_t",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.h",
    "relative_path": "system\\ubloxd\\generated\\gps.h",
    "depends_on": [],
    "start_line": 171,
    "end_line": 207,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        class ionosphere_data_t : public kaitai::kstruct {\n\n        public:\n\n            ionosphere_data_t(kaitai::kstream* p__io, gps_t::subframe_4_t* p__parent = 0, gps_t* p__root = 0);\n\n        private:\n            void _read();\n            void _clean_up();\n\n        public:\n            ~ionosphere_data_t();\n\n        private:\n            int8_t m_a0;\n            int8_t m_a1;\n            int8_t m_a2;\n            int8_t m_a3;\n            int8_t m_b0;\n            int8_t m_b1;\n            int8_t m_b2;\n            int8_t m_b3;\n            gps_t* m__root;\n            gps_t::subframe_4_t* m__parent;\n\n        public:\n            int8_t a0() const { return m_a0; }\n            int8_t a1() const { return m_a1; }\n            int8_t a2() const { return m_a2; }\n            int8_t a3() const { return m_a3; }\n            int8_t b0() const { return m_b0; }\n            int8_t b1() const { return m_b1; }\n            int8_t b2() const { return m_b2; }\n            int8_t b3() const { return m_b3; }\n            gps_t* _root() const { return m__root; }\n            gps_t::subframe_4_t* _parent() const { return m__parent; }\n        };\n"
  },
  "system.ubloxd.generated.gps.how_t": {
    "id": "system.ubloxd.generated.gps.how_t",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.h",
    "relative_path": "system\\ubloxd\\generated\\gps.h",
    "depends_on": [],
    "start_line": 230,
    "end_line": 260,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class how_t : public kaitai::kstruct {\n\n    public:\n\n        how_t(kaitai::kstream* p__io, gps_t* p__parent = 0, gps_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~how_t();\n\n    private:\n        uint64_t m_tow_count;\n        bool m_alert;\n        bool m_anti_spoof;\n        uint64_t m_subframe_id;\n        uint64_t m_reserved;\n        gps_t* m__root;\n        gps_t* m__parent;\n\n    public:\n        uint64_t tow_count() const { return m_tow_count; }\n        bool alert() const { return m_alert; }\n        bool anti_spoof() const { return m_anti_spoof; }\n        uint64_t subframe_id() const { return m_subframe_id; }\n        uint64_t reserved() const { return m_reserved; }\n        gps_t* _root() const { return m__root; }\n        gps_t* _parent() const { return m__parent; }\n    };\n"
  },
  "system.ubloxd.generated.gps.tlm_t": {
    "id": "system.ubloxd.generated.gps.tlm_t",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.h",
    "relative_path": "system\\ubloxd\\generated\\gps.h",
    "depends_on": [],
    "start_line": 262,
    "end_line": 290,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class tlm_t : public kaitai::kstruct {\n\n    public:\n\n        tlm_t(kaitai::kstream* p__io, gps_t* p__parent = 0, gps_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~tlm_t();\n\n    private:\n        std::string m_preamble;\n        uint64_t m_tlm;\n        bool m_integrity_status;\n        bool m_reserved;\n        gps_t* m__root;\n        gps_t* m__parent;\n\n    public:\n        std::string preamble() const { return m_preamble; }\n        uint64_t tlm() const { return m_tlm; }\n        bool integrity_status() const { return m_integrity_status; }\n        bool reserved() const { return m_reserved; }\n        gps_t* _root() const { return m__root; }\n        gps_t* _parent() const { return m__parent; }\n    };\n"
  },
  "system.ubloxd.generated.gps.subframe_2_t": {
    "id": "system.ubloxd.generated.gps.subframe_2_t",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\gps.h",
    "relative_path": "system\\ubloxd\\generated\\gps.h",
    "depends_on": [],
    "start_line": 292,
    "end_line": 336,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class subframe_2_t : public kaitai::kstruct {\n\n    public:\n\n        subframe_2_t(kaitai::kstream* p__io, gps_t* p__parent = 0, gps_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~subframe_2_t();\n\n    private:\n        uint8_t m_iode;\n        int16_t m_c_rs;\n        int16_t m_delta_n;\n        int32_t m_m_0;\n        int16_t m_c_uc;\n        int32_t m_e;\n        int16_t m_c_us;\n        uint32_t m_sqrt_a;\n        uint16_t m_t_oe;\n        bool m_fit_interval_flag;\n        uint64_t m_aoda;\n        uint64_t m_reserved;\n        gps_t* m__root;\n        gps_t* m__parent;\n\n    public:\n        uint8_t iode() const { return m_iode; }\n        int16_t c_rs() const { return m_c_rs; }\n        int16_t delta_n() const { return m_delta_n; }\n        int32_t m_0() const { return m_m_0; }\n        int16_t c_uc() const { return m_c_uc; }\n        int32_t e() const { return m_e; }\n        int16_t c_us() const { return m_c_us; }\n        uint32_t sqrt_a() const { return m_sqrt_a; }\n        uint16_t t_oe() const { return m_t_oe; }\n        bool fit_interval_flag() const { return m_fit_interval_flag; }\n        uint64_t aoda() const { return m_aoda; }\n        uint64_t reserved() const { return m_reserved; }\n        gps_t* _root() const { return m__root; }\n        gps_t* _parent() const { return m__parent; }\n    };\n"
  },
  "system.ubloxd.generated.ubx.ubx_t._read": {
    "id": "system.ubloxd.generated.ubx.ubx_t._read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.cpp",
    "relative_path": "system\\ubloxd\\generated\\ubx.cpp",
    "depends_on": [],
    "start_line": 19,
    "end_line": 59,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void ubx_t::_read() {\n    m_magic = m__io->read_bytes(2);\n    if (!(magic() == std::string(\"\\xB5\\x62\", 2))) {\n        throw kaitai::validation_not_equal_error<std::string>(std::string(\"\\xB5\\x62\", 2), magic(), _io(), std::string(\"/seq/0\"));\n    }\n    m_msg_type = m__io->read_u2be();\n    m_length = m__io->read_u2le();\n    n_body = true;\n    switch (msg_type()) {\n    case 2569: {\n        n_body = false;\n        m_body = new mon_hw_t(m__io, this, m__root);\n        break;\n    }\n    case 533: {\n        n_body = false;\n        m_body = new rxm_rawx_t(m__io, this, m__root);\n        break;\n    }\n    case 531: {\n        n_body = false;\n        m_body = new rxm_sfrbx_t(m__io, this, m__root);\n        break;\n    }\n    case 309: {\n        n_body = false;\n        m_body = new nav_sat_t(m__io, this, m__root);\n        break;\n    }\n    case 2571: {\n        n_body = false;\n        m_body = new mon_hw2_t(m__io, this, m__root);\n        break;\n    }\n    case 263: {\n        n_body = false;\n        m_body = new nav_pvt_t(m__io, this, m__root);\n        break;\n    }\n    }\n}\n"
  },
  "system.ubloxd.generated.ubx.ubx_t._clean_up": {
    "id": "system.ubloxd.generated.ubx.ubx_t._clean_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.cpp",
    "relative_path": "system\\ubloxd\\generated\\ubx.cpp",
    "depends_on": [],
    "start_line": 65,
    "end_line": 73,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void ubx_t::_clean_up() {\n    if (!n_body) {\n        if (m_body) {\n            delete m_body; m_body = 0;\n        }\n    }\n    if (f_checksum) {\n    }\n}\n"
  },
  "system.ubloxd.generated.ubx.rxm_rawx_t._read": {
    "id": "system.ubloxd.generated.ubx.rxm_rawx_t._read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.cpp",
    "relative_path": "system\\ubloxd\\generated\\ubx.cpp",
    "depends_on": [],
    "start_line": 90,
    "end_line": 107,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void ubx_t::rxm_rawx_t::_read() {\n    m_rcv_tow = m__io->read_f8le();\n    m_week = m__io->read_u2le();\n    m_leap_s = m__io->read_s1();\n    m_num_meas = m__io->read_u1();\n    m_rec_stat = m__io->read_u1();\n    m_reserved1 = m__io->read_bytes(3);\n    m__raw_meas = new std::vector<std::string>();\n    m__io__raw_meas = new std::vector<kaitai::kstream*>();\n    m_meas = new std::vector<measurement_t*>();\n    const int l_meas = num_meas();\n    for (int i = 0; i < l_meas; i++) {\n        m__raw_meas->push_back(m__io->read_bytes(32));\n        kaitai::kstream* io__raw_meas = new kaitai::kstream(m__raw_meas->at(m__raw_meas->size() - 1));\n        m__io__raw_meas->push_back(io__raw_meas);\n        m_meas->push_back(new measurement_t(io__raw_meas, this, m__root));\n    }\n}\n"
  },
  "system.ubloxd.generated.ubx.rxm_rawx_t._clean_up": {
    "id": "system.ubloxd.generated.ubx.rxm_rawx_t._clean_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.cpp",
    "relative_path": "system\\ubloxd\\generated\\ubx.cpp",
    "depends_on": [],
    "start_line": 113,
    "end_line": 129,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void ubx_t::rxm_rawx_t::_clean_up() {\n    if (m__raw_meas) {\n        delete m__raw_meas; m__raw_meas = 0;\n    }\n    if (m__io__raw_meas) {\n        for (std::vector<kaitai::kstream*>::iterator it = m__io__raw_meas->begin(); it != m__io__raw_meas->end(); ++it) {\n            delete *it;\n        }\n        delete m__io__raw_meas; m__io__raw_meas = 0;\n    }\n    if (m_meas) {\n        for (std::vector<measurement_t*>::iterator it = m_meas->begin(); it != m_meas->end(); ++it) {\n            delete *it;\n        }\n        delete m_meas; m_meas = 0;\n    }\n}\n"
  },
  "system.ubloxd.generated.ubx.measurement_t._read": {
    "id": "system.ubloxd.generated.ubx.measurement_t._read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.cpp",
    "relative_path": "system\\ubloxd\\generated\\ubx.cpp",
    "depends_on": [],
    "start_line": 143,
    "end_line": 158,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void ubx_t::rxm_rawx_t::measurement_t::_read() {\n    m_pr_mes = m__io->read_f8le();\n    m_cp_mes = m__io->read_f8le();\n    m_do_mes = m__io->read_f4le();\n    m_gnss_id = static_cast<ubx_t::gnss_type_t>(m__io->read_u1());\n    m_sv_id = m__io->read_u1();\n    m_reserved2 = m__io->read_bytes(1);\n    m_freq_id = m__io->read_u1();\n    m_lock_time = m__io->read_u2le();\n    m_cno = m__io->read_u1();\n    m_pr_stdev = m__io->read_u1();\n    m_cp_stdev = m__io->read_u1();\n    m_do_stdev = m__io->read_u1();\n    m_trk_stat = m__io->read_u1();\n    m_reserved3 = m__io->read_bytes(1);\n}\n"
  },
  "system.ubloxd.generated.ubx.measurement_t._clean_up": {
    "id": "system.ubloxd.generated.ubx.measurement_t._clean_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.cpp",
    "relative_path": "system\\ubloxd\\generated\\ubx.cpp",
    "depends_on": [],
    "start_line": 164,
    "end_line": 165,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void ubx_t::rxm_rawx_t::measurement_t::_clean_up() {\n}\n"
  },
  "system.ubloxd.generated.ubx.rxm_sfrbx_t._read": {
    "id": "system.ubloxd.generated.ubx.rxm_sfrbx_t._read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.cpp",
    "relative_path": "system\\ubloxd\\generated\\ubx.cpp",
    "depends_on": [],
    "start_line": 180,
    "end_line": 194,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void ubx_t::rxm_sfrbx_t::_read() {\n    m_gnss_id = static_cast<ubx_t::gnss_type_t>(m__io->read_u1());\n    m_sv_id = m__io->read_u1();\n    m_reserved1 = m__io->read_bytes(1);\n    m_freq_id = m__io->read_u1();\n    m_num_words = m__io->read_u1();\n    m_reserved2 = m__io->read_bytes(1);\n    m_version = m__io->read_u1();\n    m_reserved3 = m__io->read_bytes(1);\n    m_body = new std::vector<uint32_t>();\n    const int l_body = num_words();\n    for (int i = 0; i < l_body; i++) {\n        m_body->push_back(m__io->read_u4le());\n    }\n}\n"
  },
  "system.ubloxd.generated.ubx.rxm_sfrbx_t._clean_up": {
    "id": "system.ubloxd.generated.ubx.rxm_sfrbx_t._clean_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.cpp",
    "relative_path": "system\\ubloxd\\generated\\ubx.cpp",
    "depends_on": [],
    "start_line": 200,
    "end_line": 204,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void ubx_t::rxm_sfrbx_t::_clean_up() {\n    if (m_body) {\n        delete m_body; m_body = 0;\n    }\n}\n"
  },
  "system.ubloxd.generated.ubx.nav_sat_t._read": {
    "id": "system.ubloxd.generated.ubx.nav_sat_t._read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.cpp",
    "relative_path": "system\\ubloxd\\generated\\ubx.cpp",
    "depends_on": [],
    "start_line": 221,
    "end_line": 236,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void ubx_t::nav_sat_t::_read() {\n    m_itow = m__io->read_u4le();\n    m_version = m__io->read_u1();\n    m_num_svs = m__io->read_u1();\n    m_reserved = m__io->read_bytes(2);\n    m__raw_svs = new std::vector<std::string>();\n    m__io__raw_svs = new std::vector<kaitai::kstream*>();\n    m_svs = new std::vector<nav_t*>();\n    const int l_svs = num_svs();\n    for (int i = 0; i < l_svs; i++) {\n        m__raw_svs->push_back(m__io->read_bytes(12));\n        kaitai::kstream* io__raw_svs = new kaitai::kstream(m__raw_svs->at(m__raw_svs->size() - 1));\n        m__io__raw_svs->push_back(io__raw_svs);\n        m_svs->push_back(new nav_t(io__raw_svs, this, m__root));\n    }\n}\n"
  },
  "system.ubloxd.generated.ubx.nav_sat_t._clean_up": {
    "id": "system.ubloxd.generated.ubx.nav_sat_t._clean_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.cpp",
    "relative_path": "system\\ubloxd\\generated\\ubx.cpp",
    "depends_on": [],
    "start_line": 242,
    "end_line": 258,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void ubx_t::nav_sat_t::_clean_up() {\n    if (m__raw_svs) {\n        delete m__raw_svs; m__raw_svs = 0;\n    }\n    if (m__io__raw_svs) {\n        for (std::vector<kaitai::kstream*>::iterator it = m__io__raw_svs->begin(); it != m__io__raw_svs->end(); ++it) {\n            delete *it;\n        }\n        delete m__io__raw_svs; m__io__raw_svs = 0;\n    }\n    if (m_svs) {\n        for (std::vector<nav_t*>::iterator it = m_svs->begin(); it != m_svs->end(); ++it) {\n            delete *it;\n        }\n        delete m_svs; m_svs = 0;\n    }\n}\n"
  },
  "system.ubloxd.generated.ubx.nav_t._read": {
    "id": "system.ubloxd.generated.ubx.nav_t._read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.cpp",
    "relative_path": "system\\ubloxd\\generated\\ubx.cpp",
    "depends_on": [],
    "start_line": 272,
    "end_line": 280,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void ubx_t::nav_sat_t::nav_t::_read() {\n    m_gnss_id = static_cast<ubx_t::gnss_type_t>(m__io->read_u1());\n    m_sv_id = m__io->read_u1();\n    m_cno = m__io->read_u1();\n    m_elev = m__io->read_s1();\n    m_azim = m__io->read_s2le();\n    m_pr_res = m__io->read_s2le();\n    m_flags = m__io->read_u4le();\n}\n"
  },
  "system.ubloxd.generated.ubx.nav_t._clean_up": {
    "id": "system.ubloxd.generated.ubx.nav_t._clean_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.cpp",
    "relative_path": "system\\ubloxd\\generated\\ubx.cpp",
    "depends_on": [],
    "start_line": 286,
    "end_line": 287,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void ubx_t::nav_sat_t::nav_t::_clean_up() {\n}\n"
  },
  "system.ubloxd.generated.ubx.nav_pvt_t._read": {
    "id": "system.ubloxd.generated.ubx.nav_pvt_t._read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.cpp",
    "relative_path": "system\\ubloxd\\generated\\ubx.cpp",
    "depends_on": [],
    "start_line": 301,
    "end_line": 335,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void ubx_t::nav_pvt_t::_read() {\n    m_i_tow = m__io->read_u4le();\n    m_year = m__io->read_u2le();\n    m_month = m__io->read_u1();\n    m_day = m__io->read_u1();\n    m_hour = m__io->read_u1();\n    m_min = m__io->read_u1();\n    m_sec = m__io->read_u1();\n    m_valid = m__io->read_u1();\n    m_t_acc = m__io->read_u4le();\n    m_nano = m__io->read_s4le();\n    m_fix_type = m__io->read_u1();\n    m_flags = m__io->read_u1();\n    m_flags2 = m__io->read_u1();\n    m_num_sv = m__io->read_u1();\n    m_lon = m__io->read_s4le();\n    m_lat = m__io->read_s4le();\n    m_height = m__io->read_s4le();\n    m_h_msl = m__io->read_s4le();\n    m_h_acc = m__io->read_u4le();\n    m_v_acc = m__io->read_u4le();\n    m_vel_n = m__io->read_s4le();\n    m_vel_e = m__io->read_s4le();\n    m_vel_d = m__io->read_s4le();\n    m_g_speed = m__io->read_s4le();\n    m_head_mot = m__io->read_s4le();\n    m_s_acc = m__io->read_s4le();\n    m_head_acc = m__io->read_u4le();\n    m_p_dop = m__io->read_u2le();\n    m_flags3 = m__io->read_u1();\n    m_reserved1 = m__io->read_bytes(5);\n    m_head_veh = m__io->read_s4le();\n    m_mag_dec = m__io->read_s2le();\n    m_mag_acc = m__io->read_u2le();\n}\n"
  },
  "system.ubloxd.generated.ubx.nav_pvt_t._clean_up": {
    "id": "system.ubloxd.generated.ubx.nav_pvt_t._clean_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.cpp",
    "relative_path": "system\\ubloxd\\generated\\ubx.cpp",
    "depends_on": [],
    "start_line": 341,
    "end_line": 342,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void ubx_t::nav_pvt_t::_clean_up() {\n}\n"
  },
  "system.ubloxd.generated.ubx.mon_hw2_t._read": {
    "id": "system.ubloxd.generated.ubx.mon_hw2_t._read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.cpp",
    "relative_path": "system\\ubloxd\\generated\\ubx.cpp",
    "depends_on": [],
    "start_line": 356,
    "end_line": 367,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void ubx_t::mon_hw2_t::_read() {\n    m_ofs_i = m__io->read_s1();\n    m_mag_i = m__io->read_u1();\n    m_ofs_q = m__io->read_s1();\n    m_mag_q = m__io->read_u1();\n    m_cfg_source = static_cast<ubx_t::mon_hw2_t::config_source_t>(m__io->read_u1());\n    m_reserved1 = m__io->read_bytes(3);\n    m_low_lev_cfg = m__io->read_u4le();\n    m_reserved2 = m__io->read_bytes(8);\n    m_post_status = m__io->read_u4le();\n    m_reserved3 = m__io->read_bytes(4);\n}\n"
  },
  "system.ubloxd.generated.ubx.mon_hw2_t._clean_up": {
    "id": "system.ubloxd.generated.ubx.mon_hw2_t._clean_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.cpp",
    "relative_path": "system\\ubloxd\\generated\\ubx.cpp",
    "depends_on": [],
    "start_line": 373,
    "end_line": 374,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void ubx_t::mon_hw2_t::_clean_up() {\n}\n"
  },
  "system.ubloxd.generated.ubx.mon_hw_t._read": {
    "id": "system.ubloxd.generated.ubx.mon_hw_t._read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.cpp",
    "relative_path": "system\\ubloxd\\generated\\ubx.cpp",
    "depends_on": [],
    "start_line": 388,
    "end_line": 406,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void ubx_t::mon_hw_t::_read() {\n    m_pin_sel = m__io->read_u4le();\n    m_pin_bank = m__io->read_u4le();\n    m_pin_dir = m__io->read_u4le();\n    m_pin_val = m__io->read_u4le();\n    m_noise_per_ms = m__io->read_u2le();\n    m_agc_cnt = m__io->read_u2le();\n    m_a_status = static_cast<ubx_t::mon_hw_t::antenna_status_t>(m__io->read_u1());\n    m_a_power = static_cast<ubx_t::mon_hw_t::antenna_power_t>(m__io->read_u1());\n    m_flags = m__io->read_u1();\n    m_reserved1 = m__io->read_bytes(1);\n    m_used_mask = m__io->read_u4le();\n    m_vp = m__io->read_bytes(17);\n    m_jam_ind = m__io->read_u1();\n    m_reserved2 = m__io->read_bytes(2);\n    m_pin_irq = m__io->read_u4le();\n    m_pull_h = m__io->read_u4le();\n    m_pull_l = m__io->read_u4le();\n}\n"
  },
  "system.ubloxd.generated.ubx.mon_hw_t._clean_up": {
    "id": "system.ubloxd.generated.ubx.mon_hw_t._clean_up",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.cpp",
    "relative_path": "system\\ubloxd\\generated\\ubx.cpp",
    "depends_on": [],
    "start_line": 412,
    "end_line": 413,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void ubx_t::mon_hw_t::_clean_up() {\n}\n"
  },
  "system.ubloxd.generated.ubx.ubx_t.checksum": {
    "id": "system.ubloxd.generated.ubx.ubx_t.checksum",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.cpp",
    "relative_path": "system\\ubloxd\\generated\\ubx.cpp",
    "depends_on": [],
    "start_line": 415,
    "end_line": 424,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "uint16_t ubx_t::checksum() {\n    if (f_checksum)\n        return m_checksum;\n    std::streampos _pos = m__io->pos();\n    m__io->seek((length() + 6));\n    m_checksum = m__io->read_u2le();\n    m__io->seek(_pos);\n    f_checksum = true;\n    return m_checksum;\n}\n"
  },
  "system.ubloxd.generated.ubx.ubx_t": {
    "id": "system.ubloxd.generated.ubx.ubx_t",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.h",
    "relative_path": "system\\ubloxd\\generated\\ubx.h",
    "depends_on": [],
    "start_line": 14,
    "end_line": 482,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ubx_t : public kaitai::kstruct {\n\npublic:\n    class rxm_rawx_t;\n    class rxm_sfrbx_t;\n    class nav_sat_t;\n    class nav_pvt_t;\n    class mon_hw2_t;\n    class mon_hw_t;\n\n    enum gnss_type_t {\n        GNSS_TYPE_GPS = 0,\n        GNSS_TYPE_SBAS = 1,\n        GNSS_TYPE_GALILEO = 2,\n        GNSS_TYPE_BEIDOU = 3,\n        GNSS_TYPE_IMES = 4,\n        GNSS_TYPE_QZSS = 5,\n        GNSS_TYPE_GLONASS = 6\n    };\n\n    ubx_t(kaitai::kstream* p__io, kaitai::kstruct* p__parent = 0, ubx_t* p__root = 0);\n\nprivate:\n    void _read();\n    void _clean_up();\n\npublic:\n    ~ubx_t();\n\n    class rxm_rawx_t : public kaitai::kstruct {\n\n    public:\n        class measurement_t;\n\n        rxm_rawx_t(kaitai::kstream* p__io, ubx_t* p__parent = 0, ubx_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~rxm_rawx_t();\n\n        class measurement_t : public kaitai::kstruct {\n\n        public:\n\n            measurement_t(kaitai::kstream* p__io, ubx_t::rxm_rawx_t* p__parent = 0, ubx_t* p__root = 0);\n\n        private:\n            void _read();\n            void _clean_up();\n\n        public:\n            ~measurement_t();\n\n        private:\n            double m_pr_mes;\n            double m_cp_mes;\n            float m_do_mes;\n            gnss_type_t m_gnss_id;\n            uint8_t m_sv_id;\n            std::string m_reserved2;\n            uint8_t m_freq_id;\n            uint16_t m_lock_time;\n            uint8_t m_cno;\n            uint8_t m_pr_stdev;\n            uint8_t m_cp_stdev;\n            uint8_t m_do_stdev;\n            uint8_t m_trk_stat;\n            std::string m_reserved3;\n            ubx_t* m__root;\n            ubx_t::rxm_rawx_t* m__parent;\n\n        public:\n            double pr_mes() const { return m_pr_mes; }\n            double cp_mes() const { return m_cp_mes; }\n            float do_mes() const { return m_do_mes; }\n            gnss_type_t gnss_id() const { return m_gnss_id; }\n            uint8_t sv_id() const { return m_sv_id; }\n            std::string reserved2() const { return m_reserved2; }\n            uint8_t freq_id() const { return m_freq_id; }\n            uint16_t lock_time() const { return m_lock_time; }\n            uint8_t cno() const { return m_cno; }\n            uint8_t pr_stdev() const { return m_pr_stdev; }\n            uint8_t cp_stdev() const { return m_cp_stdev; }\n            uint8_t do_stdev() const { return m_do_stdev; }\n            uint8_t trk_stat() const { return m_trk_stat; }\n            std::string reserved3() const { return m_reserved3; }\n            ubx_t* _root() const { return m__root; }\n            ubx_t::rxm_rawx_t* _parent() const { return m__parent; }\n        };\n\n    private:\n        double m_rcv_tow;\n        uint16_t m_week;\n        int8_t m_leap_s;\n        uint8_t m_num_meas;\n        uint8_t m_rec_stat;\n        std::string m_reserved1;\n        std::vector<measurement_t*>* m_meas;\n        ubx_t* m__root;\n        ubx_t* m__parent;\n        std::vector<std::string>* m__raw_meas;\n        std::vector<kaitai::kstream*>* m__io__raw_meas;\n\n    public:\n        double rcv_tow() const { return m_rcv_tow; }\n        uint16_t week() const { return m_week; }\n        int8_t leap_s() const { return m_leap_s; }\n        uint8_t num_meas() const { return m_num_meas; }\n        uint8_t rec_stat() const { return m_rec_stat; }\n        std::string reserved1() const { return m_reserved1; }\n        std::vector<measurement_t*>* meas() const { return m_meas; }\n        ubx_t* _root() const { return m__root; }\n        ubx_t* _parent() const { return m__parent; }\n        std::vector<std::string>* _raw_meas() const { return m__raw_meas; }\n        std::vector<kaitai::kstream*>* _io__raw_meas() const { return m__io__raw_meas; }\n    };\n\n    class rxm_sfrbx_t : public kaitai::kstruct {\n\n    public:\n\n        rxm_sfrbx_t(kaitai::kstream* p__io, ubx_t* p__parent = 0, ubx_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~rxm_sfrbx_t();\n\n    private:\n        gnss_type_t m_gnss_id;\n        uint8_t m_sv_id;\n        std::string m_reserved1;\n        uint8_t m_freq_id;\n        uint8_t m_num_words;\n        std::string m_reserved2;\n        uint8_t m_version;\n        std::string m_reserved3;\n        std::vector<uint32_t>* m_body;\n        ubx_t* m__root;\n        ubx_t* m__parent;\n\n    public:\n        gnss_type_t gnss_id() const { return m_gnss_id; }\n        uint8_t sv_id() const { return m_sv_id; }\n        std::string reserved1() const { return m_reserved1; }\n        uint8_t freq_id() const { return m_freq_id; }\n        uint8_t num_words() const { return m_num_words; }\n        std::string reserved2() const { return m_reserved2; }\n        uint8_t version() const { return m_version; }\n        std::string reserved3() const { return m_reserved3; }\n        std::vector<uint32_t>* body() const { return m_body; }\n        ubx_t* _root() const { return m__root; }\n        ubx_t* _parent() const { return m__parent; }\n    };\n\n    class nav_sat_t : public kaitai::kstruct {\n\n    public:\n        class nav_t;\n\n        nav_sat_t(kaitai::kstream* p__io, ubx_t* p__parent = 0, ubx_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~nav_sat_t();\n\n        class nav_t : public kaitai::kstruct {\n\n        public:\n\n            nav_t(kaitai::kstream* p__io, ubx_t::nav_sat_t* p__parent = 0, ubx_t* p__root = 0);\n\n        private:\n            void _read();\n            void _clean_up();\n\n        public:\n            ~nav_t();\n\n        private:\n            gnss_type_t m_gnss_id;\n            uint8_t m_sv_id;\n            uint8_t m_cno;\n            int8_t m_elev;\n            int16_t m_azim;\n            int16_t m_pr_res;\n            uint32_t m_flags;\n            ubx_t* m__root;\n            ubx_t::nav_sat_t* m__parent;\n\n        public:\n            gnss_type_t gnss_id() const { return m_gnss_id; }\n            uint8_t sv_id() const { return m_sv_id; }\n            uint8_t cno() const { return m_cno; }\n            int8_t elev() const { return m_elev; }\n            int16_t azim() const { return m_azim; }\n            int16_t pr_res() const { return m_pr_res; }\n            uint32_t flags() const { return m_flags; }\n            ubx_t* _root() const { return m__root; }\n            ubx_t::nav_sat_t* _parent() const { return m__parent; }\n        };\n\n    private:\n        uint32_t m_itow;\n        uint8_t m_version;\n        uint8_t m_num_svs;\n        std::string m_reserved;\n        std::vector<nav_t*>* m_svs;\n        ubx_t* m__root;\n        ubx_t* m__parent;\n        std::vector<std::string>* m__raw_svs;\n        std::vector<kaitai::kstream*>* m__io__raw_svs;\n\n    public:\n        uint32_t itow() const { return m_itow; }\n        uint8_t version() const { return m_version; }\n        uint8_t num_svs() const { return m_num_svs; }\n        std::string reserved() const { return m_reserved; }\n        std::vector<nav_t*>* svs() const { return m_svs; }\n        ubx_t* _root() const { return m__root; }\n        ubx_t* _parent() const { return m__parent; }\n        std::vector<std::string>* _raw_svs() const { return m__raw_svs; }\n        std::vector<kaitai::kstream*>* _io__raw_svs() const { return m__io__raw_svs; }\n    };\n\n    class nav_pvt_t : public kaitai::kstruct {\n\n    public:\n\n        nav_pvt_t(kaitai::kstream* p__io, ubx_t* p__parent = 0, ubx_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~nav_pvt_t();\n\n    private:\n        uint32_t m_i_tow;\n        uint16_t m_year;\n        uint8_t m_month;\n        uint8_t m_day;\n        uint8_t m_hour;\n        uint8_t m_min;\n        uint8_t m_sec;\n        uint8_t m_valid;\n        uint32_t m_t_acc;\n        int32_t m_nano;\n        uint8_t m_fix_type;\n        uint8_t m_flags;\n        uint8_t m_flags2;\n        uint8_t m_num_sv;\n        int32_t m_lon;\n        int32_t m_lat;\n        int32_t m_height;\n        int32_t m_h_msl;\n        uint32_t m_h_acc;\n        uint32_t m_v_acc;\n        int32_t m_vel_n;\n        int32_t m_vel_e;\n        int32_t m_vel_d;\n        int32_t m_g_speed;\n        int32_t m_head_mot;\n        int32_t m_s_acc;\n        uint32_t m_head_acc;\n        uint16_t m_p_dop;\n        uint8_t m_flags3;\n        std::string m_reserved1;\n        int32_t m_head_veh;\n        int16_t m_mag_dec;\n        uint16_t m_mag_acc;\n        ubx_t* m__root;\n        ubx_t* m__parent;\n\n    public:\n        uint32_t i_tow() const { return m_i_tow; }\n        uint16_t year() const { return m_year; }\n        uint8_t month() const { return m_month; }\n        uint8_t day() const { return m_day; }\n        uint8_t hour() const { return m_hour; }\n        uint8_t min() const { return m_min; }\n        uint8_t sec() const { return m_sec; }\n        uint8_t valid() const { return m_valid; }\n        uint32_t t_acc() const { return m_t_acc; }\n        int32_t nano() const { return m_nano; }\n        uint8_t fix_type() const { return m_fix_type; }\n        uint8_t flags() const { return m_flags; }\n        uint8_t flags2() const { return m_flags2; }\n        uint8_t num_sv() const { return m_num_sv; }\n        int32_t lon() const { return m_lon; }\n        int32_t lat() const { return m_lat; }\n        int32_t height() const { return m_height; }\n        int32_t h_msl() const { return m_h_msl; }\n        uint32_t h_acc() const { return m_h_acc; }\n        uint32_t v_acc() const { return m_v_acc; }\n        int32_t vel_n() const { return m_vel_n; }\n        int32_t vel_e() const { return m_vel_e; }\n        int32_t vel_d() const { return m_vel_d; }\n        int32_t g_speed() const { return m_g_speed; }\n        int32_t head_mot() const { return m_head_mot; }\n        int32_t s_acc() const { return m_s_acc; }\n        uint32_t head_acc() const { return m_head_acc; }\n        uint16_t p_dop() const { return m_p_dop; }\n        uint8_t flags3() const { return m_flags3; }\n        std::string reserved1() const { return m_reserved1; }\n        int32_t head_veh() const { return m_head_veh; }\n        int16_t mag_dec() const { return m_mag_dec; }\n        uint16_t mag_acc() const { return m_mag_acc; }\n        ubx_t* _root() const { return m__root; }\n        ubx_t* _parent() const { return m__parent; }\n    };\n\n    class mon_hw2_t : public kaitai::kstruct {\n\n    public:\n\n        enum config_source_t {\n            CONFIG_SOURCE_FLASH = 102,\n            CONFIG_SOURCE_OTP = 111,\n            CONFIG_SOURCE_CONFIG_PINS = 112,\n            CONFIG_SOURCE_ROM = 113\n        };\n\n        mon_hw2_t(kaitai::kstream* p__io, ubx_t* p__parent = 0, ubx_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~mon_hw2_t();\n\n    private:\n        int8_t m_ofs_i;\n        uint8_t m_mag_i;\n        int8_t m_ofs_q;\n        uint8_t m_mag_q;\n        config_source_t m_cfg_source;\n        std::string m_reserved1;\n        uint32_t m_low_lev_cfg;\n        std::string m_reserved2;\n        uint32_t m_post_status;\n        std::string m_reserved3;\n        ubx_t* m__root;\n        ubx_t* m__parent;\n\n    public:\n        int8_t ofs_i() const { return m_ofs_i; }\n        uint8_t mag_i() const { return m_mag_i; }\n        int8_t ofs_q() const { return m_ofs_q; }\n        uint8_t mag_q() const { return m_mag_q; }\n        config_source_t cfg_source() const { return m_cfg_source; }\n        std::string reserved1() const { return m_reserved1; }\n        uint32_t low_lev_cfg() const { return m_low_lev_cfg; }\n        std::string reserved2() const { return m_reserved2; }\n        uint32_t post_status() const { return m_post_status; }\n        std::string reserved3() const { return m_reserved3; }\n        ubx_t* _root() const { return m__root; }\n        ubx_t* _parent() const { return m__parent; }\n    };\n\n    class mon_hw_t : public kaitai::kstruct {\n\n    public:\n\n        enum antenna_status_t {\n            ANTENNA_STATUS_INIT = 0,\n            ANTENNA_STATUS_DONTKNOW = 1,\n            ANTENNA_STATUS_OK = 2,\n            ANTENNA_STATUS_SHORT = 3,\n            ANTENNA_STATUS_OPEN = 4\n        };\n\n        enum antenna_power_t {\n            ANTENNA_POWER_FALSE = 0,\n            ANTENNA_POWER_TRUE = 1,\n            ANTENNA_POWER_DONTKNOW = 2\n        };\n\n        mon_hw_t(kaitai::kstream* p__io, ubx_t* p__parent = 0, ubx_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~mon_hw_t();\n\n    private:\n        uint32_t m_pin_sel;\n        uint32_t m_pin_bank;\n        uint32_t m_pin_dir;\n        uint32_t m_pin_val;\n        uint16_t m_noise_per_ms;\n        uint16_t m_agc_cnt;\n        antenna_status_t m_a_status;\n        antenna_power_t m_a_power;\n        uint8_t m_flags;\n        std::string m_reserved1;\n        uint32_t m_used_mask;\n        std::string m_vp;\n        uint8_t m_jam_ind;\n        std::string m_reserved2;\n        uint32_t m_pin_irq;\n        uint32_t m_pull_h;\n        uint32_t m_pull_l;\n        ubx_t* m__root;\n        ubx_t* m__parent;\n\n    public:\n        uint32_t pin_sel() const { return m_pin_sel; }\n        uint32_t pin_bank() const { return m_pin_bank; }\n        uint32_t pin_dir() const { return m_pin_dir; }\n        uint32_t pin_val() const { return m_pin_val; }\n        uint16_t noise_per_ms() const { return m_noise_per_ms; }\n        uint16_t agc_cnt() const { return m_agc_cnt; }\n        antenna_status_t a_status() const { return m_a_status; }\n        antenna_power_t a_power() const { return m_a_power; }\n        uint8_t flags() const { return m_flags; }\n        std::string reserved1() const { return m_reserved1; }\n        uint32_t used_mask() const { return m_used_mask; }\n        std::string vp() const { return m_vp; }\n        uint8_t jam_ind() const { return m_jam_ind; }\n        std::string reserved2() const { return m_reserved2; }\n        uint32_t pin_irq() const { return m_pin_irq; }\n        uint32_t pull_h() const { return m_pull_h; }\n        uint32_t pull_l() const { return m_pull_l; }\n        ubx_t* _root() const { return m__root; }\n        ubx_t* _parent() const { return m__parent; }\n    };\n\nprivate:\n    bool f_checksum;\n    uint16_t m_checksum;\n\npublic:\n    uint16_t checksum();\n\nprivate:\n    std::string m_magic;\n    uint16_t m_msg_type;\n    uint16_t m_length;\n    kaitai::kstruct* m_body;\n    bool n_body;\n\npublic:\n    bool _is_null_body() { body(); return n_body; };\n\nprivate:\n    ubx_t* m__root;\n    kaitai::kstruct* m__parent;\n\npublic:\n    std::string magic() const { return m_magic; }\n    uint16_t msg_type() const { return m_msg_type; }\n    uint16_t length() const { return m_length; }\n    kaitai::kstruct* body() const { return m_body; }\n    ubx_t* _root() const { return m__root; }\n    kaitai::kstruct* _parent() const { return m__parent; }\n};\n"
  },
  "system.ubloxd.generated.ubx.rxm_rawx_t": {
    "id": "system.ubloxd.generated.ubx.rxm_rawx_t",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.h",
    "relative_path": "system\\ubloxd\\generated\\ubx.h",
    "depends_on": [],
    "start_line": 43,
    "end_line": 132,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class rxm_rawx_t : public kaitai::kstruct {\n\n    public:\n        class measurement_t;\n\n        rxm_rawx_t(kaitai::kstream* p__io, ubx_t* p__parent = 0, ubx_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~rxm_rawx_t();\n\n        class measurement_t : public kaitai::kstruct {\n\n        public:\n\n            measurement_t(kaitai::kstream* p__io, ubx_t::rxm_rawx_t* p__parent = 0, ubx_t* p__root = 0);\n\n        private:\n            void _read();\n            void _clean_up();\n\n        public:\n            ~measurement_t();\n\n        private:\n            double m_pr_mes;\n            double m_cp_mes;\n            float m_do_mes;\n            gnss_type_t m_gnss_id;\n            uint8_t m_sv_id;\n            std::string m_reserved2;\n            uint8_t m_freq_id;\n            uint16_t m_lock_time;\n            uint8_t m_cno;\n            uint8_t m_pr_stdev;\n            uint8_t m_cp_stdev;\n            uint8_t m_do_stdev;\n            uint8_t m_trk_stat;\n            std::string m_reserved3;\n            ubx_t* m__root;\n            ubx_t::rxm_rawx_t* m__parent;\n\n        public:\n            double pr_mes() const { return m_pr_mes; }\n            double cp_mes() const { return m_cp_mes; }\n            float do_mes() const { return m_do_mes; }\n            gnss_type_t gnss_id() const { return m_gnss_id; }\n            uint8_t sv_id() const { return m_sv_id; }\n            std::string reserved2() const { return m_reserved2; }\n            uint8_t freq_id() const { return m_freq_id; }\n            uint16_t lock_time() const { return m_lock_time; }\n            uint8_t cno() const { return m_cno; }\n            uint8_t pr_stdev() const { return m_pr_stdev; }\n            uint8_t cp_stdev() const { return m_cp_stdev; }\n            uint8_t do_stdev() const { return m_do_stdev; }\n            uint8_t trk_stat() const { return m_trk_stat; }\n            std::string reserved3() const { return m_reserved3; }\n            ubx_t* _root() const { return m__root; }\n            ubx_t::rxm_rawx_t* _parent() const { return m__parent; }\n        };\n\n    private:\n        double m_rcv_tow;\n        uint16_t m_week;\n        int8_t m_leap_s;\n        uint8_t m_num_meas;\n        uint8_t m_rec_stat;\n        std::string m_reserved1;\n        std::vector<measurement_t*>* m_meas;\n        ubx_t* m__root;\n        ubx_t* m__parent;\n        std::vector<std::string>* m__raw_meas;\n        std::vector<kaitai::kstream*>* m__io__raw_meas;\n\n    public:\n        double rcv_tow() const { return m_rcv_tow; }\n        uint16_t week() const { return m_week; }\n        int8_t leap_s() const { return m_leap_s; }\n        uint8_t num_meas() const { return m_num_meas; }\n        uint8_t rec_stat() const { return m_rec_stat; }\n        std::string reserved1() const { return m_reserved1; }\n        std::vector<measurement_t*>* meas() const { return m_meas; }\n        ubx_t* _root() const { return m__root; }\n        ubx_t* _parent() const { return m__parent; }\n        std::vector<std::string>* _raw_meas() const { return m__raw_meas; }\n        std::vector<kaitai::kstream*>* _io__raw_meas() const { return m__io__raw_meas; }\n    };\n"
  },
  "system.ubloxd.generated.ubx.measurement_t": {
    "id": "system.ubloxd.generated.ubx.measurement_t",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.h",
    "relative_path": "system\\ubloxd\\generated\\ubx.h",
    "depends_on": [],
    "start_line": 57,
    "end_line": 105,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        class measurement_t : public kaitai::kstruct {\n\n        public:\n\n            measurement_t(kaitai::kstream* p__io, ubx_t::rxm_rawx_t* p__parent = 0, ubx_t* p__root = 0);\n\n        private:\n            void _read();\n            void _clean_up();\n\n        public:\n            ~measurement_t();\n\n        private:\n            double m_pr_mes;\n            double m_cp_mes;\n            float m_do_mes;\n            gnss_type_t m_gnss_id;\n            uint8_t m_sv_id;\n            std::string m_reserved2;\n            uint8_t m_freq_id;\n            uint16_t m_lock_time;\n            uint8_t m_cno;\n            uint8_t m_pr_stdev;\n            uint8_t m_cp_stdev;\n            uint8_t m_do_stdev;\n            uint8_t m_trk_stat;\n            std::string m_reserved3;\n            ubx_t* m__root;\n            ubx_t::rxm_rawx_t* m__parent;\n\n        public:\n            double pr_mes() const { return m_pr_mes; }\n            double cp_mes() const { return m_cp_mes; }\n            float do_mes() const { return m_do_mes; }\n            gnss_type_t gnss_id() const { return m_gnss_id; }\n            uint8_t sv_id() const { return m_sv_id; }\n            std::string reserved2() const { return m_reserved2; }\n            uint8_t freq_id() const { return m_freq_id; }\n            uint16_t lock_time() const { return m_lock_time; }\n            uint8_t cno() const { return m_cno; }\n            uint8_t pr_stdev() const { return m_pr_stdev; }\n            uint8_t cp_stdev() const { return m_cp_stdev; }\n            uint8_t do_stdev() const { return m_do_stdev; }\n            uint8_t trk_stat() const { return m_trk_stat; }\n            std::string reserved3() const { return m_reserved3; }\n            ubx_t* _root() const { return m__root; }\n            ubx_t::rxm_rawx_t* _parent() const { return m__parent; }\n        };\n"
  },
  "system.ubloxd.generated.ubx.rxm_sfrbx_t": {
    "id": "system.ubloxd.generated.ubx.rxm_sfrbx_t",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.h",
    "relative_path": "system\\ubloxd\\generated\\ubx.h",
    "depends_on": [],
    "start_line": 134,
    "end_line": 172,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class rxm_sfrbx_t : public kaitai::kstruct {\n\n    public:\n\n        rxm_sfrbx_t(kaitai::kstream* p__io, ubx_t* p__parent = 0, ubx_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~rxm_sfrbx_t();\n\n    private:\n        gnss_type_t m_gnss_id;\n        uint8_t m_sv_id;\n        std::string m_reserved1;\n        uint8_t m_freq_id;\n        uint8_t m_num_words;\n        std::string m_reserved2;\n        uint8_t m_version;\n        std::string m_reserved3;\n        std::vector<uint32_t>* m_body;\n        ubx_t* m__root;\n        ubx_t* m__parent;\n\n    public:\n        gnss_type_t gnss_id() const { return m_gnss_id; }\n        uint8_t sv_id() const { return m_sv_id; }\n        std::string reserved1() const { return m_reserved1; }\n        uint8_t freq_id() const { return m_freq_id; }\n        uint8_t num_words() const { return m_num_words; }\n        std::string reserved2() const { return m_reserved2; }\n        uint8_t version() const { return m_version; }\n        std::string reserved3() const { return m_reserved3; }\n        std::vector<uint32_t>* body() const { return m_body; }\n        ubx_t* _root() const { return m__root; }\n        ubx_t* _parent() const { return m__parent; }\n    };\n"
  },
  "system.ubloxd.generated.ubx.nav_sat_t": {
    "id": "system.ubloxd.generated.ubx.nav_sat_t",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.h",
    "relative_path": "system\\ubloxd\\generated\\ubx.h",
    "depends_on": [],
    "start_line": 174,
    "end_line": 245,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class nav_sat_t : public kaitai::kstruct {\n\n    public:\n        class nav_t;\n\n        nav_sat_t(kaitai::kstream* p__io, ubx_t* p__parent = 0, ubx_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~nav_sat_t();\n\n        class nav_t : public kaitai::kstruct {\n\n        public:\n\n            nav_t(kaitai::kstream* p__io, ubx_t::nav_sat_t* p__parent = 0, ubx_t* p__root = 0);\n\n        private:\n            void _read();\n            void _clean_up();\n\n        public:\n            ~nav_t();\n\n        private:\n            gnss_type_t m_gnss_id;\n            uint8_t m_sv_id;\n            uint8_t m_cno;\n            int8_t m_elev;\n            int16_t m_azim;\n            int16_t m_pr_res;\n            uint32_t m_flags;\n            ubx_t* m__root;\n            ubx_t::nav_sat_t* m__parent;\n\n        public:\n            gnss_type_t gnss_id() const { return m_gnss_id; }\n            uint8_t sv_id() const { return m_sv_id; }\n            uint8_t cno() const { return m_cno; }\n            int8_t elev() const { return m_elev; }\n            int16_t azim() const { return m_azim; }\n            int16_t pr_res() const { return m_pr_res; }\n            uint32_t flags() const { return m_flags; }\n            ubx_t* _root() const { return m__root; }\n            ubx_t::nav_sat_t* _parent() const { return m__parent; }\n        };\n\n    private:\n        uint32_t m_itow;\n        uint8_t m_version;\n        uint8_t m_num_svs;\n        std::string m_reserved;\n        std::vector<nav_t*>* m_svs;\n        ubx_t* m__root;\n        ubx_t* m__parent;\n        std::vector<std::string>* m__raw_svs;\n        std::vector<kaitai::kstream*>* m__io__raw_svs;\n\n    public:\n        uint32_t itow() const { return m_itow; }\n        uint8_t version() const { return m_version; }\n        uint8_t num_svs() const { return m_num_svs; }\n        std::string reserved() const { return m_reserved; }\n        std::vector<nav_t*>* svs() const { return m_svs; }\n        ubx_t* _root() const { return m__root; }\n        ubx_t* _parent() const { return m__parent; }\n        std::vector<std::string>* _raw_svs() const { return m__raw_svs; }\n        std::vector<kaitai::kstream*>* _io__raw_svs() const { return m__io__raw_svs; }\n    };\n"
  },
  "system.ubloxd.generated.ubx.nav_t": {
    "id": "system.ubloxd.generated.ubx.nav_t",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.h",
    "relative_path": "system\\ubloxd\\generated\\ubx.h",
    "depends_on": [],
    "start_line": 188,
    "end_line": 222,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        class nav_t : public kaitai::kstruct {\n\n        public:\n\n            nav_t(kaitai::kstream* p__io, ubx_t::nav_sat_t* p__parent = 0, ubx_t* p__root = 0);\n\n        private:\n            void _read();\n            void _clean_up();\n\n        public:\n            ~nav_t();\n\n        private:\n            gnss_type_t m_gnss_id;\n            uint8_t m_sv_id;\n            uint8_t m_cno;\n            int8_t m_elev;\n            int16_t m_azim;\n            int16_t m_pr_res;\n            uint32_t m_flags;\n            ubx_t* m__root;\n            ubx_t::nav_sat_t* m__parent;\n\n        public:\n            gnss_type_t gnss_id() const { return m_gnss_id; }\n            uint8_t sv_id() const { return m_sv_id; }\n            uint8_t cno() const { return m_cno; }\n            int8_t elev() const { return m_elev; }\n            int16_t azim() const { return m_azim; }\n            int16_t pr_res() const { return m_pr_res; }\n            uint32_t flags() const { return m_flags; }\n            ubx_t* _root() const { return m__root; }\n            ubx_t::nav_sat_t* _parent() const { return m__parent; }\n        };\n"
  },
  "system.ubloxd.generated.ubx.nav_pvt_t": {
    "id": "system.ubloxd.generated.ubx.nav_pvt_t",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.h",
    "relative_path": "system\\ubloxd\\generated\\ubx.h",
    "depends_on": [],
    "start_line": 247,
    "end_line": 333,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class nav_pvt_t : public kaitai::kstruct {\n\n    public:\n\n        nav_pvt_t(kaitai::kstream* p__io, ubx_t* p__parent = 0, ubx_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~nav_pvt_t();\n\n    private:\n        uint32_t m_i_tow;\n        uint16_t m_year;\n        uint8_t m_month;\n        uint8_t m_day;\n        uint8_t m_hour;\n        uint8_t m_min;\n        uint8_t m_sec;\n        uint8_t m_valid;\n        uint32_t m_t_acc;\n        int32_t m_nano;\n        uint8_t m_fix_type;\n        uint8_t m_flags;\n        uint8_t m_flags2;\n        uint8_t m_num_sv;\n        int32_t m_lon;\n        int32_t m_lat;\n        int32_t m_height;\n        int32_t m_h_msl;\n        uint32_t m_h_acc;\n        uint32_t m_v_acc;\n        int32_t m_vel_n;\n        int32_t m_vel_e;\n        int32_t m_vel_d;\n        int32_t m_g_speed;\n        int32_t m_head_mot;\n        int32_t m_s_acc;\n        uint32_t m_head_acc;\n        uint16_t m_p_dop;\n        uint8_t m_flags3;\n        std::string m_reserved1;\n        int32_t m_head_veh;\n        int16_t m_mag_dec;\n        uint16_t m_mag_acc;\n        ubx_t* m__root;\n        ubx_t* m__parent;\n\n    public:\n        uint32_t i_tow() const { return m_i_tow; }\n        uint16_t year() const { return m_year; }\n        uint8_t month() const { return m_month; }\n        uint8_t day() const { return m_day; }\n        uint8_t hour() const { return m_hour; }\n        uint8_t min() const { return m_min; }\n        uint8_t sec() const { return m_sec; }\n        uint8_t valid() const { return m_valid; }\n        uint32_t t_acc() const { return m_t_acc; }\n        int32_t nano() const { return m_nano; }\n        uint8_t fix_type() const { return m_fix_type; }\n        uint8_t flags() const { return m_flags; }\n        uint8_t flags2() const { return m_flags2; }\n        uint8_t num_sv() const { return m_num_sv; }\n        int32_t lon() const { return m_lon; }\n        int32_t lat() const { return m_lat; }\n        int32_t height() const { return m_height; }\n        int32_t h_msl() const { return m_h_msl; }\n        uint32_t h_acc() const { return m_h_acc; }\n        uint32_t v_acc() const { return m_v_acc; }\n        int32_t vel_n() const { return m_vel_n; }\n        int32_t vel_e() const { return m_vel_e; }\n        int32_t vel_d() const { return m_vel_d; }\n        int32_t g_speed() const { return m_g_speed; }\n        int32_t head_mot() const { return m_head_mot; }\n        int32_t s_acc() const { return m_s_acc; }\n        uint32_t head_acc() const { return m_head_acc; }\n        uint16_t p_dop() const { return m_p_dop; }\n        uint8_t flags3() const { return m_flags3; }\n        std::string reserved1() const { return m_reserved1; }\n        int32_t head_veh() const { return m_head_veh; }\n        int16_t mag_dec() const { return m_mag_dec; }\n        uint16_t mag_acc() const { return m_mag_acc; }\n        ubx_t* _root() const { return m__root; }\n        ubx_t* _parent() const { return m__parent; }\n    };\n"
  },
  "system.ubloxd.generated.ubx.mon_hw2_t": {
    "id": "system.ubloxd.generated.ubx.mon_hw2_t",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.h",
    "relative_path": "system\\ubloxd\\generated\\ubx.h",
    "depends_on": [],
    "start_line": 335,
    "end_line": 382,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class mon_hw2_t : public kaitai::kstruct {\n\n    public:\n\n        enum config_source_t {\n            CONFIG_SOURCE_FLASH = 102,\n            CONFIG_SOURCE_OTP = 111,\n            CONFIG_SOURCE_CONFIG_PINS = 112,\n            CONFIG_SOURCE_ROM = 113\n        };\n\n        mon_hw2_t(kaitai::kstream* p__io, ubx_t* p__parent = 0, ubx_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~mon_hw2_t();\n\n    private:\n        int8_t m_ofs_i;\n        uint8_t m_mag_i;\n        int8_t m_ofs_q;\n        uint8_t m_mag_q;\n        config_source_t m_cfg_source;\n        std::string m_reserved1;\n        uint32_t m_low_lev_cfg;\n        std::string m_reserved2;\n        uint32_t m_post_status;\n        std::string m_reserved3;\n        ubx_t* m__root;\n        ubx_t* m__parent;\n\n    public:\n        int8_t ofs_i() const { return m_ofs_i; }\n        uint8_t mag_i() const { return m_mag_i; }\n        int8_t ofs_q() const { return m_ofs_q; }\n        uint8_t mag_q() const { return m_mag_q; }\n        config_source_t cfg_source() const { return m_cfg_source; }\n        std::string reserved1() const { return m_reserved1; }\n        uint32_t low_lev_cfg() const { return m_low_lev_cfg; }\n        std::string reserved2() const { return m_reserved2; }\n        uint32_t post_status() const { return m_post_status; }\n        std::string reserved3() const { return m_reserved3; }\n        ubx_t* _root() const { return m__root; }\n        ubx_t* _parent() const { return m__parent; }\n    };\n"
  },
  "system.ubloxd.generated.ubx.mon_hw_t": {
    "id": "system.ubloxd.generated.ubx.mon_hw_t",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\generated\\ubx.h",
    "relative_path": "system\\ubloxd\\generated\\ubx.h",
    "depends_on": [],
    "start_line": 384,
    "end_line": 452,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class mon_hw_t : public kaitai::kstruct {\n\n    public:\n\n        enum antenna_status_t {\n            ANTENNA_STATUS_INIT = 0,\n            ANTENNA_STATUS_DONTKNOW = 1,\n            ANTENNA_STATUS_OK = 2,\n            ANTENNA_STATUS_SHORT = 3,\n            ANTENNA_STATUS_OPEN = 4\n        };\n\n        enum antenna_power_t {\n            ANTENNA_POWER_FALSE = 0,\n            ANTENNA_POWER_TRUE = 1,\n            ANTENNA_POWER_DONTKNOW = 2\n        };\n\n        mon_hw_t(kaitai::kstream* p__io, ubx_t* p__parent = 0, ubx_t* p__root = 0);\n\n    private:\n        void _read();\n        void _clean_up();\n\n    public:\n        ~mon_hw_t();\n\n    private:\n        uint32_t m_pin_sel;\n        uint32_t m_pin_bank;\n        uint32_t m_pin_dir;\n        uint32_t m_pin_val;\n        uint16_t m_noise_per_ms;\n        uint16_t m_agc_cnt;\n        antenna_status_t m_a_status;\n        antenna_power_t m_a_power;\n        uint8_t m_flags;\n        std::string m_reserved1;\n        uint32_t m_used_mask;\n        std::string m_vp;\n        uint8_t m_jam_ind;\n        std::string m_reserved2;\n        uint32_t m_pin_irq;\n        uint32_t m_pull_h;\n        uint32_t m_pull_l;\n        ubx_t* m__root;\n        ubx_t* m__parent;\n\n    public:\n        uint32_t pin_sel() const { return m_pin_sel; }\n        uint32_t pin_bank() const { return m_pin_bank; }\n        uint32_t pin_dir() const { return m_pin_dir; }\n        uint32_t pin_val() const { return m_pin_val; }\n        uint16_t noise_per_ms() const { return m_noise_per_ms; }\n        uint16_t agc_cnt() const { return m_agc_cnt; }\n        antenna_status_t a_status() const { return m_a_status; }\n        antenna_power_t a_power() const { return m_a_power; }\n        uint8_t flags() const { return m_flags; }\n        std::string reserved1() const { return m_reserved1; }\n        uint32_t used_mask() const { return m_used_mask; }\n        std::string vp() const { return m_vp; }\n        uint8_t jam_ind() const { return m_jam_ind; }\n        std::string reserved2() const { return m_reserved2; }\n        uint32_t pin_irq() const { return m_pin_irq; }\n        uint32_t pull_h() const { return m_pull_h; }\n        uint32_t pull_l() const { return m_pull_l; }\n        ubx_t* _root() const { return m__root; }\n        ubx_t* _parent() const { return m__parent; }\n    };\n"
  },
  "system.ubloxd.tests.test_glonass_kaitai.generate_inp_data": {
    "id": "system.ubloxd.tests.test_glonass_kaitai.generate_inp_data",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\tests\\test_glonass_kaitai.cc",
    "relative_path": "system\\ubloxd\\tests\\test_glonass_kaitai.cc",
    "depends_on": [],
    "start_line": 92,
    "end_line": 108,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string generate_inp_data(string_data& data) {\n  std::string inp_data = \"\";\n  for (auto& [b, v] : data) {\n    std::string tmp = std::bitset<64>(v).to_string();\n    inp_data += tmp.substr(64-b, b);\n  }\n  assert(inp_data.size() == 128);\n\n  std::string string_data;\n  string_data.reserve(16);\n  for (int i = 0; i < 128; i+=8) {\n    std::string substr = inp_data.substr(i, 8);\n    string_data.push_back((uint8_t)std::stoi(substr.c_str(), 0, 2));\n  }\n\n  return string_data;\n}\n"
  },
  "system.ubloxd.tests.test_glonass_kaitai.generate_string_data": {
    "id": "system.ubloxd.tests.test_glonass_kaitai.generate_string_data",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\tests\\test_glonass_kaitai.cc",
    "relative_path": "system\\ubloxd\\tests\\test_glonass_kaitai.cc",
    "depends_on": [],
    "start_line": 110,
    "end_line": 182,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "string_data generate_string_data(uint8_t string_number) {\n\n  srand((unsigned)time(0));\n  string_data data; //<bit length, value>\n  data.push_back({1, 0}); // idle chip\n  data.push_back({4, string_number}); // string number\n\n  if (string_number == 1) {\n    data.push_back({2, 3}); // not_used\n    data.push_back({2, 1}); // p1\n    data.push_back({12, 113}); // t_k\n    data.push_back({1, rand() & 1}); // x_vel_sign\n    data.push_back({23, 7122}); // x_vel_value\n    data.push_back({1, rand() & 1}); // x_accel_sign\n    data.push_back({4, 3}); // x_accel_value\n    data.push_back({1, rand() & 1}); // x_sign\n    data.push_back({26, 33554431}); // x_value\n  } else if (string_number == 2) {\n    data.push_back({3, 3}); // b_n\n    data.push_back({1, 1}); // p2\n    data.push_back({7, 123}); // t_b\n    data.push_back({5, 31}); // not_used\n    data.push_back({1, rand() & 1}); // y_vel_sign\n    data.push_back({23, 7422}); // y_vel_value\n    data.push_back({1, rand() & 1}); // y_accel_sign\n    data.push_back({4, 3}); // y_accel_value\n    data.push_back({1, rand() & 1}); // y_sign\n    data.push_back({26, 67108863}); // y_value\n  } else if (string_number == 3) {\n    data.push_back({1, 0}); // p3\n    data.push_back({1, 1}); // gamma_n_sign\n    data.push_back({10, 123}); // gamma_n_value\n    data.push_back({1, 0}); // not_used\n    data.push_back({2, 2}); // p\n    data.push_back({1, 1}); // l_n\n    data.push_back({1, rand() & 1}); // z_vel_sign\n    data.push_back({23, 1337}); // z_vel_value\n    data.push_back({1, rand() & 1}); // z_accel_sign\n    data.push_back({4, 9}); // z_accel_value\n    data.push_back({1, rand() & 1}); // z_sign\n    data.push_back({26, 100023}); // z_value\n  } else if (string_number == 4) {\n    data.push_back({1, rand() & 1}); // tau_n_sign\n    data.push_back({21, 197152}); // tau_n_value\n    data.push_back({1, rand() & 1}); // delta_tau_n_sign\n    data.push_back({4, 4}); // delta_tau_n_value\n    data.push_back({5, 0}); // e_n\n    data.push_back({14, 2}); // not_used_1\n    data.push_back({1, 1}); // p4\n    data.push_back({4, 9}); // f_t\n    data.push_back({3, 3}); // not_used_2\n    data.push_back({11, 2047}); // n_t\n    data.push_back({5, 2}); // n\n    data.push_back({2, 1}); // m\n  } else if (string_number == 5) {\n    data.push_back({11, 2047}); // n_a\n    data.push_back({32, 4294767295}); // tau_c\n    data.push_back({1, 0}); // not_used_1\n    data.push_back({5, 2}); // n_4\n    data.push_back({22, 4114304}); // tau_gps\n    data.push_back({1, 0}); // l_n\n  } else { // non-immediate data is not parsed\n    data.push_back({64, rand()}); // data_1\n    data.push_back({8, 6}); // data_2\n  }\n\n  data.push_back({8, rand() & 0xFF}); // hamming code\n  data.push_back({11, rand() & 0x7FF}); // pad\n  data.push_back({16, rand() & 0xFFFF}); // superframe\n  data.push_back({8, rand() & 0xFF}); // pad\n  data.push_back({8, rand() & 0xFF}); // frame\n  return data;\n}\n"
  },
  "system.ubloxd.tests.test_pigeond.TestPigeond": {
    "id": "system.ubloxd.tests.test_pigeond.TestPigeond",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\tests\\test_pigeond.py",
    "relative_path": "system\\ubloxd\\tests\\test_pigeond.py",
    "depends_on": [],
    "start_line": 14,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.tests.test_pigeond.TestPigeond.teardown_method": {
    "id": "system.ubloxd.tests.test_pigeond.TestPigeond.teardown_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\tests\\test_pigeond.py",
    "relative_path": "system\\ubloxd\\tests\\test_pigeond.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 17,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.tests.test_pigeond.TestPigeond.test_frequency": {
    "id": "system.ubloxd.tests.test_pigeond.TestPigeond.test_frequency",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\tests\\test_pigeond.py",
    "relative_path": "system\\ubloxd\\tests\\test_pigeond.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.tests.test_pigeond.TestPigeond.test_startup_time": {
    "id": "system.ubloxd.tests.test_pigeond.TestPigeond.test_startup_time",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\tests\\test_pigeond.py",
    "relative_path": "system\\ubloxd\\tests\\test_pigeond.py",
    "depends_on": [],
    "start_line": 31,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.tests.test_pigeond.TestPigeond.test_turns_off_ublox": {
    "id": "system.ubloxd.tests.test_pigeond.TestPigeond.test_turns_off_ublox",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\tests\\test_pigeond.py",
    "relative_path": "system\\ubloxd\\tests\\test_pigeond.py",
    "depends_on": [],
    "start_line": 47,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.tests.ubloxd.configure_ublox": {
    "id": "system.ubloxd.tests.ubloxd.configure_ublox",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\tests\\ubloxd.py",
    "relative_path": "system\\ubloxd\\tests\\ubloxd.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 79,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.tests.ubloxd.Device": {
    "id": "system.ubloxd.tests.ubloxd.Device",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\tests\\ubloxd.py",
    "relative_path": "system\\ubloxd\\tests\\ubloxd.py",
    "depends_on": [],
    "start_line": 83,
    "end_line": 86,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ubloxd.tests.ubloxd.Device.write": {
    "id": "system.ubloxd.tests.ubloxd.Device.write",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ubloxd\\tests\\ubloxd.py",
    "relative_path": "system\\ubloxd\\tests\\ubloxd.py",
    "depends_on": [],
    "start_line": 84,
    "end_line": 86,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.reset.ResetMode": {
    "id": "system.ui.reset.ResetMode",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\reset.py",
    "relative_path": "system\\ui\\reset.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.reset.ResetState": {
    "id": "system.ui.reset.ResetState",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\reset.py",
    "relative_path": "system\\ui\\reset.py",
    "depends_on": [],
    "start_line": 22,
    "end_line": 26,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.reset.Reset": {
    "id": "system.ui.reset.Reset",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\reset.py",
    "relative_path": "system\\ui\\reset.py",
    "depends_on": [
      "system.ui.reset.ResetMode",
      "system.ui.reset.ResetState"
    ],
    "start_line": 29,
    "end_line": 95,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.reset.Reset.__init__": {
    "id": "system.ui.reset.Reset.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\reset.py",
    "relative_path": "system\\ui\\reset.py",
    "depends_on": [
      "system.ui.reset.ResetState"
    ],
    "start_line": 30,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.reset.Reset.do_reset": {
    "id": "system.ui.reset.Reset.do_reset",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\reset.py",
    "relative_path": "system\\ui\\reset.py",
    "depends_on": [
      "system.ui.reset.ResetState"
    ],
    "start_line": 34,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.reset.Reset.start_reset": {
    "id": "system.ui.reset.Reset.start_reset",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\reset.py",
    "relative_path": "system\\ui\\reset.py",
    "depends_on": [
      "system.ui.reset.ResetState"
    ],
    "start_line": 49,
    "end_line": 51,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.reset.Reset.render": {
    "id": "system.ui.reset.Reset.render",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\reset.py",
    "relative_path": "system\\ui\\reset.py",
    "depends_on": [
      "system.ui.reset.ResetMode",
      "system.ui.reset.ResetState"
    ],
    "start_line": 53,
    "end_line": 78,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.reset.Reset.confirm": {
    "id": "system.ui.reset.Reset.confirm",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\reset.py",
    "relative_path": "system\\ui\\reset.py",
    "depends_on": [
      "system.ui.reset.ResetState"
    ],
    "start_line": 80,
    "end_line": 84,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.reset.Reset.get_body_text": {
    "id": "system.ui.reset.Reset.get_body_text",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\reset.py",
    "relative_path": "system\\ui\\reset.py",
    "depends_on": [
      "system.ui.reset.ResetState",
      "system.ui.reset.ResetMode"
    ],
    "start_line": 86,
    "end_line": 95,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.reset.main": {
    "id": "system.ui.reset.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\reset.py",
    "relative_path": "system\\ui\\reset.py",
    "depends_on": [
      "system.ui.reset.Reset",
      "system.ui.reset.ResetMode"
    ],
    "start_line": 98,
    "end_line": 114,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.setup.SetupState": {
    "id": "system.ui.setup.SetupState",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\setup.py",
    "relative_path": "system\\ui\\setup.py",
    "depends_on": [],
    "start_line": 32,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.setup.Setup": {
    "id": "system.ui.setup.Setup",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\setup.py",
    "relative_path": "system\\ui\\setup.py",
    "depends_on": [
      "system.ui.setup.SetupState"
    ],
    "start_line": 42,
    "end_line": 332,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.setup.Setup.__init__": {
    "id": "system.ui.setup.Setup.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\setup.py",
    "relative_path": "system\\ui\\setup.py",
    "depends_on": [
      "system.ui.setup.SetupState"
    ],
    "start_line": 43,
    "end_line": 68,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.setup.Setup.render": {
    "id": "system.ui.setup.Setup.render",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\setup.py",
    "relative_path": "system\\ui\\setup.py",
    "depends_on": [
      "system.ui.setup.SetupState"
    ],
    "start_line": 70,
    "end_line": 84,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.setup.Setup.render_low_voltage": {
    "id": "system.ui.setup.Setup.render_low_voltage",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\setup.py",
    "relative_path": "system\\ui\\setup.py",
    "depends_on": [
      "system.ui.setup.SetupState"
    ],
    "start_line": 86,
    "end_line": 102,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.setup.Setup.render_getting_started": {
    "id": "system.ui.setup.Setup.render_getting_started",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\setup.py",
    "relative_path": "system\\ui\\setup.py",
    "depends_on": [
      "system.ui.setup.SetupState"
    ],
    "start_line": 104,
    "end_line": 120,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.setup.Setup.check_network_connectivity": {
    "id": "system.ui.setup.Setup.check_network_connectivity",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\setup.py",
    "relative_path": "system\\ui\\setup.py",
    "depends_on": [
      "system.ui.setup.SetupState"
    ],
    "start_line": 122,
    "end_line": 134,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.setup.Setup.start_network_check": {
    "id": "system.ui.setup.Setup.start_network_check",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\setup.py",
    "relative_path": "system\\ui\\setup.py",
    "depends_on": [],
    "start_line": 136,
    "end_line": 139,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.setup.Setup.close": {
    "id": "system.ui.setup.Setup.close",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\setup.py",
    "relative_path": "system\\ui\\setup.py",
    "depends_on": [],
    "start_line": 141,
    "end_line": 144,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.setup.Setup.render_network_setup": {
    "id": "system.ui.setup.Setup.render_network_setup",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\setup.py",
    "relative_path": "system\\ui\\setup.py",
    "depends_on": [
      "system.ui.setup.SetupState"
    ],
    "start_line": 146,
    "end_line": 177,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.setup.Setup.render_software_selection": {
    "id": "system.ui.setup.Setup.render_software_selection",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\setup.py",
    "relative_path": "system\\ui\\setup.py",
    "depends_on": [
      "system.ui.setup.SetupState"
    ],
    "start_line": 179,
    "end_line": 231,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.setup.Setup.render_downloading": {
    "id": "system.ui.setup.Setup.render_downloading",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\setup.py",
    "relative_path": "system\\ui\\setup.py",
    "depends_on": [],
    "start_line": 233,
    "end_line": 235,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.setup.Setup.render_download_failed": {
    "id": "system.ui.setup.Setup.render_download_failed",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\setup.py",
    "relative_path": "system\\ui\\setup.py",
    "depends_on": [
      "system.ui.setup.SetupState"
    ],
    "start_line": 237,
    "end_line": 256,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.setup.Setup.render_custom_url": {
    "id": "system.ui.setup.Setup.render_custom_url",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\setup.py",
    "relative_path": "system\\ui\\setup.py",
    "depends_on": [
      "system.ui.setup.SetupState"
    ],
    "start_line": 258,
    "end_line": 270,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.setup.Setup.download": {
    "id": "system.ui.setup.Setup.download",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\setup.py",
    "relative_path": "system\\ui\\setup.py",
    "depends_on": [
      "system.ui.setup.SetupState"
    ],
    "start_line": 272,
    "end_line": 281,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.setup.Setup._download_thread": {
    "id": "system.ui.setup.Setup._download_thread",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\setup.py",
    "relative_path": "system\\ui\\setup.py",
    "depends_on": [],
    "start_line": 283,
    "end_line": 327,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.setup.Setup.download_failed": {
    "id": "system.ui.setup.Setup.download_failed",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\setup.py",
    "relative_path": "system\\ui\\setup.py",
    "depends_on": [
      "system.ui.setup.SetupState"
    ],
    "start_line": 329,
    "end_line": 332,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.setup.main": {
    "id": "system.ui.setup.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\setup.py",
    "relative_path": "system\\ui\\setup.py",
    "depends_on": [
      "system.ui.setup.Setup"
    ],
    "start_line": 335,
    "end_line": 345,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.spinner.clamp": {
    "id": "system.ui.spinner.clamp",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\spinner.py",
    "relative_path": "system\\ui\\spinner.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.spinner.SpinnerRenderer": {
    "id": "system.ui.spinner.SpinnerRenderer",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\spinner.py",
    "relative_path": "system\\ui\\spinner.py",
    "depends_on": [
      "system.ui.spinner.clamp"
    ],
    "start_line": 25,
    "end_line": 83,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.spinner.SpinnerRenderer.__init__": {
    "id": "system.ui.spinner.SpinnerRenderer.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\spinner.py",
    "relative_path": "system\\ui\\spinner.py",
    "depends_on": [],
    "start_line": 26,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.spinner.SpinnerRenderer.set_text": {
    "id": "system.ui.spinner.SpinnerRenderer.set_text",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\spinner.py",
    "relative_path": "system\\ui\\spinner.py",
    "depends_on": [
      "system.ui.spinner.clamp"
    ],
    "start_line": 34,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.spinner.SpinnerRenderer.render": {
    "id": "system.ui.spinner.SpinnerRenderer.render",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\spinner.py",
    "relative_path": "system\\ui\\spinner.py",
    "depends_on": [],
    "start_line": 43,
    "end_line": 83,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.spinner.Spinner": {
    "id": "system.ui.spinner.Spinner",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\spinner.py",
    "relative_path": "system\\ui\\spinner.py",
    "depends_on": [
      "system.ui.spinner.SpinnerRenderer"
    ],
    "start_line": 86,
    "end_line": 98,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.spinner.Spinner.__init__": {
    "id": "system.ui.spinner.Spinner.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\spinner.py",
    "relative_path": "system\\ui\\spinner.py",
    "depends_on": [],
    "start_line": 87,
    "end_line": 88,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.spinner.Spinner._create_renderer": {
    "id": "system.ui.spinner.Spinner._create_renderer",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\spinner.py",
    "relative_path": "system\\ui\\spinner.py",
    "depends_on": [
      "system.ui.spinner.SpinnerRenderer"
    ],
    "start_line": 90,
    "end_line": 91,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.spinner.Spinner.update": {
    "id": "system.ui.spinner.Spinner.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\spinner.py",
    "relative_path": "system\\ui\\spinner.py",
    "depends_on": [],
    "start_line": 93,
    "end_line": 95,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.spinner.Spinner.update_progress": {
    "id": "system.ui.spinner.Spinner.update_progress",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\spinner.py",
    "relative_path": "system\\ui\\spinner.py",
    "depends_on": [],
    "start_line": 97,
    "end_line": 98,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.spinner.main": {
    "id": "system.ui.spinner.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\spinner.py",
    "relative_path": "system\\ui\\spinner.py",
    "depends_on": [
      "system.ui.spinner.Spinner"
    ],
    "start_line": 101,
    "end_line": 104,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.text.wrap_text": {
    "id": "system.ui.text.wrap_text",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\text.py",
    "relative_path": "system\\ui\\text.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.text.TextWindowRenderer": {
    "id": "system.ui.text.TextWindowRenderer",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\text.py",
    "relative_path": "system\\ui\\text.py",
    "depends_on": [
      "system.ui.text.wrap_text"
    ],
    "start_line": 48,
    "end_line": 73,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.text.TextWindowRenderer.__init__": {
    "id": "system.ui.text.TextWindowRenderer.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\text.py",
    "relative_path": "system\\ui\\text.py",
    "depends_on": [
      "system.ui.text.wrap_text"
    ],
    "start_line": 49,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.text.TextWindowRenderer.render": {
    "id": "system.ui.text.TextWindowRenderer.render",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\text.py",
    "relative_path": "system\\ui\\text.py",
    "depends_on": [],
    "start_line": 56,
    "end_line": 73,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.text.TextWindow": {
    "id": "system.ui.text.TextWindow",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\text.py",
    "relative_path": "system\\ui\\text.py",
    "depends_on": [
      "system.ui.text.TextWindowRenderer"
    ],
    "start_line": 76,
    "end_line": 86,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.text.TextWindow.__init__": {
    "id": "system.ui.text.TextWindow.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\text.py",
    "relative_path": "system\\ui\\text.py",
    "depends_on": [],
    "start_line": 77,
    "end_line": 79,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.text.TextWindow._create_renderer": {
    "id": "system.ui.text.TextWindow._create_renderer",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\text.py",
    "relative_path": "system\\ui\\text.py",
    "depends_on": [
      "system.ui.text.TextWindowRenderer"
    ],
    "start_line": 81,
    "end_line": 82,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.text.TextWindow.wait_for_exit": {
    "id": "system.ui.text.TextWindow.wait_for_exit",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\text.py",
    "relative_path": "system\\ui\\text.py",
    "depends_on": [],
    "start_line": 84,
    "end_line": 86,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.updater.Screen": {
    "id": "system.ui.updater.Screen",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\updater.py",
    "relative_path": "system\\ui\\updater.py",
    "depends_on": [],
    "start_line": 28,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.updater.Updater": {
    "id": "system.ui.updater.Updater",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\updater.py",
    "relative_path": "system\\ui\\updater.py",
    "depends_on": [
      "system.ui.updater.Screen"
    ],
    "start_line": 34,
    "end_line": 149,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.updater.Updater.__init__": {
    "id": "system.ui.updater.Updater.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\updater.py",
    "relative_path": "system\\ui\\updater.py",
    "depends_on": [
      "system.ui.updater.Screen"
    ],
    "start_line": 35,
    "end_line": 46,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.updater.Updater.install_update": {
    "id": "system.ui.updater.Updater.install_update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\updater.py",
    "relative_path": "system\\ui\\updater.py",
    "depends_on": [
      "system.ui.updater.Screen"
    ],
    "start_line": 48,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.updater.Updater._run_update_process": {
    "id": "system.ui.updater.Updater._run_update_process",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\updater.py",
    "relative_path": "system\\ui\\updater.py",
    "depends_on": [],
    "start_line": 59,
    "end_line": 79,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.updater.Updater.render_prompt_screen": {
    "id": "system.ui.updater.Updater.render_prompt_screen",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\updater.py",
    "relative_path": "system\\ui\\updater.py",
    "depends_on": [
      "system.ui.updater.Screen"
    ],
    "start_line": 81,
    "end_line": 107,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.updater.Updater.render_wifi_screen": {
    "id": "system.ui.updater.Updater.render_wifi_screen",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\updater.py",
    "relative_path": "system\\ui\\updater.py",
    "depends_on": [
      "system.ui.updater.Screen"
    ],
    "start_line": 109,
    "end_line": 119,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.updater.Updater.render_progress_screen": {
    "id": "system.ui.updater.Updater.render_progress_screen",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\updater.py",
    "relative_path": "system\\ui\\updater.py",
    "depends_on": [],
    "start_line": 121,
    "end_line": 141,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.updater.Updater.render": {
    "id": "system.ui.updater.Updater.render",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\updater.py",
    "relative_path": "system\\ui\\updater.py",
    "depends_on": [
      "system.ui.updater.Screen"
    ],
    "start_line": 143,
    "end_line": 149,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.updater.main": {
    "id": "system.ui.updater.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\updater.py",
    "relative_path": "system\\ui\\updater.py",
    "depends_on": [
      "system.ui.updater.Updater"
    ],
    "start_line": 152,
    "end_line": 167,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.application.FontWeight": {
    "id": "system.ui.lib.application.FontWeight",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\application.py",
    "relative_path": "system\\ui\\lib\\application.py",
    "depends_on": [],
    "start_line": 25,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.application.GuiApplication": {
    "id": "system.ui.lib.application.GuiApplication",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\application.py",
    "relative_path": "system\\ui\\lib\\application.py",
    "depends_on": [
      "system.ui.lib.application.FontWeight"
    ],
    "start_line": 37,
    "end_line": 219,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.application.GuiApplication.__init__": {
    "id": "system.ui.lib.application.GuiApplication.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\application.py",
    "relative_path": "system\\ui\\lib\\application.py",
    "depends_on": [
      "system.ui.lib.application.FontWeight"
    ],
    "start_line": 38,
    "end_line": 46,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.application.GuiApplication.request_close": {
    "id": "system.ui.lib.application.GuiApplication.request_close",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\application.py",
    "relative_path": "system\\ui\\lib\\application.py",
    "depends_on": [],
    "start_line": 48,
    "end_line": 49,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.application.GuiApplication.init_window": {
    "id": "system.ui.lib.application.GuiApplication.init_window",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\application.py",
    "relative_path": "system\\ui\\lib\\application.py",
    "depends_on": [],
    "start_line": 51,
    "end_line": 70,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.application.GuiApplication.texture": {
    "id": "system.ui.lib.application.GuiApplication.texture",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\application.py",
    "relative_path": "system\\ui\\lib\\application.py",
    "depends_on": [],
    "start_line": 73,
    "end_line": 81,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.application.GuiApplication._load_texture_from_image": {
    "id": "system.ui.lib.application.GuiApplication._load_texture_from_image",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\application.py",
    "relative_path": "system\\ui\\lib\\application.py",
    "depends_on": [],
    "start_line": 83,
    "end_line": 112,
    "has_docstring": true,
    "docstring": "Load and resize a texture, storing it for later automatic unloading.",
    "language": "python"
  },
  "system.ui.lib.application.GuiApplication.close": {
    "id": "system.ui.lib.application.GuiApplication.close",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\application.py",
    "relative_path": "system\\ui\\lib\\application.py",
    "depends_on": [],
    "start_line": 114,
    "end_line": 126,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.application.GuiApplication.render": {
    "id": "system.ui.lib.application.GuiApplication.render",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\application.py",
    "relative_path": "system\\ui\\lib\\application.py",
    "depends_on": [],
    "start_line": 128,
    "end_line": 142,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.application.GuiApplication.font": {
    "id": "system.ui.lib.application.GuiApplication.font",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\application.py",
    "relative_path": "system\\ui\\lib\\application.py",
    "depends_on": [
      "system.ui.lib.application.FontWeight"
    ],
    "start_line": 144,
    "end_line": 145,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.application.GuiApplication.width": {
    "id": "system.ui.lib.application.GuiApplication.width",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\application.py",
    "relative_path": "system\\ui\\lib\\application.py",
    "depends_on": [],
    "start_line": 148,
    "end_line": 149,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.application.GuiApplication.height": {
    "id": "system.ui.lib.application.GuiApplication.height",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\application.py",
    "relative_path": "system\\ui\\lib\\application.py",
    "depends_on": [],
    "start_line": 152,
    "end_line": 153,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.application.GuiApplication._load_fonts": {
    "id": "system.ui.lib.application.GuiApplication._load_fonts",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\application.py",
    "relative_path": "system\\ui\\lib\\application.py",
    "depends_on": [
      "system.ui.lib.application.FontWeight"
    ],
    "start_line": 155,
    "end_line": 174,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.application.GuiApplication._set_styles": {
    "id": "system.ui.lib.application.GuiApplication._set_styles",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\application.py",
    "relative_path": "system\\ui\\lib\\application.py",
    "depends_on": [],
    "start_line": 176,
    "end_line": 181,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.application.GuiApplication._set_log_callback": {
    "id": "system.ui.lib.application.GuiApplication._set_log_callback",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\application.py",
    "relative_path": "system\\ui\\lib\\application.py",
    "depends_on": [],
    "start_line": 183,
    "end_line": 204,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.application.GuiApplication._monitor_fps": {
    "id": "system.ui.lib.application.GuiApplication._monitor_fps",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\application.py",
    "relative_path": "system\\ui\\lib\\application.py",
    "depends_on": [],
    "start_line": 206,
    "end_line": 219,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.button.ButtonStyle": {
    "id": "system.ui.lib.button.ButtonStyle",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\button.py",
    "relative_path": "system\\ui\\lib\\button.py",
    "depends_on": [],
    "start_line": 6,
    "end_line": 10,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.button.TextAlignment": {
    "id": "system.ui.lib.button.TextAlignment",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\button.py",
    "relative_path": "system\\ui\\lib\\button.py",
    "depends_on": [],
    "start_line": 13,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.button.gui_button": {
    "id": "system.ui.lib.button.gui_button",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\button.py",
    "relative_path": "system\\ui\\lib\\button.py",
    "depends_on": [
      "system.ui.lib.button.TextAlignment",
      "system.ui.lib.button.ButtonStyle"
    ],
    "start_line": 40,
    "end_line": 111,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.inputbox.InputBox": {
    "id": "system.ui.lib.inputbox.InputBox",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\inputbox.py",
    "relative_path": "system\\ui\\lib\\inputbox.py",
    "depends_on": [],
    "start_line": 5,
    "end_line": 156,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.inputbox.InputBox.__init__": {
    "id": "system.ui.lib.inputbox.InputBox.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\inputbox.py",
    "relative_path": "system\\ui\\lib\\inputbox.py",
    "depends_on": [],
    "start_line": 6,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.inputbox.InputBox.text": {
    "id": "system.ui.lib.inputbox.InputBox.text",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\inputbox.py",
    "relative_path": "system\\ui\\lib\\inputbox.py",
    "depends_on": [],
    "start_line": 23,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.inputbox.InputBox.set_password_mode": {
    "id": "system.ui.lib.inputbox.InputBox.set_password_mode",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\inputbox.py",
    "relative_path": "system\\ui\\lib\\inputbox.py",
    "depends_on": [],
    "start_line": 27,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.inputbox.InputBox.clear": {
    "id": "system.ui.lib.inputbox.InputBox.clear",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\inputbox.py",
    "relative_path": "system\\ui\\lib\\inputbox.py",
    "depends_on": [],
    "start_line": 30,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.inputbox.InputBox.set_cursor_position": {
    "id": "system.ui.lib.inputbox.InputBox.set_cursor_position",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\inputbox.py",
    "relative_path": "system\\ui\\lib\\inputbox.py",
    "depends_on": [],
    "start_line": 34,
    "end_line": 39,
    "has_docstring": true,
    "docstring": "Set the cursor position and reset the blink counter.",
    "language": "python"
  },
  "system.ui.lib.inputbox.InputBox.add_char_at_cursor": {
    "id": "system.ui.lib.inputbox.InputBox.add_char_at_cursor",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\inputbox.py",
    "relative_path": "system\\ui\\lib\\inputbox.py",
    "depends_on": [],
    "start_line": 41,
    "end_line": 47,
    "has_docstring": true,
    "docstring": "Add a character at the current cursor position.",
    "language": "python"
  },
  "system.ui.lib.inputbox.InputBox.delete_char_before_cursor": {
    "id": "system.ui.lib.inputbox.InputBox.delete_char_before_cursor",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\inputbox.py",
    "relative_path": "system\\ui\\lib\\inputbox.py",
    "depends_on": [],
    "start_line": 49,
    "end_line": 55,
    "has_docstring": true,
    "docstring": "Delete the character before the cursor position (backspace).",
    "language": "python"
  },
  "system.ui.lib.inputbox.InputBox.delete_char_at_cursor": {
    "id": "system.ui.lib.inputbox.InputBox.delete_char_at_cursor",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\inputbox.py",
    "relative_path": "system\\ui\\lib\\inputbox.py",
    "depends_on": [],
    "start_line": 57,
    "end_line": 63,
    "has_docstring": true,
    "docstring": "Delete the character at the cursor position (delete).",
    "language": "python"
  },
  "system.ui.lib.inputbox.InputBox.render": {
    "id": "system.ui.lib.inputbox.InputBox.render",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\inputbox.py",
    "relative_path": "system\\ui\\lib\\inputbox.py",
    "depends_on": [],
    "start_line": 65,
    "end_line": 102,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.inputbox.InputBox._handle_mouse_input": {
    "id": "system.ui.lib.inputbox.InputBox._handle_mouse_input",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\inputbox.py",
    "relative_path": "system\\ui\\lib\\inputbox.py",
    "depends_on": [],
    "start_line": 104,
    "end_line": 119,
    "has_docstring": true,
    "docstring": "Handle mouse clicks to position cursor.",
    "language": "python"
  },
  "system.ui.lib.inputbox.InputBox._handle_keyboard_input": {
    "id": "system.ui.lib.inputbox.InputBox._handle_keyboard_input",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\inputbox.py",
    "relative_path": "system\\ui\\lib\\inputbox.py",
    "depends_on": [],
    "start_line": 121,
    "end_line": 156,
    "has_docstring": true,
    "docstring": "Process keyboard input.",
    "language": "python"
  },
  "system.ui.lib.label.gui_label": {
    "id": "system.ui.lib.label.gui_label",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\label.py",
    "relative_path": "system\\ui\\lib\\label.py",
    "depends_on": [],
    "start_line": 6,
    "end_line": 50,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.label.gui_text_box": {
    "id": "system.ui.lib.label.gui_text_box",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\label.py",
    "relative_path": "system\\ui\\lib\\label.py",
    "depends_on": [],
    "start_line": 53,
    "end_line": 71,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.scroll_panel.ScrollState": {
    "id": "system.ui.lib.scroll_panel.ScrollState",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\scroll_panel.py",
    "relative_path": "system\\ui\\lib\\scroll_panel.py",
    "depends_on": [],
    "start_line": 10,
    "end_line": 13,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.scroll_panel.GuiScrollPanel": {
    "id": "system.ui.lib.scroll_panel.GuiScrollPanel",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\scroll_panel.py",
    "relative_path": "system\\ui\\lib\\scroll_panel.py",
    "depends_on": [
      "system.ui.lib.scroll_panel.ScrollState"
    ],
    "start_line": 16,
    "end_line": 88,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.scroll_panel.GuiScrollPanel.__init__": {
    "id": "system.ui.lib.scroll_panel.GuiScrollPanel.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\scroll_panel.py",
    "relative_path": "system\\ui\\lib\\scroll_panel.py",
    "depends_on": [
      "system.ui.lib.scroll_panel.ScrollState"
    ],
    "start_line": 17,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.scroll_panel.GuiScrollPanel.handle_scroll": {
    "id": "system.ui.lib.scroll_panel.GuiScrollPanel.handle_scroll",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\scroll_panel.py",
    "relative_path": "system\\ui\\lib\\scroll_panel.py",
    "depends_on": [
      "system.ui.lib.scroll_panel.ScrollState"
    ],
    "start_line": 27,
    "end_line": 85,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.scroll_panel.GuiScrollPanel.is_click_valid": {
    "id": "system.ui.lib.scroll_panel.GuiScrollPanel.is_click_valid",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\scroll_panel.py",
    "relative_path": "system\\ui\\lib\\scroll_panel.py",
    "depends_on": [
      "system.ui.lib.scroll_panel.ScrollState"
    ],
    "start_line": 87,
    "end_line": 88,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.toggle.Toggle": {
    "id": "system.ui.lib.toggle.Toggle",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\toggle.py",
    "relative_path": "system\\ui\\lib\\toggle.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.toggle.Toggle.__init__": {
    "id": "system.ui.lib.toggle.Toggle.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\toggle.py",
    "relative_path": "system\\ui\\lib\\toggle.py",
    "depends_on": [],
    "start_line": 12,
    "end_line": 14,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.toggle.Toggle.handle_input": {
    "id": "system.ui.lib.toggle.Toggle.handle_input",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\toggle.py",
    "relative_path": "system\\ui\\lib\\toggle.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 20,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.toggle.Toggle.get_state": {
    "id": "system.ui.lib.toggle.Toggle.get_state",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\toggle.py",
    "relative_path": "system\\ui\\lib\\toggle.py",
    "depends_on": [],
    "start_line": 22,
    "end_line": 23,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.toggle.Toggle.render": {
    "id": "system.ui.lib.toggle.Toggle.render",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\toggle.py",
    "relative_path": "system\\ui\\lib\\toggle.py",
    "depends_on": [],
    "start_line": 25,
    "end_line": 27,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.toggle.Toggle._draw_background": {
    "id": "system.ui.lib.toggle.Toggle._draw_background",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\toggle.py",
    "relative_path": "system\\ui\\lib\\toggle.py",
    "depends_on": [],
    "start_line": 29,
    "end_line": 36,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.toggle.Toggle._draw_knob": {
    "id": "system.ui.lib.toggle.Toggle._draw_knob",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\toggle.py",
    "relative_path": "system\\ui\\lib\\toggle.py",
    "depends_on": [],
    "start_line": 38,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.utils.GuiStyleContext": {
    "id": "system.ui.lib.utils.GuiStyleContext",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\utils.py",
    "relative_path": "system\\ui\\lib\\utils.py",
    "depends_on": [],
    "start_line": 4,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.utils.GuiStyleContext.__init__": {
    "id": "system.ui.lib.utils.GuiStyleContext.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\utils.py",
    "relative_path": "system\\ui\\lib\\utils.py",
    "depends_on": [],
    "start_line": 5,
    "end_line": 8,
    "has_docstring": true,
    "docstring": "styles is a list of tuples (control, prop, new_value)",
    "language": "python"
  },
  "system.ui.lib.utils.GuiStyleContext.__enter__": {
    "id": "system.ui.lib.utils.GuiStyleContext.__enter__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\utils.py",
    "relative_path": "system\\ui\\lib\\utils.py",
    "depends_on": [],
    "start_line": 10,
    "end_line": 14,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.utils.GuiStyleContext.__exit__": {
    "id": "system.ui.lib.utils.GuiStyleContext.__exit__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\utils.py",
    "relative_path": "system\\ui\\lib\\utils.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.NMDeviceState": {
    "id": "system.ui.lib.wifi_manager.NMDeviceState",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 42,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.SecurityType": {
    "id": "system.ui.lib.wifi_manager.SecurityType",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 49,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.NetworkInfo": {
    "id": "system.ui.lib.wifi_manager.NetworkInfo",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [
      "system.ui.lib.wifi_manager.SecurityType"
    ],
    "start_line": 57,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManagerCallbacks": {
    "id": "system.ui.lib.wifi_manager.WifiManagerCallbacks",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [
      "system.ui.lib.wifi_manager.NetworkInfo"
    ],
    "start_line": 69,
    "end_line": 73,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager": {
    "id": "system.ui.lib.wifi_manager.WifiManager",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [
      "system.ui.lib.wifi_manager.SecurityType",
      "system.ui.lib.wifi_manager.NMDeviceState",
      "system.ui.lib.wifi_manager.WifiManagerCallbacks",
      "system.ui.lib.wifi_manager.NetworkInfo"
    ],
    "start_line": 76,
    "end_line": 604,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager.__init__": {
    "id": "system.ui.lib.wifi_manager.WifiManager.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [
      "system.ui.lib.wifi_manager.NetworkInfo",
      "system.ui.lib.wifi_manager.WifiManagerCallbacks"
    ],
    "start_line": 77,
    "end_line": 93,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager.connect": {
    "id": "system.ui.lib.wifi_manager.WifiManager.connect",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 95,
    "end_line": 112,
    "has_docstring": true,
    "docstring": "Connect to the DBus system bus.",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager.shutdown": {
    "id": "system.ui.lib.wifi_manager.WifiManager.shutdown",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 114,
    "end_line": 123,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager.request_scan": {
    "id": "system.ui.lib.wifi_manager.WifiManager.request_scan",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 125,
    "end_line": 130,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager.get_active_access_point": {
    "id": "system.ui.lib.wifi_manager.WifiManager.get_active_access_point",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 132,
    "end_line": 139,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager.forget_connection": {
    "id": "system.ui.lib.wifi_manager.WifiManager.forget_connection",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 141,
    "end_line": 158,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager.activate_connection": {
    "id": "system.ui.lib.wifi_manager.WifiManager.activate_connection",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 160,
    "end_line": 170,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager.connect_to_network": {
    "id": "system.ui.lib.wifi_manager.WifiManager.connect_to_network",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 172,
    "end_line": 218,
    "has_docstring": true,
    "docstring": "Connect to a selected Wi-Fi network.",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager.is_saved": {
    "id": "system.ui.lib.wifi_manager.WifiManager.is_saved",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 220,
    "end_line": 221,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager._find_wifi_device": {
    "id": "system.ui.lib.wifi_manager.WifiManager._find_wifi_device",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 223,
    "end_line": 237,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager.add_tethering_connection": {
    "id": "system.ui.lib.wifi_manager.WifiManager.add_tethering_connection",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 239,
    "end_line": 305,
    "has_docstring": true,
    "docstring": "Create a WiFi tethering connection.",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager.get_tethering_password": {
    "id": "system.ui.lib.wifi_manager.WifiManager.get_tethering_password",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 307,
    "end_line": 323,
    "has_docstring": true,
    "docstring": "Get the current tethering password.",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager.set_tethering_password": {
    "id": "system.ui.lib.wifi_manager.WifiManager.set_tethering_password",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 325,
    "end_line": 370,
    "has_docstring": true,
    "docstring": "Set the tethering password.",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager.is_tethering_active": {
    "id": "system.ui.lib.wifi_manager.WifiManager.is_tethering_active",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 372,
    "end_line": 391,
    "has_docstring": true,
    "docstring": "Check if tethering is active for the specified SSID.",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager._periodic_scan": {
    "id": "system.ui.lib.wifi_manager.WifiManager._periodic_scan",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 393,
    "end_line": 403,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager._setup_signals": {
    "id": "system.ui.lib.wifi_manager.WifiManager._setup_signals",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 405,
    "end_line": 421,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager._on_properties_changed": {
    "id": "system.ui.lib.wifi_manager.WifiManager._on_properties_changed",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 423,
    "end_line": 429,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager._on_state_changed": {
    "id": "system.ui.lib.wifi_manager.WifiManager._on_state_changed",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [
      "system.ui.lib.wifi_manager.NMDeviceState"
    ],
    "start_line": 431,
    "end_line": 452,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager._on_new_connection": {
    "id": "system.ui.lib.wifi_manager.WifiManager._on_new_connection",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 454,
    "end_line": 457,
    "has_docstring": true,
    "docstring": "Callback for NewConnection signal.",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager._on_connection_removed": {
    "id": "system.ui.lib.wifi_manager.WifiManager._on_connection_removed",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 459,
    "end_line": 469,
    "has_docstring": true,
    "docstring": "Callback for ConnectionRemoved signal.",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager._add_saved_connection": {
    "id": "system.ui.lib.wifi_manager.WifiManager._add_saved_connection",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 471,
    "end_line": 479,
    "has_docstring": true,
    "docstring": "Add a new saved connection to the dictionary.",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager._extract_ssid": {
    "id": "system.ui.lib.wifi_manager.WifiManager._extract_ssid",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 481,
    "end_line": 484,
    "has_docstring": true,
    "docstring": "Extract SSID from connection settings.",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager._update_connection_status": {
    "id": "system.ui.lib.wifi_manager.WifiManager._update_connection_status",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 486,
    "end_line": 488,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager._add_match_rule": {
    "id": "system.ui.lib.wifi_manager.WifiManager._add_match_rule",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 490,
    "end_line": 505,
    "has_docstring": true,
    "docstring": "Add a match rule on the bus.",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager._get_available_networks": {
    "id": "system.ui.lib.wifi_manager.WifiManager._get_available_networks",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [
      "system.ui.lib.wifi_manager.NetworkInfo"
    ],
    "start_line": 507,
    "end_line": 553,
    "has_docstring": true,
    "docstring": "Get a list of available networks via NetworkManager.",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager._get_connection_settings": {
    "id": "system.ui.lib.wifi_manager.WifiManager._get_connection_settings",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 555,
    "end_line": 564,
    "has_docstring": true,
    "docstring": "Fetch connection settings for a specific connection path.",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager._process_chunk": {
    "id": "system.ui.lib.wifi_manager.WifiManager._process_chunk",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 566,
    "end_line": 569,
    "has_docstring": true,
    "docstring": "Process a chunk of connection paths.",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager._get_saved_connections": {
    "id": "system.ui.lib.wifi_manager.WifiManager._get_saved_connections",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 571,
    "end_line": 587,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager._get_interface": {
    "id": "system.ui.lib.wifi_manager.WifiManager._get_interface",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 589,
    "end_line": 592,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManager._get_security_type": {
    "id": "system.ui.lib.wifi_manager.WifiManager._get_security_type",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [
      "system.ui.lib.wifi_manager.SecurityType"
    ],
    "start_line": 594,
    "end_line": 604,
    "has_docstring": true,
    "docstring": "Determine the security type based on flags.",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManagerWrapper": {
    "id": "system.ui.lib.wifi_manager.WifiManagerWrapper",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [
      "system.ui.lib.wifi_manager.WifiManager",
      "system.ui.lib.wifi_manager.WifiManagerCallbacks"
    ],
    "start_line": 607,
    "end_line": 710,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManagerWrapper.__init__": {
    "id": "system.ui.lib.wifi_manager.WifiManagerWrapper.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [
      "system.ui.lib.wifi_manager.WifiManager",
      "system.ui.lib.wifi_manager.WifiManagerCallbacks"
    ],
    "start_line": 608,
    "end_line": 614,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManagerWrapper.set_callbacks": {
    "id": "system.ui.lib.wifi_manager.WifiManagerWrapper.set_callbacks",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [
      "system.ui.lib.wifi_manager.WifiManagerCallbacks"
    ],
    "start_line": 616,
    "end_line": 617,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManagerWrapper.start": {
    "id": "system.ui.lib.wifi_manager.WifiManagerWrapper.start",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 619,
    "end_line": 623,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManagerWrapper._run": {
    "id": "system.ui.lib.wifi_manager.WifiManagerWrapper._run",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [
      "system.ui.lib.wifi_manager.WifiManager"
    ],
    "start_line": 625,
    "end_line": 638,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManagerWrapper.shutdown": {
    "id": "system.ui.lib.wifi_manager.WifiManagerWrapper.shutdown",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 640,
    "end_line": 650,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManagerWrapper.is_saved": {
    "id": "system.ui.lib.wifi_manager.WifiManagerWrapper.is_saved",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 652,
    "end_line": 654,
    "has_docstring": true,
    "docstring": "Check if a network is saved.",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManagerWrapper.connect": {
    "id": "system.ui.lib.wifi_manager.WifiManagerWrapper.connect",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 656,
    "end_line": 660,
    "has_docstring": true,
    "docstring": "Connect to DBus and start Wi-Fi scanning.",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManagerWrapper.request_scan": {
    "id": "system.ui.lib.wifi_manager.WifiManagerWrapper.request_scan",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 662,
    "end_line": 666,
    "has_docstring": true,
    "docstring": "Request a scan for Wi-Fi networks.",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManagerWrapper.forget_connection": {
    "id": "system.ui.lib.wifi_manager.WifiManagerWrapper.forget_connection",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 668,
    "end_line": 672,
    "has_docstring": true,
    "docstring": "Forget a saved Wi-Fi connection.",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManagerWrapper.activate_connection": {
    "id": "system.ui.lib.wifi_manager.WifiManagerWrapper.activate_connection",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 674,
    "end_line": 678,
    "has_docstring": true,
    "docstring": "Activate an existing Wi-Fi connection.",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManagerWrapper.connect_to_network": {
    "id": "system.ui.lib.wifi_manager.WifiManagerWrapper.connect_to_network",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 680,
    "end_line": 684,
    "has_docstring": true,
    "docstring": "Connect to a Wi-Fi network.",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManagerWrapper._run_coroutine": {
    "id": "system.ui.lib.wifi_manager.WifiManagerWrapper._run_coroutine",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [],
    "start_line": 686,
    "end_line": 691,
    "has_docstring": true,
    "docstring": "Run a coroutine in the async thread.",
    "language": "python"
  },
  "system.ui.lib.wifi_manager.WifiManagerWrapper._run_coroutine_sync": {
    "id": "system.ui.lib.wifi_manager.WifiManagerWrapper._run_coroutine_sync",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\wifi_manager.py",
    "relative_path": "system\\ui\\lib\\wifi_manager.py",
    "depends_on": [
      "system.ui.lib.wifi_manager.WifiManager"
    ],
    "start_line": 693,
    "end_line": 710,
    "has_docstring": true,
    "docstring": "Run a function synchronously in the async thread.",
    "language": "python"
  },
  "system.ui.lib.window.RendererProtocol": {
    "id": "system.ui.lib.window.RendererProtocol",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\window.py",
    "relative_path": "system\\ui\\lib\\window.py",
    "depends_on": [],
    "start_line": 9,
    "end_line": 10,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.window.RendererProtocol.render": {
    "id": "system.ui.lib.window.RendererProtocol.render",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\window.py",
    "relative_path": "system\\ui\\lib\\window.py",
    "depends_on": [],
    "start_line": 10,
    "end_line": 10,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.window.BaseWindow": {
    "id": "system.ui.lib.window.BaseWindow",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\window.py",
    "relative_path": "system\\ui\\lib\\window.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 58,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.window.BaseWindow.__init__": {
    "id": "system.ui.lib.window.BaseWindow.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\window.py",
    "relative_path": "system\\ui\\lib\\window.py",
    "depends_on": [],
    "start_line": 17,
    "end_line": 26,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.window.BaseWindow._create_renderer": {
    "id": "system.ui.lib.window.BaseWindow._create_renderer",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\window.py",
    "relative_path": "system\\ui\\lib\\window.py",
    "depends_on": [],
    "start_line": 28,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.window.BaseWindow._run": {
    "id": "system.ui.lib.window.BaseWindow._run",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\window.py",
    "relative_path": "system\\ui\\lib\\window.py",
    "depends_on": [],
    "start_line": 31,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.window.BaseWindow.__enter__": {
    "id": "system.ui.lib.window.BaseWindow.__enter__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\window.py",
    "relative_path": "system\\ui\\lib\\window.py",
    "depends_on": [],
    "start_line": 44,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.window.BaseWindow.close": {
    "id": "system.ui.lib.window.BaseWindow.close",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\window.py",
    "relative_path": "system\\ui\\lib\\window.py",
    "depends_on": [],
    "start_line": 47,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.window.BaseWindow.__del__": {
    "id": "system.ui.lib.window.BaseWindow.__del__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\window.py",
    "relative_path": "system\\ui\\lib\\window.py",
    "depends_on": [],
    "start_line": 54,
    "end_line": 55,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.lib.window.BaseWindow.__exit__": {
    "id": "system.ui.lib.window.BaseWindow.__exit__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\lib\\window.py",
    "relative_path": "system\\ui\\lib\\window.py",
    "depends_on": [],
    "start_line": 57,
    "end_line": 58,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.cameraview.CameraView": {
    "id": "system.ui.widgets.cameraview.CameraView",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\cameraview.py",
    "relative_path": "system\\ui\\widgets\\cameraview.py",
    "depends_on": [],
    "start_line": 15,
    "end_line": 72,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.cameraview.CameraView.__init__": {
    "id": "system.ui.widgets.cameraview.CameraView.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\cameraview.py",
    "relative_path": "system\\ui\\widgets\\cameraview.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 21,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.cameraview.CameraView.close": {
    "id": "system.ui.widgets.cameraview.CameraView.close",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\cameraview.py",
    "relative_path": "system\\ui\\widgets\\cameraview.py",
    "depends_on": [],
    "start_line": 23,
    "end_line": 26,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.cameraview.CameraView.render": {
    "id": "system.ui.widgets.cameraview.CameraView.render",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\cameraview.py",
    "relative_path": "system\\ui\\widgets\\cameraview.py",
    "depends_on": [],
    "start_line": 28,
    "end_line": 53,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.cameraview.CameraView._ensure_connection": {
    "id": "system.ui.widgets.cameraview.CameraView._ensure_connection",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\cameraview.py",
    "relative_path": "system\\ui\\widgets\\cameraview.py",
    "depends_on": [],
    "start_line": 55,
    "end_line": 66,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.cameraview.CameraView._clear_textures": {
    "id": "system.ui.widgets.cameraview.CameraView._clear_textures",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\cameraview.py",
    "relative_path": "system\\ui\\widgets\\cameraview.py",
    "depends_on": [],
    "start_line": 68,
    "end_line": 72,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.confirm_dialog.confirm_dialog": {
    "id": "system.ui.widgets.confirm_dialog.confirm_dialog",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\confirm_dialog.py",
    "relative_path": "system\\ui\\widgets\\confirm_dialog.py",
    "depends_on": [],
    "start_line": 15,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.keyboard.Keyboard": {
    "id": "system.ui.widgets.keyboard.Keyboard",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\keyboard.py",
    "relative_path": "system\\ui\\widgets\\keyboard.py",
    "depends_on": [],
    "start_line": 47,
    "end_line": 159,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.keyboard.Keyboard.__init__": {
    "id": "system.ui.widgets.keyboard.Keyboard.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\keyboard.py",
    "relative_path": "system\\ui\\widgets\\keyboard.py",
    "depends_on": [],
    "start_line": 48,
    "end_line": 62,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.keyboard.Keyboard.text": {
    "id": "system.ui.widgets.keyboard.Keyboard.text",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\keyboard.py",
    "relative_path": "system\\ui\\widgets\\keyboard.py",
    "depends_on": [],
    "start_line": 65,
    "end_line": 66,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.keyboard.Keyboard.clear": {
    "id": "system.ui.widgets.keyboard.Keyboard.clear",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\keyboard.py",
    "relative_path": "system\\ui\\widgets\\keyboard.py",
    "depends_on": [],
    "start_line": 68,
    "end_line": 69,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.keyboard.Keyboard.render": {
    "id": "system.ui.widgets.keyboard.Keyboard.render",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\keyboard.py",
    "relative_path": "system\\ui\\widgets\\keyboard.py",
    "depends_on": [],
    "start_line": 71,
    "end_line": 116,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.keyboard.Keyboard._render_input_area": {
    "id": "system.ui.widgets.keyboard.Keyboard._render_input_area",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\keyboard.py",
    "relative_path": "system\\ui\\widgets\\keyboard.py",
    "depends_on": [],
    "start_line": 118,
    "end_line": 145,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.keyboard.Keyboard.handle_key_press": {
    "id": "system.ui.widgets.keyboard.Keyboard.handle_key_press",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\keyboard.py",
    "relative_path": "system\\ui\\widgets\\keyboard.py",
    "depends_on": [],
    "start_line": 147,
    "end_line": 159,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.network.StateIdle": {
    "id": "system.ui.widgets.network.StateIdle",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\network.py",
    "relative_path": "system\\ui\\widgets\\network.py",
    "depends_on": [],
    "start_line": 27,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.network.StateConnecting": {
    "id": "system.ui.widgets.network.StateConnecting",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\network.py",
    "relative_path": "system\\ui\\widgets\\network.py",
    "depends_on": [],
    "start_line": 31,
    "end_line": 33,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.network.StateNeedsAuth": {
    "id": "system.ui.widgets.network.StateNeedsAuth",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\network.py",
    "relative_path": "system\\ui\\widgets\\network.py",
    "depends_on": [],
    "start_line": 36,
    "end_line": 38,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.network.StateShowForgetConfirm": {
    "id": "system.ui.widgets.network.StateShowForgetConfirm",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\network.py",
    "relative_path": "system\\ui\\widgets\\network.py",
    "depends_on": [],
    "start_line": 41,
    "end_line": 43,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.network.StateForgetting": {
    "id": "system.ui.widgets.network.StateForgetting",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\network.py",
    "relative_path": "system\\ui\\widgets\\network.py",
    "depends_on": [],
    "start_line": 46,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.network.WifiManagerUI": {
    "id": "system.ui.widgets.network.WifiManagerUI",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\network.py",
    "relative_path": "system\\ui\\widgets\\network.py",
    "depends_on": [
      "system.ui.widgets.network.StateShowForgetConfirm",
      "system.ui.widgets.network.StateIdle",
      "system.ui.widgets.network.StateNeedsAuth",
      "system.ui.widgets.network.StateConnecting",
      "system.ui.widgets.network.StateForgetting"
    ],
    "start_line": 53,
    "end_line": 208,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.network.WifiManagerUI.__init__": {
    "id": "system.ui.widgets.network.WifiManagerUI.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\network.py",
    "relative_path": "system\\ui\\widgets\\network.py",
    "depends_on": [
      "system.ui.widgets.network.StateIdle"
    ],
    "start_line": 54,
    "end_line": 65,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.network.WifiManagerUI.render": {
    "id": "system.ui.widgets.network.WifiManagerUI.render",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\network.py",
    "relative_path": "system\\ui\\widgets\\network.py",
    "depends_on": [
      "system.ui.widgets.network.StateIdle",
      "system.ui.widgets.network.StateNeedsAuth",
      "system.ui.widgets.network.StateShowForgetConfirm"
    ],
    "start_line": 67,
    "end_line": 92,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.network.WifiManagerUI.require_full_screen": {
    "id": "system.ui.widgets.network.WifiManagerUI.require_full_screen",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\network.py",
    "relative_path": "system\\ui\\widgets\\network.py",
    "depends_on": [
      "system.ui.widgets.network.StateNeedsAuth",
      "system.ui.widgets.network.StateShowForgetConfirm"
    ],
    "start_line": 95,
    "end_line": 97,
    "has_docstring": true,
    "docstring": "Check if the WiFi UI requires exclusive full-screen rendering.",
    "language": "python"
  },
  "system.ui.widgets.network.WifiManagerUI._draw_network_list": {
    "id": "system.ui.widgets.network.WifiManagerUI._draw_network_list",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\network.py",
    "relative_path": "system\\ui\\widgets\\network.py",
    "depends_on": [],
    "start_line": 99,
    "end_line": 116,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.network.WifiManagerUI._draw_network_item": {
    "id": "system.ui.widgets.network.WifiManagerUI._draw_network_item",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\network.py",
    "relative_path": "system\\ui\\widgets\\network.py",
    "depends_on": [
      "system.ui.widgets.network.StateShowForgetConfirm",
      "system.ui.widgets.network.StateIdle",
      "system.ui.widgets.network.StateNeedsAuth",
      "system.ui.widgets.network.StateConnecting",
      "system.ui.widgets.network.StateForgetting"
    ],
    "start_line": 118,
    "end_line": 156,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.network.WifiManagerUI._draw_status_icon": {
    "id": "system.ui.widgets.network.WifiManagerUI._draw_status_icon",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\network.py",
    "relative_path": "system\\ui\\widgets\\network.py",
    "depends_on": [],
    "start_line": 158,
    "end_line": 170,
    "has_docstring": true,
    "docstring": "Draw the status icon based on network's connection state",
    "language": "python"
  },
  "system.ui.widgets.network.WifiManagerUI._draw_signal_strength_icon": {
    "id": "system.ui.widgets.network.WifiManagerUI._draw_signal_strength_icon",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\network.py",
    "relative_path": "system\\ui\\widgets\\network.py",
    "depends_on": [],
    "start_line": 172,
    "end_line": 175,
    "has_docstring": true,
    "docstring": "Draw the Wi-Fi signal strength icon based on network's signal strength",
    "language": "python"
  },
  "system.ui.widgets.network.WifiManagerUI.connect_to_network": {
    "id": "system.ui.widgets.network.WifiManagerUI.connect_to_network",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\network.py",
    "relative_path": "system\\ui\\widgets\\network.py",
    "depends_on": [
      "system.ui.widgets.network.StateConnecting"
    ],
    "start_line": 177,
    "end_line": 182,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.network.WifiManagerUI.forget_network": {
    "id": "system.ui.widgets.network.WifiManagerUI.forget_network",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\network.py",
    "relative_path": "system\\ui\\widgets\\network.py",
    "depends_on": [
      "system.ui.widgets.network.StateForgetting"
    ],
    "start_line": 184,
    "end_line": 187,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.network.WifiManagerUI._on_network_updated": {
    "id": "system.ui.widgets.network.WifiManagerUI._on_network_updated",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\network.py",
    "relative_path": "system\\ui\\widgets\\network.py",
    "depends_on": [],
    "start_line": 189,
    "end_line": 190,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.network.WifiManagerUI._on_need_auth": {
    "id": "system.ui.widgets.network.WifiManagerUI._on_need_auth",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\network.py",
    "relative_path": "system\\ui\\widgets\\network.py",
    "depends_on": [
      "system.ui.widgets.network.StateConnecting",
      "system.ui.widgets.network.StateNeedsAuth"
    ],
    "start_line": 192,
    "end_line": 200,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.network.WifiManagerUI._on_activated": {
    "id": "system.ui.widgets.network.WifiManagerUI._on_activated",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\network.py",
    "relative_path": "system\\ui\\widgets\\network.py",
    "depends_on": [
      "system.ui.widgets.network.StateConnecting",
      "system.ui.widgets.network.StateIdle"
    ],
    "start_line": 202,
    "end_line": 204,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.network.WifiManagerUI._on_forgotten": {
    "id": "system.ui.widgets.network.WifiManagerUI._on_forgotten",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\network.py",
    "relative_path": "system\\ui\\widgets\\network.py",
    "depends_on": [
      "system.ui.widgets.network.StateIdle",
      "system.ui.widgets.network.StateForgetting"
    ],
    "start_line": 206,
    "end_line": 208,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.network.main": {
    "id": "system.ui.widgets.network.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\network.py",
    "relative_path": "system\\ui\\widgets\\network.py",
    "depends_on": [
      "system.ui.widgets.network.WifiManagerUI"
    ],
    "start_line": 211,
    "end_line": 220,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.option_dialog.MultiOptionDialog": {
    "id": "system.ui.widgets.option_dialog.MultiOptionDialog",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\option_dialog.py",
    "relative_path": "system\\ui\\widgets\\option_dialog.py",
    "depends_on": [],
    "start_line": 8,
    "end_line": 67,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.option_dialog.MultiOptionDialog.__init__": {
    "id": "system.ui.widgets.option_dialog.MultiOptionDialog.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\option_dialog.py",
    "relative_path": "system\\ui\\widgets\\option_dialog.py",
    "depends_on": [],
    "start_line": 9,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.option_dialog.MultiOptionDialog.selection": {
    "id": "system.ui.widgets.option_dialog.MultiOptionDialog.selection",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\option_dialog.py",
    "relative_path": "system\\ui\\widgets\\option_dialog.py",
    "depends_on": [],
    "start_line": 19,
    "end_line": 20,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.ui.widgets.option_dialog.MultiOptionDialog.render": {
    "id": "system.ui.widgets.option_dialog.MultiOptionDialog.render",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\ui\\widgets\\option_dialog.py",
    "relative_path": "system\\ui\\widgets\\option_dialog.py",
    "depends_on": [],
    "start_line": 22,
    "end_line": 67,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.common.get_consistent_flag": {
    "id": "system.updated.common.get_consistent_flag",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\common.py",
    "relative_path": "system\\updated\\common.py",
    "depends_on": [],
    "start_line": 5,
    "end_line": 7,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.common.set_consistent_flag": {
    "id": "system.updated.common.set_consistent_flag",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\common.py",
    "relative_path": "system\\updated\\common.py",
    "depends_on": [],
    "start_line": 9,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.UserRequest": {
    "id": "system.updated.updated.UserRequest",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [],
    "start_line": 37,
    "end_line": 40,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.WaitTimeHelper": {
    "id": "system.updated.updated.WaitTimeHelper",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [
      "system.updated.updated.UserRequest"
    ],
    "start_line": 42,
    "end_line": 60,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.WaitTimeHelper.__init__": {
    "id": "system.updated.updated.WaitTimeHelper.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [
      "system.updated.updated.UserRequest"
    ],
    "start_line": 43,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.WaitTimeHelper.update_now": {
    "id": "system.updated.updated.WaitTimeHelper.update_now",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [
      "system.updated.updated.UserRequest"
    ],
    "start_line": 49,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.WaitTimeHelper.check_now": {
    "id": "system.updated.updated.WaitTimeHelper.check_now",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [
      "system.updated.updated.UserRequest"
    ],
    "start_line": 54,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.WaitTimeHelper.sleep": {
    "id": "system.updated.updated.WaitTimeHelper.sleep",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [],
    "start_line": 59,
    "end_line": 60,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.write_time_to_param": {
    "id": "system.updated.updated.write_time_to_param",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [],
    "start_line": 62,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.read_time_from_param": {
    "id": "system.updated.updated.read_time_from_param",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [],
    "start_line": 66,
    "end_line": 72,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.run": {
    "id": "system.updated.updated.run",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [],
    "start_line": 74,
    "end_line": 75,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.set_consistent_flag": {
    "id": "system.updated.updated.set_consistent_flag",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [],
    "start_line": 78,
    "end_line": 85,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.parse_release_notes": {
    "id": "system.updated.updated.parse_release_notes",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [],
    "start_line": 87,
    "end_line": 99,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.setup_git_options": {
    "id": "system.updated.updated.setup_git_options",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [
      "system.updated.updated.run"
    ],
    "start_line": 101,
    "end_line": 121,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.dismount_overlay": {
    "id": "system.updated.updated.dismount_overlay",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [
      "system.updated.updated.run"
    ],
    "start_line": 124,
    "end_line": 127,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.init_overlay": {
    "id": "system.updated.updated.init_overlay",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [
      "system.updated.updated.dismount_overlay",
      "system.updated.updated.run",
      "system.updated.updated.set_consistent_flag"
    ],
    "start_line": 130,
    "end_line": 177,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.finalize_update": {
    "id": "system.updated.updated.finalize_update",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [
      "system.updated.updated.run",
      "system.updated.updated.set_consistent_flag"
    ],
    "start_line": 180,
    "end_line": 206,
    "has_docstring": true,
    "docstring": "Take the current OverlayFS merged view and finalize a copy outside of\n  OverlayFS, ready to be swapped-in at BASEDIR. Copy using shutil.copytree",
    "language": "python"
  },
  "system.updated.updated.handle_agnos_update": {
    "id": "system.updated.updated.handle_agnos_update",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [
      "system.updated.updated.run",
      "system.updated.updated.set_consistent_flag"
    ],
    "start_line": 209,
    "end_line": 229,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.Updater": {
    "id": "system.updated.updated.Updater",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [
      "system.updated.updated.read_time_from_param",
      "system.updated.updated.handle_agnos_update",
      "system.updated.updated.setup_git_options",
      "system.updated.updated.finalize_update",
      "system.updated.updated.parse_release_notes",
      "system.updated.updated.run",
      "system.updated.updated.set_consistent_flag",
      "system.updated.updated.write_time_to_param"
    ],
    "start_line": 233,
    "end_line": 406,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.Updater.__init__": {
    "id": "system.updated.updated.Updater.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [],
    "start_line": 234,
    "end_line": 237,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.Updater.has_internet": {
    "id": "system.updated.updated.Updater.has_internet",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [],
    "start_line": 240,
    "end_line": 241,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.Updater.target_branch": {
    "id": "system.updated.updated.Updater.target_branch",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [],
    "start_line": 244,
    "end_line": 248,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.Updater.update_ready": {
    "id": "system.updated.updated.Updater.update_ready",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [],
    "start_line": 251,
    "end_line": 258,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.Updater.update_available": {
    "id": "system.updated.updated.Updater.update_available",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [],
    "start_line": 261,
    "end_line": 266,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.Updater.get_branch": {
    "id": "system.updated.updated.Updater.get_branch",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [
      "system.updated.updated.run"
    ],
    "start_line": 268,
    "end_line": 269,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.Updater.get_commit_hash": {
    "id": "system.updated.updated.Updater.get_commit_hash",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [
      "system.updated.updated.run"
    ],
    "start_line": 271,
    "end_line": 272,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.Updater.set_params": {
    "id": "system.updated.updated.Updater.set_params",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [
      "system.updated.updated.read_time_from_param",
      "system.updated.updated.write_time_to_param",
      "system.updated.updated.parse_release_notes",
      "system.updated.updated.run"
    ],
    "start_line": 274,
    "end_line": 340,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.Updater.check_for_update": {
    "id": "system.updated.updated.Updater.check_for_update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [
      "system.updated.updated.run",
      "system.updated.updated.setup_git_options"
    ],
    "start_line": 342,
    "end_line": 370,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.Updater.fetch_update": {
    "id": "system.updated.updated.Updater.fetch_update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [
      "system.updated.updated.handle_agnos_update",
      "system.updated.updated.setup_git_options",
      "system.updated.updated.finalize_update",
      "system.updated.updated.run",
      "system.updated.updated.set_consistent_flag"
    ],
    "start_line": 372,
    "end_line": 406,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.updated.main": {
    "id": "system.updated.updated.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\updated.py",
    "relative_path": "system\\updated\\updated.py",
    "depends_on": [
      "system.updated.updated.Updater",
      "system.updated.updated.read_time_from_param",
      "system.updated.updated.WaitTimeHelper",
      "system.updated.updated.set_consistent_flag",
      "system.updated.updated.write_time_to_param",
      "system.updated.updated.UserRequest",
      "system.updated.updated.init_overlay"
    ],
    "start_line": 409,
    "end_line": 505,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.casync.ChunkReader": {
    "id": "system.updated.casync.casync.ChunkReader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\casync.py",
    "relative_path": "system\\updated\\casync\\casync.py",
    "depends_on": [],
    "start_line": 38,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.casync.ChunkReader.read": {
    "id": "system.updated.casync.casync.ChunkReader.read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\casync.py",
    "relative_path": "system\\updated\\casync\\casync.py",
    "depends_on": [],
    "start_line": 40,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.casync.BinaryChunkReader": {
    "id": "system.updated.casync.casync.BinaryChunkReader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\casync.py",
    "relative_path": "system\\updated\\casync\\casync.py",
    "depends_on": [
      "system.updated.casync.casync.ChunkReader"
    ],
    "start_line": 44,
    "end_line": 52,
    "has_docstring": true,
    "docstring": "Reads chunks from a local file",
    "language": "python"
  },
  "system.updated.casync.casync.BinaryChunkReader.__init__": {
    "id": "system.updated.casync.casync.BinaryChunkReader.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\casync.py",
    "relative_path": "system\\updated\\casync\\casync.py",
    "depends_on": [],
    "start_line": 46,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.casync.BinaryChunkReader.read": {
    "id": "system.updated.casync.casync.BinaryChunkReader.read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\casync.py",
    "relative_path": "system\\updated\\casync\\casync.py",
    "depends_on": [],
    "start_line": 50,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.casync.FileChunkReader": {
    "id": "system.updated.casync.casync.FileChunkReader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\casync.py",
    "relative_path": "system\\updated\\casync\\casync.py",
    "depends_on": [
      "system.updated.casync.casync.BinaryChunkReader"
    ],
    "start_line": 55,
    "end_line": 60,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.casync.FileChunkReader.__init__": {
    "id": "system.updated.casync.casync.FileChunkReader.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\casync.py",
    "relative_path": "system\\updated\\casync\\casync.py",
    "depends_on": [],
    "start_line": 56,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.casync.FileChunkReader.__del__": {
    "id": "system.updated.casync.casync.FileChunkReader.__del__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\casync.py",
    "relative_path": "system\\updated\\casync\\casync.py",
    "depends_on": [],
    "start_line": 59,
    "end_line": 60,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.casync.RemoteChunkReader": {
    "id": "system.updated.casync.casync.RemoteChunkReader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\casync.py",
    "relative_path": "system\\updated\\casync\\casync.py",
    "depends_on": [
      "system.updated.casync.casync.ChunkReader"
    ],
    "start_line": 63,
    "end_line": 92,
    "has_docstring": true,
    "docstring": "Reads lzma compressed chunks from a remote store",
    "language": "python"
  },
  "system.updated.casync.casync.RemoteChunkReader.__init__": {
    "id": "system.updated.casync.casync.RemoteChunkReader.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\casync.py",
    "relative_path": "system\\updated\\casync\\casync.py",
    "depends_on": [],
    "start_line": 66,
    "end_line": 69,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.casync.RemoteChunkReader.read": {
    "id": "system.updated.casync.casync.RemoteChunkReader.read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\casync.py",
    "relative_path": "system\\updated\\casync\\casync.py",
    "depends_on": [],
    "start_line": 71,
    "end_line": 92,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.casync.DirectoryTarChunkReader": {
    "id": "system.updated.casync.casync.DirectoryTarChunkReader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\casync.py",
    "relative_path": "system\\updated\\casync\\casync.py",
    "depends_on": [
      "system.updated.casync.casync.BinaryChunkReader"
    ],
    "start_line": 95,
    "end_line": 106,
    "has_docstring": true,
    "docstring": "creates a tar archive of a directory and reads chunks from it",
    "language": "python"
  },
  "system.updated.casync.casync.DirectoryTarChunkReader.__init__": {
    "id": "system.updated.casync.casync.DirectoryTarChunkReader.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\casync.py",
    "relative_path": "system\\updated\\casync\\casync.py",
    "depends_on": [],
    "start_line": 98,
    "end_line": 102,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.casync.DirectoryTarChunkReader.__del__": {
    "id": "system.updated.casync.casync.DirectoryTarChunkReader.__del__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\casync.py",
    "relative_path": "system\\updated\\casync\\casync.py",
    "depends_on": [],
    "start_line": 104,
    "end_line": 106,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.casync.parse_caibx": {
    "id": "system.updated.casync.casync.parse_caibx",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\casync.py",
    "relative_path": "system\\updated\\casync\\casync.py",
    "depends_on": [],
    "start_line": 109,
    "end_line": 155,
    "has_docstring": true,
    "docstring": "Parses the chunks from a caibx file. Can handle both local and remote files.\n  Returns a list of chunks with hash, offset and length",
    "language": "python"
  },
  "system.updated.casync.casync.build_chunk_dict": {
    "id": "system.updated.casync.casync.build_chunk_dict",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\casync.py",
    "relative_path": "system\\updated\\casync\\casync.py",
    "depends_on": [],
    "start_line": 158,
    "end_line": 165,
    "has_docstring": true,
    "docstring": "Turn a list of chunks into a dict for faster lookups based on hash.\n  Keep first chunk since it's more likely to be already downloaded.",
    "language": "python"
  },
  "system.updated.casync.casync.extract": {
    "id": "system.updated.casync.casync.extract",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\casync.py",
    "relative_path": "system\\updated\\casync\\casync.py",
    "depends_on": [
      "system.updated.casync.casync.ChunkReader"
    ],
    "start_line": 168,
    "end_line": 204,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.casync.extract_directory": {
    "id": "system.updated.casync.casync.extract_directory",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\casync.py",
    "relative_path": "system\\updated\\casync\\casync.py",
    "depends_on": [
      "system.updated.casync.casync.extract",
      "system.updated.casync.casync.ChunkReader"
    ],
    "start_line": 207,
    "end_line": 219,
    "has_docstring": true,
    "docstring": "extract a directory stored as a casync tar archive",
    "language": "python"
  },
  "system.updated.casync.casync.print_stats": {
    "id": "system.updated.casync.casync.print_stats",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\casync.py",
    "relative_path": "system\\updated\\casync\\casync.py",
    "depends_on": [],
    "start_line": 222,
    "end_line": 226,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.casync.extract_simple": {
    "id": "system.updated.casync.casync.extract_simple",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\casync.py",
    "relative_path": "system\\updated\\casync\\casync.py",
    "depends_on": [
      "system.updated.casync.casync.FileChunkReader",
      "system.updated.casync.casync.parse_caibx",
      "system.updated.casync.casync.extract",
      "system.updated.casync.casync.build_chunk_dict"
    ],
    "start_line": 229,
    "end_line": 237,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.common.run": {
    "id": "system.updated.casync.common.run",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\common.py",
    "relative_path": "system\\updated\\casync\\common.py",
    "depends_on": [],
    "start_line": 14,
    "end_line": 15,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.common.get_exclude_set": {
    "id": "system.updated.casync.common.get_exclude_set",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\common.py",
    "relative_path": "system\\updated\\casync\\common.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.common.create_build_metadata_file": {
    "id": "system.updated.casync.common.create_build_metadata_file",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\common.py",
    "relative_path": "system\\updated\\casync\\common.py",
    "depends_on": [],
    "start_line": 32,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.common.is_not_git": {
    "id": "system.updated.casync.common.is_not_git",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\common.py",
    "relative_path": "system\\updated\\casync\\common.py",
    "depends_on": [],
    "start_line": 40,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.common.create_casync_tar_package": {
    "id": "system.updated.casync.common.create_casync_tar_package",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\common.py",
    "relative_path": "system\\updated\\casync\\common.py",
    "depends_on": [
      "system.updated.casync.common.is_not_git"
    ],
    "start_line": 44,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.common.create_casync_from_file": {
    "id": "system.updated.casync.common.create_casync_from_file",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\common.py",
    "relative_path": "system\\updated\\casync\\common.py",
    "depends_on": [
      "system.updated.casync.common.run"
    ],
    "start_line": 48,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.common.create_casync_release": {
    "id": "system.updated.casync.common.create_casync_release",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\common.py",
    "relative_path": "system\\updated\\casync\\common.py",
    "depends_on": [
      "system.updated.casync.common.create_casync_tar_package",
      "system.updated.casync.common.run",
      "system.updated.casync.common.create_casync_from_file"
    ],
    "start_line": 55,
    "end_line": 61,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.tar.include_default": {
    "id": "system.updated.casync.tar.include_default",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tar.py",
    "relative_path": "system\\updated\\casync\\tar.py",
    "depends_on": [],
    "start_line": 7,
    "end_line": 8,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.tar.create_tar_archive": {
    "id": "system.updated.casync.tar.create_tar_archive",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tar.py",
    "relative_path": "system\\updated\\casync\\tar.py",
    "depends_on": [
      "system.updated.casync.tar.include_default"
    ],
    "start_line": 11,
    "end_line": 31,
    "has_docstring": true,
    "docstring": "Creates a tar archive of a directory",
    "language": "python"
  },
  "system.updated.casync.tar.extract_tar_archive": {
    "id": "system.updated.casync.tar.extract_tar_archive",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tar.py",
    "relative_path": "system\\updated\\casync\\tar.py",
    "depends_on": [],
    "start_line": 34,
    "end_line": 39,
    "has_docstring": true,
    "docstring": "Extracts a tar archive to a directory",
    "language": "python"
  },
  "system.updated.casync.tests.test_casync.TestCasync": {
    "id": "system.updated.casync.tests.test_casync.TestCasync",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tests\\test_casync.py",
    "relative_path": "system\\updated\\casync\\tests\\test_casync.py",
    "depends_on": [],
    "start_line": 17,
    "end_line": 151,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.tests.test_casync.TestCasync.setup_class": {
    "id": "system.updated.casync.tests.test_casync.TestCasync.setup_class",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tests\\test_casync.py",
    "relative_path": "system\\updated\\casync\\tests\\test_casync.py",
    "depends_on": [],
    "start_line": 19,
    "end_line": 44,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.tests.test_casync.TestCasync.setup_method": {
    "id": "system.updated.casync.tests.test_casync.TestCasync.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tests\\test_casync.py",
    "relative_path": "system\\updated\\casync\\tests\\test_casync.py",
    "depends_on": [],
    "start_line": 46,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.tests.test_casync.TestCasync.teardown_method": {
    "id": "system.updated.casync.tests.test_casync.TestCasync.teardown_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tests\\test_casync.py",
    "relative_path": "system\\updated\\casync\\tests\\test_casync.py",
    "depends_on": [],
    "start_line": 56,
    "end_line": 61,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.tests.test_casync.TestCasync.test_simple_extract": {
    "id": "system.updated.casync.tests.test_casync.TestCasync.test_simple_extract",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tests\\test_casync.py",
    "relative_path": "system\\updated\\casync\\tests\\test_casync.py",
    "depends_on": [],
    "start_line": 63,
    "end_line": 72,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.tests.test_casync.TestCasync.test_seed": {
    "id": "system.updated.casync.tests.test_casync.TestCasync.test_seed",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tests\\test_casync.py",
    "relative_path": "system\\updated\\casync\\tests\\test_casync.py",
    "depends_on": [],
    "start_line": 74,
    "end_line": 89,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.tests.test_casync.TestCasync.test_already_done": {
    "id": "system.updated.casync.tests.test_casync.TestCasync.test_already_done",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tests\\test_casync.py",
    "relative_path": "system\\updated\\casync\\tests\\test_casync.py",
    "depends_on": [],
    "start_line": 91,
    "end_line": 106,
    "has_docstring": true,
    "docstring": "Test that an already flashed target doesn't download any chunks",
    "language": "python"
  },
  "system.updated.casync.tests.test_casync.TestCasync.test_chunk_reuse": {
    "id": "system.updated.casync.tests.test_casync.TestCasync.test_chunk_reuse",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tests\\test_casync.py",
    "relative_path": "system\\updated\\casync\\tests\\test_casync.py",
    "depends_on": [],
    "start_line": 108,
    "end_line": 124,
    "has_docstring": true,
    "docstring": "Test that chunks that are reused are only downloaded once",
    "language": "python"
  },
  "system.updated.casync.tests.test_casync.TestCasync.test_lo_simple_extract": {
    "id": "system.updated.casync.tests.test_casync.TestCasync.test_lo_simple_extract",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tests\\test_casync.py",
    "relative_path": "system\\updated\\casync\\tests\\test_casync.py",
    "depends_on": [],
    "start_line": 127,
    "end_line": 136,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.tests.test_casync.TestCasync.test_lo_chunk_reuse": {
    "id": "system.updated.casync.tests.test_casync.TestCasync.test_lo_chunk_reuse",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tests\\test_casync.py",
    "relative_path": "system\\updated\\casync\\tests\\test_casync.py",
    "depends_on": [],
    "start_line": 139,
    "end_line": 151,
    "has_docstring": true,
    "docstring": "Test that chunks that are reused are only downloaded once",
    "language": "python"
  },
  "system.updated.casync.tests.test_casync.TestCasyncDirectory": {
    "id": "system.updated.casync.tests.test_casync.TestCasyncDirectory",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tests\\test_casync.py",
    "relative_path": "system\\updated\\casync\\tests\\test_casync.py",
    "depends_on": [],
    "start_line": 155,
    "end_line": 264,
    "has_docstring": true,
    "docstring": "Tests extracting a directory stored as a casync tar archive",
    "language": "python"
  },
  "system.updated.casync.tests.test_casync.TestCasyncDirectory.setup_cache": {
    "id": "system.updated.casync.tests.test_casync.TestCasyncDirectory.setup_cache",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tests\\test_casync.py",
    "relative_path": "system\\updated\\casync\\tests\\test_casync.py",
    "depends_on": [],
    "start_line": 161,
    "end_line": 175,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.tests.test_casync.TestCasyncDirectory.setup_class": {
    "id": "system.updated.casync.tests.test_casync.TestCasyncDirectory.setup_class",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tests\\test_casync.py",
    "relative_path": "system\\updated\\casync\\tests\\test_casync.py",
    "depends_on": [],
    "start_line": 178,
    "end_line": 191,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.tests.test_casync.TestCasyncDirectory.teardown_class": {
    "id": "system.updated.casync.tests.test_casync.TestCasyncDirectory.teardown_class",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tests\\test_casync.py",
    "relative_path": "system\\updated\\casync\\tests\\test_casync.py",
    "depends_on": [],
    "start_line": 194,
    "end_line": 196,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.tests.test_casync.TestCasyncDirectory.setup_method": {
    "id": "system.updated.casync.tests.test_casync.TestCasyncDirectory.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tests\\test_casync.py",
    "relative_path": "system\\updated\\casync\\tests\\test_casync.py",
    "depends_on": [],
    "start_line": 198,
    "end_line": 201,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.tests.test_casync.TestCasyncDirectory.teardown_method": {
    "id": "system.updated.casync.tests.test_casync.TestCasyncDirectory.teardown_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tests\\test_casync.py",
    "relative_path": "system\\updated\\casync\\tests\\test_casync.py",
    "depends_on": [],
    "start_line": 203,
    "end_line": 206,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.tests.test_casync.TestCasyncDirectory.run_test": {
    "id": "system.updated.casync.tests.test_casync.TestCasyncDirectory.run_test",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tests\\test_casync.py",
    "relative_path": "system\\updated\\casync\\tests\\test_casync.py",
    "depends_on": [],
    "start_line": 208,
    "end_line": 226,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.tests.test_casync.TestCasyncDirectory.test_no_cache": {
    "id": "system.updated.casync.tests.test_casync.TestCasyncDirectory.test_no_cache",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tests\\test_casync.py",
    "relative_path": "system\\updated\\casync\\tests\\test_casync.py",
    "depends_on": [],
    "start_line": 228,
    "end_line": 232,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.tests.test_casync.TestCasyncDirectory.test_full_cache": {
    "id": "system.updated.casync.tests.test_casync.TestCasyncDirectory.test_full_cache",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tests\\test_casync.py",
    "relative_path": "system\\updated\\casync\\tests\\test_casync.py",
    "depends_on": [],
    "start_line": 234,
    "end_line": 238,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.tests.test_casync.TestCasyncDirectory.test_one_file_cache": {
    "id": "system.updated.casync.tests.test_casync.TestCasyncDirectory.test_one_file_cache",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tests\\test_casync.py",
    "relative_path": "system\\updated\\casync\\tests\\test_casync.py",
    "depends_on": [],
    "start_line": 240,
    "end_line": 245,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.tests.test_casync.TestCasyncDirectory.test_one_file_incorrect_cache": {
    "id": "system.updated.casync.tests.test_casync.TestCasyncDirectory.test_one_file_incorrect_cache",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tests\\test_casync.py",
    "relative_path": "system\\updated\\casync\\tests\\test_casync.py",
    "depends_on": [],
    "start_line": 247,
    "end_line": 255,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.casync.tests.test_casync.TestCasyncDirectory.test_one_file_missing_cache": {
    "id": "system.updated.casync.tests.test_casync.TestCasyncDirectory.test_one_file_missing_cache",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\casync\\tests\\test_casync.py",
    "relative_path": "system\\updated\\casync\\tests\\test_casync.py",
    "depends_on": [],
    "start_line": 257,
    "end_line": 264,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.get_consistent_flag": {
    "id": "system.updated.tests.test_base.get_consistent_flag",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.run": {
    "id": "system.updated.tests.test_base.run",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.update_release": {
    "id": "system.updated.tests.test_base.update_release",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [],
    "start_line": 25,
    "end_line": 43,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.get_version": {
    "id": "system.updated.tests.test_base.get_version",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [],
    "start_line": 46,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.TestBaseUpdate": {
    "id": "system.updated.tests.test_base.TestBaseUpdate",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [
      "system.updated.tests.test_base.get_version",
      "system.updated.tests.test_base.get_consistent_flag",
      "system.updated.tests.test_base.run"
    ],
    "start_line": 52,
    "end_line": 131,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.TestBaseUpdate.setup_class": {
    "id": "system.updated.tests.test_base.TestBaseUpdate.setup_class",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [],
    "start_line": 54,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.TestBaseUpdate.setup_method": {
    "id": "system.updated.tests.test_base.TestBaseUpdate.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [
      "system.updated.tests.test_base.run"
    ],
    "start_line": 58,
    "end_line": 82,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.TestBaseUpdate.mock_basedir": {
    "id": "system.updated.tests.test_base.TestBaseUpdate.mock_basedir",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [],
    "start_line": 85,
    "end_line": 86,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.TestBaseUpdate.set_target_branch": {
    "id": "system.updated.tests.test_base.TestBaseUpdate.set_target_branch",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [],
    "start_line": 88,
    "end_line": 89,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.TestBaseUpdate.setup_basedir_release": {
    "id": "system.updated.tests.test_base.TestBaseUpdate.setup_basedir_release",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [],
    "start_line": 91,
    "end_line": 93,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.TestBaseUpdate.update_remote_release": {
    "id": "system.updated.tests.test_base.TestBaseUpdate.update_remote_release",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [],
    "start_line": 95,
    "end_line": 96,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.TestBaseUpdate.setup_remote_release": {
    "id": "system.updated.tests.test_base.TestBaseUpdate.setup_remote_release",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [],
    "start_line": 98,
    "end_line": 99,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.TestBaseUpdate.additional_context": {
    "id": "system.updated.tests.test_base.TestBaseUpdate.additional_context",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [],
    "start_line": 101,
    "end_line": 102,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.TestBaseUpdate.teardown_method": {
    "id": "system.updated.tests.test_base.TestBaseUpdate.teardown_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [
      "system.updated.tests.test_base.run"
    ],
    "start_line": 104,
    "end_line": 110,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.TestBaseUpdate.wait_for_condition": {
    "id": "system.updated.tests.test_base.TestBaseUpdate.wait_for_condition",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [],
    "start_line": 112,
    "end_line": 123,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.TestBaseUpdate._test_finalized_update": {
    "id": "system.updated.tests.test_base.TestBaseUpdate._test_finalized_update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [
      "system.updated.tests.test_base.get_version",
      "system.updated.tests.test_base.get_consistent_flag"
    ],
    "start_line": 125,
    "end_line": 131,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.ParamsBaseUpdateTest": {
    "id": "system.updated.tests.test_base.ParamsBaseUpdateTest",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [
      "system.updated.tests.test_base.TestBaseUpdate"
    ],
    "start_line": 133,
    "end_line": 259,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.ParamsBaseUpdateTest._test_finalized_update": {
    "id": "system.updated.tests.test_base.ParamsBaseUpdateTest._test_finalized_update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [],
    "start_line": 134,
    "end_line": 137,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.ParamsBaseUpdateTest.send_check_for_updates_signal": {
    "id": "system.updated.tests.test_base.ParamsBaseUpdateTest.send_check_for_updates_signal",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [],
    "start_line": 139,
    "end_line": 140,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.ParamsBaseUpdateTest.send_download_signal": {
    "id": "system.updated.tests.test_base.ParamsBaseUpdateTest.send_download_signal",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [],
    "start_line": 142,
    "end_line": 143,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.ParamsBaseUpdateTest._test_params": {
    "id": "system.updated.tests.test_base.ParamsBaseUpdateTest._test_params",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [],
    "start_line": 145,
    "end_line": 148,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.ParamsBaseUpdateTest.wait_for_idle": {
    "id": "system.updated.tests.test_base.ParamsBaseUpdateTest.wait_for_idle",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [],
    "start_line": 150,
    "end_line": 151,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.ParamsBaseUpdateTest.wait_for_failed": {
    "id": "system.updated.tests.test_base.ParamsBaseUpdateTest.wait_for_failed",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [],
    "start_line": 153,
    "end_line": 155,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.ParamsBaseUpdateTest.wait_for_fetch_available": {
    "id": "system.updated.tests.test_base.ParamsBaseUpdateTest.wait_for_fetch_available",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [],
    "start_line": 157,
    "end_line": 158,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.ParamsBaseUpdateTest.wait_for_update_available": {
    "id": "system.updated.tests.test_base.ParamsBaseUpdateTest.wait_for_update_available",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [],
    "start_line": 160,
    "end_line": 161,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.ParamsBaseUpdateTest.test_no_update": {
    "id": "system.updated.tests.test_base.ParamsBaseUpdateTest.test_no_update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [],
    "start_line": 163,
    "end_line": 177,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.ParamsBaseUpdateTest.test_new_release": {
    "id": "system.updated.tests.test_base.ParamsBaseUpdateTest.test_new_release",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [],
    "start_line": 179,
    "end_line": 203,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.ParamsBaseUpdateTest.test_switch_branches": {
    "id": "system.updated.tests.test_base.ParamsBaseUpdateTest.test_switch_branches",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [],
    "start_line": 205,
    "end_line": 228,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_base.ParamsBaseUpdateTest.test_agnos_update": {
    "id": "system.updated.tests.test_base.ParamsBaseUpdateTest.test_agnos_update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_base.py",
    "relative_path": "system\\updated\\tests\\test_base.py",
    "depends_on": [],
    "start_line": 230,
    "end_line": 259,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_git.TestUpdateDGitStrategy": {
    "id": "system.updated.tests.test_git.TestUpdateDGitStrategy",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_git.py",
    "relative_path": "system\\updated\\tests\\test_git.py",
    "depends_on": [],
    "start_line": 5,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_git.TestUpdateDGitStrategy.update_remote_release": {
    "id": "system.updated.tests.test_git.TestUpdateDGitStrategy.update_remote_release",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_git.py",
    "relative_path": "system\\updated\\tests\\test_git.py",
    "depends_on": [],
    "start_line": 6,
    "end_line": 9,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_git.TestUpdateDGitStrategy.setup_remote_release": {
    "id": "system.updated.tests.test_git.TestUpdateDGitStrategy.setup_remote_release",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_git.py",
    "relative_path": "system\\updated\\tests\\test_git.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 14,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_git.TestUpdateDGitStrategy.setup_basedir_release": {
    "id": "system.updated.tests.test_git.TestUpdateDGitStrategy.setup_basedir_release",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_git.py",
    "relative_path": "system\\updated\\tests\\test_git.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.updated.tests.test_git.TestUpdateDGitStrategy.additional_context": {
    "id": "system.updated.tests.test_git.TestUpdateDGitStrategy.additional_context",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\updated\\tests\\test_git.py",
    "relative_path": "system\\updated\\tests\\test_git.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.schema.generate_type": {
    "id": "system.webrtc.schema.generate_type",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\schema.py",
    "relative_path": "system\\webrtc\\schema.py",
    "depends_on": [
      "system.webrtc.schema.generate_type",
      "system.webrtc.schema.generate_struct"
    ],
    "start_line": 5,
    "end_line": 15,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.schema.generate_struct": {
    "id": "system.webrtc.schema.generate_struct",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\schema.py",
    "relative_path": "system\\webrtc\\schema.py",
    "depends_on": [
      "system.webrtc.schema.generate_field"
    ],
    "start_line": 18,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.schema.generate_field": {
    "id": "system.webrtc.schema.generate_field",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\schema.py",
    "relative_path": "system\\webrtc\\schema.py",
    "depends_on": [
      "system.webrtc.schema.generate_type",
      "system.webrtc.schema.generate_struct"
    ],
    "start_line": 22,
    "end_line": 43,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.CerealOutgoingMessageProxy": {
    "id": "system.webrtc.webrtcd.CerealOutgoingMessageProxy",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [],
    "start_line": 25,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.CerealOutgoingMessageProxy.__init__": {
    "id": "system.webrtc.webrtcd.CerealOutgoingMessageProxy.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [],
    "start_line": 26,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.CerealOutgoingMessageProxy.add_channel": {
    "id": "system.webrtc.webrtcd.CerealOutgoingMessageProxy.add_channel",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [],
    "start_line": 30,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.CerealOutgoingMessageProxy.to_json": {
    "id": "system.webrtc.webrtcd.CerealOutgoingMessageProxy.to_json",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [],
    "start_line": 33,
    "end_line": 43,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.CerealOutgoingMessageProxy.update": {
    "id": "system.webrtc.webrtcd.CerealOutgoingMessageProxy.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [],
    "start_line": 45,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.CerealIncomingMessageProxy": {
    "id": "system.webrtc.webrtcd.CerealIncomingMessageProxy",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [],
    "start_line": 59,
    "end_line": 72,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.CerealIncomingMessageProxy.__init__": {
    "id": "system.webrtc.webrtcd.CerealIncomingMessageProxy.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [],
    "start_line": 60,
    "end_line": 61,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.CerealIncomingMessageProxy.send": {
    "id": "system.webrtc.webrtcd.CerealIncomingMessageProxy.send",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [],
    "start_line": 63,
    "end_line": 72,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.CerealProxyRunner": {
    "id": "system.webrtc.webrtcd.CerealProxyRunner",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [
      "system.webrtc.webrtcd.CerealOutgoingMessageProxy"
    ],
    "start_line": 75,
    "end_line": 103,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.CerealProxyRunner.__init__": {
    "id": "system.webrtc.webrtcd.CerealProxyRunner.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [
      "system.webrtc.webrtcd.CerealOutgoingMessageProxy"
    ],
    "start_line": 76,
    "end_line": 80,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.CerealProxyRunner.start": {
    "id": "system.webrtc.webrtcd.CerealProxyRunner.start",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [],
    "start_line": 82,
    "end_line": 84,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.CerealProxyRunner.stop": {
    "id": "system.webrtc.webrtcd.CerealProxyRunner.stop",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [],
    "start_line": 86,
    "end_line": 90,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.CerealProxyRunner.run": {
    "id": "system.webrtc.webrtcd.CerealProxyRunner.run",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [],
    "start_line": 92,
    "end_line": 103,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.DynamicPubMaster": {
    "id": "system.webrtc.webrtcd.DynamicPubMaster",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [],
    "start_line": 106,
    "end_line": 115,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.DynamicPubMaster.__init__": {
    "id": "system.webrtc.webrtcd.DynamicPubMaster.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [],
    "start_line": 107,
    "end_line": 109,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.DynamicPubMaster.add_services_if_needed": {
    "id": "system.webrtc.webrtcd.DynamicPubMaster.add_services_if_needed",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [],
    "start_line": 111,
    "end_line": 115,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.StreamSession": {
    "id": "system.webrtc.webrtcd.StreamSession",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [
      "system.webrtc.webrtcd.CerealProxyRunner",
      "system.webrtc.webrtcd.CerealOutgoingMessageProxy",
      "system.webrtc.webrtcd.CerealIncomingMessageProxy",
      "system.webrtc.webrtcd.DynamicPubMaster"
    ],
    "start_line": 118,
    "end_line": 210,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.StreamSession.__init__": {
    "id": "system.webrtc.webrtcd.StreamSession.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [
      "system.webrtc.webrtcd.CerealProxyRunner",
      "system.webrtc.webrtcd.CerealOutgoingMessageProxy",
      "system.webrtc.webrtcd.CerealIncomingMessageProxy"
    ],
    "start_line": 121,
    "end_line": 158,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.StreamSession.start": {
    "id": "system.webrtc.webrtcd.StreamSession.start",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [],
    "start_line": 160,
    "end_line": 161,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.StreamSession.stop": {
    "id": "system.webrtc.webrtcd.StreamSession.stop",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [],
    "start_line": 163,
    "end_line": 168,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.StreamSession.get_answer": {
    "id": "system.webrtc.webrtcd.StreamSession.get_answer",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [],
    "start_line": 170,
    "end_line": 171,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.StreamSession.message_handler": {
    "id": "system.webrtc.webrtcd.StreamSession.message_handler",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [],
    "start_line": 173,
    "end_line": 178,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.StreamSession.run": {
    "id": "system.webrtc.webrtcd.StreamSession.run",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [],
    "start_line": 180,
    "end_line": 203,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.StreamSession.post_run_cleanup": {
    "id": "system.webrtc.webrtcd.StreamSession.post_run_cleanup",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [],
    "start_line": 205,
    "end_line": 210,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.StreamRequestBody": {
    "id": "system.webrtc.webrtcd.StreamRequestBody",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [],
    "start_line": 214,
    "end_line": 218,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.get_stream": {
    "id": "system.webrtc.webrtcd.get_stream",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [
      "system.webrtc.webrtcd.StreamSession",
      "system.webrtc.webrtcd.StreamRequestBody"
    ],
    "start_line": 221,
    "end_line": 232,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.get_schema": {
    "id": "system.webrtc.webrtcd.get_schema",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [],
    "start_line": 235,
    "end_line": 240,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.on_shutdown": {
    "id": "system.webrtc.webrtcd.on_shutdown",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [],
    "start_line": 243,
    "end_line": 246,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.webrtcd_thread": {
    "id": "system.webrtc.webrtcd.webrtcd_thread",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [
      "system.webrtc.webrtcd.on_shutdown",
      "system.webrtc.webrtcd.get_stream",
      "system.webrtc.webrtcd.get_schema"
    ],
    "start_line": 249,
    "end_line": 263,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.webrtcd.main": {
    "id": "system.webrtc.webrtcd.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\webrtcd.py",
    "relative_path": "system\\webrtc\\webrtcd.py",
    "depends_on": [
      "system.webrtc.webrtcd.webrtcd_thread"
    ],
    "start_line": 266,
    "end_line": 273,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.device.audio.AudioInputStreamTrack": {
    "id": "system.webrtc.device.audio.AudioInputStreamTrack",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\device\\audio.py",
    "relative_path": "system\\webrtc\\device\\audio.py",
    "depends_on": [],
    "start_line": 10,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.device.audio.AudioInputStreamTrack.__init__": {
    "id": "system.webrtc.device.audio.AudioInputStreamTrack.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\device\\audio.py",
    "relative_path": "system\\webrtc\\device\\audio.py",
    "depends_on": [],
    "start_line": 19,
    "end_line": 35,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.device.audio.AudioInputStreamTrack.recv": {
    "id": "system.webrtc.device.audio.AudioInputStreamTrack.recv",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\device\\audio.py",
    "relative_path": "system\\webrtc\\device\\audio.py",
    "depends_on": [],
    "start_line": 37,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.device.audio.AudioOutputSpeaker": {
    "id": "system.webrtc.device.audio.AudioOutputSpeaker",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\device\\audio.py",
    "relative_path": "system\\webrtc\\device\\audio.py",
    "depends_on": [],
    "start_line": 50,
    "end_line": 109,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.device.audio.AudioOutputSpeaker.__init__": {
    "id": "system.webrtc.device.audio.AudioOutputSpeaker.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\device\\audio.py",
    "relative_path": "system\\webrtc\\device\\audio.py",
    "depends_on": [],
    "start_line": 51,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.device.audio.AudioOutputSpeaker.__pyaudio_callback": {
    "id": "system.webrtc.device.audio.AudioOutputSpeaker.__pyaudio_callback",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\device\\audio.py",
    "relative_path": "system\\webrtc\\device\\audio.py",
    "depends_on": [],
    "start_line": 66,
    "end_line": 78,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.device.audio.AudioOutputSpeaker.__consume": {
    "id": "system.webrtc.device.audio.AudioOutputSpeaker.__consume",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\device\\audio.py",
    "relative_path": "system\\webrtc\\device\\audio.py",
    "depends_on": [],
    "start_line": 80,
    "end_line": 87,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.device.audio.AudioOutputSpeaker.hasTrack": {
    "id": "system.webrtc.device.audio.AudioOutputSpeaker.hasTrack",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\device\\audio.py",
    "relative_path": "system\\webrtc\\device\\audio.py",
    "depends_on": [],
    "start_line": 89,
    "end_line": 90,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.device.audio.AudioOutputSpeaker.addTrack": {
    "id": "system.webrtc.device.audio.AudioOutputSpeaker.addTrack",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\device\\audio.py",
    "relative_path": "system\\webrtc\\device\\audio.py",
    "depends_on": [],
    "start_line": 92,
    "end_line": 94,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.device.audio.AudioOutputSpeaker.start": {
    "id": "system.webrtc.device.audio.AudioOutputSpeaker.start",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\device\\audio.py",
    "relative_path": "system\\webrtc\\device\\audio.py",
    "depends_on": [],
    "start_line": 96,
    "end_line": 99,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.device.audio.AudioOutputSpeaker.stop": {
    "id": "system.webrtc.device.audio.AudioOutputSpeaker.stop",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\device\\audio.py",
    "relative_path": "system\\webrtc\\device\\audio.py",
    "depends_on": [],
    "start_line": 101,
    "end_line": 109,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.device.video.LiveStreamVideoStreamTrack": {
    "id": "system.webrtc.device.video.LiveStreamVideoStreamTrack",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\device\\video.py",
    "relative_path": "system\\webrtc\\device\\video.py",
    "depends_on": [],
    "start_line": 10,
    "end_line": 43,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.device.video.LiveStreamVideoStreamTrack.__init__": {
    "id": "system.webrtc.device.video.LiveStreamVideoStreamTrack.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\device\\video.py",
    "relative_path": "system\\webrtc\\device\\video.py",
    "depends_on": [],
    "start_line": 17,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.device.video.LiveStreamVideoStreamTrack.recv": {
    "id": "system.webrtc.device.video.LiveStreamVideoStreamTrack.recv",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\device\\video.py",
    "relative_path": "system\\webrtc\\device\\video.py",
    "depends_on": [],
    "start_line": 24,
    "end_line": 40,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.device.video.LiveStreamVideoStreamTrack.codec_preference": {
    "id": "system.webrtc.device.video.LiveStreamVideoStreamTrack.codec_preference",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\device\\video.py",
    "relative_path": "system\\webrtc\\device\\video.py",
    "depends_on": [],
    "start_line": 42,
    "end_line": 43,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.tests.test_stream_session.TestStreamSession": {
    "id": "system.webrtc.tests.test_stream_session.TestStreamSession",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\tests\\test_stream_session.py",
    "relative_path": "system\\webrtc\\tests\\test_stream_session.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 101,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.tests.test_stream_session.TestStreamSession.setup_method": {
    "id": "system.webrtc.tests.test_stream_session.TestStreamSession.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\tests\\test_stream_session.py",
    "relative_path": "system\\webrtc\\tests\\test_stream_session.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.tests.test_stream_session.TestStreamSession.teardown_method": {
    "id": "system.webrtc.tests.test_stream_session.TestStreamSession.teardown_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\tests\\test_stream_session.py",
    "relative_path": "system\\webrtc\\tests\\test_stream_session.py",
    "depends_on": [],
    "start_line": 24,
    "end_line": 26,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.tests.test_stream_session.TestStreamSession.test_outgoing_proxy": {
    "id": "system.webrtc.tests.test_stream_session.TestStreamSession.test_outgoing_proxy",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\tests\\test_stream_session.py",
    "relative_path": "system\\webrtc\\tests\\test_stream_session.py",
    "depends_on": [],
    "start_line": 28,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.tests.test_stream_session.TestStreamSession.test_incoming_proxy": {
    "id": "system.webrtc.tests.test_stream_session.TestStreamSession.test_incoming_proxy",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\tests\\test_stream_session.py",
    "relative_path": "system\\webrtc\\tests\\test_stream_session.py",
    "depends_on": [],
    "start_line": 49,
    "end_line": 69,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.tests.test_stream_session.TestStreamSession.test_livestream_track": {
    "id": "system.webrtc.tests.test_stream_session.TestStreamSession.test_livestream_track",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\tests\\test_stream_session.py",
    "relative_path": "system\\webrtc\\tests\\test_stream_session.py",
    "depends_on": [],
    "start_line": 71,
    "end_line": 85,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.tests.test_stream_session.TestStreamSession.test_input_audio_track": {
    "id": "system.webrtc.tests.test_stream_session.TestStreamSession.test_input_audio_track",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\tests\\test_stream_session.py",
    "relative_path": "system\\webrtc\\tests\\test_stream_session.py",
    "depends_on": [],
    "start_line": 87,
    "end_line": 101,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.tests.test_webrtcd.TestWebrtcdProc": {
    "id": "system.webrtc.tests.test_webrtcd.TestWebrtcdProc",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\tests\\test_webrtcd.py",
    "relative_path": "system\\webrtc\\tests\\test_webrtcd.py",
    "depends_on": [],
    "start_line": 23,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.tests.test_webrtcd.TestWebrtcdProc.assertCompletesWithTimeout": {
    "id": "system.webrtc.tests.test_webrtcd.TestWebrtcdProc.assertCompletesWithTimeout",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\tests\\test_webrtcd.py",
    "relative_path": "system\\webrtc\\tests\\test_webrtcd.py",
    "depends_on": [],
    "start_line": 24,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "system.webrtc.tests.test_webrtcd.TestWebrtcdProc.test_webrtcd": {
    "id": "system.webrtc.tests.test_webrtcd.TestWebrtcdProc.test_webrtcd",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\system\\webrtc\\tests\\test_webrtcd.py",
    "relative_path": "system\\webrtc\\tests\\test_webrtcd.py",
    "depends_on": [],
    "start_line": 31,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_model.AcadosModel": {
    "id": "third_party.acados.acados_template.acados_model.AcadosModel",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_model.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_model.py",
    "depends_on": [],
    "start_line": 32,
    "end_line": 154,
    "has_docstring": true,
    "docstring": "\n    Class containing all the information to code generate the external CasADi functions\n    that are needed when creating an acados ocp solver or acados integrator.\n    Thus, this class contains:\n\n    a) the :py:attr:`name` of the model,\n    b) all CasADi variables/expressions needed in the CasADi function generation process.\n    ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_model.AcadosModel.__init__": {
    "id": "third_party.acados.acados_template.acados_model.AcadosModel.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_model.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_model.py",
    "depends_on": [],
    "start_line": 41,
    "end_line": 154,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 37,
    "end_line": 493,
    "has_docstring": true,
    "docstring": "\n    Class containing the dimensions of the optimal control problem.\n    ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.__init__": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 41,
    "end_line": 73,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nx": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nx",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 269,
    "end_line": 273,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nz": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nz",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 276,
    "end_line": 280,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nu": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nu",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 283,
    "end_line": 287,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.np": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.np",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 290,
    "end_line": 294,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.ny": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.ny",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 304,
    "end_line": 308,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.ny_0": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.ny_0",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 297,
    "end_line": 301,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.ny_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.ny_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 311,
    "end_line": 315,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nr": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nr",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 318,
    "end_line": 322,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nr_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nr_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 325,
    "end_line": 329,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nh": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nh",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 332,
    "end_line": 336,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nh_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nh_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 339,
    "end_line": 343,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nphi": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nphi",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 346,
    "end_line": 350,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nphi_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nphi_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 353,
    "end_line": 357,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nbx": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nbx",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 360,
    "end_line": 364,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nbxe_0": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nbxe_0",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 367,
    "end_line": 371,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nbx_0": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nbx_0",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 374,
    "end_line": 378,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nbx_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nbx_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 381,
    "end_line": 385,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nbu": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nbu",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 388,
    "end_line": 392,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nsbx": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nsbx",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 395,
    "end_line": 399,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nsbx_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nsbx_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 402,
    "end_line": 406,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nsbu": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nsbu",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 409,
    "end_line": 413,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nsg": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nsg",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 416,
    "end_line": 420,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nsg_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nsg_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 423,
    "end_line": 427,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nsh": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nsh",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 430,
    "end_line": 434,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nsh_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nsh_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 437,
    "end_line": 441,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nsphi": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nsphi",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 444,
    "end_line": 448,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nsphi_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.nsphi_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 451,
    "end_line": 455,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.ns": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.ns",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 458,
    "end_line": 462,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.ns_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.ns_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 465,
    "end_line": 469,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.ng": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.ng",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 472,
    "end_line": 476,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.ng_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.ng_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 479,
    "end_line": 483,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.N": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.N",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 486,
    "end_line": 490,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.set": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpDims.set",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 492,
    "end_line": 493,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 496,
    "end_line": 967,
    "has_docstring": true,
    "docstring": "\n    Class containing the numerical data of the cost:\n\n    NOTE: all cost terms, except for the terminal one are weighted with the corresponding time step.\n    This means given the time steps are :math:`\\Delta t_0,..., \\Delta t_N`, the total cost is given by:\n    :math:`c_\\text{total} = \\Delta t_0 \\cdot c_0(x_0, u_0, p_0, z_0) + ... + \\Delta t_{N-1} \\cdot c_{N-1}(x_0, u_0, p_0, z_0) + c_N(x_N, p_N)`.\n\n    This means the Lagrange cost term is given in continuous time, this makes up for a seeminglessly OCP discretization with a nonuniform time grid.\n\n    In case of LINEAR_LS:\n    stage cost is\n    :math:`l(x,u,z) = || V_x \\, x + V_u \\, u + V_z \\, z - y_\\text{ref}||^2_W`,\n    terminal cost is\n    :math:`m(x) = || V^e_x \\, x - y_\\text{ref}^e||^2_{W^e}`\n\n    In case of NONLINEAR_LS:\n    stage cost is\n    :math:`l(x,u,z,p) = || y(x,u,z,p) - y_\\text{ref}||^2_W`,\n    terminal cost is\n    :math:`m(x,p) = || y^e(x,p) - y_\\text{ref}^e||^2_{W^e}`\n\n    In case of CONVEX_OVER_NONLINEAR:\n    stage cost is\n    :math:`l(x,u,p) = \\psi(y(x,u,p) - y_\\text{ref}, p)`,\n    terminal cost is\n    :math:`m(x, p) = \\psi^e (y^e(x,p) - y_\\text{ref}^e, p)`\n    ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.__init__": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 524,
    "end_line": 554,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.cost_type_0": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.cost_type_0",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 750,
    "end_line": 755,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.W_0": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.W_0",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 622,
    "end_line": 627,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.Vx_0": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.Vx_0",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 630,
    "end_line": 635,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.Vu_0": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.Vu_0",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 638,
    "end_line": 643,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.Vz_0": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.Vz_0",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 646,
    "end_line": 651,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.yref_0": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.yref_0",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 615,
    "end_line": 619,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.cost_ext_fun_type_0": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.cost_ext_fun_type_0",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 654,
    "end_line": 658,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.cost_type": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.cost_type",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 742,
    "end_line": 747,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.W": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.W",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 758,
    "end_line": 763,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.Vx": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.Vx",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 767,
    "end_line": 772,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.Vu": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.Vu",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 775,
    "end_line": 780,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.Vz": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.Vz",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 783,
    "end_line": 788,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.yref": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.yref",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 791,
    "end_line": 795,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.Zl": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.Zl",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 798,
    "end_line": 802,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.Zu": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.Zu",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 805,
    "end_line": 809,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.zl": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.zl",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 812,
    "end_line": 816,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.zu": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.zu",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 819,
    "end_line": 823,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.cost_ext_fun_type": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.cost_ext_fun_type",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 826,
    "end_line": 830,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.cost_type_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.cost_type_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 900,
    "end_line": 906,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.W_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.W_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 909,
    "end_line": 914,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.Vx_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.Vx_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 917,
    "end_line": 922,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.yref_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.yref_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 925,
    "end_line": 929,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.Zl_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.Zl_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 932,
    "end_line": 936,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.Zu_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.Zu_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 939,
    "end_line": 943,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.zl_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.zl_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 946,
    "end_line": 950,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.zu_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.zu_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 953,
    "end_line": 957,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.cost_ext_fun_type_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.cost_ext_fun_type_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 960,
    "end_line": 964,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.set": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpCost.set",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 966,
    "end_line": 967,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.print_J_to_idx_note": {
    "id": "third_party.acados.acados_template.acados_ocp.print_J_to_idx_note",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 970,
    "end_line": 971,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [
      "third_party.acados.acados_template.acados_ocp.print_J_to_idx_note"
    ],
    "start_line": 974,
    "end_line": 2116,
    "has_docstring": true,
    "docstring": "\n    class containing the description of the constraints\n    ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.__init__": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 978,
    "end_line": 1055,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.constr_type": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.constr_type",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1584,
    "end_line": 1590,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.constr_type_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.constr_type_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1593,
    "end_line": 1599,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lbx_0": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lbx_0",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1603,
    "end_line": 1607,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.ubx_0": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.ubx_0",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1610,
    "end_line": 1614,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jbx_0": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jbx_0",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [
      "third_party.acados.acados_template.acados_ocp.print_J_to_idx_note"
    ],
    "start_line": 1624,
    "end_line": 1628,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxbx_0": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxbx_0",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1617,
    "end_line": 1621,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxbxe_0": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxbxe_0",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1631,
    "end_line": 1635,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lbx": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lbx",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1650,
    "end_line": 1654,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.ubx": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.ubx",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1657,
    "end_line": 1661,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxbx": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxbx",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1664,
    "end_line": 1668,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jbx": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jbx",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [
      "third_party.acados.acados_template.acados_ocp.print_J_to_idx_note"
    ],
    "start_line": 1671,
    "end_line": 1675,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lbx_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lbx_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1708,
    "end_line": 1712,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.ubx_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.ubx_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1715,
    "end_line": 1719,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxbx_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxbx_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1722,
    "end_line": 1726,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jbx_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jbx_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [
      "third_party.acados.acados_template.acados_ocp.print_J_to_idx_note"
    ],
    "start_line": 1729,
    "end_line": 1733,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lbu": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lbu",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1679,
    "end_line": 1683,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.ubu": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.ubu",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1686,
    "end_line": 1690,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxbu": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxbu",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1693,
    "end_line": 1697,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jbu": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jbu",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [
      "third_party.acados.acados_template.acados_ocp.print_J_to_idx_note"
    ],
    "start_line": 1700,
    "end_line": 1704,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.C": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.C",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1745,
    "end_line": 1750,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.D": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.D",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1737,
    "end_line": 1742,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lg": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lg",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1753,
    "end_line": 1757,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.ug": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.ug",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1760,
    "end_line": 1764,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.C_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.C_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1768,
    "end_line": 1773,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lg_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lg_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1776,
    "end_line": 1780,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.ug_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.ug_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1783,
    "end_line": 1787,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lh": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lh",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1791,
    "end_line": 1795,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.uh": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.uh",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1798,
    "end_line": 1802,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lh_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lh_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1821,
    "end_line": 1825,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.uh_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.uh_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1828,
    "end_line": 1832,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lphi": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lphi",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1806,
    "end_line": 1810,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.uphi": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.uphi",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1813,
    "end_line": 1817,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lphi_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lphi_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1836,
    "end_line": 1840,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.uphi_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.uphi_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1843,
    "end_line": 1847,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lsbx": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lsbx",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1852,
    "end_line": 1856,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.usbx": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.usbx",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1859,
    "end_line": 1863,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxsbx": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxsbx",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1866,
    "end_line": 1870,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jsbx": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jsbx",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [
      "third_party.acados.acados_template.acados_ocp.print_J_to_idx_note"
    ],
    "start_line": 1873,
    "end_line": 1877,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lsbu": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lsbu",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1881,
    "end_line": 1885,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.usbu": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.usbu",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1888,
    "end_line": 1892,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxsbu": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxsbu",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1895,
    "end_line": 1899,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jsbu": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jsbu",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [
      "third_party.acados.acados_template.acados_ocp.print_J_to_idx_note"
    ],
    "start_line": 1902,
    "end_line": 1906,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lsbx_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lsbx_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1910,
    "end_line": 1914,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.usbx_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.usbx_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1917,
    "end_line": 1921,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxsbx_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxsbx_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1924,
    "end_line": 1928,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jsbx_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jsbx_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [
      "third_party.acados.acados_template.acados_ocp.print_J_to_idx_note"
    ],
    "start_line": 1931,
    "end_line": 1935,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lsg": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lsg",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1940,
    "end_line": 1944,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.usg": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.usg",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1947,
    "end_line": 1951,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxsg": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxsg",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1954,
    "end_line": 1958,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jsg": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jsg",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [
      "third_party.acados.acados_template.acados_ocp.print_J_to_idx_note"
    ],
    "start_line": 1961,
    "end_line": 1965,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lsh": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lsh",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1970,
    "end_line": 1974,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.ush": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.ush",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1977,
    "end_line": 1981,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxsh": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxsh",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1984,
    "end_line": 1988,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jsh": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jsh",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [
      "third_party.acados.acados_template.acados_ocp.print_J_to_idx_note"
    ],
    "start_line": 1992,
    "end_line": 1996,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lsphi": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lsphi",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2000,
    "end_line": 2004,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.usphi": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.usphi",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2007,
    "end_line": 2011,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxsphi": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxsphi",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2014,
    "end_line": 2018,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jsphi": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jsphi",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [
      "third_party.acados.acados_template.acados_ocp.print_J_to_idx_note"
    ],
    "start_line": 2021,
    "end_line": 2025,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lsg_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lsg_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2029,
    "end_line": 2033,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.usg_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.usg_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2036,
    "end_line": 2040,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxsg_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxsg_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2043,
    "end_line": 2047,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jsg_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jsg_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [
      "third_party.acados.acados_template.acados_ocp.print_J_to_idx_note"
    ],
    "start_line": 2050,
    "end_line": 2054,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lsh_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lsh_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2058,
    "end_line": 2062,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.ush_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.ush_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2065,
    "end_line": 2069,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxsh_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxsh_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2072,
    "end_line": 2076,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jsh_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jsh_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [
      "third_party.acados.acados_template.acados_ocp.print_J_to_idx_note"
    ],
    "start_line": 2079,
    "end_line": 2083,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lsphi_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.lsphi_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2088,
    "end_line": 2092,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.usphi_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.usphi_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2095,
    "end_line": 2099,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxsphi_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.idxsphi_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2102,
    "end_line": 2106,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jsphi_e": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.Jsphi_e",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [
      "third_party.acados.acados_template.acados_ocp.print_J_to_idx_note"
    ],
    "start_line": 2109,
    "end_line": 2113,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.x0": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.x0",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 1639,
    "end_line": 1646,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.set": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints.set",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2115,
    "end_line": 2116,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2119,
    "end_line": 3088,
    "has_docstring": true,
    "docstring": "\n    class containing the description of the solver options\n    ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.__init__": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2123,
    "end_line": 2177,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.qp_solver": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.qp_solver",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2676,
    "end_line": 2685,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.ext_fun_compile_flags": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.ext_fun_compile_flags",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2716,
    "end_line": 2720,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.custom_update_filename": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.custom_update_filename",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2724,
    "end_line": 2728,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.custom_templates": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.custom_templates",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2731,
    "end_line": 2740,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.custom_update_header_filename": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.custom_update_header_filename",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2743,
    "end_line": 2747,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.custom_update_copy": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.custom_update_copy",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2750,
    "end_line": 2754,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.hpipm_mode": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.hpipm_mode",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2707,
    "end_line": 2713,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.hessian_approx": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.hessian_approx",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2757,
    "end_line": 2763,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.integrator_type": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.integrator_type",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2766,
    "end_line": 2772,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.nlp_solver_type": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.nlp_solver_type",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2883,
    "end_line": 2889,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.globalization": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.globalization",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2803,
    "end_line": 2809,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.collocation_type": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.collocation_type",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2698,
    "end_line": 2704,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.regularize_method": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.regularize_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2688,
    "end_line": 2695,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.nlp_solver_step_length": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.nlp_solver_step_length",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2892,
    "end_line": 2896,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.levenberg_marquardt": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.levenberg_marquardt",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2899,
    "end_line": 2903,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.sim_method_num_stages": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.sim_method_num_stages",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2848,
    "end_line": 2855,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.sim_method_num_steps": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.sim_method_num_steps",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2858,
    "end_line": 2864,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.sim_method_newton_iter": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.sim_method_newton_iter",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2868,
    "end_line": 2873,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.sim_method_newton_tol": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.sim_method_newton_tol",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2378,
    "end_line": 2384,
    "has_docstring": true,
    "docstring": "\n        Tolerance of Newton system in simulation method.\n        Type: float: 0.0 means not used\n        Default: 0.0\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.sim_method_jac_reuse": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.sim_method_jac_reuse",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2876,
    "end_line": 2878,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.qp_solver_tol_stat": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.qp_solver_tol_stat",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2952,
    "end_line": 2956,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.qp_solver_tol_eq": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.qp_solver_tol_eq",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2959,
    "end_line": 2963,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.qp_solver_tol_ineq": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.qp_solver_tol_ineq",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2966,
    "end_line": 2970,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.qp_solver_tol_comp": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.qp_solver_tol_comp",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2973,
    "end_line": 2977,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.qp_solver_cond_N": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.qp_solver_cond_N",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2928,
    "end_line": 2932,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.qp_solver_warm_start": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.qp_solver_warm_start",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2935,
    "end_line": 2939,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.qp_solver_cond_ric_alg": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.qp_solver_cond_ric_alg",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2920,
    "end_line": 2924,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.qp_solver_ric_alg": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.qp_solver_ric_alg",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2913,
    "end_line": 2917,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.qp_solver_iter_max": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.qp_solver_iter_max",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2906,
    "end_line": 2910,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.tol": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.tol",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2980,
    "end_line": 2987,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.qp_tol": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.qp_tol",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2942,
    "end_line": 2949,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.nlp_solver_tol_stat": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.nlp_solver_tol_stat",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2990,
    "end_line": 2994,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.nlp_solver_tol_eq": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.nlp_solver_tol_eq",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2997,
    "end_line": 3001,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.alpha_min": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.alpha_min",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2812,
    "end_line": 2813,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.alpha_reduction": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.alpha_reduction",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2816,
    "end_line": 2817,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.line_search_use_sufficient_descent": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.line_search_use_sufficient_descent",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2820,
    "end_line": 2824,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.eps_sufficient_descent": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.eps_sufficient_descent",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2841,
    "end_line": 2845,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.globalization_use_SOC": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.globalization_use_SOC",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2827,
    "end_line": 2831,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.full_step_dual": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.full_step_dual",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2834,
    "end_line": 2838,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.nlp_solver_tol_ineq": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.nlp_solver_tol_ineq",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 3004,
    "end_line": 3008,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.nlp_solver_ext_qp_res": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.nlp_solver_ext_qp_res",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 3011,
    "end_line": 3015,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.nlp_solver_tol_comp": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.nlp_solver_tol_comp",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 3018,
    "end_line": 3022,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.nlp_solver_max_iter": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.nlp_solver_max_iter",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 3025,
    "end_line": 3030,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.time_steps": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.time_steps",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2779,
    "end_line": 2786,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.shooting_nodes": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.shooting_nodes",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2789,
    "end_line": 2796,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.tf": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.tf",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2775,
    "end_line": 2776,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.Tsim": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.Tsim",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 2799,
    "end_line": 2800,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.print_level": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.print_level",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 3033,
    "end_line": 3037,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.model_external_shared_lib_dir": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.model_external_shared_lib_dir",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 3040,
    "end_line": 3045,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.model_external_shared_lib_name": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.model_external_shared_lib_name",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 3048,
    "end_line": 3057,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.exact_hess_constr": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.exact_hess_constr",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 3060,
    "end_line": 3064,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.exact_hess_cost": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.exact_hess_cost",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 3067,
    "end_line": 3071,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.exact_hess_dyn": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.exact_hess_dyn",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 3074,
    "end_line": 3078,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.ext_cost_num_hess": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.ext_cost_num_hess",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 3081,
    "end_line": 3085,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.set": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions.set",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 3087,
    "end_line": 3088,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcp": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcp",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [
      "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions",
      "third_party.acados.acados_template.acados_ocp.AcadosOcpCost",
      "third_party.acados.acados_template.acados_ocp.AcadosOcpDims",
      "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints"
    ],
    "start_line": 3091,
    "end_line": 3167,
    "has_docstring": true,
    "docstring": "\n    Class containing the full description of the optimal control problem.\n    This object can be used to create an :py:class:`acados_template.acados_ocp_solver.AcadosOcpSolver`.\n\n    The class has the following properties that can be modified to formulate a specific OCP, see below:\n\n        - :py:attr:`dims` of type :py:class:`acados_template.acados_ocp.AcadosOcpDims`\n        - :py:attr:`model` of type :py:class:`acados_template.acados_model.AcadosModel`\n        - :py:attr:`cost` of type :py:class:`acados_template.acados_ocp.AcadosOcpCost`\n        - :py:attr:`constraints` of type :py:class:`acados_template.acados_ocp.AcadosOcpConstraints`\n        - :py:attr:`solver_options` of type :py:class:`acados_template.acados_ocp.AcadosOcpOptions`\n\n        - :py:attr:`acados_include_path` (set automatically)\n        - :py:attr:`shared_lib_ext` (set automatically)\n        - :py:attr:`acados_lib_path` (set automatically)\n        - :py:attr:`parameter_values` - used to initialize the parameters (can be changed)\n    ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcp.__init__": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcp.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [
      "third_party.acados.acados_template.acados_ocp.AcadosOcpOptions",
      "third_party.acados.acados_template.acados_ocp.AcadosOcpCost",
      "third_party.acados.acados_template.acados_ocp.AcadosOcpDims",
      "third_party.acados.acados_template.acados_ocp.AcadosOcpConstraints"
    ],
    "start_line": 3109,
    "end_line": 3142,
    "has_docstring": true,
    "docstring": "\n        Keyword arguments:\n        acados_path -- path of your acados installation\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcp.parameter_values": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcp.parameter_values",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 3150,
    "end_line": 3155,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp.AcadosOcp.set": {
    "id": "third_party.acados.acados_template.acados_ocp.AcadosOcp.set",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp.py",
    "depends_on": [],
    "start_line": 3157,
    "end_line": 3167,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.make_ocp_dims_consistent": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.make_ocp_dims_consistent",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 60,
    "end_line": 588,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.get_simulink_default_opts": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.get_simulink_default_opts",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 591,
    "end_line": 596,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.ocp_formulation_json_dump": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.ocp_formulation_json_dump",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 599,
    "end_line": 621,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.ocp_formulation_json_load": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.ocp_formulation_json_load",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 625,
    "end_line": 649,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.ocp_generate_external_functions": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.ocp_generate_external_functions",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 652,
    "end_line": 712,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.ocp_get_default_cmake_builder": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.ocp_get_default_cmake_builder",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 715,
    "end_line": 722,
    "has_docstring": true,
    "docstring": "\n    If :py:class:`~acados_template.acados_ocp_solver.AcadosOcpSolver` is used with `CMake` this function returns a good first setting.\n    :return: default :py:class:`~acados_template.builders.CMakeBuilder`\n    ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.ocp_render_templates": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.ocp_render_templates",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [
      "third_party.acados.acados_template.acados_ocp_solver.__ocp_get_template_list"
    ],
    "start_line": 726,
    "end_line": 749,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.__ocp_get_template_list": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.__ocp_get_template_list",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 753,
    "end_line": 796,
    "has_docstring": true,
    "docstring": "\n    returns a list of tuples in the form:\n    (input_filename, output_filname)\n    or\n    (input_filename, output_filname, output_directory)\n    ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.remove_x0_elimination": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.remove_x0_elimination",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 799,
    "end_line": 801,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [
      "third_party.acados.acados_template.acados_ocp_solver.ocp_render_templates",
      "third_party.acados.acados_template.acados_ocp_solver.ocp_generate_external_functions",
      "third_party.acados.acados_template.acados_ocp_solver.make_ocp_dims_consistent",
      "third_party.acados.acados_template.acados_ocp_solver.ocp_formulation_json_dump",
      "third_party.acados.acados_template.acados_ocp_solver.remove_x0_elimination"
    ],
    "start_line": 804,
    "end_line": 1991,
    "has_docstring": true,
    "docstring": "\n    Class to interact with the acados ocp solver C object.\n\n        :param acados_ocp: type :py:class:`~acados_template.acados_ocp.AcadosOcp` - description of the OCP for acados\n        :param json_file: name for the json file used to render the templated code - default: acados_ocp_nlp.json\n        :param simulink_opts: Options to configure Simulink S-function blocks, mainly to activate possible Inputs and Outputs\n    ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.generate": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.generate",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [
      "third_party.acados.acados_template.acados_ocp_solver.ocp_render_templates",
      "third_party.acados.acados_template.acados_ocp_solver.ocp_generate_external_functions",
      "third_party.acados.acados_template.acados_ocp_solver.make_ocp_dims_consistent",
      "third_party.acados.acados_template.acados_ocp_solver.ocp_formulation_json_dump",
      "third_party.acados.acados_template.acados_ocp_solver.remove_x0_elimination"
    ],
    "start_line": 822,
    "end_line": 868,
    "has_docstring": true,
    "docstring": "\n        Generates the code for an acados OCP solver, given the description in acados_ocp.\n            :param acados_ocp: type AcadosOcp - description of the OCP for acados\n            :param json_file: name for the json file used to render the templated code - default: `acados_ocp_nlp.json`\n            :param simulink_opts: Options to configure Simulink S-function blocks, mainly to activate possible inputs and\n                   outputs; default: `None`\n            :param cmake_builder: type :py:class:`~acados_template.builders.CMakeBuilder` generate a `CMakeLists.txt` and use\n                   the `CMake` pipeline instead of a `Makefile` (`CMake` seems to be the better option in conjunction with\n                   `MS Visual Studio`); default: `None`\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.build": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.build",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 872,
    "end_line": 910,
    "has_docstring": true,
    "docstring": "\n        Builds the code for an acados OCP solver, that has been generated in code_export_dir\n            :param code_export_dir: directory in which acados OCP solver has been generated, see generate()\n            :param with_cython: option indicating if the cython interface is build, default: False.\n            :param cmake_builder: type :py:class:`~acados_template.builders.CMakeBuilder` generate a `CMakeLists.txt` and use\n                   the `CMake` pipeline instead of a `Makefile` (`CMake` seems to be the better option in conjunction with\n                   `MS Visual Studio`); default: `None`\n            :param verbose: indicating if build command is printed\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.create_cython_solver": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.create_cython_solver",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 914,
    "end_line": 934,
    "has_docstring": true,
    "docstring": "\n        Returns an `AcadosOcpSolverCython` object.\n\n        This is an alternative Cython based Python wrapper to the acados OCP solver in C.\n        This offers faster interaction with the solver, because getter and setter calls, which include shape checking are done in compiled C code.\n\n        The default wrapper `AcadosOcpSolver` is based on ctypes.\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.__init__": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 937,
    "end_line": 1005,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.__get_pointers_solver": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.__get_pointers_solver",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 1008,
    "end_line": 1039,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.solve_for_x0": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.solve_for_x0",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 1043,
    "end_line": 1058,
    "has_docstring": true,
    "docstring": "\n        Wrapper around `solve()` which sets initial state constraint, solves the OCP, and returns u0.\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.solve": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.solve",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 1061,
    "end_line": 1069,
    "has_docstring": true,
    "docstring": "\n        Solve the ocp with current input.\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.custom_update": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.custom_update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 1072,
    "end_line": 1087,
    "has_docstring": true,
    "docstring": "\n        A custom function that can be implemented by a user to be called between solver calls.\n        By default this does nothing.\n        The idea is to have a convenient wrapper to do complex updates of parameters and numerical data efficiently in C,\n        in a function that is compiled into the solver library and can be conveniently used in the Python environment.\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.reset": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.reset",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 1090,
    "end_line": 1098,
    "has_docstring": true,
    "docstring": "\n        Sets current iterate to all zeros.\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.set_new_time_steps": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.set_new_time_steps",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 1101,
    "end_line": 1150,
    "has_docstring": true,
    "docstring": "\n        Set new time steps.\n        Recreates the solver if N changes.\n\n            :param new_time_steps: 1 dimensional np array of new time steps for the solver\n\n            .. note:: This allows for different use-cases: either set a new size of time_steps or a new distribution of\n                      the shooting nodes without changing the number, e.g., to reach a different final time. Both cases\n                      do not require a new code export and compilation.\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.update_qp_solver_cond_N": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.update_qp_solver_cond_N",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 1153,
    "end_line": 1185,
    "has_docstring": true,
    "docstring": "\n        Recreate solver with new value `qp_solver_cond_N` with a partial condensing QP solver.\n        This function is relevant for code reuse, i.e., if either `set_new_time_steps(...)` is used or\n        the influence of a different `qp_solver_cond_N` is studied without code export and compilation.\n            :param qp_solver_cond_N: new number of condensing stages for the solver\n\n            .. note:: This function can only be used in combination with a partial condensing QP solver.\n\n            .. note:: After `set_new_time_steps(...)` is used and depending on the new number of time steps it might be\n                      necessary to change `qp_solver_cond_N` as well (using this function), i.e., typically\n                      `qp_solver_cond_N < N`.\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.eval_param_sens": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.eval_param_sens",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 1188,
    "end_line": 1214,
    "has_docstring": true,
    "docstring": "\n        Calculate the sensitivity of the curent solution with respect to the initial state component of index\n\n            :param index: integer corresponding to initial state index in range(nx)\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.get": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.get",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 1217,
    "end_line": 1287,
    "has_docstring": true,
    "docstring": "\n        Get the last solution of the solver:\n\n            :param stage: integer corresponding to shooting node\n            :param field: string in ['x', 'u', 'z', 'pi', 'lam', 't', 'sl', 'su',]\n\n            .. note:: regarding lam, t: \n\n                    the inequalities are internally organized in the following order: \n\n                    [ lbu lbx lg lh lphi ubu ubx ug uh uphi; \n\n                      lsbu lsbx lsg lsh lsphi usbu usbx usg ush usphi]\n\n            .. note:: pi: multipliers for dynamics equality constraints \n\n                      lam: multipliers for inequalities \n\n                      t: slack variables corresponding to evaluation of all inequalities (at the solution) \n\n                      sl: slack variables of soft lower inequality constraints \n\n                      su: slack variables of soft upper inequality constraints \n\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.print_statistics": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.print_statistics",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 1290,
    "end_line": 1330,
    "has_docstring": true,
    "docstring": "\n        prints statistics of previous solver run as a table:\n            - iter: iteration number\n            - res_stat: stationarity residual\n            - res_eq: residual wrt equality constraints (dynamics)\n            - res_ineq: residual wrt inequality constraints (constraints)\n            - res_comp: residual wrt complementarity conditions\n            - qp_stat: status of QP solver\n            - qp_iter: number of QP iterations\n            - alpha: SQP step size\n            - qp_res_stat: stationarity residual of the last QP solution\n            - qp_res_eq: residual wrt equality constraints (dynamics) of the last QP solution\n            - qp_res_ineq: residual wrt inequality constraints (constraints)  of the last QP solution\n            - qp_res_comp: residual wrt complementarity conditions of the last QP solution\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.store_iterate": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.store_iterate",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 1333,
    "end_line": 1372,
    "has_docstring": true,
    "docstring": "\n        Stores the current iterate of the ocp solver in a json file.\n\n            :param filename: if not set, use f'{self.model_name}_iterate.json'\n            :param overwrite: if false and filename exists add timestamp to filename\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.dump_last_qp_to_json": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.dump_last_qp_to_json",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 1376,
    "end_line": 1412,
    "has_docstring": true,
    "docstring": "\n        Dumps the latest QP data into a json file\n\n            :param filename: if not set, use model_name + timestamp + '.json'\n            :param overwrite: if false and filename exists add timestamp to filename\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.load_iterate": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.load_iterate",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 1416,
    "end_line": 1429,
    "has_docstring": true,
    "docstring": "\n        Loads the iterate stored in json file with filename into the ocp solver.\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.get_stats": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.get_stats",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 1432,
    "end_line": 1528,
    "has_docstring": true,
    "docstring": "\n        Get the information of the last solver call.\n\n            :param field: string in ['statistics', 'time_tot', 'time_lin', 'time_sim', 'time_sim_ad', 'time_sim_la', 'time_qp', 'time_qp_solver_call', 'time_reg', 'sqp_iter', 'residuals', 'qp_iter', 'alpha']\n\n        Available fileds:\n            - time_tot: total CPU time previous call\n            - time_lin: CPU time for linearization\n            - time_sim: CPU time for integrator\n            - time_sim_ad: CPU time for integrator contribution of external function calls\n            - time_sim_la: CPU time for integrator contribution of linear algebra\n            - time_qp: CPU time qp solution\n            - time_qp_solver_call: CPU time inside qp solver (without converting the QP)\n            - time_qp_xcond: time_glob: CPU time globalization\n            - time_solution_sensitivities: CPU time for previous call to eval_param_sens\n            - time_reg: CPU time regularization\n            - sqp_iter: number of SQP iterations\n            - qp_iter: vector of QP iterations for last SQP call\n            - statistics: table with info about last iteration\n            - stat_m: number of rows in statistics matrix\n            - stat_n: number of columns in statistics matrix\n            - residuals: residuals of last iterate\n            - alpha: step sizes of SQP iterations\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.get_cost": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.get_cost",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 1531,
    "end_line": 1549,
    "has_docstring": true,
    "docstring": "\n        Returns the cost value of the current solution.\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.get_residuals": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.get_residuals",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 1552,
    "end_line": 1588,
    "has_docstring": true,
    "docstring": "\n        Returns an array of the form [res_stat, res_eq, res_ineq, res_comp].\n        This residual has to be computed for SQP_RTI solver, since it is not available by default.\n\n        - res_stat: stationarity residual\n        - res_eq: residual wrt equality constraints (dynamics)\n        - res_ineq: residual wrt inequality constraints (constraints)\n        - res_comp: residual wrt complementarity conditions\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.set": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.set",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 1592,
    "end_line": 1679,
    "has_docstring": true,
    "docstring": "\n        Set numerical data inside the solver.\n\n            :param stage: integer corresponding to shooting node\n            :param field: string in ['x', 'u', 'pi', 'lam', 't', 'p', 'xdot_guess', 'z_guess']\n\n            .. note:: regarding lam, t: \n\n                    the inequalities are internally organized in the following order: \n\n                    [ lbu lbx lg lh lphi ubu ubx ug uh uphi; \n\n                      lsbu lsbx lsg lsh lsphi usbu usbx usg ush usphi]\n\n            .. note:: pi: multipliers for dynamics equality constraints \n\n                      lam: multipliers for inequalities \n\n                      t: slack variables corresponding to evaluation of all inequalities (at the solution) \n\n                      sl: slack variables of soft lower inequality constraints \n\n                      su: slack variables of soft upper inequality constraints \n\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.cost_set": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.cost_set",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 1682,
    "end_line": 1748,
    "has_docstring": true,
    "docstring": "\n        Set numerical data in the cost module of the solver.\n\n            :param stage: integer corresponding to shooting node\n            :param field: string, e.g. 'yref', 'W', 'ext_cost_num_hess', 'zl', 'zu', 'Zl', 'Zu'\n            :param value: of appropriate size\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.constraints_set": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.constraints_set",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 1751,
    "end_line": 1816,
    "has_docstring": true,
    "docstring": "\n        Set numerical data in the constraint module of the solver.\n\n            :param stage: integer corresponding to shooting node\n            :param field: string in ['lbx', 'ubx', 'lbu', 'ubu', 'lg', 'ug', 'lh', 'uh', 'uphi', 'C', 'D']\n            :param value: of appropriate size\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.get_from_qp_in": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.get_from_qp_in",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 1819,
    "end_line": 1863,
    "has_docstring": true,
    "docstring": "\n        Get numerical data from the current QP.\n\n            :param stage: integer corresponding to shooting node\n            :param field: string in ['A', 'B', 'b', 'Q', 'R', 'S', 'q', 'r', 'C', 'D', 'lg', 'ug', 'lbx', 'ubx', 'lbu', 'ubu']\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.options_set": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.options_set",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 1866,
    "end_line": 1935,
    "has_docstring": true,
    "docstring": "\n        Set options of the solver.\n\n            :param field: string, e.g. 'print_level', 'rti_phase', 'initialize_t_slacks', 'step_length', 'alpha_min', 'alpha_reduction', 'qp_warm_start', 'line_search_use_sufficient_descent', 'full_step_dual', 'globalization_use_SOC', 'qp_tol_stat', 'qp_tol_eq', 'qp_tol_ineq', 'qp_tol_comp', 'qp_tau_min', 'qp_mu0'\n\n            :param value: of type int, float, string\n\n            - qp_tol_stat: QP solver tolerance stationarity\n            - qp_tol_eq: QP solver tolerance equalities\n            - qp_tol_ineq: QP solver tolerance inequalities\n            - qp_tol_comp: QP solver tolerance complementarity\n            - qp_tau_min: for HPIPM QP solvers: minimum value of barrier parameter in HPIPM\n            - qp_mu0: for HPIPM QP solvers: initial value for complementarity slackness\n            - warm_start_first_qp: indicates if first QP in SQP is warm_started\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.set_params_sparse": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.set_params_sparse",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 1938,
    "end_line": 1974,
    "has_docstring": true,
    "docstring": "\n        set parameters of the solvers external function partially:\n        Pseudo: solver.param[idx_values_] = param_values_;\n        Parameters:\n            :param stage_: integer corresponding to shooting node\n            :param idx_values_: 0 based np array (or iterable) of integers: indices of parameter to be set\n            :param param_values_: new parameter values as numpy array\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.__del__": {
    "id": "third_party.acados.acados_template.acados_ocp_solver.AcadosOcpSolver.__del__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_ocp_solver.py",
    "depends_on": [],
    "start_line": 1976,
    "end_line": 1991,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSimDims": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSimDims",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 37,
    "end_line": 96,
    "has_docstring": true,
    "docstring": "\n    Class containing the dimensions of the model to be simulated.\n    ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSimDims.__init__": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSimDims.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 41,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSimDims.nx": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSimDims.nx",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 68,
    "end_line": 72,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSimDims.nz": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSimDims.nz",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 75,
    "end_line": 79,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSimDims.nu": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSimDims.nu",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 82,
    "end_line": 86,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSimDims.np": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSimDims.np",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 89,
    "end_line": 93,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSimDims.set": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSimDims.set",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 95,
    "end_line": 96,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSimOpts": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSimOpts",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 99,
    "end_line": 300,
    "has_docstring": true,
    "docstring": "\n    class containing the solver options\n    ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSimOpts.__init__": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSimOpts.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 103,
    "end_line": 120,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSimOpts.integrator_type": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSimOpts.integrator_type",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 211,
    "end_line": 217,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSimOpts.num_stages": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSimOpts.num_stages",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 233,
    "end_line": 237,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSimOpts.num_steps": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSimOpts.num_steps",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 240,
    "end_line": 244,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSimOpts.newton_iter": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSimOpts.newton_iter",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 247,
    "end_line": 251,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSimOpts.newton_tol": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSimOpts.newton_tol",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 254,
    "end_line": 258,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSimOpts.sens_forw": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSimOpts.sens_forw",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 261,
    "end_line": 265,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSimOpts.sens_adj": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSimOpts.sens_adj",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 268,
    "end_line": 272,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSimOpts.sens_algebraic": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSimOpts.sens_algebraic",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 282,
    "end_line": 286,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSimOpts.sens_hess": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSimOpts.sens_hess",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 275,
    "end_line": 279,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSimOpts.output_z": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSimOpts.output_z",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 289,
    "end_line": 293,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSimOpts.sim_method_jac_reuse": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSimOpts.sim_method_jac_reuse",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 296,
    "end_line": 300,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSimOpts.T": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSimOpts.T",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 229,
    "end_line": 230,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSimOpts.collocation_type": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSimOpts.collocation_type",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 220,
    "end_line": 226,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSimOpts.ext_fun_compile_flags": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSimOpts.ext_fun_compile_flags",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 204,
    "end_line": 208,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSim": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSim",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [
      "third_party.acados.acados_template.acados_sim.AcadosSimDims",
      "third_party.acados.acados_template.acados_sim.AcadosSimOpts"
    ],
    "start_line": 302,
    "end_line": 367,
    "has_docstring": true,
    "docstring": "\n    The class has the following properties that can be modified to formulate a specific simulation problem, see below:\n\n    :param acados_path: string with the path to acados. It is used to generate the include and lib paths.\n\n    - :py:attr:`dims` of type :py:class:`acados_template.acados_ocp.AcadosSimDims` - are automatically detected from model\n    - :py:attr:`model` of type :py:class:`acados_template.acados_model.AcadosModel`\n    - :py:attr:`solver_options` of type :py:class:`acados_template.acados_sim.AcadosSimOpts`\n\n    - :py:attr:`acados_include_path` (set automatically)\n    - :py:attr:`shared_lib_ext` (set automatically)\n    - :py:attr:`acados_lib_path` (set automatically)\n    - :py:attr:`parameter_values` - used to initialize the parameters (can be changed)\n\n    ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSim.__init__": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSim.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [
      "third_party.acados.acados_template.acados_sim.AcadosSimDims",
      "third_party.acados.acados_template.acados_sim.AcadosSimOpts"
    ],
    "start_line": 318,
    "end_line": 342,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSim.parameter_values": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSim.parameter_values",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 350,
    "end_line": 355,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim.AcadosSim.set": {
    "id": "third_party.acados.acados_template.acados_sim.AcadosSim.set",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim.py",
    "depends_on": [],
    "start_line": 357,
    "end_line": 367,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim_solver.make_sim_dims_consistent": {
    "id": "third_party.acados.acados_template.acados_sim_solver.make_sim_dims_consistent",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim_solver.py",
    "depends_on": [],
    "start_line": 55,
    "end_line": 83,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim_solver.get_sim_layout": {
    "id": "third_party.acados.acados_template.acados_sim_solver.get_sim_layout",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim_solver.py",
    "depends_on": [],
    "start_line": 86,
    "end_line": 91,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim_solver.sim_formulation_json_dump": {
    "id": "third_party.acados.acados_template.acados_sim_solver.sim_formulation_json_dump",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim_solver.py",
    "depends_on": [
      "third_party.acados.acados_template.acados_sim_solver.get_sim_layout"
    ],
    "start_line": 94,
    "end_line": 110,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim_solver.sim_get_default_cmake_builder": {
    "id": "third_party.acados.acados_template.acados_sim_solver.sim_get_default_cmake_builder",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim_solver.py",
    "depends_on": [],
    "start_line": 113,
    "end_line": 120,
    "has_docstring": true,
    "docstring": "\n    If :py:class:`~acados_template.acados_sim_solver.AcadosSimSolver` is used with `CMake` this function returns a good first setting.\n    :return: default :py:class:`~acados_template.builders.CMakeBuilder`\n    ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim_solver.sim_render_templates": {
    "id": "third_party.acados.acados_template.acados_sim_solver.sim_render_templates",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim_solver.py",
    "depends_on": [],
    "start_line": 123,
    "end_line": 162,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim_solver.sim_generate_external_functions": {
    "id": "third_party.acados.acados_template.acados_sim_solver.sim_generate_external_functions",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim_solver.py",
    "depends_on": [],
    "start_line": 165,
    "end_line": 188,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim_solver.AcadosSimSolver": {
    "id": "third_party.acados.acados_template.acados_sim_solver.AcadosSimSolver",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim_solver.py",
    "depends_on": [
      "third_party.acados.acados_template.acados_sim_solver.sim_render_templates",
      "third_party.acados.acados_template.acados_sim_solver.make_sim_dims_consistent",
      "third_party.acados.acados_template.acados_sim_solver.sim_formulation_json_dump",
      "third_party.acados.acados_template.acados_sim_solver.sim_generate_external_functions"
    ],
    "start_line": 191,
    "end_line": 559,
    "has_docstring": true,
    "docstring": "\n    Class to interact with the acados integrator C object.\n\n        :param acados_sim: type :py:class:`~acados_template.acados_ocp.AcadosOcp` (takes values to generate an instance :py:class:`~acados_template.acados_sim.AcadosSim`) or :py:class:`~acados_template.acados_sim.AcadosSim`\n        :param json_file: Default: 'acados_sim.json'\n        :param build: Default: True\n        :param cmake_builder: type :py:class:`~acados_template.utils.CMakeBuilder` generate a `CMakeLists.txt` and use\n            the `CMake` pipeline instead of a `Makefile` (`CMake` seems to be the better option in conjunction with\n            `MS Visual Studio`); default: `None`\n    ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim_solver.AcadosSimSolver.generate": {
    "id": "third_party.acados.acados_template.acados_sim_solver.AcadosSimSolver.generate",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim_solver.py",
    "depends_on": [
      "third_party.acados.acados_template.acados_sim_solver.sim_render_templates",
      "third_party.acados.acados_template.acados_sim_solver.make_sim_dims_consistent",
      "third_party.acados.acados_template.acados_sim_solver.sim_formulation_json_dump",
      "third_party.acados.acados_template.acados_sim_solver.sim_generate_external_functions"
    ],
    "start_line": 213,
    "end_line": 239,
    "has_docstring": true,
    "docstring": "\n        Generates the code for an acados sim solver, given the description in acados_sim\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim_solver.AcadosSimSolver.build": {
    "id": "third_party.acados.acados_template.acados_sim_solver.AcadosSimSolver.build",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim_solver.py",
    "depends_on": [],
    "start_line": 243,
    "end_line": 267,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim_solver.AcadosSimSolver.create_cython_solver": {
    "id": "third_party.acados.acados_template.acados_sim_solver.AcadosSimSolver.create_cython_solver",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim_solver.py",
    "depends_on": [],
    "start_line": 271,
    "end_line": 283,
    "has_docstring": true,
    "docstring": "\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim_solver.AcadosSimSolver.__init__": {
    "id": "third_party.acados.acados_template.acados_sim_solver.AcadosSimSolver.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim_solver.py",
    "depends_on": [],
    "start_line": 285,
    "end_line": 366,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim_solver.AcadosSimSolver.simulate": {
    "id": "third_party.acados.acados_template.acados_sim_solver.AcadosSimSolver.simulate",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim_solver.py",
    "depends_on": [],
    "start_line": 369,
    "end_line": 391,
    "has_docstring": true,
    "docstring": "\n        Simulate the system forward for the given x, u, z, p and return x_next.\n        Wrapper around `solve()` taking care of setting/getting inputs/outputs.\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim_solver.AcadosSimSolver.solve": {
    "id": "third_party.acados.acados_template.acados_sim_solver.AcadosSimSolver.solve",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim_solver.py",
    "depends_on": [],
    "start_line": 394,
    "end_line": 402,
    "has_docstring": true,
    "docstring": "\n        Solve the simulation problem with current input.\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim_solver.AcadosSimSolver.get": {
    "id": "third_party.acados.acados_template.acados_sim_solver.AcadosSimSolver.get",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim_solver.py",
    "depends_on": [],
    "start_line": 405,
    "end_line": 453,
    "has_docstring": true,
    "docstring": "\n        Get the last solution of the solver.\n\n            :param str field: string in ['x', 'u', 'z', 'S_forw', 'Sx', 'Su', 'S_adj', 'S_hess', 'S_algebraic', 'CPUtime', 'time_tot', 'ADtime', 'time_ad', 'LAtime', 'time_la']\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim_solver.AcadosSimSolver.set": {
    "id": "third_party.acados.acados_template.acados_sim_solver.AcadosSimSolver.set",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim_solver.py",
    "depends_on": [],
    "start_line": 457,
    "end_line": 513,
    "has_docstring": true,
    "docstring": "\n        Set numerical data inside the solver.\n\n            :param field: string in ['x', 'u', 'p', 'xdot', 'z', 'seed_adj', 'T']\n            :param value: the value with appropriate size.\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim_solver.AcadosSimSolver.options_set": {
    "id": "third_party.acados.acados_template.acados_sim_solver.AcadosSimSolver.options_set",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim_solver.py",
    "depends_on": [],
    "start_line": 516,
    "end_line": 540,
    "has_docstring": true,
    "docstring": "\n        Set solver options\n\n            :param field: string in ['sens_forw', 'sens_adj', 'sens_hess']\n            :param value: Boolean\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.acados_sim_solver.AcadosSimSolver.__del__": {
    "id": "third_party.acados.acados_template.acados_sim_solver.AcadosSimSolver.__del__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\acados_sim_solver.py",
    "relative_path": "third_party\\acados\\acados_template\\acados_sim_solver.py",
    "depends_on": [],
    "start_line": 543,
    "end_line": 559,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.builders.CMakeBuilder": {
    "id": "third_party.acados.acados_template.builders.CMakeBuilder",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\builders.py",
    "relative_path": "third_party\\acados\\acados_template\\builders.py",
    "depends_on": [],
    "start_line": 40,
    "end_line": 131,
    "has_docstring": true,
    "docstring": "\n    Class to work with the `CMake` build system.\n    ",
    "language": "python"
  },
  "third_party.acados.acados_template.builders.CMakeBuilder.__init__": {
    "id": "third_party.acados.acados_template.builders.CMakeBuilder.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\builders.py",
    "relative_path": "third_party\\acados\\acados_template\\builders.py",
    "depends_on": [],
    "start_line": 44,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.builders.CMakeBuilder.get_cmd1_cmake": {
    "id": "third_party.acados.acados_template.builders.CMakeBuilder.get_cmd1_cmake",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\builders.py",
    "relative_path": "third_party\\acados\\acados_template\\builders.py",
    "depends_on": [],
    "start_line": 59,
    "end_line": 67,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.builders.CMakeBuilder.get_cmd2_build": {
    "id": "third_party.acados.acados_template.builders.CMakeBuilder.get_cmd2_build",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\builders.py",
    "relative_path": "third_party\\acados\\acados_template\\builders.py",
    "depends_on": [],
    "start_line": 70,
    "end_line": 75,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.builders.CMakeBuilder.get_cmd3_install": {
    "id": "third_party.acados.acados_template.builders.CMakeBuilder.get_cmd3_install",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\builders.py",
    "relative_path": "third_party\\acados\\acados_template\\builders.py",
    "depends_on": [],
    "start_line": 78,
    "end_line": 79,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.builders.CMakeBuilder.exec": {
    "id": "third_party.acados.acados_template.builders.CMakeBuilder.exec",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\builders.py",
    "relative_path": "third_party\\acados\\acados_template\\builders.py",
    "depends_on": [],
    "start_line": 81,
    "end_line": 131,
    "has_docstring": true,
    "docstring": "\n        Execute the compilation using `CMake` with the given settings.\n        :param code_export_directory: must be the absolute path to the directory where the code was exported to\n        ",
    "language": "python"
  },
  "third_party.acados.acados_template.casadi_function_generation.get_casadi_symbol": {
    "id": "third_party.acados.acados_template.casadi_function_generation.get_casadi_symbol",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\casadi_function_generation.py",
    "relative_path": "third_party\\acados\\acados_template\\casadi_function_generation.py",
    "depends_on": [],
    "start_line": 36,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.casadi_function_generation.generate_c_code_discrete_dynamics": {
    "id": "third_party.acados.acados_template.casadi_function_generation.generate_c_code_discrete_dynamics",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\casadi_function_generation.py",
    "relative_path": "third_party\\acados\\acados_template\\casadi_function_generation.py",
    "depends_on": [
      "third_party.acados.acados_template.casadi_function_generation.get_casadi_symbol"
    ],
    "start_line": 49,
    "end_line": 94,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.casadi_function_generation.generate_c_code_explicit_ode": {
    "id": "third_party.acados.acados_template.casadi_function_generation.generate_c_code_explicit_ode",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\casadi_function_generation.py",
    "relative_path": "third_party\\acados\\acados_template\\casadi_function_generation.py",
    "depends_on": [
      "third_party.acados.acados_template.casadi_function_generation.get_casadi_symbol"
    ],
    "start_line": 98,
    "end_line": 172,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.casadi_function_generation.generate_c_code_implicit_ode": {
    "id": "third_party.acados.acados_template.casadi_function_generation.generate_c_code_implicit_ode",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\casadi_function_generation.py",
    "relative_path": "third_party\\acados\\acados_template\\casadi_function_generation.py",
    "depends_on": [
      "third_party.acados.acados_template.casadi_function_generation.get_casadi_symbol"
    ],
    "start_line": 175,
    "end_line": 252,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.casadi_function_generation.generate_c_code_gnsf": {
    "id": "third_party.acados.acados_template.casadi_function_generation.generate_c_code_gnsf",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\casadi_function_generation.py",
    "relative_path": "third_party\\acados\\acados_template\\casadi_function_generation.py",
    "depends_on": [
      "third_party.acados.acados_template.casadi_function_generation.get_casadi_symbol"
    ],
    "start_line": 255,
    "end_line": 335,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.casadi_function_generation.generate_c_code_external_cost": {
    "id": "third_party.acados.acados_template.casadi_function_generation.generate_c_code_external_cost",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\casadi_function_generation.py",
    "relative_path": "third_party\\acados\\acados_template\\casadi_function_generation.py",
    "depends_on": [
      "third_party.acados.acados_template.casadi_function_generation.get_casadi_symbol"
    ],
    "start_line": 342,
    "end_line": 414,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.casadi_function_generation.generate_c_code_nls_cost": {
    "id": "third_party.acados.acados_template.casadi_function_generation.generate_c_code_nls_cost",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\casadi_function_generation.py",
    "relative_path": "third_party\\acados\\acados_template\\casadi_function_generation.py",
    "depends_on": [
      "third_party.acados.acados_template.casadi_function_generation.get_casadi_symbol"
    ],
    "start_line": 417,
    "end_line": 476,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.casadi_function_generation.generate_c_code_conl_cost": {
    "id": "third_party.acados.acados_template.casadi_function_generation.generate_c_code_conl_cost",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\casadi_function_generation.py",
    "relative_path": "third_party\\acados\\acados_template\\casadi_function_generation.py",
    "depends_on": [
      "third_party.acados.acados_template.casadi_function_generation.get_casadi_symbol"
    ],
    "start_line": 480,
    "end_line": 570,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.casadi_function_generation.generate_c_code_constraint": {
    "id": "third_party.acados.acados_template.casadi_function_generation.generate_c_code_constraint",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\casadi_function_generation.py",
    "relative_path": "third_party\\acados\\acados_template\\casadi_function_generation.py",
    "depends_on": [
      "third_party.acados.acados_template.casadi_function_generation.get_casadi_symbol"
    ],
    "start_line": 576,
    "end_line": 707,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.utils.get_acados_path": {
    "id": "third_party.acados.acados_template.utils.get_acados_path",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\utils.py",
    "relative_path": "third_party\\acados\\acados_template\\utils.py",
    "depends_on": [],
    "start_line": 49,
    "end_line": 59,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.utils.get_python_interface_path": {
    "id": "third_party.acados.acados_template.utils.get_python_interface_path",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\utils.py",
    "relative_path": "third_party\\acados\\acados_template\\utils.py",
    "depends_on": [
      "third_party.acados.acados_template.utils.get_acados_path"
    ],
    "start_line": 62,
    "end_line": 67,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.utils.get_tera_exec_path": {
    "id": "third_party.acados.acados_template.utils.get_tera_exec_path",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\utils.py",
    "relative_path": "third_party\\acados\\acados_template\\utils.py",
    "depends_on": [
      "third_party.acados.acados_template.utils.get_acados_path"
    ],
    "start_line": 70,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.utils.check_casadi_version": {
    "id": "third_party.acados.acados_template.utils.check_casadi_version",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\utils.py",
    "relative_path": "third_party\\acados\\acados_template\\utils.py",
    "depends_on": [],
    "start_line": 79,
    "end_line": 89,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.utils.is_column": {
    "id": "third_party.acados.acados_template.utils.is_column",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\utils.py",
    "relative_path": "third_party\\acados\\acados_template\\utils.py",
    "depends_on": [],
    "start_line": 92,
    "end_line": 111,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.utils.is_empty": {
    "id": "third_party.acados.acados_template.utils.is_empty",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\utils.py",
    "relative_path": "third_party\\acados\\acados_template\\utils.py",
    "depends_on": [],
    "start_line": 114,
    "end_line": 131,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.utils.casadi_length": {
    "id": "third_party.acados.acados_template.utils.casadi_length",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\utils.py",
    "relative_path": "third_party\\acados\\acados_template\\utils.py",
    "depends_on": [],
    "start_line": 134,
    "end_line": 139,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.utils.make_model_consistent": {
    "id": "third_party.acados.acados_template.utils.make_model_consistent",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\utils.py",
    "relative_path": "third_party\\acados\\acados_template\\utils.py",
    "depends_on": [
      "third_party.acados.acados_template.utils.is_empty"
    ],
    "start_line": 142,
    "end_line": 162,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.utils.get_lib_ext": {
    "id": "third_party.acados.acados_template.utils.get_lib_ext",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\utils.py",
    "relative_path": "third_party\\acados\\acados_template\\utils.py",
    "depends_on": [],
    "start_line": 164,
    "end_line": 171,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.utils.get_tera": {
    "id": "third_party.acados.acados_template.utils.get_tera",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\utils.py",
    "relative_path": "third_party\\acados\\acados_template\\utils.py",
    "depends_on": [
      "third_party.acados.acados_template.utils.get_tera_exec_path",
      "third_party.acados.acados_template.utils.get_acados_path"
    ],
    "start_line": 173,
    "end_line": 214,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.utils.render_template": {
    "id": "third_party.acados.acados_template.utils.render_template",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\utils.py",
    "relative_path": "third_party\\acados\\acados_template\\utils.py",
    "depends_on": [
      "third_party.acados.acados_template.utils.get_tera"
    ],
    "start_line": 217,
    "end_line": 240,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.utils.make_object_json_dumpable": {
    "id": "third_party.acados.acados_template.utils.make_object_json_dumpable",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\utils.py",
    "relative_path": "third_party\\acados\\acados_template\\utils.py",
    "depends_on": [],
    "start_line": 244,
    "end_line": 255,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.utils.format_class_dict": {
    "id": "third_party.acados.acados_template.utils.format_class_dict",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\utils.py",
    "relative_path": "third_party\\acados\\acados_template\\utils.py",
    "depends_on": [
      "third_party.acados.acados_template.utils.format_class_dict"
    ],
    "start_line": 258,
    "end_line": 269,
    "has_docstring": true,
    "docstring": "\n    removes the __ artifact from class to dict conversion\n    ",
    "language": "python"
  },
  "third_party.acados.acados_template.utils.get_ocp_nlp_layout": {
    "id": "third_party.acados.acados_template.utils.get_ocp_nlp_layout",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\utils.py",
    "relative_path": "third_party\\acados\\acados_template\\utils.py",
    "depends_on": [
      "third_party.acados.acados_template.utils.get_python_interface_path"
    ],
    "start_line": 272,
    "end_line": 277,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.utils.get_default_simulink_opts": {
    "id": "third_party.acados.acados_template.utils.get_default_simulink_opts",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\utils.py",
    "relative_path": "third_party\\acados\\acados_template\\utils.py",
    "depends_on": [
      "third_party.acados.acados_template.utils.get_python_interface_path"
    ],
    "start_line": 280,
    "end_line": 285,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.utils.J_to_idx": {
    "id": "third_party.acados.acados_template.utils.J_to_idx",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\utils.py",
    "relative_path": "third_party\\acados\\acados_template\\utils.py",
    "depends_on": [],
    "start_line": 288,
    "end_line": 299,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.utils.J_to_idx_slack": {
    "id": "third_party.acados.acados_template.utils.J_to_idx_slack",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\utils.py",
    "relative_path": "third_party\\acados\\acados_template\\utils.py",
    "depends_on": [],
    "start_line": 302,
    "end_line": 320,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.utils.acados_dae_model_json_dump": {
    "id": "third_party.acados.acados_template.utils.acados_dae_model_json_dump",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\utils.py",
    "relative_path": "third_party\\acados\\acados_template\\utils.py",
    "depends_on": [
      "third_party.acados.acados_template.utils.make_object_json_dumpable"
    ],
    "start_line": 323,
    "end_line": 348,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.utils.set_up_imported_gnsf_model": {
    "id": "third_party.acados.acados_template.utils.set_up_imported_gnsf_model",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\utils.py",
    "relative_path": "third_party\\acados\\acados_template\\utils.py",
    "depends_on": [],
    "start_line": 351,
    "end_line": 408,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.utils.idx_perm_to_ipiv": {
    "id": "third_party.acados.acados_template.utils.idx_perm_to_ipiv",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\utils.py",
    "relative_path": "third_party\\acados\\acados_template\\utils.py",
    "depends_on": [],
    "start_line": 411,
    "end_line": 430,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.utils.print_casadi_expression": {
    "id": "third_party.acados.acados_template.utils.print_casadi_expression",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\utils.py",
    "relative_path": "third_party\\acados\\acados_template\\utils.py",
    "depends_on": [
      "third_party.acados.acados_template.utils.casadi_length"
    ],
    "start_line": 433,
    "end_line": 435,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.zoro_description.ZoroDescription": {
    "id": "third_party.acados.acados_template.zoro_description.ZoroDescription",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\zoro_description.py",
    "relative_path": "third_party\\acados\\acados_template\\zoro_description.py",
    "depends_on": [],
    "start_line": 34,
    "end_line": 58,
    "has_docstring": true,
    "docstring": "\n    Zero-Order Robust Optimization scheme.\n\n    For advanced users.\n    ",
    "language": "python"
  },
  "third_party.acados.acados_template.zoro_description.process_zoro_description": {
    "id": "third_party.acados.acados_template.zoro_description.process_zoro_description",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\zoro_description.py",
    "relative_path": "third_party\\acados\\acados_template\\zoro_description.py",
    "depends_on": [
      "third_party.acados.acados_template.zoro_description.ZoroDescription"
    ],
    "start_line": 60,
    "end_line": 78,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.gnsf.check_reformulation.check_reformulation": {
    "id": "third_party.acados.acados_template.gnsf.check_reformulation.check_reformulation",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\gnsf\\check_reformulation.py",
    "relative_path": "third_party\\acados\\acados_template\\gnsf\\check_reformulation.py",
    "depends_on": [],
    "start_line": 36,
    "end_line": 216,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.gnsf.detect_affine_terms_reduce_nonlinearity.detect_affine_terms_reduce_nonlinearity": {
    "id": "third_party.acados.acados_template.gnsf.detect_affine_terms_reduce_nonlinearity.detect_affine_terms_reduce_nonlinearity",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\gnsf\\detect_affine_terms_reduce_nonlinearity.py",
    "relative_path": "third_party\\acados\\acados_template\\gnsf\\detect_affine_terms_reduce_nonlinearity.py",
    "depends_on": [],
    "start_line": 37,
    "end_line": 278,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.gnsf.detect_gnsf_structure.detect_gnsf_structure": {
    "id": "third_party.acados.acados_template.gnsf.detect_gnsf_structure.detect_gnsf_structure",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\gnsf\\detect_gnsf_structure.py",
    "relative_path": "third_party\\acados\\acados_template\\gnsf\\detect_gnsf_structure.py",
    "depends_on": [],
    "start_line": 44,
    "end_line": 240,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.gnsf.determine_input_nonlinearity_function.determine_input_nonlinearity_function": {
    "id": "third_party.acados.acados_template.gnsf.determine_input_nonlinearity_function.determine_input_nonlinearity_function",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\gnsf\\determine_input_nonlinearity_function.py",
    "relative_path": "third_party\\acados\\acados_template\\gnsf\\determine_input_nonlinearity_function.py",
    "depends_on": [],
    "start_line": 36,
    "end_line": 110,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.gnsf.determine_trivial_gnsf_transcription.determine_trivial_gnsf_transcription": {
    "id": "third_party.acados.acados_template.gnsf.determine_trivial_gnsf_transcription.determine_trivial_gnsf_transcription",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\gnsf\\determine_trivial_gnsf_transcription.py",
    "relative_path": "third_party\\acados\\acados_template\\gnsf\\determine_trivial_gnsf_transcription.py",
    "depends_on": [],
    "start_line": 38,
    "end_line": 155,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.gnsf.reformulate_with_invertible_E_mat.reformulate_with_invertible_E_mat": {
    "id": "third_party.acados.acados_template.gnsf.reformulate_with_invertible_E_mat.reformulate_with_invertible_E_mat",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\gnsf\\reformulate_with_invertible_E_mat.py",
    "relative_path": "third_party\\acados\\acados_template\\gnsf\\reformulate_with_invertible_E_mat.py",
    "depends_on": [],
    "start_line": 37,
    "end_line": 167,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.gnsf.reformulate_with_LOS.reformulate_with_LOS": {
    "id": "third_party.acados.acados_template.gnsf.reformulate_with_LOS.reformulate_with_LOS",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\gnsf\\reformulate_with_LOS.py",
    "relative_path": "third_party\\acados\\acados_template\\gnsf\\reformulate_with_LOS.py",
    "depends_on": [],
    "start_line": 38,
    "end_line": 394,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.acados_template.gnsf.structure_detection_print_summary.structure_detection_print_summary": {
    "id": "third_party.acados.acados_template.gnsf.structure_detection_print_summary.structure_detection_print_summary",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\acados_template\\gnsf\\structure_detection_print_summary.py",
    "relative_path": "third_party\\acados\\acados_template\\gnsf\\structure_detection_print_summary.py",
    "depends_on": [],
    "start_line": 36,
    "end_line": 174,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "third_party.acados.include.acados.utils.strsep.strsep_acados": {
    "id": "third_party.acados.include.acados.utils.strsep.strsep_acados",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\acados\\utils\\strsep.h",
    "relative_path": "third_party\\acados\\include\\acados\\utils\\strsep.h",
    "depends_on": [],
    "start_line": 45,
    "end_line": 61,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "char* strsep_acados(char** stringp, const char* delim)\n{\n    char* result;\n\n    if ((stringp == NULL) || (*stringp == NULL)) return NULL;\n\n    result = *stringp;\n\n    while (**stringp && !STD(strchr)(delim, **stringp)) ++*stringp;\n\n    if (**stringp)\n        *(*stringp)++ = '\\0';\n    else\n        *stringp = NULL;\n\n    return result;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Bounds.Bounds_getNumberOfType": {
    "id": "third_party.acados.include.qpOASES_e.Bounds.Bounds_getNumberOfType",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "depends_on": [],
    "start_line": 357,
    "end_line": 370,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int Bounds_getNumberOfType( Bounds* _THIS, SubjectToType _type )\n{\n\tint i;\n\tint numberOfType = 0;\n\n\tif ( _THIS->type != 0 )\n\t{\n\t\tfor( i=0; i<_THIS->n; ++i )\n\t\t\tif ( _THIS->type[i] == _type )\n\t\t\t\t++numberOfType;\n\t}\n\n\treturn numberOfType;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Bounds.Bounds_getType": {
    "id": "third_party.acados.include.qpOASES_e.Bounds.Bounds_getType",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "depends_on": [],
    "start_line": 376,
    "end_line": 382,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline SubjectToType Bounds_getType( Bounds* _THIS, int i )\n{\n\tif ( ( i >= 0 ) && ( i < _THIS->n ) )\n\t\treturn _THIS->type[i];\n\n\treturn ST_UNKNOWN;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Bounds.Bounds_getStatus": {
    "id": "third_party.acados.include.qpOASES_e.Bounds.Bounds_getStatus",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "depends_on": [],
    "start_line": 388,
    "end_line": 394,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline SubjectToStatus Bounds_getStatus( Bounds* _THIS, int i )\n{\n\tif ( ( i >= 0 ) && ( i < _THIS->n ) )\n\t\treturn _THIS->status[i];\n\n\treturn ST_UNDEFINED;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Bounds.Bounds_setType": {
    "id": "third_party.acados.include.qpOASES_e.Bounds.Bounds_setType",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "depends_on": [],
    "start_line": 400,
    "end_line": 409,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue Bounds_setType( Bounds* _THIS, int i, SubjectToType value )\n{\n\tif ( ( i >= 0 ) && ( i < _THIS->n ) )\n\t{\n\t\t_THIS->type[i] = value;\n\t\treturn SUCCESSFUL_RETURN;\n\t}\n\telse\n\t\treturn THROWERROR( RET_INDEX_OUT_OF_BOUNDS );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Bounds.Bounds_setStatus": {
    "id": "third_party.acados.include.qpOASES_e.Bounds.Bounds_setStatus",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "depends_on": [],
    "start_line": 415,
    "end_line": 424,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue Bounds_setStatus( Bounds* _THIS, int i, SubjectToStatus value )\n{\n\tif ( ( i >= 0 ) && ( i < _THIS->n ) )\n\t{\n\t\t_THIS->status[i] = value;\n\t\treturn SUCCESSFUL_RETURN;\n\t}\n\telse\n\t\treturn THROWERROR( RET_INDEX_OUT_OF_BOUNDS );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Bounds.Bounds_setNoLower": {
    "id": "third_party.acados.include.qpOASES_e.Bounds.Bounds_setNoLower",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "depends_on": [],
    "start_line": 430,
    "end_line": 433,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline void Bounds_setNoLower( Bounds* _THIS, BooleanType _status )\n{\n\t_THIS->noLower = _status;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Bounds.Bounds_setNoUpper": {
    "id": "third_party.acados.include.qpOASES_e.Bounds.Bounds_setNoUpper",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "depends_on": [],
    "start_line": 439,
    "end_line": 442,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline void Bounds_setNoUpper( Bounds* _THIS, BooleanType _status )\n{\n\t_THIS->noUpper = _status;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Bounds.Bounds_hasNoLower": {
    "id": "third_party.acados.include.qpOASES_e.Bounds.Bounds_hasNoLower",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "depends_on": [],
    "start_line": 448,
    "end_line": 451,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline BooleanType Bounds_hasNoLower( Bounds* _THIS )\n{\n\treturn _THIS->noLower;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Bounds.Bounds_hasNoUpper": {
    "id": "third_party.acados.include.qpOASES_e.Bounds.Bounds_hasNoUpper",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "depends_on": [],
    "start_line": 457,
    "end_line": 460,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline BooleanType Bounds_hasNoUpper( Bounds* _THIS )\n{\n\treturn _THIS->noUpper;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Bounds.Bounds_getNV": {
    "id": "third_party.acados.include.qpOASES_e.Bounds.Bounds_getNV",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "depends_on": [],
    "start_line": 467,
    "end_line": 470,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int Bounds_getNV( Bounds* _THIS )\n{\n \treturn _THIS->n;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Bounds.Bounds_getNFV": {
    "id": "third_party.acados.include.qpOASES_e.Bounds.Bounds_getNFV",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "depends_on": [],
    "start_line": 476,
    "end_line": 479,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int Bounds_getNFV( Bounds* _THIS )\n{\n \treturn Bounds_getNumberOfType( _THIS,ST_EQUALITY );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Bounds.Bounds_getNBV": {
    "id": "third_party.acados.include.qpOASES_e.Bounds.Bounds_getNBV",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "depends_on": [],
    "start_line": 485,
    "end_line": 488,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int Bounds_getNBV( Bounds* _THIS )\n{\n \treturn Bounds_getNumberOfType( _THIS,ST_BOUNDED );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Bounds.Bounds_getNUV": {
    "id": "third_party.acados.include.qpOASES_e.Bounds.Bounds_getNUV",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "depends_on": [],
    "start_line": 494,
    "end_line": 497,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int Bounds_getNUV( Bounds* _THIS )\n{\n\treturn Bounds_getNumberOfType( _THIS,ST_UNBOUNDED );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Bounds.Bounds_getNFR": {
    "id": "third_party.acados.include.qpOASES_e.Bounds.Bounds_getNFR",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "depends_on": [],
    "start_line": 503,
    "end_line": 506,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int Bounds_getNFR( Bounds* _THIS )\n{\n \treturn Indexlist_getLength( _THIS->freee );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Bounds.Bounds_getNFX": {
    "id": "third_party.acados.include.qpOASES_e.Bounds.Bounds_getNFX",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "depends_on": [],
    "start_line": 512,
    "end_line": 515,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int Bounds_getNFX( Bounds* _THIS )\n{\n\treturn Indexlist_getLength( _THIS->fixed );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Bounds.Bounds_getFree": {
    "id": "third_party.acados.include.qpOASES_e.Bounds.Bounds_getFree",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "depends_on": [],
    "start_line": 521,
    "end_line": 524,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline Indexlist* Bounds_getFree( Bounds* _THIS )\n{\n\treturn _THIS->freee;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Bounds.Bounds_getFixed": {
    "id": "third_party.acados.include.qpOASES_e.Bounds.Bounds_getFixed",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Bounds.h",
    "depends_on": [],
    "start_line": 530,
    "end_line": 533,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline Indexlist* Bounds_getFixed( Bounds* _THIS )\n{\n\treturn _THIS->fixed;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Constraints.Constraints_getNumberOfType": {
    "id": "third_party.acados.include.qpOASES_e.Constraints.Constraints_getNumberOfType",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "depends_on": [],
    "start_line": 347,
    "end_line": 360,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int Constraints_getNumberOfType( Constraints* _THIS, SubjectToType _type )\n{\n\tint i;\n\tint numberOfType = 0;\n\n\tif ( _THIS->type != 0 )\n\t{\n\t\tfor( i=0; i<_THIS->n; ++i )\n\t\t\tif ( _THIS->type[i] == _type )\n\t\t\t\t++numberOfType;\n\t}\n\n\treturn numberOfType;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Constraints.Constraints_getType": {
    "id": "third_party.acados.include.qpOASES_e.Constraints.Constraints_getType",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "depends_on": [],
    "start_line": 366,
    "end_line": 372,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline SubjectToType Constraints_getType( Constraints* _THIS, int i )\n{\n\tif ( ( i >= 0 ) && ( i < _THIS->n ) )\n\t\treturn _THIS->type[i];\n\n\treturn ST_UNKNOWN;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Constraints.Constraints_getStatus": {
    "id": "third_party.acados.include.qpOASES_e.Constraints.Constraints_getStatus",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "depends_on": [],
    "start_line": 378,
    "end_line": 384,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline SubjectToStatus Constraints_getStatus( Constraints* _THIS, int i )\n{\n\tif ( ( i >= 0 ) && ( i < _THIS->n ) )\n\t\treturn _THIS->status[i];\n\n\treturn ST_UNDEFINED;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Constraints.Constraints_setType": {
    "id": "third_party.acados.include.qpOASES_e.Constraints.Constraints_setType",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "depends_on": [],
    "start_line": 390,
    "end_line": 399,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue Constraints_setType( Constraints* _THIS, int i, SubjectToType value )\n{\n\tif ( ( i >= 0 ) && ( i < _THIS->n ) )\n\t{\n\t\t_THIS->type[i] = value;\n\t\treturn SUCCESSFUL_RETURN;\n\t}\n\telse\n\t\treturn THROWERROR( RET_INDEX_OUT_OF_BOUNDS );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Constraints.Constraints_setStatus": {
    "id": "third_party.acados.include.qpOASES_e.Constraints.Constraints_setStatus",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "depends_on": [],
    "start_line": 405,
    "end_line": 414,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue Constraints_setStatus( Constraints* _THIS, int i, SubjectToStatus value )\n{\n\tif ( ( i >= 0 ) && ( i < _THIS->n ) )\n\t{\n\t\t_THIS->status[i] = value;\n\t\treturn SUCCESSFUL_RETURN;\n\t}\n\telse\n\t\treturn THROWERROR( RET_INDEX_OUT_OF_BOUNDS );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Constraints.Constraints_setNoLower": {
    "id": "third_party.acados.include.qpOASES_e.Constraints.Constraints_setNoLower",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "depends_on": [],
    "start_line": 420,
    "end_line": 423,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline void Constraints_setNoLower( Constraints* _THIS, BooleanType _status )\n{\n\t_THIS->noLower = _status;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Constraints.Constraints_setNoUpper": {
    "id": "third_party.acados.include.qpOASES_e.Constraints.Constraints_setNoUpper",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "depends_on": [],
    "start_line": 429,
    "end_line": 432,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline void Constraints_setNoUpper( Constraints* _THIS, BooleanType _status )\n{\n\t_THIS->noUpper = _status;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Constraints.Constraints_hasNoLower": {
    "id": "third_party.acados.include.qpOASES_e.Constraints.Constraints_hasNoLower",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "depends_on": [],
    "start_line": 438,
    "end_line": 441,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline BooleanType Constraints_hasNoLower( Constraints* _THIS )\n{\n\treturn _THIS->noLower;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Constraints.Constraints_hasNoUpper": {
    "id": "third_party.acados.include.qpOASES_e.Constraints.Constraints_hasNoUpper",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "depends_on": [],
    "start_line": 447,
    "end_line": 450,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline BooleanType Constraints_hasNoUpper( Constraints* _THIS )\n{\n\treturn _THIS->noUpper;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Constraints.Constraints_getNC": {
    "id": "third_party.acados.include.qpOASES_e.Constraints.Constraints_getNC",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "depends_on": [],
    "start_line": 457,
    "end_line": 460,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int Constraints_getNC( Constraints* _THIS )\n{\n \treturn _THIS->n;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Constraints.Constraints_getNEC": {
    "id": "third_party.acados.include.qpOASES_e.Constraints.Constraints_getNEC",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "depends_on": [],
    "start_line": 466,
    "end_line": 469,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int Constraints_getNEC( Constraints* _THIS )\n{\n\treturn Constraints_getNumberOfType( _THIS,ST_EQUALITY );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Constraints.Constraints_getNIC": {
    "id": "third_party.acados.include.qpOASES_e.Constraints.Constraints_getNIC",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "depends_on": [],
    "start_line": 475,
    "end_line": 478,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int Constraints_getNIC( Constraints* _THIS )\n{\n \treturn Constraints_getNumberOfType( _THIS,ST_BOUNDED );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Constraints.Constraints_getNUC": {
    "id": "third_party.acados.include.qpOASES_e.Constraints.Constraints_getNUC",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "depends_on": [],
    "start_line": 484,
    "end_line": 487,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int Constraints_getNUC( Constraints* _THIS )\n{\n \treturn Constraints_getNumberOfType( _THIS,ST_UNBOUNDED );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Constraints.Constraints_getNAC": {
    "id": "third_party.acados.include.qpOASES_e.Constraints.Constraints_getNAC",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "depends_on": [],
    "start_line": 493,
    "end_line": 496,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int Constraints_getNAC( Constraints* _THIS )\n{\n \treturn Indexlist_getLength( _THIS->active );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Constraints.Constraints_getNIAC": {
    "id": "third_party.acados.include.qpOASES_e.Constraints.Constraints_getNIAC",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "depends_on": [],
    "start_line": 502,
    "end_line": 505,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int Constraints_getNIAC( Constraints* _THIS )\n{\n\treturn Indexlist_getLength( _THIS->inactive );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Constraints.Constraints_getActive": {
    "id": "third_party.acados.include.qpOASES_e.Constraints.Constraints_getActive",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "depends_on": [],
    "start_line": 512,
    "end_line": 515,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline Indexlist* Constraints_getActive( Constraints* _THIS )\n{\n\treturn _THIS->active;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Constraints.Constraints_getInactive": {
    "id": "third_party.acados.include.qpOASES_e.Constraints.Constraints_getInactive",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Constraints.h",
    "depends_on": [],
    "start_line": 521,
    "end_line": 524,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline Indexlist* Constraints_getInactive( Constraints* _THIS )\n{\n\treturn _THIS->inactive;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Indexlist.Indexlist_getNumber": {
    "id": "third_party.acados.include.qpOASES_e.Indexlist.Indexlist_getNumber",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Indexlist.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Indexlist.h",
    "depends_on": [],
    "start_line": 173,
    "end_line": 180,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int Indexlist_getNumber( Indexlist* _THIS, int physicalindex )\n{\n\t/* consistency check */\n\tif ( ( physicalindex < 0 ) || ( physicalindex > _THIS->length ) )\n\t\treturn -RET_INDEXLIST_OUTOFBOUNDS;\n\n\treturn _THIS->number[physicalindex];\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Indexlist.Indexlist_getLength": {
    "id": "third_party.acados.include.qpOASES_e.Indexlist.Indexlist_getLength",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Indexlist.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Indexlist.h",
    "depends_on": [],
    "start_line": 186,
    "end_line": 189,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int Indexlist_getLength( Indexlist* _THIS )\n{\n\treturn _THIS->length;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Indexlist.Indexlist_getLastNumber": {
    "id": "third_party.acados.include.qpOASES_e.Indexlist.Indexlist_getLastNumber",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Indexlist.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Indexlist.h",
    "depends_on": [],
    "start_line": 195,
    "end_line": 198,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int Indexlist_getLastNumber( Indexlist* _THIS )\n{\n\treturn _THIS->number[_THIS->length-1];\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Indexlist.Indexlist_isMember": {
    "id": "third_party.acados.include.qpOASES_e.Indexlist.Indexlist_isMember",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Indexlist.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Indexlist.h",
    "depends_on": [],
    "start_line": 204,
    "end_line": 210,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline BooleanType Indexlist_isMember( Indexlist* _THIS, int _number )\n{\n\tif ( Indexlist_getIndex( _THIS,_number ) >= 0 )\n\t\treturn BT_TRUE;\n\telse\n\t\treturn BT_FALSE;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.MessageHandling.MessageHandling_getErrorVisibilityStatus": {
    "id": "third_party.acados.include.qpOASES_e.MessageHandling.MessageHandling_getErrorVisibilityStatus",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\MessageHandling.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\MessageHandling.h",
    "depends_on": [],
    "start_line": 443,
    "end_line": 446,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline VisibilityStatus MessageHandling_getErrorVisibilityStatus( MessageHandling* _THIS )\n{\n \treturn _THIS->errorVisibility;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.MessageHandling.MessageHandling_getWarningVisibilityStatus": {
    "id": "third_party.acados.include.qpOASES_e.MessageHandling.MessageHandling_getWarningVisibilityStatus",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\MessageHandling.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\MessageHandling.h",
    "depends_on": [],
    "start_line": 452,
    "end_line": 455,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline VisibilityStatus MessageHandling_getWarningVisibilityStatus( MessageHandling* _THIS )\n{\n \treturn _THIS->warningVisibility;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.MessageHandling.MessageHandling_getInfoVisibilityStatus": {
    "id": "third_party.acados.include.qpOASES_e.MessageHandling.MessageHandling_getInfoVisibilityStatus",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\MessageHandling.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\MessageHandling.h",
    "depends_on": [],
    "start_line": 461,
    "end_line": 464,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline VisibilityStatus MessageHandling_getInfoVisibilityStatus( MessageHandling* _THIS )\n{\n \treturn _THIS->infoVisibility;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.MessageHandling.MessageHandling_getOutputFile": {
    "id": "third_party.acados.include.qpOASES_e.MessageHandling.MessageHandling_getOutputFile",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\MessageHandling.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\MessageHandling.h",
    "depends_on": [],
    "start_line": 470,
    "end_line": 473,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline FILE* MessageHandling_getOutputFile( MessageHandling* _THIS )\n{\n \treturn _THIS->outputFile;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.MessageHandling.MessageHandling_getErrorCount": {
    "id": "third_party.acados.include.qpOASES_e.MessageHandling.MessageHandling_getErrorCount",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\MessageHandling.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\MessageHandling.h",
    "depends_on": [],
    "start_line": 479,
    "end_line": 482,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int MessageHandling_getErrorCount( MessageHandling* _THIS )\n{\n \treturn _THIS->errorCount;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.MessageHandling.MessageHandling_setErrorVisibilityStatus": {
    "id": "third_party.acados.include.qpOASES_e.MessageHandling.MessageHandling_setErrorVisibilityStatus",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\MessageHandling.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\MessageHandling.h",
    "depends_on": [],
    "start_line": 488,
    "end_line": 491,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline void MessageHandling_setErrorVisibilityStatus( MessageHandling* _THIS, VisibilityStatus _errorVisibility )\n{\n \t_THIS->errorVisibility = _errorVisibility;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.MessageHandling.MessageHandling_setWarningVisibilityStatus": {
    "id": "third_party.acados.include.qpOASES_e.MessageHandling.MessageHandling_setWarningVisibilityStatus",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\MessageHandling.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\MessageHandling.h",
    "depends_on": [],
    "start_line": 497,
    "end_line": 500,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline void MessageHandling_setWarningVisibilityStatus( MessageHandling* _THIS, VisibilityStatus _warningVisibility )\n{\n \t_THIS->warningVisibility = _warningVisibility;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.MessageHandling.MessageHandling_setInfoVisibilityStatus": {
    "id": "third_party.acados.include.qpOASES_e.MessageHandling.MessageHandling_setInfoVisibilityStatus",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\MessageHandling.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\MessageHandling.h",
    "depends_on": [],
    "start_line": 506,
    "end_line": 509,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline void MessageHandling_setInfoVisibilityStatus( MessageHandling* _THIS, VisibilityStatus _infoVisibility )\n{\n \t_THIS->infoVisibility = _infoVisibility;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.MessageHandling.MessageHandling_setOutputFile": {
    "id": "third_party.acados.include.qpOASES_e.MessageHandling.MessageHandling_setOutputFile",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\MessageHandling.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\MessageHandling.h",
    "depends_on": [],
    "start_line": 515,
    "end_line": 518,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline void MessageHandling_setOutputFile( MessageHandling* _THIS, FILE* _outputFile )\n{\n \t_THIS->outputFile = _outputFile;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.MessageHandling.MessageHandling_setErrorCount": {
    "id": "third_party.acados.include.qpOASES_e.MessageHandling.MessageHandling_setErrorCount",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\MessageHandling.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\MessageHandling.h",
    "depends_on": [],
    "start_line": 524,
    "end_line": 533,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue MessageHandling_setErrorCount( MessageHandling* _THIS, int _errorCount )\n{\n\tif ( _errorCount >= 0 )\n\t{\n\t\t_THIS->errorCount = _errorCount;\n\t\treturn SUCCESSFUL_RETURN;\n\t}\n\telse\n\t\treturn RET_INVALID_ARGUMENTS;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_getBounds": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_getBounds",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 1795,
    "end_line": 1805,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblem_getBounds( QProblem* _THIS, Bounds* _bounds )\n{\n\tint nV = QProblem_getNV( _THIS );\n\n\tif ( nV == 0 )\n\t\treturn THROWERROR( RET_QPOBJECT_NOT_SETUP );\n\n\t_bounds = _THIS->bounds;\n\n\treturn SUCCESSFUL_RETURN;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_getNV": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_getNV",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 1811,
    "end_line": 1814,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int QProblem_getNV( QProblem* _THIS )\n{\n\treturn Bounds_getNV( _THIS->bounds );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_getNFR": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_getNFR",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 1820,
    "end_line": 1823,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int QProblem_getNFR( QProblem* _THIS )\n{\n\treturn Bounds_getNFR( _THIS->bounds );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_getNFX": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_getNFX",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 1829,
    "end_line": 1832,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int QProblem_getNFX( QProblem* _THIS )\n{\n\treturn Bounds_getNFX( _THIS->bounds );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_getNFV": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_getNFV",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 1838,
    "end_line": 1841,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int QProblem_getNFV( QProblem* _THIS )\n{\n\treturn Bounds_getNFV( _THIS->bounds );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_getStatus": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_getStatus",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 1847,
    "end_line": 1850,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline QProblemStatus QProblem_getStatus( QProblem* _THIS )\n{\n\treturn _THIS->status;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_isInitialised": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_isInitialised",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 1856,
    "end_line": 1862,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline BooleanType QProblem_isInitialised( QProblem* _THIS )\n{\n\tif ( _THIS->status == QPS_NOTINITIALISED )\n\t\treturn BT_FALSE;\n\telse\n\t\treturn BT_TRUE;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_isSolved": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_isSolved",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 1868,
    "end_line": 1874,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline BooleanType QProblem_isSolved( QProblem* _THIS )\n{\n\tif ( _THIS->status == QPS_SOLVED )\n\t\treturn BT_TRUE;\n\telse\n\t\treturn BT_FALSE;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_isInfeasible": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_isInfeasible",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 1880,
    "end_line": 1883,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline BooleanType QProblem_isInfeasible( QProblem* _THIS )\n{\n\treturn _THIS->infeasible;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_isUnbounded": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_isUnbounded",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 1889,
    "end_line": 1892,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline BooleanType QProblem_isUnbounded( QProblem* _THIS )\n{\n\treturn _THIS->unbounded;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_getHessianType": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_getHessianType",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 1898,
    "end_line": 1901,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline HessianType QProblem_getHessianType( QProblem* _THIS )\n{\n\treturn _THIS->hessianType;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_setHessianType": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_setHessianType",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 1907,
    "end_line": 1911,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblem_setHessianType( QProblem* _THIS, HessianType _hessianType )\n{\n\t_THIS->hessianType = _hessianType;\n\treturn SUCCESSFUL_RETURN;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_usingRegularisation": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_usingRegularisation",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 1917,
    "end_line": 1923,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline BooleanType QProblem_usingRegularisation( QProblem* _THIS )\n{\n\tif ( _THIS->regVal > QPOASES_ZERO )\n\t\treturn BT_TRUE;\n\telse\n\t\treturn BT_FALSE;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_getOptions": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_getOptions",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 1929,
    "end_line": 1932,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline Options QProblem_getOptions( QProblem* _THIS )\n{\n\treturn _THIS->options;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_setOptions": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_setOptions",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 1938,
    "end_line": 1948,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblem_setOptions(\tQProblem* _THIS,\n\t\t\t\t\t\t\t\t\t\t\t\tOptions _options\n\t\t\t\t\t\t\t\t\t\t\t\t)\n{\n\tOptionsCPY( &_options,&(_THIS->options) );\n\tOptions_ensureConsistency( &(_THIS->options) );\n\n\tQProblem_setPrintLevel( _THIS,_THIS->options.printLevel );\n\n\treturn SUCCESSFUL_RETURN;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_getPrintLevel": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_getPrintLevel",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 1954,
    "end_line": 1957,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline PrintLevel QProblem_getPrintLevel( QProblem* _THIS )\n{\n\treturn _THIS->options.printLevel;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_getCount": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_getCount",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 1963,
    "end_line": 1966,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline unsigned int QProblem_getCount( QProblem* _THIS )\n{\n\treturn _THIS->count;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_resetCounter": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_resetCounter",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 1972,
    "end_line": 1976,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblem_resetCounter( QProblem* _THIS )\n{\n\t_THIS->count = 0;\n\treturn SUCCESSFUL_RETURN;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_setHM": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_setHM",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 1988,
    "end_line": 1994,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblem_setHM( QProblem* _THIS, DenseMatrix* H_new )\n{\n\tif ( H_new == 0 )\n\t\treturn QProblem_setH( _THIS,(real_t*)0 );\n\telse\n\t\treturn QProblem_setH( _THIS,DenseMatrix_getVal(H_new) );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_setH": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_setH",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 2000,
    "end_line": 2019,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblem_setH( QProblem* _THIS, real_t* const H_new )\n{\n\t/* if null pointer is passed, Hessian is set to zero matrix\n\t *                            (or stays identity matrix) */\n\tif ( H_new == 0 )\n\t{\n\t\tif ( _THIS->hessianType == HST_IDENTITY )\n\t\t\treturn SUCCESSFUL_RETURN;\n\n\t\t_THIS->hessianType = HST_ZERO;\n\n\t\t_THIS->H = 0;\n\t}\n\telse\n\t{\n\t\tDenseMatrixCON( _THIS->H,QProblem_getNV( _THIS ),QProblem_getNV( _THIS ),QProblem_getNV( _THIS ),H_new );\n\t}\n\n\treturn SUCCESSFUL_RETURN;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_setG": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_setG",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 2025,
    "end_line": 2038,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblem_setG( QProblem* _THIS, const real_t* const g_new )\n{\n\tunsigned int nV = (unsigned int)QProblem_getNV( _THIS );\n\n\tif ( nV == 0 )\n\t\treturn THROWERROR( RET_QPOBJECT_NOT_SETUP );\n\n\tif ( g_new == 0 )\n\t\treturn THROWERROR( RET_INVALID_ARGUMENTS );\n\n\tmemcpy( _THIS->g,g_new,nV*sizeof(real_t) );\n\n\treturn SUCCESSFUL_RETURN;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_setLB": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_setLB",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 2044,
    "end_line": 2064,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblem_setLB( QProblem* _THIS, const real_t* const lb_new )\n{\n\tunsigned int i;\n\tunsigned int nV = (unsigned int)QProblem_getNV( _THIS );\n\n\tif ( nV == 0 )\n\t\treturn THROWERROR( RET_QPOBJECT_NOT_SETUP );\n\n\tif ( lb_new != 0 )\n\t{\n\t\tmemcpy( _THIS->lb,lb_new,nV*sizeof(real_t) );\n\t}\n\telse\n\t{\n\t\t/* if no lower bounds are specified, set them to -infinity */\n\t\tfor( i=0; i<nV; ++i )\n\t\t\t_THIS->lb[i] = -QPOASES_INFTY;\n\t}\n\n\treturn SUCCESSFUL_RETURN;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_setLBn": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_setLBn",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 2070,
    "end_line": 2086,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblem_setLBn( QProblem* _THIS, int number, real_t value )\n{\n\tint nV = QProblem_getNV( _THIS );\n\n\tif ( nV == 0 )\n\t\treturn THROWERROR( RET_QPOBJECT_NOT_SETUP );\n\n\tif ( ( number >= 0 ) && ( number < nV ) )\n\t{\n\t\t_THIS->lb[number] = value;\n\t\treturn SUCCESSFUL_RETURN;\n\t}\n\telse\n\t{\n\t\treturn THROWERROR( RET_INDEX_OUT_OF_BOUNDS );\n\t}\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_setUB": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_setUB",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 2092,
    "end_line": 2112,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblem_setUB( QProblem* _THIS, const real_t* const ub_new )\n{\n\tunsigned int i;\n\tunsigned int nV = (unsigned int)QProblem_getNV( _THIS );\n\n\tif ( nV == 0 )\n\t\treturn THROWERROR( RET_QPOBJECT_NOT_SETUP );\n\n\tif ( ub_new != 0 )\n\t{\n\t\tmemcpy( _THIS->ub,ub_new,nV*sizeof(real_t) );\n\t}\n\telse\n\t{\n\t\t/* if no upper bounds are specified, set them to infinity */\n\t\tfor( i=0; i<nV; ++i )\n\t\t\t_THIS->ub[i] = QPOASES_INFTY;\n\t}\n\n\treturn SUCCESSFUL_RETURN;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_setUBn": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_setUBn",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 2118,
    "end_line": 2135,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblem_setUBn( QProblem* _THIS, int number, real_t value )\n{\n\tint nV = QProblem_getNV( _THIS );\n\n\tif ( nV == 0 )\n\t\treturn THROWERROR( RET_QPOBJECT_NOT_SETUP );\n\n\tif ( ( number >= 0 ) && ( number < nV ) )\n\t{\n\t\t_THIS->ub[number] = value;\n\n\t\treturn SUCCESSFUL_RETURN;\n\t}\n\telse\n\t{\n\t\treturn THROWERROR( RET_INDEX_OUT_OF_BOUNDS );\n\t}\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_isBlocking": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_isBlocking",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 2142,
    "end_line": 2157,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline BooleanType QProblem_isBlocking(\tQProblem* _THIS,\n\t\t\t\t\t\t\t\t\t\t\t\treal_t num,\n\t\t\t\t\t\t\t\t\t\t\t\treal_t den,\n\t\t\t\t\t\t\t\t\t\t\t\treal_t epsNum,\n\t\t\t\t\t\t\t\t\t\t\t\treal_t epsDen,\n\t\t\t\t\t\t\t\t\t\t\t\treal_t* t\n\t\t\t\t\t\t\t\t\t\t\t\t)\n{\n\tif ( ( den >= epsDen ) && ( num >= epsNum ) )\n\t{\n\t\tif ( num < (*t)*den )\n\t\t\treturn BT_TRUE;\n\t}\n\n\treturn BT_FALSE;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_getConstraints": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_getConstraints",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 2164,
    "end_line": 2174,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblem_getConstraints( QProblem* _THIS, Constraints* _constraints )\n{\n\tint nV = QProblem_getNV( _THIS );\n\n\tif ( nV == 0 )\n\t\treturn THROWERROR( RET_QPOBJECT_NOT_SETUP );\n\n\tConstraintsCPY( _THIS->constraints,_constraints );\n\n\treturn SUCCESSFUL_RETURN;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_getNC": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_getNC",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 2181,
    "end_line": 2184,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int QProblem_getNC( QProblem* _THIS )\n{\n\treturn Constraints_getNC( _THIS->constraints );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_getNEC": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_getNEC",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 2190,
    "end_line": 2193,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int QProblem_getNEC( QProblem* _THIS )\n{\n\treturn Constraints_getNEC( _THIS->constraints );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_getNAC": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_getNAC",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 2199,
    "end_line": 2202,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int QProblem_getNAC( QProblem* _THIS )\n{\n\treturn Constraints_getNAC( _THIS->constraints );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_getNIAC": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_getNIAC",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 2208,
    "end_line": 2211,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int QProblem_getNIAC( QProblem* _THIS )\n{\n\treturn Constraints_getNIAC( _THIS->constraints );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_setAM": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_setAM",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 2223,
    "end_line": 2229,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblem_setAM( QProblem* _THIS, DenseMatrix *A_new )\n{\n\tif ( A_new == 0 )\n\t\treturn QProblem_setA( _THIS,(real_t*)0 );\n\telse\n\t\treturn QProblem_setA( _THIS,DenseMatrix_getVal(A_new) );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_setA": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_setA",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 2235,
    "end_line": 2262,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblem_setA( QProblem* _THIS, real_t* const A_new )\n{\n\tint j;\n\tint nV = QProblem_getNV( _THIS );\n\tint nC = QProblem_getNC( _THIS );\n\n\tif ( nV == 0 )\n\t\treturn THROWERROR( RET_QPOBJECT_NOT_SETUP );\n\n\tif ( A_new == 0 )\n\t\treturn THROWERROR( RET_INVALID_ARGUMENTS );\n\n\tDenseMatrixCON( _THIS->A,QProblem_getNC( _THIS ),QProblem_getNV( _THIS ),QProblem_getNV( _THIS ),A_new );\n\n\tDenseMatrix_times( _THIS->A,1, 1.0, _THIS->x, nV, 0.0, _THIS->Ax, nC);\n\n\tfor( j=0; j<nC; ++j )\n\t{\n\t\t_THIS->Ax_u[j] = _THIS->ubA[j] - _THIS->Ax[j];\n\t\t_THIS->Ax_l[j] = _THIS->Ax[j] - _THIS->lbA[j];\n\n\t\t/* (ckirches) disable constraints with empty rows */\n\t\tif ( qpOASES_isZero( DenseMatrix_getRowNorm( _THIS->A,j,2 ),QPOASES_ZERO ) == BT_TRUE )\n\t\t\tConstraints_setType( _THIS->constraints,j,ST_DISABLED );\n\t}\n\n\treturn SUCCESSFUL_RETURN;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_setLBA": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_setLBA",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 2268,
    "end_line": 2289,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblem_setLBA( QProblem* _THIS, const real_t* const lbA_new )\n{\n\tunsigned int i;\n\tunsigned int nV = (unsigned int)QProblem_getNV( _THIS );\n\tunsigned int nC = (unsigned int)QProblem_getNC( _THIS );\n\n\tif ( nV == 0 )\n\t\treturn THROWERROR( RET_QPOBJECT_NOT_SETUP );\n\n\tif ( lbA_new != 0 )\n\t{\n\t\tmemcpy( _THIS->lbA,lbA_new,nC*sizeof(real_t) );\n\t}\n\telse\n\t{\n\t\t/* if no lower constraints' bounds are specified, set them to -infinity */\n\t\tfor( i=0; i<nC; ++i )\n\t\t\t_THIS->lbA[i] = -QPOASES_INFTY;\n\t}\n\n\treturn SUCCESSFUL_RETURN;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_setLBAn": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_setLBAn",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 2295,
    "end_line": 2310,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblem_setLBAn( QProblem* _THIS, int number, real_t value )\n{\n\tint nV = QProblem_getNV( _THIS );\n\tint nC = QProblem_getNC( _THIS );\n\n\tif ( nV == 0 )\n\t\treturn THROWERROR( RET_QPOBJECT_NOT_SETUP );\n\n\tif ( ( number >= 0 ) && ( number < nC ) )\n\t{\n\t\t_THIS->lbA[number] = value;\n\t\treturn SUCCESSFUL_RETURN;\n\t}\n\telse\n\t\treturn THROWERROR( RET_INDEX_OUT_OF_BOUNDS );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_setUBA": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_setUBA",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 2316,
    "end_line": 2337,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblem_setUBA( QProblem* _THIS, const real_t* const ubA_new )\n{\n\tunsigned int i;\n\tunsigned int nV = (unsigned int)QProblem_getNV( _THIS );\n\tunsigned int nC = (unsigned int)QProblem_getNC( _THIS );\n\n\tif ( nV == 0 )\n\t\treturn THROWERROR( RET_QPOBJECT_NOT_SETUP );\n\n\tif ( ubA_new != 0 )\n\t{\n\t\tmemcpy( _THIS->ubA,ubA_new,nC*sizeof(real_t) );\n\t}\n\telse\n\t{\n\t\t/* if no upper constraints' bounds are specified, set them to infinity */\n\t\tfor( i=0; i<nC; ++i )\n\t\t\t_THIS->ubA[i] = QPOASES_INFTY;\n\t}\n\n\treturn SUCCESSFUL_RETURN;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblem.QProblem_setUBAn": {
    "id": "third_party.acados.include.qpOASES_e.QProblem.QProblem_setUBAn",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblem.h",
    "depends_on": [],
    "start_line": 2343,
    "end_line": 2358,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblem_setUBAn( QProblem* _THIS, int number, real_t value )\n{\n\tint nV = QProblem_getNV( _THIS );\n\tint nC = QProblem_getNC( _THIS );\n\n\tif ( nV == 0 )\n\t\treturn THROWERROR( RET_QPOBJECT_NOT_SETUP );\n\n\tif ( ( number >= 0 ) && ( number < nC ) )\n\t{\n\t\t_THIS->ubA[number] = value;\n\t\treturn SUCCESSFUL_RETURN;\n\t}\n\telse\n\t\treturn THROWERROR( RET_INDEX_OUT_OF_BOUNDS );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_getBounds": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_getBounds",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1203,
    "end_line": 1213,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblemB_getBounds( QProblemB* _THIS, Bounds* _bounds )\n{\n\tint nV = QProblemB_getNV( _THIS );\n\n\tif ( nV == 0 )\n\t\treturn THROWERROR( RET_QPOBJECT_NOT_SETUP );\n\n\t_bounds = _THIS->bounds;\n\n\treturn SUCCESSFUL_RETURN;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_getNV": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_getNV",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1219,
    "end_line": 1222,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int QProblemB_getNV( QProblemB* _THIS )\n{\n\treturn Bounds_getNV( _THIS->bounds );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_getNFR": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_getNFR",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1228,
    "end_line": 1231,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int QProblemB_getNFR( QProblemB* _THIS )\n{\n\treturn Bounds_getNFR( _THIS->bounds );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_getNFX": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_getNFX",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1237,
    "end_line": 1240,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int QProblemB_getNFX( QProblemB* _THIS )\n{\n\treturn Bounds_getNFX( _THIS->bounds );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_getNFV": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_getNFV",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1246,
    "end_line": 1249,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int QProblemB_getNFV( QProblemB* _THIS )\n{\n\treturn Bounds_getNFV( _THIS->bounds );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_getStatus": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_getStatus",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1255,
    "end_line": 1258,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline QProblemStatus QProblemB_getStatus( QProblemB* _THIS )\n{\n\treturn _THIS->status;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_isInitialised": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_isInitialised",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1264,
    "end_line": 1270,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline BooleanType QProblemB_isInitialised( QProblemB* _THIS )\n{\n\tif ( _THIS->status == QPS_NOTINITIALISED )\n\t\treturn BT_FALSE;\n\telse\n\t\treturn BT_TRUE;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_isSolved": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_isSolved",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1276,
    "end_line": 1282,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline BooleanType QProblemB_isSolved( QProblemB* _THIS )\n{\n\tif ( _THIS->status == QPS_SOLVED )\n\t\treturn BT_TRUE;\n\telse\n\t\treturn BT_FALSE;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_isInfeasible": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_isInfeasible",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1288,
    "end_line": 1291,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline BooleanType QProblemB_isInfeasible( QProblemB* _THIS )\n{\n\treturn _THIS->infeasible;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_isUnbounded": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_isUnbounded",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1297,
    "end_line": 1300,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline BooleanType QProblemB_isUnbounded( QProblemB* _THIS )\n{\n\treturn _THIS->unbounded;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_getHessianType": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_getHessianType",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1306,
    "end_line": 1309,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline HessianType QProblemB_getHessianType( QProblemB* _THIS )\n{\n\treturn _THIS->hessianType;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_setHessianType": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_setHessianType",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1315,
    "end_line": 1319,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblemB_setHessianType( QProblemB* _THIS, HessianType _hessianType )\n{\n\t_THIS->hessianType = _hessianType;\n\treturn SUCCESSFUL_RETURN;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_usingRegularisation": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_usingRegularisation",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1325,
    "end_line": 1331,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline BooleanType QProblemB_usingRegularisation( QProblemB* _THIS )\n{\n\tif ( _THIS->regVal > QPOASES_ZERO )\n\t\treturn BT_TRUE;\n\telse\n\t\treturn BT_FALSE;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_getOptions": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_getOptions",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1337,
    "end_line": 1340,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline Options QProblemB_getOptions( QProblemB* _THIS )\n{\n\treturn _THIS->options;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_setOptions": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_setOptions",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1346,
    "end_line": 1356,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblemB_setOptions(\tQProblemB* _THIS,\n\t\t\t\t\t\t\t\t\t\t\t\tOptions _options\n\t\t\t\t\t\t\t\t\t\t\t\t)\n{\n\tOptionsCPY( &_options,&(_THIS->options) );\n\tOptions_ensureConsistency( &(_THIS->options) );\n\n\tQProblemB_setPrintLevel( _THIS,_THIS->options.printLevel );\n\n\treturn SUCCESSFUL_RETURN;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_getPrintLevel": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_getPrintLevel",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1362,
    "end_line": 1365,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline PrintLevel QProblemB_getPrintLevel( QProblemB* _THIS )\n{\n\treturn _THIS->options.printLevel;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_getCount": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_getCount",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1372,
    "end_line": 1375,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline unsigned int QProblemB_getCount( QProblemB* _THIS )\n{\n\treturn _THIS->count;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_resetCounter": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_resetCounter",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1381,
    "end_line": 1385,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblemB_resetCounter( QProblemB* _THIS )\n{\n\t_THIS->count = 0;\n\treturn SUCCESSFUL_RETURN;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_setHM": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_setHM",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1397,
    "end_line": 1403,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblemB_setHM( QProblemB* _THIS, DenseMatrix* H_new )\n{\n\tif ( H_new == 0 )\n\t\treturn QProblemB_setH( _THIS,(real_t*)0 );\n\telse\n\t\treturn QProblemB_setH( _THIS,DenseMatrix_getVal(H_new) );\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_setH": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_setH",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1409,
    "end_line": 1428,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblemB_setH( QProblemB* _THIS, real_t* const H_new )\n{\n\t/* if null pointer is passed, Hessian is set to zero matrix\n\t *                            (or stays identity matrix) */\n\tif ( H_new == 0 )\n\t{\n\t\tif ( _THIS->hessianType == HST_IDENTITY )\n\t\t\treturn SUCCESSFUL_RETURN;\n\n\t\t_THIS->hessianType = HST_ZERO;\n\n\t\t_THIS->H = 0;\n\t}\n\telse\n\t{\n\t\tDenseMatrixCON( _THIS->H,QProblemB_getNV( _THIS ),QProblemB_getNV( _THIS ),QProblemB_getNV( _THIS ),H_new );\n\t}\n\n\treturn SUCCESSFUL_RETURN;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_setG": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_setG",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1434,
    "end_line": 1447,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblemB_setG( QProblemB* _THIS, const real_t* const g_new )\n{\n\tunsigned int nV = (unsigned int)QProblemB_getNV( _THIS );\n\n\tif ( nV == 0 )\n\t\treturn THROWERROR( RET_QPOBJECT_NOT_SETUP );\n\n\tif ( g_new == 0 )\n\t\treturn THROWERROR( RET_INVALID_ARGUMENTS );\n\n\tmemcpy( _THIS->g,g_new,nV*sizeof(real_t) );\n\n\treturn SUCCESSFUL_RETURN;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_setLB": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_setLB",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1453,
    "end_line": 1473,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblemB_setLB( QProblemB* _THIS, const real_t* const lb_new )\n{\n\tunsigned int i;\n\tunsigned int nV = (unsigned int)QProblemB_getNV( _THIS );\n\n\tif ( nV == 0 )\n\t\treturn THROWERROR( RET_QPOBJECT_NOT_SETUP );\n\n\tif ( lb_new != 0 )\n\t{\n\t\tmemcpy( _THIS->lb,lb_new,nV*sizeof(real_t) );\n\t}\n\telse\n\t{\n\t\t/* if no lower bounds are specified, set them to -infinity */\n\t\tfor( i=0; i<nV; ++i )\n\t\t\t_THIS->lb[i] = -QPOASES_INFTY;\n\t}\n\n\treturn SUCCESSFUL_RETURN;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_setLBn": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_setLBn",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1479,
    "end_line": 1495,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblemB_setLBn( QProblemB* _THIS, int number, real_t value )\n{\n\tint nV = QProblemB_getNV( _THIS );\n\n\tif ( nV == 0 )\n\t\treturn THROWERROR( RET_QPOBJECT_NOT_SETUP );\n\n\tif ( ( number >= 0 ) && ( number < nV ) )\n\t{\n\t\t_THIS->lb[number] = value;\n\t\treturn SUCCESSFUL_RETURN;\n\t}\n\telse\n\t{\n\t\treturn THROWERROR( RET_INDEX_OUT_OF_BOUNDS );\n\t}\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_setUB": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_setUB",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1501,
    "end_line": 1521,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblemB_setUB( QProblemB* _THIS, const real_t* const ub_new )\n{\n\tunsigned int i;\n\tunsigned int nV = (unsigned int)QProblemB_getNV( _THIS );\n\n\tif ( nV == 0 )\n\t\treturn THROWERROR( RET_QPOBJECT_NOT_SETUP );\n\n\tif ( ub_new != 0 )\n\t{\n\t\tmemcpy( _THIS->ub,ub_new,nV*sizeof(real_t) );\n\t}\n\telse\n\t{\n\t\t/* if no upper bounds are specified, set them to infinity */\n\t\tfor( i=0; i<nV; ++i )\n\t\t\t_THIS->ub[i] = QPOASES_INFTY;\n\t}\n\n\treturn SUCCESSFUL_RETURN;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_setUBn": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_setUBn",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1527,
    "end_line": 1544,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline returnValue QProblemB_setUBn( QProblemB* _THIS, int number, real_t value )\n{\n\tint nV = QProblemB_getNV( _THIS );\n\n\tif ( nV == 0 )\n\t\treturn THROWERROR( RET_QPOBJECT_NOT_SETUP );\n\n\tif ( ( number >= 0 ) && ( number < nV ) )\n\t{\n\t\t_THIS->ub[number] = value;\n\n\t\treturn SUCCESSFUL_RETURN;\n\t}\n\telse\n\t{\n\t\treturn THROWERROR( RET_INDEX_OUT_OF_BOUNDS );\n\t}\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_computeGivens": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_computeGivens",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1550,
    "end_line": 1582,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline void QProblemB_computeGivens(\treal_t xold, real_t yold,\n\t\t\t\t\t\t\t\t\t\t\treal_t* xnew, real_t* ynew, real_t* c, real_t* s\n\t\t\t\t\t\t\t\t\t\t\t)\n{\n\treal_t t, mu;\n\n\tif ( fabs( yold ) <= QPOASES_ZERO )\n\t{\n\t\t*c = 1.0;\n\t\t*s = 0.0;\n\n\t\t*xnew = xold;\n\t\t*ynew = yold;\n\t}\n\telse\n\t{\n\t\tmu = fabs( xold );\n\t\tif ( fabs( yold ) > mu )\n\t\t\tmu = fabs( yold );\n\n\t\tt = mu * sqrt( (xold/mu)*(xold/mu) + (yold/mu)*(yold/mu) );\n\n\t\tif ( xold < 0.0 )\n\t\tt = -t;\n\n\t\t*c = xold/t;\n\t\t*s = yold/t;\n\t\t*xnew = t;\n\t\t*ynew = 0.0;\n\t}\n\n\treturn;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_applyGivens": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_applyGivens",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1588,
    "end_line": 1609,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline void QProblemB_applyGivens(\treal_t c, real_t s, real_t nu, real_t xold, real_t yold,\n\t\t\t\t\t\t\t\t\t\t\treal_t* xnew, real_t* ynew\n\t\t\t\t\t\t\t\t\t\t\t)\n{\n\t#ifdef __USE_THREE_MULTS_GIVENS__\n\n\t/* Givens plane rotation requiring only three multiplications,\n\t * cf. Hammarling, S.: A note on modifications to the givens plane rotation.\n\t * J. Inst. Maths Applics, 13:215-218, 1974. */\n\t*xnew = xold*c + yold*s;\n\t*ynew = (*xnew+xold)*nu - yold;\n\n\t#else\n\n\t/* Usual Givens plane rotation requiring four multiplications. */\n\t*xnew =  c*xold + s*yold;\n\t*ynew = -s*xold + c*yold;\n\n\t#endif\n\n\treturn;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_isBlocking": {
    "id": "third_party.acados.include.qpOASES_e.QProblemB.QProblemB_isBlocking",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\QProblemB.h",
    "depends_on": [],
    "start_line": 1615,
    "end_line": 1630,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline BooleanType QProblemB_isBlocking(\tQProblemB* _THIS,\n\t\t\t\t\t\t\t\t\t\t\t\treal_t num,\n\t\t\t\t\t\t\t\t\t\t\t\treal_t den,\n\t\t\t\t\t\t\t\t\t\t\t\treal_t epsNum,\n\t\t\t\t\t\t\t\t\t\t\t\treal_t epsDen,\n\t\t\t\t\t\t\t\t\t\t\t\treal_t* t\n\t\t\t\t\t\t\t\t\t\t\t\t)\n{\n\tif ( ( den >= epsDen ) && ( num >= epsNum ) )\n\t{\n\t\tif ( num < (*t)*den )\n\t\t\treturn BT_TRUE;\n\t}\n\n\treturn BT_FALSE;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Utils.qpOASES_isEqual": {
    "id": "third_party.acados.include.qpOASES_e.Utils.qpOASES_isEqual",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Utils.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Utils.h",
    "depends_on": [],
    "start_line": 371,
    "end_line": 380,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline BooleanType qpOASES_isEqual(\treal_t x,\n\t\t\t\t\t\t\t\t\t\t\treal_t y,\n\t\t\t\t\t\t\t\t\t\t\treal_t TOL\n\t\t\t\t\t\t\t\t\t\t\t)\n{\n    if ( qpOASES_getAbs(x-y) <= TOL )\n\t\treturn BT_TRUE;\n\telse\n\t\treturn BT_FALSE;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Utils.qpOASES_isZero": {
    "id": "third_party.acados.include.qpOASES_e.Utils.qpOASES_isZero",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Utils.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Utils.h",
    "depends_on": [],
    "start_line": 386,
    "end_line": 394,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline BooleanType qpOASES_isZero(\treal_t x,\n\t\t\t\t\t\t\t\t\t\t\treal_t TOL\n\t\t\t\t\t\t\t\t\t\t\t)\n{\n    if ( qpOASES_getAbs(x) <= TOL )\n\t\treturn BT_TRUE;\n\telse\n\t\treturn BT_FALSE;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Utils.qpOASES_getSign": {
    "id": "third_party.acados.include.qpOASES_e.Utils.qpOASES_getSign",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Utils.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Utils.h",
    "depends_on": [],
    "start_line": 400,
    "end_line": 407,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline real_t qpOASES_getSign(\treal_t arg\n\t\t\t\t\t\t\t\t\t\t)\n{\n\tif ( arg >= 0.0 )\n\t\treturn 1.0;\n\telse\n\t\treturn -1.0;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Utils.qpOASES_getMaxI": {
    "id": "third_party.acados.include.qpOASES_e.Utils.qpOASES_getMaxI",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Utils.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Utils.h",
    "depends_on": [],
    "start_line": 414,
    "end_line": 419,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int qpOASES_getMaxI(\tint x,\n\t\t\t\t\t\t\t\t\tint y\n\t\t\t\t\t\t\t\t\t)\n{\n    return (y<x) ? x : y;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Utils.qpOASES_getMinI": {
    "id": "third_party.acados.include.qpOASES_e.Utils.qpOASES_getMinI",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Utils.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Utils.h",
    "depends_on": [],
    "start_line": 425,
    "end_line": 430,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline int qpOASES_getMinI(\tint x,\n\t\t\t\t\t\t\t\t\tint y\n\t\t\t\t\t\t\t\t\t)\n{\n    return (y>x) ? x : y;\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Utils.qpOASES_getMax": {
    "id": "third_party.acados.include.qpOASES_e.Utils.qpOASES_getMax",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Utils.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Utils.h",
    "depends_on": [],
    "start_line": 436,
    "end_line": 446,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline real_t qpOASES_getMax(\treal_t x,\n\t\t\t\t\t\t\t\t\t\treal_t y\n\t\t\t\t\t\t\t\t\t\t)\n{\n\t#ifdef __NO_FMATH__\n    return (y<x) ? x : y;\n\t#else\n\treturn (y<x) ? x : y;\n\t/*return fmax(x,y); seems to be slower */\n\t#endif\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Utils.qpOASES_getMin": {
    "id": "third_party.acados.include.qpOASES_e.Utils.qpOASES_getMin",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Utils.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Utils.h",
    "depends_on": [],
    "start_line": 452,
    "end_line": 462,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline real_t qpOASES_getMin(\treal_t x,\n\t\t\t\t\t\t\t\t\t\treal_t y\n\t\t\t\t\t\t\t\t\t\t)\n{\n\t#ifdef __NO_FMATH__\n    return (y>x) ? x : y;\n\t#else\n\treturn (y>x) ? x : y;\n\t/*return fmin(x,y); seems to be slower */\n\t#endif\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Utils.qpOASES_getAbs": {
    "id": "third_party.acados.include.qpOASES_e.Utils.qpOASES_getAbs",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Utils.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Utils.h",
    "depends_on": [],
    "start_line": 468,
    "end_line": 476,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline real_t qpOASES_getAbs(\treal_t x\n\t\t\t\t\t\t\t\t\t\t)\n{\n\t#ifdef __NO_FMATH__\n\treturn (x>=0.0) ? x : -x;\n\t#else\n\treturn fabs(x);\n\t#endif\n}\n"
  },
  "third_party.acados.include.qpOASES_e.Utils.qpOASES_getSqrt": {
    "id": "third_party.acados.include.qpOASES_e.Utils.qpOASES_getSqrt",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\acados\\include\\qpOASES_e\\Utils.h",
    "relative_path": "third_party\\acados\\include\\qpOASES_e\\Utils.h",
    "depends_on": [],
    "start_line": 481,
    "end_line": 489,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline real_t qpOASES_getSqrt(\treal_t x\n\t\t\t\t\t\t\t\t\t\t)\n{\n    #ifdef __NO_FMATH__\n\treturn sqrt(x); /* put your custom sqrt-replacement here */\n\t#else\n\treturn sqrt(x);\n\t#endif\n}\n"
  },
  "third_party.catch2.include.catch2.catch.NonCopyable": {
    "id": "third_party.catch2.include.catch2.catch.NonCopyable",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 491,
    "end_line": 500,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class NonCopyable {\n        NonCopyable( NonCopyable const& )              = delete;\n        NonCopyable( NonCopyable && )                  = delete;\n        NonCopyable& operator = ( NonCopyable const& ) = delete;\n        NonCopyable& operator = ( NonCopyable && )     = delete;\n\n    protected:\n        NonCopyable();\n        virtual ~NonCopyable();\n    };\n"
  },
  "third_party.catch2.include.catch2.catch.StringRef": {
    "id": "third_party.catch2.include.catch2.catch.StringRef",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 606,
    "end_line": 675,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class StringRef {\n    public:\n        using size_type = std::size_t;\n        using const_iterator = const char*;\n\n    private:\n        static constexpr char const* const s_empty = \"\";\n\n        char const* m_start = s_empty;\n        size_type m_size = 0;\n\n    public: // construction\n        constexpr StringRef() noexcept = default;\n\n        StringRef( char const* rawChars ) noexcept;\n\n        constexpr StringRef( char const* rawChars, size_type size ) noexcept\n        :   m_start( rawChars ),\n            m_size( size )\n        {}\n\n        StringRef( std::string const& stdString ) noexcept\n        :   m_start( stdString.c_str() ),\n            m_size( stdString.size() )\n        {}\n\n        explicit operator std::string() const {\n            return std::string(m_start, m_size);\n        }\n\n    public: // operators\n        auto operator == ( StringRef const& other ) const noexcept -> bool;\n        auto operator != (StringRef const& other) const noexcept -> bool {\n            return !(*this == other);\n        }\n\n        auto operator[] ( size_type index ) const noexcept -> char {\n            assert(index < m_size);\n            return m_start[index];\n        }\n\n    public: // named queries\n        constexpr auto empty() const noexcept -> bool {\n            return m_size == 0;\n        }\n        constexpr auto size() const noexcept -> size_type {\n            return m_size;\n        }\n\n        // Returns the current start pointer. If the StringRef is not\n        // null-terminated, throws std::domain_exception\n        auto c_str() const -> char const*;\n\n    public: // substrings and searches\n        // Returns a substring of [start, start + length).\n        // If start + length > size(), then the substring is [start, size()).\n        // If start > size(), then the substring is empty.\n        auto substr( size_type start, size_type length ) const noexcept -> StringRef;\n\n        // Returns the current start pointer. May not be null-terminated.\n        auto data() const noexcept -> char const*;\n\n        constexpr auto isNullTerminated() const noexcept -> bool {\n            return m_start[m_size] == '\\0';\n        }\n\n    public: // iterators\n        constexpr const_iterator begin() const { return m_start; }\n        constexpr const_iterator end() const { return m_start + m_size; }\n    };\n"
  },
  "third_party.catch2.include.catch2.catch.StringRef.operator!=": {
    "id": "third_party.catch2.include.catch2.catch.StringRef.operator!=",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 638,
    "end_line": 640,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        auto operator != (StringRef const& other) const noexcept -> bool {\n            return !(*this == other);\n        }\n"
  },
  "third_party.catch2.include.catch2.catch.StringRef.operator[]": {
    "id": "third_party.catch2.include.catch2.catch.StringRef.operator[]",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 642,
    "end_line": 645,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        auto operator[] ( size_type index ) const noexcept -> char {\n            assert(index < m_size);\n            return m_start[index];\n        }\n"
  },
  "third_party.catch2.include.catch2.catch.StringRef.empty": {
    "id": "third_party.catch2.include.catch2.catch.StringRef.empty",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 648,
    "end_line": 650,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        constexpr auto empty() const noexcept -> bool {\n            return m_size == 0;\n        }\n"
  },
  "third_party.catch2.include.catch2.catch.StringRef.size": {
    "id": "third_party.catch2.include.catch2.catch.StringRef.size",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 651,
    "end_line": 653,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        constexpr auto size() const noexcept -> size_type {\n            return m_size;\n        }\n"
  },
  "third_party.catch2.include.catch2.catch.StringRef.isNullTerminated": {
    "id": "third_party.catch2.include.catch2.catch.StringRef.isNullTerminated",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 668,
    "end_line": 670,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        constexpr auto isNullTerminated() const noexcept -> bool {\n            return m_start[m_size] == '\\0';\n        }\n"
  },
  "third_party.catch2.include.catch2.catch.operator\"\"_sr": {
    "id": "third_party.catch2.include.catch2.catch.operator\"\"_sr",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 680,
    "end_line": 682,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    constexpr auto operator \"\" _sr( char const* rawChars, std::size_t size ) noexcept -> StringRef {\n        return StringRef( rawChars, size );\n    }\n"
  },
  "third_party.catch2.include.catch2.catch.operator\"\"_catch_sr": {
    "id": "third_party.catch2.include.catch2.catch.operator\"\"_catch_sr",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 685,
    "end_line": 687,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "constexpr auto operator \"\" _catch_sr( char const* rawChars, std::size_t size ) noexcept -> Catch::StringRef {\n    return Catch::StringRef( rawChars, size );\n}\n"
  },
  "third_party.catch2.include.catch2.catch.ReusableStringStream": {
    "id": "third_party.catch2.include.catch2.catch.ReusableStringStream",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 1440,
    "end_line": 1455,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class ReusableStringStream : NonCopyable {\n        std::size_t m_index;\n        std::ostream* m_oss;\n    public:\n        ReusableStringStream();\n        ~ReusableStringStream();\n\n        auto str() const -> std::string;\n\n        template<typename T>\n        auto operator << ( T const& value ) -> ReusableStringStream& {\n            *m_oss << value;\n            return *this;\n        }\n        auto get() -> std::ostream& { return *m_oss; }\n    };\n"
  },
  "third_party.catch2.include.catch2.catch.Decomposer.operator<=": {
    "id": "third_party.catch2.include.catch2.catch.Decomposer.operator<=",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 2420,
    "end_line": 2422,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        auto operator <=( bool value ) -> ExprLhs<bool> {\n            return ExprLhs<bool>{ value };\n        }\n"
  },
  "third_party.catch2.include.catch2.catch.LazyExpression": {
    "id": "third_party.catch2.include.catch2.catch.LazyExpression",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 2526,
    "end_line": 2541,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class LazyExpression {\n        friend class AssertionHandler;\n        friend struct AssertionStats;\n        friend class RunContext;\n\n        ITransientExpression const* m_transientExpression = nullptr;\n        bool m_isNegated;\n    public:\n        LazyExpression( bool isNegated );\n        LazyExpression( LazyExpression const& other );\n        LazyExpression& operator = ( LazyExpression const& ) = delete;\n\n        explicit operator bool() const;\n\n        friend auto operator << ( std::ostream& os, LazyExpression const& lazyExpr ) -> std::ostream&;\n    };\n"
  },
  "third_party.catch2.include.catch2.catch.AssertionHandler": {
    "id": "third_party.catch2.include.catch2.catch.AssertionHandler",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 2548,
    "end_line": 2585,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class AssertionHandler {\n        AssertionInfo m_assertionInfo;\n        AssertionReaction m_reaction;\n        bool m_completed = false;\n        IResultCapture& m_resultCapture;\n\n    public:\n        AssertionHandler\n            (   StringRef const& macroName,\n                SourceLineInfo const& lineInfo,\n                StringRef capturedExpression,\n                ResultDisposition::Flags resultDisposition );\n        ~AssertionHandler() {\n            if ( !m_completed ) {\n                m_resultCapture.handleIncomplete( m_assertionInfo );\n            }\n        }\n\n        template<typename T>\n        void handleExpr( ExprLhs<T> const& expr ) {\n            handleExpr( expr.makeUnaryExpr() );\n        }\n        void handleExpr( ITransientExpression const& expr );\n\n        void handleMessage(ResultWas::OfType resultType, StringRef const& message);\n\n        void handleExceptionThrownAsExpected();\n        void handleUnexpectedExceptionNotThrown();\n        void handleExceptionNotThrownAsExpected();\n        void handleThrowingCallSkipped();\n        void handleUnexpectedInflightException();\n\n        void complete();\n        void setCompleted();\n\n        // query\n        auto allowThrows() const -> bool;\n    };\n"
  },
  "third_party.catch2.include.catch2.catch.ScopedMessage": {
    "id": "third_party.catch2.include.catch2.catch.ScopedMessage",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 2641,
    "end_line": 2650,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class ScopedMessage {\n    public:\n        explicit ScopedMessage( MessageBuilder const& builder );\n        ScopedMessage( ScopedMessage& duplicate ) = delete;\n        ScopedMessage( ScopedMessage&& old );\n        ~ScopedMessage();\n\n        MessageInfo m_info;\n        bool m_moved;\n    };\n"
  },
  "third_party.catch2.include.catch2.catch.Capturer": {
    "id": "third_party.catch2.include.catch2.catch.Capturer",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 2652,
    "end_line": 2672,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class Capturer {\n        std::vector<MessageInfo> m_messages;\n        IResultCapture& m_resultCapture = getResultCapture();\n        size_t m_captured = 0;\n    public:\n        Capturer( StringRef macroName, SourceLineInfo const& lineInfo, ResultWas::OfType resultType, StringRef names );\n        ~Capturer();\n\n        void captureValue( size_t index, std::string const& value );\n\n        template<typename T>\n        void captureValues( size_t index, T const& value ) {\n            captureValue( index, Catch::Detail::stringify( value ) );\n        }\n\n        template<typename T, typename... Ts>\n        void captureValues( size_t index, T const& value, Ts const&... values ) {\n            captureValue( index, Catch::Detail::stringify(value) );\n            captureValues( index+1, values... );\n        }\n    };\n"
  },
  "third_party.catch2.include.catch2.catch.Timer": {
    "id": "third_party.catch2.include.catch2.catch.Timer",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 2894,
    "end_line": 2902,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class Timer {\n        uint64_t m_nanoseconds = 0;\n    public:\n        void start();\n        auto getElapsedNanoseconds() const -> uint64_t;\n        auto getElapsedMicroseconds() const -> uint64_t;\n        auto getElapsedMilliseconds() const -> unsigned int;\n        auto getElapsedSeconds() const -> double;\n    };\n"
  },
  "third_party.catch2.include.catch2.catch.Section": {
    "id": "third_party.catch2.include.catch2.catch.Section",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 2911,
    "end_line": 2926,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class Section : NonCopyable {\n    public:\n        Section( SectionInfo const& info );\n        ~Section();\n\n        // This indicates whether the section should be executed or not\n        explicit operator bool() const;\n\n    private:\n        SectionInfo m_info;\n\n        std::string m_name;\n        Counts m_assertions;\n        bool m_sectionIncluded;\n        Timer m_timer;\n    };\n"
  },
  "third_party.catch2.include.catch2.catch.ExceptionTranslatorRegistrar": {
    "id": "third_party.catch2.include.catch2.catch.ExceptionTranslatorRegistrar",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 3021,
    "end_line": 3056,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class ExceptionTranslatorRegistrar {\n        template<typename T>\n        class ExceptionTranslator : public IExceptionTranslator {\n        public:\n\n            ExceptionTranslator( std::string(*translateFunction)( T& ) )\n            : m_translateFunction( translateFunction )\n            {}\n\n            std::string translate( ExceptionTranslators::const_iterator it, ExceptionTranslators::const_iterator itEnd ) const override {\n#if defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)\n                return \"\";\n#else\n                try {\n                    if( it == itEnd )\n                        std::rethrow_exception(std::current_exception());\n                    else\n                        return (*it)->translate( it+1, itEnd );\n                }\n                catch( T& ex ) {\n                    return m_translateFunction( ex );\n                }\n#endif\n            }\n\n        protected:\n            std::string(*m_translateFunction)( T& );\n        };\n\n    public:\n        template<typename T>\n        ExceptionTranslatorRegistrar( std::string(*translateFunction)( T& ) ) {\n            getMutableRegistryHub().registerTranslator\n                ( new ExceptionTranslator<T>( translateFunction ) );\n        }\n    };\n"
  },
  "third_party.catch2.include.catch2.catch.Approx": {
    "id": "third_party.catch2.include.catch2.catch.Approx",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 3078,
    "end_line": 3176,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class Approx {\n    private:\n        bool equalityComparisonImpl(double other) const;\n        // Validates the new margin (margin >= 0)\n        // out-of-line to avoid including stdexcept in the header\n        void setMargin(double margin);\n        // Validates the new epsilon (0 < epsilon < 1)\n        // out-of-line to avoid including stdexcept in the header\n        void setEpsilon(double epsilon);\n\n    public:\n        explicit Approx ( double value );\n\n        static Approx custom();\n\n        Approx operator-() const;\n\n        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>\n        Approx operator()( T const& value ) const {\n            Approx approx( static_cast<double>(value) );\n            approx.m_epsilon = m_epsilon;\n            approx.m_margin = m_margin;\n            approx.m_scale = m_scale;\n            return approx;\n        }\n\n        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>\n        explicit Approx( T const& value ): Approx(static_cast<double>(value))\n        {}\n\n        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>\n        friend bool operator == ( const T& lhs, Approx const& rhs ) {\n            auto lhs_v = static_cast<double>(lhs);\n            return rhs.equalityComparisonImpl(lhs_v);\n        }\n\n        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>\n        friend bool operator == ( Approx const& lhs, const T& rhs ) {\n            return operator==( rhs, lhs );\n        }\n\n        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>\n        friend bool operator != ( T const& lhs, Approx const& rhs ) {\n            return !operator==( lhs, rhs );\n        }\n\n        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>\n        friend bool operator != ( Approx const& lhs, T const& rhs ) {\n            return !operator==( rhs, lhs );\n        }\n\n        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>\n        friend bool operator <= ( T const& lhs, Approx const& rhs ) {\n            return static_cast<double>(lhs) < rhs.m_value || lhs == rhs;\n        }\n\n        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>\n        friend bool operator <= ( Approx const& lhs, T const& rhs ) {\n            return lhs.m_value < static_cast<double>(rhs) || lhs == rhs;\n        }\n\n        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>\n        friend bool operator >= ( T const& lhs, Approx const& rhs ) {\n            return static_cast<double>(lhs) > rhs.m_value || lhs == rhs;\n        }\n\n        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>\n        friend bool operator >= ( Approx const& lhs, T const& rhs ) {\n            return lhs.m_value > static_cast<double>(rhs) || lhs == rhs;\n        }\n\n        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>\n        Approx& epsilon( T const& newEpsilon ) {\n            double epsilonAsDouble = static_cast<double>(newEpsilon);\n            setEpsilon(epsilonAsDouble);\n            return *this;\n        }\n\n        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>\n        Approx& margin( T const& newMargin ) {\n            double marginAsDouble = static_cast<double>(newMargin);\n            setMargin(marginAsDouble);\n            return *this;\n        }\n\n        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>\n        Approx& scale( T const& newScale ) {\n            m_scale = static_cast<double>(newScale);\n            return *this;\n        }\n\n        std::string toString() const;\n\n    private:\n        double m_epsilon;\n        double m_margin;\n        double m_scale;\n        double m_value;\n    };\n"
  },
  "third_party.catch2.include.catch2.catch.MatcherUntypedBase": {
    "id": "third_party.catch2.include.catch2.catch.MatcherUntypedBase",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 3243,
    "end_line": 3254,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        class MatcherUntypedBase {\n        public:\n            MatcherUntypedBase() = default;\n            MatcherUntypedBase ( MatcherUntypedBase const& ) = default;\n            MatcherUntypedBase& operator = ( MatcherUntypedBase const& ) = delete;\n            std::string toString() const;\n\n        protected:\n            virtual ~MatcherUntypedBase();\n            virtual std::string describe() const = 0;\n            mutable std::string m_cachedToString;\n        };\n"
  },
  "third_party.catch2.include.catch2.catch.ExceptionMessageMatcher": {
    "id": "third_party.catch2.include.catch2.catch.ExceptionMessageMatcher",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 3399,
    "end_line": 3410,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ExceptionMessageMatcher : public MatcherBase<std::exception> {\n    std::string m_message;\npublic:\n\n    ExceptionMessageMatcher(std::string const& message):\n        m_message(message)\n    {}\n\n    bool match(std::exception const& ex) const override;\n\n    std::string describe() const override;\n};\n"
  },
  "third_party.catch2.include.catch2.catch.GeneratorUntypedBase": {
    "id": "third_party.catch2.include.catch2.catch.GeneratorUntypedBase",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 3845,
    "end_line": 3854,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        class GeneratorUntypedBase {\n        public:\n            GeneratorUntypedBase() = default;\n            virtual ~GeneratorUntypedBase();\n            // Attempts to move the generator to the next element\n             //\n             // Returns true iff the move succeeded (and a valid element\n             // can be retrieved).\n            virtual bool next() = 0;\n        };\n"
  },
  "third_party.catch2.include.catch2.catch.GeneratorException": {
    "id": "third_party.catch2.include.catch2.catch.GeneratorException",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 3919,
    "end_line": 3928,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class GeneratorException : public std::exception {\n    const char* const m_msg = \"\";\n\npublic:\n    GeneratorException(const char* msg):\n        m_msg(msg)\n    {}\n\n    const char* what() const noexcept override final;\n};\n"
  },
  "third_party.catch2.include.catch2.catch.getCurrentMutableContext": {
    "id": "third_party.catch2.include.catch2.catch.getCurrentMutableContext",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 4381,
    "end_line": 4387,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    inline IMutableContext& getCurrentMutableContext()\n    {\n        if( !IMutableContext::currentContext )\n            IMutableContext::createContext();\n        // NOLINTNEXTLINE(clang-analyzer-core.uninitialized.UndefReturn)\n        return *IMutableContext::currentContext;\n    }\n"
  },
  "third_party.catch2.include.catch2.catch.getCurrentContext": {
    "id": "third_party.catch2.include.catch2.catch.getCurrentContext",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 4389,
    "end_line": 4392,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    inline IContext& getCurrentContext()\n    {\n        return getCurrentMutableContext();\n    }\n"
  },
  "third_party.catch2.include.catch2.catch.SimplePcg32": {
    "id": "third_party.catch2.include.catch2.catch.SimplePcg32",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 4558,
    "end_line": 4592,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class SimplePcg32 {\n        using state_type = std::uint64_t;\n    public:\n        using result_type = std::uint32_t;\n        static constexpr result_type (min)() {\n            return 0;\n        }\n        static constexpr result_type (max)() {\n            return static_cast<result_type>(-1);\n        }\n\n        // Provide some default initial state for the default constructor\n        SimplePcg32():SimplePcg32(0xed743cc4U) {}\n\n        explicit SimplePcg32(result_type seed_);\n\n        void seed(result_type seed_);\n        void discard(uint64_t skip);\n\n        result_type operator()();\n\n    private:\n        friend bool operator==(SimplePcg32 const& lhs, SimplePcg32 const& rhs);\n        friend bool operator!=(SimplePcg32 const& lhs, SimplePcg32 const& rhs);\n\n        // In theory we also need operator<< and operator>>\n        // In practice we do not use them, so we will skip them for now\n\n        std::uint64_t m_state;\n        // This part of the state determines which \"stream\" of the numbers\n        // is chosen -- we take it as a constant for Catch2, so we only\n        // need to deal with seeding the main state.\n        // Picked by reading 8 bytes from `/dev/random` :-)\n        static const std::uint64_t s_inc = (0x13ed0cc53f939476ULL << 1ULL) | 1ULL;\n    };\n"
  },
  "third_party.catch2.include.catch2.catch.SimplePcg32.min": {
    "id": "third_party.catch2.include.catch2.catch.SimplePcg32.min",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 4562,
    "end_line": 4564,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        static constexpr result_type (min)() {\n            return 0;\n        }\n"
  },
  "third_party.catch2.include.catch2.catch.SimplePcg32.max": {
    "id": "third_party.catch2.include.catch2.catch.SimplePcg32.max",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 4565,
    "end_line": 4567,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        static constexpr result_type (max)() {\n            return static_cast<result_type>(-1);\n        }\n"
  },
  "third_party.catch2.include.catch2.catch.TestCase": {
    "id": "third_party.catch2.include.catch2.catch.TestCase",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch.hpp",
    "depends_on": [],
    "start_line": 4807,
    "end_line": 4823,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    class TestCase : public TestCaseInfo {\n    public:\n\n        TestCase( ITestInvoker* testCase, TestCaseInfo&& info );\n\n        TestCase withName( std::string const& _newName ) const;\n\n        void invoke() const;\n\n        TestCaseInfo const& getTestCaseInfo() const;\n\n        bool operator == ( TestCase const& other ) const;\n        bool operator < ( TestCase const& other ) const;\n\n    private:\n        std::shared_ptr<ITestInvoker> test;\n    };\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_automake.AutomakeReporter.getDescription": {
    "id": "third_party.catch2.include.catch2.catch_reporter_automake.AutomakeReporter.getDescription",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_automake.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_automake.hpp",
    "depends_on": [],
    "start_line": 26,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        static std::string getDescription() {\n            return \"Reports test results in the format of Automake .trs files\";\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_automake.AutomakeReporter.testCaseEnded": {
    "id": "third_party.catch2.include.catch2.catch_reporter_automake.AutomakeReporter.testCaseEnded",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_automake.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_automake.hpp",
    "depends_on": [],
    "start_line": 34,
    "end_line": 46,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        void testCaseEnded( TestCaseStats const& _testCaseStats ) override {\n            // Possible values to emit are PASS, XFAIL, SKIP, FAIL, XPASS and ERROR.\n            stream << \":test-result: \";\n            if (_testCaseStats.totals.assertions.allPassed()) {\n                stream << \"PASS\";\n            } else if (_testCaseStats.totals.assertions.allOk()) {\n                stream << \"XFAIL\";\n            } else {\n                stream << \"FAIL\";\n            }\n            stream << ' ' << _testCaseStats.testInfo.name << '\\n';\n            StreamingReporterBase::testCaseEnded( _testCaseStats );\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_automake.AutomakeReporter.skipTest": {
    "id": "third_party.catch2.include.catch2.catch_reporter_automake.AutomakeReporter.skipTest",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_automake.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_automake.hpp",
    "depends_on": [],
    "start_line": 48,
    "end_line": 50,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        void skipTest( TestCaseInfo const& testInfo ) override {\n            stream << \":test-result: SKIP \" << testInfo.name << '\\n';\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_sonarqube.SonarQubeReporter.getDescription": {
    "id": "third_party.catch2.include.catch2.catch_reporter_sonarqube.SonarQubeReporter.getDescription",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_sonarqube.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_sonarqube.hpp",
    "depends_on": [],
    "start_line": 33,
    "end_line": 35,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        static std::string getDescription() {\n            return \"Reports test results in the Generic Test Data SonarQube XML format\";\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_sonarqube.SonarQubeReporter.getSupportedVerbosities": {
    "id": "third_party.catch2.include.catch2.catch_reporter_sonarqube.SonarQubeReporter.getSupportedVerbosities",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_sonarqube.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_sonarqube.hpp",
    "depends_on": [],
    "start_line": 37,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        static std::set<Verbosity> getSupportedVerbosities() {\n            return { Verbosity::Normal };\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_sonarqube.SonarQubeReporter.testRunStarting": {
    "id": "third_party.catch2.include.catch2.catch_reporter_sonarqube.SonarQubeReporter.testRunStarting",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_sonarqube.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_sonarqube.hpp",
    "depends_on": [],
    "start_line": 43,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        void testRunStarting(TestRunInfo const& testRunInfo) override {\n            CumulativeReporterBase::testRunStarting(testRunInfo);\n            xml.startElement(\"testExecutions\");\n            xml.writeAttribute(\"version\", \"1\");\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_sonarqube.SonarQubeReporter.testGroupEnded": {
    "id": "third_party.catch2.include.catch2.catch_reporter_sonarqube.SonarQubeReporter.testGroupEnded",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_sonarqube.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_sonarqube.hpp",
    "depends_on": [],
    "start_line": 49,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        void testGroupEnded(TestGroupStats const& testGroupStats) override {\n            CumulativeReporterBase::testGroupEnded(testGroupStats);\n            writeGroup(*m_testGroups.back());\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_sonarqube.SonarQubeReporter.testRunEndedCumulative": {
    "id": "third_party.catch2.include.catch2.catch_reporter_sonarqube.SonarQubeReporter.testRunEndedCumulative",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_sonarqube.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_sonarqube.hpp",
    "depends_on": [],
    "start_line": 54,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        void testRunEndedCumulative() override {\n            xml.endElement();\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_sonarqube.SonarQubeReporter.writeGroup": {
    "id": "third_party.catch2.include.catch2.catch_reporter_sonarqube.SonarQubeReporter.writeGroup",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_sonarqube.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_sonarqube.hpp",
    "depends_on": [],
    "start_line": 58,
    "end_line": 65,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        void writeGroup(TestGroupNode const& groupNode) {\n            std::map<std::string, TestGroupNode::ChildNodes> testsPerFile;\n            for(auto const& child : groupNode.children)\n                testsPerFile[child->value.testInfo.lineInfo.file].push_back(child);\n\n            for(auto const& kv : testsPerFile)\n                writeTestFile(kv.first.c_str(), kv.second);\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_sonarqube.SonarQubeReporter.writeTestFile": {
    "id": "third_party.catch2.include.catch2.catch_reporter_sonarqube.SonarQubeReporter.writeTestFile",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_sonarqube.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_sonarqube.hpp",
    "depends_on": [],
    "start_line": 67,
    "end_line": 73,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        void writeTestFile(const char* filename, TestGroupNode::ChildNodes const& testCaseNodes) {\n            XmlWriter::ScopedElement e = xml.scopedElement(\"file\");\n            xml.writeAttribute(\"path\", filename);\n\n            for(auto const& child : testCaseNodes)\n                writeTestCase(*child);\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_sonarqube.SonarQubeReporter.writeTestCase": {
    "id": "third_party.catch2.include.catch2.catch_reporter_sonarqube.SonarQubeReporter.writeTestCase",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_sonarqube.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_sonarqube.hpp",
    "depends_on": [],
    "start_line": 75,
    "end_line": 81,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        void writeTestCase(TestCaseNode const& testCaseNode) {\n            // All test cases have exactly one section - which represents the\n            // test case itself. That section may have 0-n nested sections\n            assert(testCaseNode.children.size() == 1);\n            SectionNode const& rootSection = *testCaseNode.children.front();\n            writeSection(\"\", rootSection, testCaseNode.value.testInfo.okToFail());\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_sonarqube.SonarQubeReporter.writeSection": {
    "id": "third_party.catch2.include.catch2.catch_reporter_sonarqube.SonarQubeReporter.writeSection",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_sonarqube.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_sonarqube.hpp",
    "depends_on": [],
    "start_line": 83,
    "end_line": 98,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        void writeSection(std::string const& rootName, SectionNode const& sectionNode, bool okToFail) {\n            std::string name = trim(sectionNode.stats.sectionInfo.name);\n            if(!rootName.empty())\n                name = rootName + '/' + name;\n\n            if(!sectionNode.assertions.empty() || !sectionNode.stdOut.empty() || !sectionNode.stdErr.empty()) {\n                XmlWriter::ScopedElement e = xml.scopedElement(\"testCase\");\n                xml.writeAttribute(\"name\", name);\n                xml.writeAttribute(\"duration\", static_cast<long>(sectionNode.stats.durationInSeconds * 1000));\n\n                writeAssertions(sectionNode, okToFail);\n            }\n\n            for(auto const& childNode : sectionNode.childSections)\n                writeSection(name, *childNode, okToFail);\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_sonarqube.SonarQubeReporter.writeAssertions": {
    "id": "third_party.catch2.include.catch2.catch_reporter_sonarqube.SonarQubeReporter.writeAssertions",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_sonarqube.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_sonarqube.hpp",
    "depends_on": [],
    "start_line": 100,
    "end_line": 103,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        void writeAssertions(SectionNode const& sectionNode, bool okToFail) {\n            for(auto const& assertion : sectionNode.assertions)\n                writeAssertion( assertion, okToFail);\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_sonarqube.SonarQubeReporter.writeAssertion": {
    "id": "third_party.catch2.include.catch2.catch_reporter_sonarqube.SonarQubeReporter.writeAssertion",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_sonarqube.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_sonarqube.hpp",
    "depends_on": [],
    "start_line": 105,
    "end_line": 167,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        void writeAssertion(AssertionStats const& stats, bool okToFail) {\n            AssertionResult const& result = stats.assertionResult;\n            if(!result.isOk()) {\n                std::string elementName;\n                if(okToFail) {\n                    elementName = \"skipped\";\n                }\n                else {\n                    switch(result.getResultType()) {\n                        case ResultWas::ThrewException:\n                        case ResultWas::FatalErrorCondition:\n                            elementName = \"error\";\n                            break;\n                        case ResultWas::ExplicitFailure:\n                            elementName = \"failure\";\n                            break;\n                        case ResultWas::ExpressionFailed:\n                            elementName = \"failure\";\n                            break;\n                        case ResultWas::DidntThrowException:\n                            elementName = \"failure\";\n                            break;\n\n                            // We should never see these here:\n                        case ResultWas::Info:\n                        case ResultWas::Warning:\n                        case ResultWas::Ok:\n                        case ResultWas::Unknown:\n                        case ResultWas::FailureBit:\n                        case ResultWas::Exception:\n                            elementName = \"internalError\";\n                            break;\n                    }\n                }\n\n                XmlWriter::ScopedElement e = xml.scopedElement(elementName);\n\n                ReusableStringStream messageRss;\n                messageRss << result.getTestMacroName() << \"(\" << result.getExpression() << \")\";\n                xml.writeAttribute(\"message\", messageRss.str());\n\n                ReusableStringStream textRss;\n                if (stats.totals.assertions.total() > 0) {\n                    textRss << \"FAILED:\\n\";\n                    if (result.hasExpression()) {\n                        textRss << \"\\t\" << result.getExpressionInMacro() << \"\\n\";\n                    }\n                    if (result.hasExpandedExpression()) {\n                        textRss << \"with expansion:\\n\\t\" << result.getExpandedExpression() << \"\\n\";\n                    }\n                }\n\n                if(!result.getMessage().empty())\n                    textRss << result.getMessage() << \"\\n\";\n\n                for(auto const& msg : stats.infoMessages)\n                    if(msg.type == ResultWas::Info)\n                        textRss << msg.message << \"\\n\";\n\n                textRss << \"at \" << result.getSourceInfo();\n                xml.writeText(textRss.str(), XmlFormatting::Newline);\n            }\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_tap.TAPReporter.getDescription": {
    "id": "third_party.catch2.include.catch2.catch_reporter_tap.TAPReporter.getDescription",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "depends_on": [],
    "start_line": 33,
    "end_line": 35,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        static std::string getDescription() {\n            return \"Reports test results in TAP format, suitable for test harnesses\";\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_tap.TAPReporter.noMatchingTestCases": {
    "id": "third_party.catch2.include.catch2.catch_reporter_tap.TAPReporter.noMatchingTestCases",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "depends_on": [],
    "start_line": 37,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        void noMatchingTestCases( std::string const& spec ) override {\n            stream << \"# No test cases matched '\" << spec << \"'\" << std::endl;\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_tap.TAPReporter.assertionEnded": {
    "id": "third_party.catch2.include.catch2.catch_reporter_tap.TAPReporter.assertionEnded",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "depends_on": [],
    "start_line": 43,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        bool assertionEnded( AssertionStats const& _assertionStats ) override {\n            ++counter;\n\n            stream << \"# \" << currentTestCaseInfo->name << std::endl;\n            AssertionPrinter printer( stream, _assertionStats, counter );\n            printer.print();\n\n            stream << std::endl;\n            return true;\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_tap.TAPReporter.testRunEnded": {
    "id": "third_party.catch2.include.catch2.catch_reporter_tap.TAPReporter.testRunEnded",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "depends_on": [],
    "start_line": 54,
    "end_line": 58,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        void testRunEnded( TestRunStats const& _testRunStats ) override {\n            printTotals( _testRunStats.totals );\n            stream << \"\\n\" << std::endl;\n            StreamingReporterBase::testRunEnded( _testRunStats );\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_tap.AssertionPrinter": {
    "id": "third_party.catch2.include.catch2.catch_reporter_tap.AssertionPrinter",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "depends_on": [],
    "start_line": 62,
    "end_line": 236,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        class AssertionPrinter {\n        public:\n            AssertionPrinter& operator= ( AssertionPrinter const& ) = delete;\n            AssertionPrinter( AssertionPrinter const& ) = delete;\n            AssertionPrinter( std::ostream& _stream, AssertionStats const& _stats, std::size_t _counter )\n            : stream( _stream )\n            , result( _stats.assertionResult )\n            , messages( _stats.infoMessages )\n            , itMessage( _stats.infoMessages.begin() )\n            , printInfoMessages( true )\n            , counter(_counter)\n            {}\n\n            void print() {\n                itMessage = messages.begin();\n\n                switch( result.getResultType() ) {\n                    case ResultWas::Ok:\n                        printResultType( passedString() );\n                        printOriginalExpression();\n                        printReconstructedExpression();\n                        if ( ! result.hasExpression() )\n                            printRemainingMessages( Colour::None );\n                        else\n                            printRemainingMessages();\n                        break;\n                    case ResultWas::ExpressionFailed:\n                        if (result.isOk()) {\n                            printResultType(passedString());\n                        } else {\n                            printResultType(failedString());\n                        }\n                        printOriginalExpression();\n                        printReconstructedExpression();\n                        if (result.isOk()) {\n                            printIssue(\" # TODO\");\n                        }\n                        printRemainingMessages();\n                        break;\n                    case ResultWas::ThrewException:\n                        printResultType( failedString() );\n                        printIssue( \"unexpected exception with message:\" );\n                        printMessage();\n                        printExpressionWas();\n                        printRemainingMessages();\n                        break;\n                    case ResultWas::FatalErrorCondition:\n                        printResultType( failedString() );\n                        printIssue( \"fatal error condition with message:\" );\n                        printMessage();\n                        printExpressionWas();\n                        printRemainingMessages();\n                        break;\n                    case ResultWas::DidntThrowException:\n                        printResultType( failedString() );\n                        printIssue( \"expected exception, got none\" );\n                        printExpressionWas();\n                        printRemainingMessages();\n                        break;\n                    case ResultWas::Info:\n                        printResultType( \"info\" );\n                        printMessage();\n                        printRemainingMessages();\n                        break;\n                    case ResultWas::Warning:\n                        printResultType( \"warning\" );\n                        printMessage();\n                        printRemainingMessages();\n                        break;\n                    case ResultWas::ExplicitFailure:\n                        printResultType( failedString() );\n                        printIssue( \"explicitly\" );\n                        printRemainingMessages( Colour::None );\n                        break;\n                    // These cases are here to prevent compiler warnings\n                    case ResultWas::Unknown:\n                    case ResultWas::FailureBit:\n                    case ResultWas::Exception:\n                        printResultType( \"** internal error **\" );\n                        break;\n                }\n            }\n\n        private:\n            static Colour::Code dimColour() { return Colour::FileName; }\n\n            static const char* failedString() { return \"not ok\"; }\n            static const char* passedString() { return \"ok\"; }\n\n            void printSourceInfo() const {\n                Colour colourGuard( dimColour() );\n                stream << result.getSourceInfo() << \":\";\n            }\n\n            void printResultType( std::string const& passOrFail ) const {\n                if( !passOrFail.empty() ) {\n                    stream << passOrFail << ' ' << counter << \" -\";\n                }\n            }\n\n            void printIssue( std::string const& issue ) const {\n                stream << \" \" << issue;\n            }\n\n            void printExpressionWas() {\n                if( result.hasExpression() ) {\n                    stream << \";\";\n                    {\n                        Colour colour( dimColour() );\n                        stream << \" expression was:\";\n                    }\n                    printOriginalExpression();\n                }\n            }\n\n            void printOriginalExpression() const {\n                if( result.hasExpression() ) {\n                    stream << \" \" << result.getExpression();\n                }\n            }\n\n            void printReconstructedExpression() const {\n                if( result.hasExpandedExpression() ) {\n                    {\n                        Colour colour( dimColour() );\n                        stream << \" for: \";\n                    }\n                    std::string expr = result.getExpandedExpression();\n                    std::replace( expr.begin(), expr.end(), '\\n', ' ');\n                    stream << expr;\n                }\n            }\n\n            void printMessage() {\n                if ( itMessage != messages.end() ) {\n                    stream << \" '\" << itMessage->message << \"'\";\n                    ++itMessage;\n                }\n            }\n\n            void printRemainingMessages( Colour::Code colour = dimColour() ) {\n                if (itMessage == messages.end()) {\n                    return;\n                }\n\n                const auto itEnd = messages.cend();\n                const auto N = static_cast<std::size_t>( std::distance( itMessage, itEnd ) );\n\n                {\n                    Colour colourGuard( colour );\n                    stream << \" with \" << pluralise( N, \"message\" ) << \":\";\n                }\n\n                while( itMessage != itEnd ) {\n                    // If this assertion is a warning ignore any INFO messages\n                    if( printInfoMessages || itMessage->type != ResultWas::Info ) {\n                        stream << \" '\" << itMessage->message << \"'\";\n                        if ( ++itMessage != itEnd ) {\n                            Colour colourGuard( dimColour() );\n                            stream << \" and\";\n                        }\n                        continue;\n                    }\n                    ++itMessage;\n                }\n            }\n\n        private:\n            std::ostream& stream;\n            AssertionResult const& result;\n            std::vector<MessageInfo> messages;\n            std::vector<MessageInfo>::const_iterator itMessage;\n            bool printInfoMessages;\n            std::size_t counter;\n        };\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_tap.AssertionPrinter.print": {
    "id": "third_party.catch2.include.catch2.catch_reporter_tap.AssertionPrinter.print",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "depends_on": [],
    "start_line": 75,
    "end_line": 143,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "            void print() {\n                itMessage = messages.begin();\n\n                switch( result.getResultType() ) {\n                    case ResultWas::Ok:\n                        printResultType( passedString() );\n                        printOriginalExpression();\n                        printReconstructedExpression();\n                        if ( ! result.hasExpression() )\n                            printRemainingMessages( Colour::None );\n                        else\n                            printRemainingMessages();\n                        break;\n                    case ResultWas::ExpressionFailed:\n                        if (result.isOk()) {\n                            printResultType(passedString());\n                        } else {\n                            printResultType(failedString());\n                        }\n                        printOriginalExpression();\n                        printReconstructedExpression();\n                        if (result.isOk()) {\n                            printIssue(\" # TODO\");\n                        }\n                        printRemainingMessages();\n                        break;\n                    case ResultWas::ThrewException:\n                        printResultType( failedString() );\n                        printIssue( \"unexpected exception with message:\" );\n                        printMessage();\n                        printExpressionWas();\n                        printRemainingMessages();\n                        break;\n                    case ResultWas::FatalErrorCondition:\n                        printResultType( failedString() );\n                        printIssue( \"fatal error condition with message:\" );\n                        printMessage();\n                        printExpressionWas();\n                        printRemainingMessages();\n                        break;\n                    case ResultWas::DidntThrowException:\n                        printResultType( failedString() );\n                        printIssue( \"expected exception, got none\" );\n                        printExpressionWas();\n                        printRemainingMessages();\n                        break;\n                    case ResultWas::Info:\n                        printResultType( \"info\" );\n                        printMessage();\n                        printRemainingMessages();\n                        break;\n                    case ResultWas::Warning:\n                        printResultType( \"warning\" );\n                        printMessage();\n                        printRemainingMessages();\n                        break;\n                    case ResultWas::ExplicitFailure:\n                        printResultType( failedString() );\n                        printIssue( \"explicitly\" );\n                        printRemainingMessages( Colour::None );\n                        break;\n                    // These cases are here to prevent compiler warnings\n                    case ResultWas::Unknown:\n                    case ResultWas::FailureBit:\n                    case ResultWas::Exception:\n                        printResultType( \"** internal error **\" );\n                        break;\n                }\n            }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_tap.AssertionPrinter.printSourceInfo": {
    "id": "third_party.catch2.include.catch2.catch_reporter_tap.AssertionPrinter.printSourceInfo",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "depends_on": [],
    "start_line": 151,
    "end_line": 154,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "            void printSourceInfo() const {\n                Colour colourGuard( dimColour() );\n                stream << result.getSourceInfo() << \":\";\n            }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_tap.AssertionPrinter.printResultType": {
    "id": "third_party.catch2.include.catch2.catch_reporter_tap.AssertionPrinter.printResultType",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "depends_on": [],
    "start_line": 156,
    "end_line": 160,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "            void printResultType( std::string const& passOrFail ) const {\n                if( !passOrFail.empty() ) {\n                    stream << passOrFail << ' ' << counter << \" -\";\n                }\n            }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_tap.AssertionPrinter.printIssue": {
    "id": "third_party.catch2.include.catch2.catch_reporter_tap.AssertionPrinter.printIssue",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "depends_on": [],
    "start_line": 162,
    "end_line": 164,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "            void printIssue( std::string const& issue ) const {\n                stream << \" \" << issue;\n            }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_tap.AssertionPrinter.printExpressionWas": {
    "id": "third_party.catch2.include.catch2.catch_reporter_tap.AssertionPrinter.printExpressionWas",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "depends_on": [],
    "start_line": 166,
    "end_line": 175,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "            void printExpressionWas() {\n                if( result.hasExpression() ) {\n                    stream << \";\";\n                    {\n                        Colour colour( dimColour() );\n                        stream << \" expression was:\";\n                    }\n                    printOriginalExpression();\n                }\n            }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_tap.AssertionPrinter.printOriginalExpression": {
    "id": "third_party.catch2.include.catch2.catch_reporter_tap.AssertionPrinter.printOriginalExpression",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "depends_on": [],
    "start_line": 177,
    "end_line": 181,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "            void printOriginalExpression() const {\n                if( result.hasExpression() ) {\n                    stream << \" \" << result.getExpression();\n                }\n            }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_tap.AssertionPrinter.printReconstructedExpression": {
    "id": "third_party.catch2.include.catch2.catch_reporter_tap.AssertionPrinter.printReconstructedExpression",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "depends_on": [],
    "start_line": 183,
    "end_line": 193,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "            void printReconstructedExpression() const {\n                if( result.hasExpandedExpression() ) {\n                    {\n                        Colour colour( dimColour() );\n                        stream << \" for: \";\n                    }\n                    std::string expr = result.getExpandedExpression();\n                    std::replace( expr.begin(), expr.end(), '\\n', ' ');\n                    stream << expr;\n                }\n            }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_tap.AssertionPrinter.printMessage": {
    "id": "third_party.catch2.include.catch2.catch_reporter_tap.AssertionPrinter.printMessage",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "depends_on": [],
    "start_line": 195,
    "end_line": 200,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "            void printMessage() {\n                if ( itMessage != messages.end() ) {\n                    stream << \" '\" << itMessage->message << \"'\";\n                    ++itMessage;\n                }\n            }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_tap.AssertionPrinter.printRemainingMessages": {
    "id": "third_party.catch2.include.catch2.catch_reporter_tap.AssertionPrinter.printRemainingMessages",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "depends_on": [],
    "start_line": 202,
    "end_line": 227,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "            void printRemainingMessages( Colour::Code colour = dimColour() ) {\n                if (itMessage == messages.end()) {\n                    return;\n                }\n\n                const auto itEnd = messages.cend();\n                const auto N = static_cast<std::size_t>( std::distance( itMessage, itEnd ) );\n\n                {\n                    Colour colourGuard( colour );\n                    stream << \" with \" << pluralise( N, \"message\" ) << \":\";\n                }\n\n                while( itMessage != itEnd ) {\n                    // If this assertion is a warning ignore any INFO messages\n                    if( printInfoMessages || itMessage->type != ResultWas::Info ) {\n                        stream << \" '\" << itMessage->message << \"'\";\n                        if ( ++itMessage != itEnd ) {\n                            Colour colourGuard( dimColour() );\n                            stream << \" and\";\n                        }\n                        continue;\n                    }\n                    ++itMessage;\n                }\n            }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_tap.TAPReporter.printTotals": {
    "id": "third_party.catch2.include.catch2.catch_reporter_tap.TAPReporter.printTotals",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_tap.hpp",
    "depends_on": [],
    "start_line": 238,
    "end_line": 243,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        void printTotals( const Totals& totals ) const {\n            stream << \"1..\" << totals.assertions.total();\n            if( totals.testCases.total() == 0 ) {\n                stream << \" # Skipped: No tests ran.\";\n            }\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_teamcity.TeamCityReporter.escape": {
    "id": "third_party.catch2.include.catch2.catch_reporter_teamcity.TeamCityReporter.escape",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_teamcity.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_teamcity.hpp",
    "depends_on": [],
    "start_line": 33,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        static std::string escape( std::string const& str ) {\n            std::string escaped = str;\n            replaceInPlace( escaped, \"|\", \"||\" );\n            replaceInPlace( escaped, \"'\", \"|'\" );\n            replaceInPlace( escaped, \"\\n\", \"|n\" );\n            replaceInPlace( escaped, \"\\r\", \"|r\" );\n            replaceInPlace( escaped, \"[\", \"|[\" );\n            replaceInPlace( escaped, \"]\", \"|]\" );\n            return escaped;\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_teamcity.TeamCityReporter.getDescription": {
    "id": "third_party.catch2.include.catch2.catch_reporter_teamcity.TeamCityReporter.getDescription",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_teamcity.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_teamcity.hpp",
    "depends_on": [],
    "start_line": 45,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        static std::string getDescription() {\n            return \"Reports test results as TeamCity service messages\";\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_teamcity.TeamCityReporter.skipTest": {
    "id": "third_party.catch2.include.catch2.catch_reporter_teamcity.TeamCityReporter.skipTest",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_teamcity.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_teamcity.hpp",
    "depends_on": [],
    "start_line": 49,
    "end_line": 50,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        void skipTest( TestCaseInfo const& /* testInfo */ ) override {\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_teamcity.TeamCityReporter.testGroupStarting": {
    "id": "third_party.catch2.include.catch2.catch_reporter_teamcity.TeamCityReporter.testGroupStarting",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_teamcity.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_teamcity.hpp",
    "depends_on": [],
    "start_line": 54,
    "end_line": 58,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        void testGroupStarting( GroupInfo const& groupInfo ) override {\n            StreamingReporterBase::testGroupStarting( groupInfo );\n            stream << \"##teamcity[testSuiteStarted name='\"\n                << escape( groupInfo.name ) << \"']\\n\";\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_teamcity.TeamCityReporter.testGroupEnded": {
    "id": "third_party.catch2.include.catch2.catch_reporter_teamcity.TeamCityReporter.testGroupEnded",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_teamcity.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_teamcity.hpp",
    "depends_on": [],
    "start_line": 59,
    "end_line": 63,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        void testGroupEnded( TestGroupStats const& testGroupStats ) override {\n            StreamingReporterBase::testGroupEnded( testGroupStats );\n            stream << \"##teamcity[testSuiteFinished name='\"\n                << escape( testGroupStats.groupInfo.name ) << \"']\\n\";\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_teamcity.TeamCityReporter.assertionEnded": {
    "id": "third_party.catch2.include.catch2.catch_reporter_teamcity.TeamCityReporter.assertionEnded",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_teamcity.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_teamcity.hpp",
    "depends_on": [],
    "start_line": 68,
    "end_line": 138,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        bool assertionEnded( AssertionStats const& assertionStats ) override {\n            AssertionResult const& result = assertionStats.assertionResult;\n            if( !result.isOk() ) {\n\n                ReusableStringStream msg;\n                if( !m_headerPrintedForThisSection )\n                    printSectionHeader( msg.get() );\n                m_headerPrintedForThisSection = true;\n\n                msg << result.getSourceInfo() << \"\\n\";\n\n                switch( result.getResultType() ) {\n                    case ResultWas::ExpressionFailed:\n                        msg << \"expression failed\";\n                        break;\n                    case ResultWas::ThrewException:\n                        msg << \"unexpected exception\";\n                        break;\n                    case ResultWas::FatalErrorCondition:\n                        msg << \"fatal error condition\";\n                        break;\n                    case ResultWas::DidntThrowException:\n                        msg << \"no exception was thrown where one was expected\";\n                        break;\n                    case ResultWas::ExplicitFailure:\n                        msg << \"explicit failure\";\n                        break;\n\n                    // We shouldn't get here because of the isOk() test\n                    case ResultWas::Ok:\n                    case ResultWas::Info:\n                    case ResultWas::Warning:\n                        CATCH_ERROR( \"Internal error in TeamCity reporter\" );\n                    // These cases are here to prevent compiler warnings\n                    case ResultWas::Unknown:\n                    case ResultWas::FailureBit:\n                    case ResultWas::Exception:\n                        CATCH_ERROR( \"Not implemented\" );\n                }\n                if( assertionStats.infoMessages.size() == 1 )\n                    msg << \" with message:\";\n                if( assertionStats.infoMessages.size() > 1 )\n                    msg << \" with messages:\";\n                for( auto const& messageInfo : assertionStats.infoMessages )\n                    msg << \"\\n  \\\"\" << messageInfo.message << \"\\\"\";\n\n\n                if( result.hasExpression() ) {\n                    msg <<\n                        \"\\n  \" << result.getExpressionInMacro() << \"\\n\"\n                        \"with expansion:\\n\" <<\n                        \"  \" << result.getExpandedExpression() << \"\\n\";\n                }\n\n                if( currentTestCaseInfo->okToFail() ) {\n                    msg << \"- failure ignore as test marked as 'ok to fail'\\n\";\n                    stream << \"##teamcity[testIgnored\"\n                           << \" name='\" << escape( currentTestCaseInfo->name )<< \"'\"\n                           << \" message='\" << escape( msg.str() ) << \"'\"\n                           << \"]\\n\";\n                }\n                else {\n                    stream << \"##teamcity[testFailed\"\n                           << \" name='\" << escape( currentTestCaseInfo->name )<< \"'\"\n                           << \" message='\" << escape( msg.str() ) << \"'\"\n                           << \"]\\n\";\n                }\n            }\n            stream.flush();\n            return true;\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_teamcity.TeamCityReporter.sectionStarting": {
    "id": "third_party.catch2.include.catch2.catch_reporter_teamcity.TeamCityReporter.sectionStarting",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_teamcity.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_teamcity.hpp",
    "depends_on": [],
    "start_line": 140,
    "end_line": 143,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        void sectionStarting( SectionInfo const& sectionInfo ) override {\n            m_headerPrintedForThisSection = false;\n            StreamingReporterBase::sectionStarting( sectionInfo );\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_teamcity.TeamCityReporter.testCaseStarting": {
    "id": "third_party.catch2.include.catch2.catch_reporter_teamcity.TeamCityReporter.testCaseStarting",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_teamcity.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_teamcity.hpp",
    "depends_on": [],
    "start_line": 145,
    "end_line": 151,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        void testCaseStarting( TestCaseInfo const& testInfo ) override {\n            m_testTimer.start();\n            StreamingReporterBase::testCaseStarting( testInfo );\n            stream << \"##teamcity[testStarted name='\"\n                << escape( testInfo.name ) << \"']\\n\";\n            stream.flush();\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_teamcity.TeamCityReporter.testCaseEnded": {
    "id": "third_party.catch2.include.catch2.catch_reporter_teamcity.TeamCityReporter.testCaseEnded",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_teamcity.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_teamcity.hpp",
    "depends_on": [],
    "start_line": 153,
    "end_line": 167,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        void testCaseEnded( TestCaseStats const& testCaseStats ) override {\n            StreamingReporterBase::testCaseEnded( testCaseStats );\n            if( !testCaseStats.stdOut.empty() )\n                stream << \"##teamcity[testStdOut name='\"\n                    << escape( testCaseStats.testInfo.name )\n                    << \"' out='\" << escape( testCaseStats.stdOut ) << \"']\\n\";\n            if( !testCaseStats.stdErr.empty() )\n                stream << \"##teamcity[testStdErr name='\"\n                    << escape( testCaseStats.testInfo.name )\n                    << \"' out='\" << escape( testCaseStats.stdErr ) << \"']\\n\";\n            stream << \"##teamcity[testFinished name='\"\n                    << escape( testCaseStats.testInfo.name ) << \"' duration='\"\n                    << m_testTimer.getElapsedMilliseconds() << \"']\\n\";\n            stream.flush();\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_teamcity.TeamCityReporter.printSectionHeader": {
    "id": "third_party.catch2.include.catch2.catch_reporter_teamcity.TeamCityReporter.printSectionHeader",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_teamcity.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_teamcity.hpp",
    "depends_on": [],
    "start_line": 170,
    "end_line": 188,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        void printSectionHeader( std::ostream& os ) {\n            assert( !m_sectionStack.empty() );\n\n            if( m_sectionStack.size() > 1 ) {\n                os << getLineOfChars<'-'>() << \"\\n\";\n\n                std::vector<SectionInfo>::const_iterator\n                it = m_sectionStack.begin()+1, // Skip first section (test case)\n                itEnd = m_sectionStack.end();\n                for( ; it != itEnd; ++it )\n                    printHeaderString( os, it->name );\n                os << getLineOfChars<'-'>() << \"\\n\";\n            }\n\n            SourceLineInfo lineInfo = m_sectionStack.front().lineInfo;\n\n            os << lineInfo << \"\\n\";\n            os << getLineOfChars<'.'>() << \"\\n\\n\";\n        }\n"
  },
  "third_party.catch2.include.catch2.catch_reporter_teamcity.TeamCityReporter.printHeaderString": {
    "id": "third_party.catch2.include.catch2.catch_reporter_teamcity.TeamCityReporter.printHeaderString",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\catch2\\include\\catch2\\catch_reporter_teamcity.hpp",
    "relative_path": "third_party\\catch2\\include\\catch2\\catch_reporter_teamcity.hpp",
    "depends_on": [],
    "start_line": 192,
    "end_line": 201,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "        static void printHeaderString( std::ostream& os, std::string const& _string, std::size_t indent = 0 ) {\n            std::size_t i = _string.find( \": \" );\n            if( i != std::string::npos )\n                i+=2;\n            else\n                i = 0;\n            os << Column( _string )\n                           .indent( indent+i)\n                           .initialIndent( indent ) << \"\\n\";\n        }\n"
  },
  "third_party.json11.json11.dump": {
    "id": "third_party.json11.json11.dump",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 126,
    "end_line": 138,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static void dump(const Json::object &values, string &out) {\n    bool first = true;\n    out += \"{\";\n    for (const auto &kv : values) {\n        if (!first)\n            out += \", \";\n        dump(kv.first, out);\n        out += \": \";\n        kv.second.dump(out);\n        first = false;\n    }\n    out += \"}\";\n}\n"
  },
  "third_party.json11.json11.Json.dump": {
    "id": "third_party.json11.json11.Json.dump",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.hpp",
    "relative_path": "third_party\\json11\\json11.hpp",
    "depends_on": [],
    "start_line": 157,
    "end_line": 161,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    std::string dump() const {\n        std::string out;\n        dump(out);\n        return out;\n    }\n"
  },
  "third_party.json11.json11.JsonDouble": {
    "id": "third_party.json11.json11.JsonDouble",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 173,
    "end_line": 180,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class JsonDouble final : public Value<Json::NUMBER, double> {\n    double number_value() const override { return m_value; }\n    int int_value() const override { return static_cast<int>(m_value); }\n    bool equals(const JsonValue * other) const override { return m_value == other->number_value(); }\n    bool less(const JsonValue * other)   const override { return m_value <  other->number_value(); }\npublic:\n    explicit JsonDouble(double value) : Value(value) {}\n};\n"
  },
  "third_party.json11.json11.JsonInt": {
    "id": "third_party.json11.json11.JsonInt",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 182,
    "end_line": 189,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class JsonInt final : public Value<Json::NUMBER, int> {\n    double number_value() const override { return m_value; }\n    int int_value() const override { return m_value; }\n    bool equals(const JsonValue * other) const override { return m_value == other->number_value(); }\n    bool less(const JsonValue * other)   const override { return m_value <  other->number_value(); }\npublic:\n    explicit JsonInt(int value) : Value(value) {}\n};\n"
  },
  "third_party.json11.json11.JsonBoolean": {
    "id": "third_party.json11.json11.JsonBoolean",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 191,
    "end_line": 195,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class JsonBoolean final : public Value<Json::BOOL, bool> {\n    bool bool_value() const override { return m_value; }\npublic:\n    explicit JsonBoolean(bool value) : Value(value) {}\n};\n"
  },
  "third_party.json11.json11.JsonString": {
    "id": "third_party.json11.json11.JsonString",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 197,
    "end_line": 202,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class JsonString final : public Value<Json::STRING, string> {\n    const string &string_value() const override { return m_value; }\npublic:\n    explicit JsonString(const string &value) : Value(value) {}\n    explicit JsonString(string &&value)      : Value(move(value)) {}\n};\n"
  },
  "third_party.json11.json11.JsonArray": {
    "id": "third_party.json11.json11.JsonArray",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 204,
    "end_line": 210,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class JsonArray final : public Value<Json::ARRAY, Json::array> {\n    const Json::array &array_items() const override { return m_value; }\n    const Json & operator[](size_t i) const override;\npublic:\n    explicit JsonArray(const Json::array &value) : Value(value) {}\n    explicit JsonArray(Json::array &&value)      : Value(move(value)) {}\n};\n"
  },
  "third_party.json11.json11.JsonObject": {
    "id": "third_party.json11.json11.JsonObject",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 212,
    "end_line": 218,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class JsonObject final : public Value<Json::OBJECT, Json::object> {\n    const Json::object &object_items() const override { return m_value; }\n    const Json & operator[](const string &key) const override;\npublic:\n    explicit JsonObject(const Json::object &value) : Value(value) {}\n    explicit JsonObject(Json::object &&value)      : Value(move(value)) {}\n};\n"
  },
  "third_party.json11.json11.JsonNull": {
    "id": "third_party.json11.json11.JsonNull",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 220,
    "end_line": 223,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class JsonNull final : public Value<Json::NUL, NullStruct> {\npublic:\n    JsonNull() : Value({}) {}\n};\n"
  },
  "third_party.json11.json11.statics": {
    "id": "third_party.json11.json11.statics",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 238,
    "end_line": 241,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static const Statics & statics() {\n    static const Statics s {};\n    return s;\n}\n"
  },
  "third_party.json11.json11.static_null": {
    "id": "third_party.json11.json11.static_null",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 243,
    "end_line": 247,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static const Json & static_null() {\n    // This has to be separate, not in Statics, because Json() accesses statics().null.\n    static const Json json_null;\n    return json_null;\n}\n"
  },
  "third_party.json11.json11.JsonObject.operator[]": {
    "id": "third_party.json11.json11.JsonObject.operator[]",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 289,
    "end_line": 292,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "const Json & JsonObject::operator[] (const string &key) const {\n    auto iter = m_value.find(key);\n    return (iter == m_value.end()) ? static_null() : iter->second;\n}\n"
  },
  "third_party.json11.json11.JsonArray.operator[]": {
    "id": "third_party.json11.json11.JsonArray.operator[]",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 293,
    "end_line": 296,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "const Json & JsonArray::operator[] (size_t i) const {\n    if (i >= m_value.size()) return static_null();\n    else return m_value[i];\n}\n"
  },
  "third_party.json11.json11.Json.operator==": {
    "id": "third_party.json11.json11.Json.operator==",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 302,
    "end_line": 307,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "bool Json::operator== (const Json &other) const {\n    if (m_ptr->type() != other.m_ptr->type())\n        return false;\n\n    return m_ptr->equals(other.m_ptr.get());\n}\n"
  },
  "third_party.json11.json11.Json.operator<": {
    "id": "third_party.json11.json11.Json.operator<",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 309,
    "end_line": 314,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "bool Json::operator< (const Json &other) const {\n    if (m_ptr->type() != other.m_ptr->type())\n        return m_ptr->type() < other.m_ptr->type();\n\n    return m_ptr->less(other.m_ptr.get());\n}\n"
  },
  "third_party.json11.json11.esc": {
    "id": "third_party.json11.json11.esc",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 324,
    "end_line": 332,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline string esc(char c) {\n    char buf[12];\n    if (static_cast<uint8_t>(c) >= 0x20 && static_cast<uint8_t>(c) <= 0x7f) {\n        snprintf(buf, sizeof buf, \"'%c' (%d)\", c, c);\n    } else {\n        snprintf(buf, sizeof buf, \"(%d)\", c);\n    }\n    return string(buf);\n}\n"
  },
  "third_party.json11.json11.in_range": {
    "id": "third_party.json11.json11.in_range",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 334,
    "end_line": 336,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline bool in_range(long x, long lower, long upper) {\n    return (x >= lower && x <= upper);\n}\n"
  },
  "third_party.json11.json11.JsonParser.fail": {
    "id": "third_party.json11.json11.JsonParser.fail",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 357,
    "end_line": 359,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    Json fail(string &&msg) {\n        return fail(move(msg), Json());\n    }\n"
  },
  "third_party.json11.json11.JsonParser.consume_whitespace": {
    "id": "third_party.json11.json11.JsonParser.consume_whitespace",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 373,
    "end_line": 376,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    void consume_whitespace() {\n        while (str[i] == ' ' || str[i] == '\\r' || str[i] == '\\n' || str[i] == '\\t')\n            i++;\n    }\n"
  },
  "third_party.json11.json11.JsonParser.consume_comment": {
    "id": "third_party.json11.json11.JsonParser.consume_comment",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 382,
    "end_line": 414,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    bool consume_comment() {\n      bool comment_found = false;\n      if (str[i] == '/') {\n        i++;\n        if (i == str.size())\n          return fail(\"unexpected end of input after start of comment\", false);\n        if (str[i] == '/') { // inline comment\n          i++;\n          // advance until next line, or end of input\n          while (i < str.size() && str[i] != '\\n') {\n            i++;\n          }\n          comment_found = true;\n        }\n        else if (str[i] == '*') { // multiline comment\n          i++;\n          if (i > str.size()-2)\n            return fail(\"unexpected end of input inside multi-line comment\", false);\n          // advance until closing tokens\n          while (!(str[i] == '*' && str[i+1] == '/')) {\n            i++;\n            if (i > str.size()-2)\n              return fail(\n                \"unexpected end of input inside multi-line comment\", false);\n          }\n          i += 2;\n          comment_found = true;\n        }\n        else\n          return fail(\"malformed comment\", false);\n      }\n      return comment_found;\n    }\n"
  },
  "third_party.json11.json11.JsonParser.consume_garbage": {
    "id": "third_party.json11.json11.JsonParser.consume_garbage",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 420,
    "end_line": 431,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    void consume_garbage() {\n      consume_whitespace();\n      if(strategy == JsonParse::COMMENTS) {\n        bool comment_found = false;\n        do {\n          comment_found = consume_comment();\n          if (failed) return;\n          consume_whitespace();\n        }\n        while(comment_found);\n      }\n    }\n"
  },
  "third_party.json11.json11.JsonParser.get_next_token": {
    "id": "third_party.json11.json11.JsonParser.get_next_token",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 438,
    "end_line": 445,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    char get_next_token() {\n        consume_garbage();\n        if (failed) return (char)0;\n        if (i == str.size())\n            return fail(\"unexpected end of input\", (char)0);\n\n        return str[i++];\n    }\n"
  },
  "third_party.json11.json11.JsonParser.encode_utf8": {
    "id": "third_party.json11.json11.JsonParser.encode_utf8",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 451,
    "end_line": 470,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    void encode_utf8(long pt, string & out) {\n        if (pt < 0)\n            return;\n\n        if (pt < 0x80) {\n            out += static_cast<char>(pt);\n        } else if (pt < 0x800) {\n            out += static_cast<char>((pt >> 6) | 0xC0);\n            out += static_cast<char>((pt & 0x3F) | 0x80);\n        } else if (pt < 0x10000) {\n            out += static_cast<char>((pt >> 12) | 0xE0);\n            out += static_cast<char>(((pt >> 6) & 0x3F) | 0x80);\n            out += static_cast<char>((pt & 0x3F) | 0x80);\n        } else {\n            out += static_cast<char>((pt >> 18) | 0xF0);\n            out += static_cast<char>(((pt >> 12) & 0x3F) | 0x80);\n            out += static_cast<char>(((pt >> 6) & 0x3F) | 0x80);\n            out += static_cast<char>((pt & 0x3F) | 0x80);\n        }\n    }\n"
  },
  "third_party.json11.json11.JsonParser.parse_string": {
    "id": "third_party.json11.json11.JsonParser.parse_string",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 476,
    "end_line": 563,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    string parse_string() {\n        string out;\n        long last_escaped_codepoint = -1;\n        while (true) {\n            if (i == str.size())\n                return fail(\"unexpected end of input in string\", \"\");\n\n            char ch = str[i++];\n\n            if (ch == '\"') {\n                encode_utf8(last_escaped_codepoint, out);\n                return out;\n            }\n\n            if (in_range(ch, 0, 0x1f))\n                return fail(\"unescaped \" + esc(ch) + \" in string\", \"\");\n\n            // The usual case: non-escaped characters\n            if (ch != '\\\\') {\n                encode_utf8(last_escaped_codepoint, out);\n                last_escaped_codepoint = -1;\n                out += ch;\n                continue;\n            }\n\n            // Handle escapes\n            if (i == str.size())\n                return fail(\"unexpected end of input in string\", \"\");\n\n            ch = str[i++];\n\n            if (ch == 'u') {\n                // Extract 4-byte escape sequence\n                string esc = str.substr(i, 4);\n                // Explicitly check length of the substring. The following loop\n                // relies on std::string returning the terminating NUL when\n                // accessing str[length]. Checking here reduces brittleness.\n                if (esc.length() < 4) {\n                    return fail(\"bad \\\\u escape: \" + esc, \"\");\n                }\n                for (size_t j = 0; j < 4; j++) {\n                    if (!in_range(esc[j], 'a', 'f') && !in_range(esc[j], 'A', 'F')\n                            && !in_range(esc[j], '0', '9'))\n                        return fail(\"bad \\\\u escape: \" + esc, \"\");\n                }\n\n                long codepoint = strtol(esc.data(), nullptr, 16);\n\n                // JSON specifies that characters outside the BMP shall be encoded as a pair\n                // of 4-hex-digit \\u escapes encoding their surrogate pair components. Check\n                // whether we're in the middle of such a beast: the previous codepoint was an\n                // escaped lead (high) surrogate, and this is a trail (low) surrogate.\n                if (in_range(last_escaped_codepoint, 0xD800, 0xDBFF)\n                        && in_range(codepoint, 0xDC00, 0xDFFF)) {\n                    // Reassemble the two surrogate pairs into one astral-plane character, per\n                    // the UTF-16 algorithm.\n                    encode_utf8((((last_escaped_codepoint - 0xD800) << 10)\n                                 | (codepoint - 0xDC00)) + 0x10000, out);\n                    last_escaped_codepoint = -1;\n                } else {\n                    encode_utf8(last_escaped_codepoint, out);\n                    last_escaped_codepoint = codepoint;\n                }\n\n                i += 4;\n                continue;\n            }\n\n            encode_utf8(last_escaped_codepoint, out);\n            last_escaped_codepoint = -1;\n\n            if (ch == 'b') {\n                out += '\\b';\n            } else if (ch == 'f') {\n                out += '\\f';\n            } else if (ch == 'n') {\n                out += '\\n';\n            } else if (ch == 'r') {\n                out += '\\r';\n            } else if (ch == 't') {\n                out += '\\t';\n            } else if (ch == '\"' || ch == '\\\\' || ch == '/') {\n                out += ch;\n            } else {\n                return fail(\"invalid escape character \" + esc(ch), \"\");\n            }\n        }\n    }\n"
  },
  "third_party.json11.json11.JsonParser.parse_number": {
    "id": "third_party.json11.json11.JsonParser.parse_number",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 569,
    "end_line": 618,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    Json parse_number() {\n        size_t start_pos = i;\n\n        if (str[i] == '-')\n            i++;\n\n        // Integer part\n        if (str[i] == '0') {\n            i++;\n            if (in_range(str[i], '0', '9'))\n                return fail(\"leading 0s not permitted in numbers\");\n        } else if (in_range(str[i], '1', '9')) {\n            i++;\n            while (in_range(str[i], '0', '9'))\n                i++;\n        } else {\n            return fail(\"invalid \" + esc(str[i]) + \" in number\");\n        }\n\n        if (str[i] != '.' && str[i] != 'e' && str[i] != 'E'\n                && (i - start_pos) <= static_cast<size_t>(std::numeric_limits<int>::digits10)) {\n            return std::atoi(str.c_str() + start_pos);\n        }\n\n        // Decimal part\n        if (str[i] == '.') {\n            i++;\n            if (!in_range(str[i], '0', '9'))\n                return fail(\"at least one digit required in fractional part\");\n\n            while (in_range(str[i], '0', '9'))\n                i++;\n        }\n\n        // Exponent part\n        if (str[i] == 'e' || str[i] == 'E') {\n            i++;\n\n            if (str[i] == '+' || str[i] == '-')\n                i++;\n\n            if (!in_range(str[i], '0', '9'))\n                return fail(\"at least one digit required in exponent\");\n\n            while (in_range(str[i], '0', '9'))\n                i++;\n        }\n\n        return std::strtod(str.c_str() + start_pos, nullptr);\n    }\n"
  },
  "third_party.json11.json11.JsonParser.expect": {
    "id": "third_party.json11.json11.JsonParser.expect",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 625,
    "end_line": 634,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    Json expect(const string &expected, Json res) {\n        assert(i != 0);\n        i--;\n        if (str.compare(i, expected.length(), expected) == 0) {\n            i += expected.length();\n            return res;\n        } else {\n            return fail(\"parse error: expected \" + expected + \", got \" + str.substr(i, expected.length()));\n        }\n    }\n"
  },
  "third_party.json11.json11.JsonParser.parse_json": {
    "id": "third_party.json11.json11.JsonParser.parse_json",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 640,
    "end_line": 724,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    Json parse_json(int depth) {\n        if (depth > max_depth) {\n            return fail(\"exceeded maximum nesting depth\");\n        }\n\n        char ch = get_next_token();\n        if (failed)\n            return Json();\n\n        if (ch == '-' || (ch >= '0' && ch <= '9')) {\n            i--;\n            return parse_number();\n        }\n\n        if (ch == 't')\n            return expect(\"true\", true);\n\n        if (ch == 'f')\n            return expect(\"false\", false);\n\n        if (ch == 'n')\n            return expect(\"null\", Json());\n\n        if (ch == '\"')\n            return parse_string();\n\n        if (ch == '{') {\n            map<string, Json> data;\n            ch = get_next_token();\n            if (ch == '}')\n                return data;\n\n            while (1) {\n                if (ch != '\"')\n                    return fail(\"expected '\\\"' in object, got \" + esc(ch));\n\n                string key = parse_string();\n                if (failed)\n                    return Json();\n\n                ch = get_next_token();\n                if (ch != ':')\n                    return fail(\"expected ':' in object, got \" + esc(ch));\n\n                data[std::move(key)] = parse_json(depth + 1);\n                if (failed)\n                    return Json();\n\n                ch = get_next_token();\n                if (ch == '}')\n                    break;\n                if (ch != ',')\n                    return fail(\"expected ',' in object, got \" + esc(ch));\n\n                ch = get_next_token();\n            }\n            return data;\n        }\n\n        if (ch == '[') {\n            vector<Json> data;\n            ch = get_next_token();\n            if (ch == ']')\n                return data;\n\n            while (1) {\n                i--;\n                data.push_back(parse_json(depth + 1));\n                if (failed)\n                    return Json();\n\n                ch = get_next_token();\n                if (ch == ']')\n                    break;\n                if (ch != ',')\n                    return fail(\"expected ',' in list, got \" + esc(ch));\n\n                ch = get_next_token();\n                (void)ch;\n            }\n            return data;\n        }\n\n        return fail(\"expected value, got \" + esc(ch));\n    }\n"
  },
  "third_party.json11.json11.Json.parse": {
    "id": "third_party.json11.json11.Json.parse",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.hpp",
    "relative_path": "third_party\\json11\\json11.hpp",
    "depends_on": [],
    "start_line": 167,
    "end_line": 176,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    static Json parse(const char * in,\n                      std::string & err,\n                      JsonParse strategy = JsonParse::STANDARD) {\n        if (in) {\n            return parse(std::string(in), err, strategy);\n        } else {\n            err = \"null input\";\n            return nullptr;\n        }\n    }\n"
  },
  "third_party.json11.json11.Json.parse_multi": {
    "id": "third_party.json11.json11.Json.parse_multi",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.hpp",
    "relative_path": "third_party\\json11\\json11.hpp",
    "depends_on": [],
    "start_line": 184,
    "end_line": 190,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    static inline std::vector<Json> parse_multi(\n        const std::string & in,\n        std::string & err,\n        JsonParse strategy = JsonParse::STANDARD) {\n        std::string::size_type parser_stop_pos;\n        return parse_multi(in, parser_stop_pos, err, strategy);\n    }\n"
  },
  "third_party.json11.json11.Json.has_shape": {
    "id": "third_party.json11.json11.Json.has_shape",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.cpp",
    "relative_path": "third_party\\json11\\json11.cpp",
    "depends_on": [],
    "start_line": 768,
    "end_line": 782,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "bool Json::has_shape(const shape & types, string & err) const {\n    if (!is_object()) {\n        err = \"expected JSON object, got \" + dump();\n        return false;\n    }\n\n    for (auto & item : types) {\n        if ((*this)[item.first].type() != item.second) {\n            err = \"bad type for \" + item.first + \" in \" + dump();\n            return false;\n        }\n    }\n\n    return true;\n}\n"
  },
  "third_party.json11.json11.Json": {
    "id": "third_party.json11.json11.Json",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.hpp",
    "relative_path": "third_party\\json11\\json11.hpp",
    "depends_on": [],
    "start_line": 79,
    "end_line": 209,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class Json final {\npublic:\n    // Types\n    enum Type {\n        NUL, NUMBER, BOOL, STRING, ARRAY, OBJECT\n    };\n\n    // Array and object typedefs\n    typedef std::vector<Json> array;\n    typedef std::map<std::string, Json> object;\n\n    // Constructors for the various types of JSON value.\n    Json() noexcept;                // NUL\n    Json(std::nullptr_t) noexcept;  // NUL\n    Json(double value);             // NUMBER\n    Json(int value);                // NUMBER\n    Json(bool value);               // BOOL\n    Json(const std::string &value); // STRING\n    Json(std::string &&value);      // STRING\n    Json(const char * value);       // STRING\n    Json(const array &values);      // ARRAY\n    Json(array &&values);           // ARRAY\n    Json(const object &values);     // OBJECT\n    Json(object &&values);          // OBJECT\n\n    // Implicit constructor: anything with a to_json() function.\n    template <class T, class = decltype(&T::to_json)>\n    Json(const T & t) : Json(t.to_json()) {}\n\n    // Implicit constructor: map-like objects (std::map, std::unordered_map, etc)\n    template <class M, typename std::enable_if<\n        std::is_constructible<std::string, typename M::key_type>::value\n        && std::is_constructible<Json, typename M::mapped_type>::value,\n            int>::type = 0>\n    Json(const M & m) : Json(object(m.begin(), m.end())) {}\n\n    // Implicit constructor: vector-like objects (std::list, std::vector, std::set, etc)\n    template <class V, typename std::enable_if<\n        std::is_constructible<Json, typename V::value_type>::value,\n            int>::type = 0>\n    Json(const V & v) : Json(array(v.begin(), v.end())) {}\n\n    // This prevents Json(some_pointer) from accidentally producing a bool. Use\n    // Json(bool(some_pointer)) if that behavior is desired.\n    Json(void *) = delete;\n\n    // Accessors\n    Type type() const;\n\n    bool is_null()   const { return type() == NUL; }\n    bool is_number() const { return type() == NUMBER; }\n    bool is_bool()   const { return type() == BOOL; }\n    bool is_string() const { return type() == STRING; }\n    bool is_array()  const { return type() == ARRAY; }\n    bool is_object() const { return type() == OBJECT; }\n\n    // Return the enclosed value if this is a number, 0 otherwise. Note that json11 does not\n    // distinguish between integer and non-integer numbers - number_value() and int_value()\n    // can both be applied to a NUMBER-typed object.\n    double number_value() const;\n    int int_value() const;\n\n    // Return the enclosed value if this is a boolean, false otherwise.\n    bool bool_value() const;\n    // Return the enclosed string if this is a string, \"\" otherwise.\n    const std::string &string_value() const;\n    // Return the enclosed std::vector if this is an array, or an empty vector otherwise.\n    const array &array_items() const;\n    // Return the enclosed std::map if this is an object, or an empty map otherwise.\n    const object &object_items() const;\n\n    // Return a reference to arr[i] if this is an array, Json() otherwise.\n    const Json & operator[](size_t i) const;\n    // Return a reference to obj[key] if this is an object, Json() otherwise.\n    const Json & operator[](const std::string &key) const;\n\n    // Serialize.\n    void dump(std::string &out) const;\n    std::string dump() const {\n        std::string out;\n        dump(out);\n        return out;\n    }\n\n    // Parse. If parse fails, return Json() and assign an error message to err.\n    static Json parse(const std::string & in,\n                      std::string & err,\n                      JsonParse strategy = JsonParse::STANDARD);\n    static Json parse(const char * in,\n                      std::string & err,\n                      JsonParse strategy = JsonParse::STANDARD) {\n        if (in) {\n            return parse(std::string(in), err, strategy);\n        } else {\n            err = \"null input\";\n            return nullptr;\n        }\n    }\n    // Parse multiple objects, concatenated or separated by whitespace\n    static std::vector<Json> parse_multi(\n        const std::string & in,\n        std::string::size_type & parser_stop_pos,\n        std::string & err,\n        JsonParse strategy = JsonParse::STANDARD);\n\n    static inline std::vector<Json> parse_multi(\n        const std::string & in,\n        std::string & err,\n        JsonParse strategy = JsonParse::STANDARD) {\n        std::string::size_type parser_stop_pos;\n        return parse_multi(in, parser_stop_pos, err, strategy);\n    }\n\n    bool operator== (const Json &rhs) const;\n    bool operator<  (const Json &rhs) const;\n    bool operator!= (const Json &rhs) const { return !(*this == rhs); }\n    bool operator<= (const Json &rhs) const { return !(rhs < *this); }\n    bool operator>  (const Json &rhs) const { return  (rhs < *this); }\n    bool operator>= (const Json &rhs) const { return !(*this < rhs); }\n\n    /* has_shape(types, err)\n     *\n     * Return true if this is a JSON object and, for each item in types, has a field of\n     * the given type. If not, return false and set err to a descriptive message.\n     */\n    typedef std::initializer_list<std::pair<std::string, Type>> shape;\n    bool has_shape(const shape & types, std::string & err) const;\n\nprivate:\n    std::shared_ptr<JsonValue> m_ptr;\n};\n"
  },
  "third_party.json11.json11.JsonValue": {
    "id": "third_party.json11.json11.JsonValue",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\json11\\json11.hpp",
    "relative_path": "third_party\\json11\\json11.hpp",
    "depends_on": [],
    "start_line": 212,
    "end_line": 230,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class JsonValue {\nprotected:\n    friend class Json;\n    friend class JsonInt;\n    friend class JsonDouble;\n    virtual Json::Type type() const = 0;\n    virtual bool equals(const JsonValue * other) const = 0;\n    virtual bool less(const JsonValue * other) const = 0;\n    virtual void dump(std::string &out) const = 0;\n    virtual double number_value() const;\n    virtual int int_value() const;\n    virtual bool bool_value() const;\n    virtual const std::string &string_value() const;\n    virtual const Json::array &array_items() const;\n    virtual const Json &operator[](size_t i) const;\n    virtual const Json::object &object_items() const;\n    virtual const Json &operator[](const std::string &key) const;\n    virtual ~JsonValue() {}\n};\n"
  },
  "third_party.kaitai.custom_decoder.custom_decoder": {
    "id": "third_party.kaitai.custom_decoder.custom_decoder",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\kaitai\\custom_decoder.h",
    "relative_path": "third_party\\kaitai\\custom_decoder.h",
    "depends_on": [],
    "start_line": 8,
    "end_line": 12,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class custom_decoder {\npublic:\n    virtual ~custom_decoder() {};\n    virtual std::string decode(std::string src) = 0;\n};\n"
  },
  "third_party.kaitai.exceptions.kstruct_error": {
    "id": "third_party.kaitai.exceptions.kstruct_error",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\kaitai\\exceptions.h",
    "relative_path": "third_party\\kaitai\\exceptions.h",
    "depends_on": [],
    "start_line": 27,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class kstruct_error: public std::runtime_error {\npublic:\n    kstruct_error(const std::string what, const std::string src_path):\n        std::runtime_error(src_path + \": \" + what),\n        m_src_path(src_path)\n    {\n    }\n\n    virtual ~kstruct_error() KS_NOEXCEPT {};\n\nprotected:\n    const std::string m_src_path;\n};\n"
  },
  "third_party.kaitai.exceptions.undecided_endianness_error": {
    "id": "third_party.kaitai.exceptions.undecided_endianness_error",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\kaitai\\exceptions.h",
    "relative_path": "third_party\\kaitai\\exceptions.h",
    "depends_on": [],
    "start_line": 46,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class undecided_endianness_error: public kstruct_error {\npublic:\n    undecided_endianness_error(const std::string src_path):\n        kstruct_error(\"unable to decide on endianness for a type\", src_path)\n    {\n    }\n\n    virtual ~undecided_endianness_error() KS_NOEXCEPT {};\n};\n"
  },
  "third_party.kaitai.exceptions.validation_failed_error": {
    "id": "third_party.kaitai.exceptions.validation_failed_error",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\kaitai\\exceptions.h",
    "relative_path": "third_party\\kaitai\\exceptions.h",
    "depends_on": [],
    "start_line": 60,
    "end_line": 74,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class validation_failed_error: public kstruct_error {\npublic:\n    validation_failed_error(const std::string what, kstream* io, const std::string src_path):\n        kstruct_error(\"at pos \" + kstream::to_string(static_cast<int>(io->pos())) + \": validation failed: \" + what, src_path),\n        m_io(io)\n    {\n    }\n\n// \"at pos #{io.pos}: validation failed: #{msg}\"\n\n    virtual ~validation_failed_error() KS_NOEXCEPT {};\n\nprotected:\n    kstream* m_io;\n};\n"
  },
  "third_party.kaitai.kaitaistream.kstream": {
    "id": "third_party.kaitai.kaitaistream.kstream",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\kaitai\\kaitaistream.h",
    "relative_path": "third_party\\kaitai\\kaitaistream.h",
    "depends_on": [],
    "start_line": 31,
    "end_line": 264,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class kstream {\npublic:\n    /**\n     * Constructs new Kaitai Stream object, wrapping a given std::istream.\n     * \\param io istream object to use for this Kaitai Stream\n     */\n    kstream(std::istream* io);\n\n    /**\n     * Constructs new Kaitai Stream object, wrapping a given in-memory data\n     * buffer.\n     * \\param data data buffer to use for this Kaitai Stream\n     */\n    kstream(std::string& data);\n\n    void close();\n\n    /** @name Stream positioning */\n    //@{\n    /**\n     * Check if stream pointer is at the end of stream. Note that the semantics\n     * are different from traditional STL semantics: one does *not* need to do a\n     * read (which will fail) after the actual end of the stream to trigger EOF\n     * flag, which can be accessed after that read. It is sufficient to just be\n     * at the end of the stream for this method to return true.\n     * \\return \"true\" if we are located at the end of the stream.\n     */\n    bool is_eof() const;\n\n    /**\n     * Set stream pointer to designated position.\n     * \\param pos new position (offset in bytes from the beginning of the stream)\n     */\n    void seek(uint64_t pos);\n\n    /**\n     * Get current position of a stream pointer.\n     * \\return pointer position, number of bytes from the beginning of the stream\n     */\n    uint64_t pos();\n\n    /**\n     * Get total size of the stream in bytes.\n     * \\return size of the stream in bytes\n     */\n    uint64_t size();\n    //@}\n\n    /** @name Integer numbers */\n    //@{\n\n    // ------------------------------------------------------------------------\n    // Signed\n    // ------------------------------------------------------------------------\n\n    int8_t read_s1();\n\n    // ........................................................................\n    // Big-endian\n    // ........................................................................\n\n    int16_t read_s2be();\n    int32_t read_s4be();\n    int64_t read_s8be();\n\n    // ........................................................................\n    // Little-endian\n    // ........................................................................\n\n    int16_t read_s2le();\n    int32_t read_s4le();\n    int64_t read_s8le();\n\n    // ------------------------------------------------------------------------\n    // Unsigned\n    // ------------------------------------------------------------------------\n\n    uint8_t read_u1();\n\n    // ........................................................................\n    // Big-endian\n    // ........................................................................\n\n    uint16_t read_u2be();\n    uint32_t read_u4be();\n    uint64_t read_u8be();\n\n    // ........................................................................\n    // Little-endian\n    // ........................................................................\n\n    uint16_t read_u2le();\n    uint32_t read_u4le();\n    uint64_t read_u8le();\n\n    //@}\n\n    /** @name Floating point numbers */\n    //@{\n\n    // ........................................................................\n    // Big-endian\n    // ........................................................................\n\n    float read_f4be();\n    double read_f8be();\n\n    // ........................................................................\n    // Little-endian\n    // ........................................................................\n\n    float read_f4le();\n    double read_f8le();\n\n    //@}\n\n    /** @name Unaligned bit values */\n    //@{\n\n    void align_to_byte();\n    uint64_t read_bits_int_be(int n);\n    uint64_t read_bits_int(int n);\n    uint64_t read_bits_int_le(int n);\n\n    //@}\n\n    /** @name Byte arrays */\n    //@{\n\n    std::string read_bytes(std::streamsize len);\n    std::string read_bytes_full();\n    std::string read_bytes_term(char term, bool include, bool consume, bool eos_error);\n    std::string ensure_fixed_contents(std::string expected);\n\n    static std::string bytes_strip_right(std::string src, char pad_byte);\n    static std::string bytes_terminate(std::string src, char term, bool include);\n    static std::string bytes_to_str(std::string src, std::string src_enc);\n\n    //@}\n\n    /** @name Byte array processing */\n    //@{\n\n    /**\n     * Performs a XOR processing with given data, XORing every byte of input with a single\n     * given value.\n     * @param data data to process\n     * @param key value to XOR with\n     * @return processed data\n     */\n    static std::string process_xor_one(std::string data, uint8_t key);\n\n    /**\n     * Performs a XOR processing with given data, XORing every byte of input with a key\n     * array, repeating key array many times, if necessary (i.e. if data array is longer\n     * than key array).\n     * @param data data to process\n     * @param key array of bytes to XOR with\n     * @return processed data\n     */\n    static std::string process_xor_many(std::string data, std::string key);\n\n    /**\n     * Performs a circular left rotation shift for a given buffer by a given amount of bits,\n     * using groups of 1 bytes each time. Right circular rotation should be performed\n     * using this procedure with corrected amount.\n     * @param data source data to process\n     * @param amount number of bits to shift by\n     * @return copy of source array with requested shift applied\n     */\n    static std::string process_rotate_left(std::string data, int amount);\n\n#ifdef KS_ZLIB\n    /**\n     * Performs an unpacking (\"inflation\") of zlib-compressed data with usual zlib headers.\n     * @param data data to unpack\n     * @return unpacked data\n     * @throws IOException\n     */\n    static std::string process_zlib(std::string data);\n#endif\n\n    //@}\n\n    /**\n     * Performs modulo operation between two integers: dividend `a`\n     * and divisor `b`. Divisor `b` is expected to be positive. The\n     * result is always 0 <= x <= b - 1.\n     */\n    static int mod(int a, int b);\n\n    /**\n     * Converts given integer `val` to a decimal string representation.\n     * Should be used in place of std::to_string() (which is available only\n     * since C++11) in older C++ implementations.\n     */\n    static std::string to_string(int val);\n\n    /**\n     * Reverses given string `val`, so that the first character becomes the\n     * last and the last one becomes the first. This should be used to avoid\n     * the need of local variables at the caller.\n     */\n    static std::string reverse(std::string val);\n\n    /**\n     * Finds the minimal byte in a byte array, treating bytes as\n     * unsigned values.\n     * @param val byte array to scan\n     * @return minimal byte in byte array as integer\n     */\n    static uint8_t byte_array_min(const std::string val);\n\n    /**\n     * Finds the maximal byte in a byte array, treating bytes as\n     * unsigned values.\n     * @param val byte array to scan\n     * @return maximal byte in byte array as integer\n     */\n    static uint8_t byte_array_max(const std::string val);\n\nprivate:\n    std::istream* m_io;\n    std::istringstream m_io_str;\n    int m_bits_left;\n    uint64_t m_bits;\n\n    void init();\n    void exceptions_enable() const;\n\n    static uint64_t get_mask_ones(int n);\n\n    static const int ZLIB_BUF_SIZE = 128 * 1024;\n};\n"
  },
  "third_party.kaitai.kaitaistruct.kstruct": {
    "id": "third_party.kaitai.kaitaistruct.kstruct",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\kaitai\\kaitaistruct.h",
    "relative_path": "third_party\\kaitai\\kaitaistruct.h",
    "depends_on": [],
    "start_line": 8,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class kstruct {\npublic:\n    kstruct(kstream *_io) { m__io = _io; }\n    virtual ~kstruct() {}\nprotected:\n    kstream *m__io;\npublic:\n    kstream *_io() { return m__io; }\n};\n"
  },
  "third_party.libyuv.include.libyuv.cpu_id.TestCpuFlag": {
    "id": "third_party.libyuv.include.libyuv.cpu_id.TestCpuFlag",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\libyuv\\include\\libyuv\\cpu_id.h",
    "relative_path": "third_party\\libyuv\\include\\libyuv\\cpu_id.h",
    "depends_on": [],
    "start_line": 58,
    "end_line": 61,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static __inline int TestCpuFlag(int test_flag) {\n  LIBYUV_API extern int cpu_info_;\n  return (!cpu_info_ ? InitCpuFlags() : cpu_info_) & test_flag;\n}\n"
  },
  "third_party.linux.include.msm_media_info.VENUS_EXTRADATA_SIZE": {
    "id": "third_party.linux.include.msm_media_info.VENUS_EXTRADATA_SIZE",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\linux\\include\\msm_media_info.h",
    "relative_path": "third_party\\linux\\include\\msm_media_info.h",
    "depends_on": [],
    "start_line": 404,
    "end_line": 414,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline unsigned int VENUS_EXTRADATA_SIZE(int width, int height)\n{\n\t(void)height;\n\t(void)width;\n\n\t/*\n\t * In the future, calculate the size based on the w/h but just\n\t * hardcode it for now since 16K satisfies all current usecases.\n\t */\n\treturn 16 * 1024;\n}\n"
  },
  "third_party.linux.include.msm_media_info.VENUS_Y_STRIDE": {
    "id": "third_party.linux.include.msm_media_info.VENUS_Y_STRIDE",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\linux\\include\\msm_media_info.h",
    "relative_path": "third_party\\linux\\include\\msm_media_info.h",
    "depends_on": [],
    "start_line": 416,
    "end_line": 440,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline unsigned int VENUS_Y_STRIDE(int color_fmt, int width)\n{\n\tunsigned int alignment, stride = 0;\n\tif (!width)\n\t\tgoto invalid_input;\n\n\tswitch (color_fmt) {\n\tcase COLOR_FMT_NV21:\n\tcase COLOR_FMT_NV12:\n\tcase COLOR_FMT_NV12_MVTB:\n\tcase COLOR_FMT_NV12_UBWC:\n\t\talignment = 128;\n\t\tstride = MSM_MEDIA_ALIGN(width, alignment);\n\t\tbreak;\n\tcase COLOR_FMT_NV12_BPP10_UBWC:\n\t\talignment = 256;\n\t\tstride = MSM_MEDIA_ALIGN(width, 192);\n\t\tstride = MSM_MEDIA_ALIGN(stride * 4/3, alignment);\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\ninvalid_input:\n\treturn stride;\n}\n"
  },
  "third_party.linux.include.msm_media_info.VENUS_UV_STRIDE": {
    "id": "third_party.linux.include.msm_media_info.VENUS_UV_STRIDE",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\linux\\include\\msm_media_info.h",
    "relative_path": "third_party\\linux\\include\\msm_media_info.h",
    "depends_on": [],
    "start_line": 442,
    "end_line": 466,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline unsigned int VENUS_UV_STRIDE(int color_fmt, int width)\n{\n\tunsigned int alignment, stride = 0;\n\tif (!width)\n\t\tgoto invalid_input;\n\n\tswitch (color_fmt) {\n\tcase COLOR_FMT_NV21:\n\tcase COLOR_FMT_NV12:\n\tcase COLOR_FMT_NV12_MVTB:\n\tcase COLOR_FMT_NV12_UBWC:\n\t\talignment = 128;\n\t\tstride = MSM_MEDIA_ALIGN(width, alignment);\n\t\tbreak;\n\tcase COLOR_FMT_NV12_BPP10_UBWC:\n\t\talignment = 256;\n\t\tstride = MSM_MEDIA_ALIGN(width, 192);\n\t\tstride = MSM_MEDIA_ALIGN(stride * 4/3, alignment);\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\ninvalid_input:\n\treturn stride;\n}\n"
  },
  "third_party.linux.include.msm_media_info.VENUS_Y_SCANLINES": {
    "id": "third_party.linux.include.msm_media_info.VENUS_Y_SCANLINES",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\linux\\include\\msm_media_info.h",
    "relative_path": "third_party\\linux\\include\\msm_media_info.h",
    "depends_on": [],
    "start_line": 468,
    "end_line": 490,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline unsigned int VENUS_Y_SCANLINES(int color_fmt, int height)\n{\n\tunsigned int alignment, sclines = 0;\n\tif (!height)\n\t\tgoto invalid_input;\n\n\tswitch (color_fmt) {\n\tcase COLOR_FMT_NV21:\n\tcase COLOR_FMT_NV12:\n\tcase COLOR_FMT_NV12_MVTB:\n\tcase COLOR_FMT_NV12_UBWC:\n\t\talignment = 32;\n\t\tbreak;\n\tcase COLOR_FMT_NV12_BPP10_UBWC:\n\t\talignment = 16;\n\t\tbreak;\n\tdefault:\n\t\treturn 0;\n\t}\n\tsclines = MSM_MEDIA_ALIGN(height, alignment);\ninvalid_input:\n\treturn sclines;\n}\n"
  },
  "third_party.linux.include.msm_media_info.VENUS_UV_SCANLINES": {
    "id": "third_party.linux.include.msm_media_info.VENUS_UV_SCANLINES",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\linux\\include\\msm_media_info.h",
    "relative_path": "third_party\\linux\\include\\msm_media_info.h",
    "depends_on": [],
    "start_line": 492,
    "end_line": 516,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline unsigned int VENUS_UV_SCANLINES(int color_fmt, int height)\n{\n\tunsigned int alignment, sclines = 0;\n\tif (!height)\n\t\tgoto invalid_input;\n\n\tswitch (color_fmt) {\n\tcase COLOR_FMT_NV21:\n\tcase COLOR_FMT_NV12:\n\tcase COLOR_FMT_NV12_MVTB:\n\tcase COLOR_FMT_NV12_BPP10_UBWC:\n\t\talignment = 16;\n\t\tbreak;\n\tcase COLOR_FMT_NV12_UBWC:\n\t\talignment = 32;\n\t\tbreak;\n\tdefault:\n\t\tgoto invalid_input;\n\t}\n\n\tsclines = MSM_MEDIA_ALIGN(height / 2, alignment);\n\ninvalid_input:\n\treturn sclines;\n}\n"
  },
  "third_party.linux.include.msm_media_info.VENUS_Y_META_STRIDE": {
    "id": "third_party.linux.include.msm_media_info.VENUS_Y_META_STRIDE",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\linux\\include\\msm_media_info.h",
    "relative_path": "third_party\\linux\\include\\msm_media_info.h",
    "depends_on": [],
    "start_line": 518,
    "end_line": 541,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline unsigned int VENUS_Y_META_STRIDE(int color_fmt, int width)\n{\n\tint y_tile_width = 0, y_meta_stride = 0;\n\n\tif (!width)\n\t\tgoto invalid_input;\n\n\tswitch (color_fmt) {\n\tcase COLOR_FMT_NV12_UBWC:\n\t\ty_tile_width = 32;\n\t\tbreak;\n\tcase COLOR_FMT_NV12_BPP10_UBWC:\n\t\ty_tile_width = 48;\n\t\tbreak;\n\tdefault:\n\t\tgoto invalid_input;\n\t}\n\n\ty_meta_stride = MSM_MEDIA_ROUNDUP(width, y_tile_width);\n\ty_meta_stride = MSM_MEDIA_ALIGN(y_meta_stride, 64);\n\ninvalid_input:\n\treturn y_meta_stride;\n}\n"
  },
  "third_party.linux.include.msm_media_info.VENUS_Y_META_SCANLINES": {
    "id": "third_party.linux.include.msm_media_info.VENUS_Y_META_SCANLINES",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\linux\\include\\msm_media_info.h",
    "relative_path": "third_party\\linux\\include\\msm_media_info.h",
    "depends_on": [],
    "start_line": 543,
    "end_line": 566,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline unsigned int VENUS_Y_META_SCANLINES(int color_fmt, int height)\n{\n\tint y_tile_height = 0, y_meta_scanlines = 0;\n\n\tif (!height)\n\t\tgoto invalid_input;\n\n\tswitch (color_fmt) {\n\tcase COLOR_FMT_NV12_UBWC:\n\t\ty_tile_height = 8;\n\t\tbreak;\n\tcase COLOR_FMT_NV12_BPP10_UBWC:\n\t\ty_tile_height = 4;\n\t\tbreak;\n\tdefault:\n\t\tgoto invalid_input;\n\t}\n\n\ty_meta_scanlines = MSM_MEDIA_ROUNDUP(height, y_tile_height);\n\ty_meta_scanlines = MSM_MEDIA_ALIGN(y_meta_scanlines, 16);\n\ninvalid_input:\n\treturn y_meta_scanlines;\n}\n"
  },
  "third_party.linux.include.msm_media_info.VENUS_UV_META_STRIDE": {
    "id": "third_party.linux.include.msm_media_info.VENUS_UV_META_STRIDE",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\linux\\include\\msm_media_info.h",
    "relative_path": "third_party\\linux\\include\\msm_media_info.h",
    "depends_on": [],
    "start_line": 568,
    "end_line": 591,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline unsigned int VENUS_UV_META_STRIDE(int color_fmt, int width)\n{\n\tint uv_tile_width = 0, uv_meta_stride = 0;\n\n\tif (!width)\n\t\tgoto invalid_input;\n\n\tswitch (color_fmt) {\n\tcase COLOR_FMT_NV12_UBWC:\n\t\tuv_tile_width = 16;\n\t\tbreak;\n\tcase COLOR_FMT_NV12_BPP10_UBWC:\n\t\tuv_tile_width = 24;\n\t\tbreak;\n\tdefault:\n\t\tgoto invalid_input;\n\t}\n\n\tuv_meta_stride = MSM_MEDIA_ROUNDUP(width / 2, uv_tile_width);\n\tuv_meta_stride = MSM_MEDIA_ALIGN(uv_meta_stride, 64);\n\ninvalid_input:\n\treturn uv_meta_stride;\n}\n"
  },
  "third_party.linux.include.msm_media_info.VENUS_UV_META_SCANLINES": {
    "id": "third_party.linux.include.msm_media_info.VENUS_UV_META_SCANLINES",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\linux\\include\\msm_media_info.h",
    "relative_path": "third_party\\linux\\include\\msm_media_info.h",
    "depends_on": [],
    "start_line": 593,
    "end_line": 616,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline unsigned int VENUS_UV_META_SCANLINES(int color_fmt, int height)\n{\n\tint uv_tile_height = 0, uv_meta_scanlines = 0;\n\n\tif (!height)\n\t\tgoto invalid_input;\n\n\tswitch (color_fmt) {\n\tcase COLOR_FMT_NV12_UBWC:\n\t\tuv_tile_height = 8;\n\t\tbreak;\n\tcase COLOR_FMT_NV12_BPP10_UBWC:\n\t\tuv_tile_height = 4;\n\t\tbreak;\n\tdefault:\n\t\tgoto invalid_input;\n\t}\n\n\tuv_meta_scanlines = MSM_MEDIA_ROUNDUP(height / 2, uv_tile_height);\n\tuv_meta_scanlines = MSM_MEDIA_ALIGN(uv_meta_scanlines, 16);\n\ninvalid_input:\n\treturn uv_meta_scanlines;\n}\n"
  },
  "third_party.linux.include.msm_media_info.VENUS_RGB_STRIDE": {
    "id": "third_party.linux.include.msm_media_info.VENUS_RGB_STRIDE",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\linux\\include\\msm_media_info.h",
    "relative_path": "third_party\\linux\\include\\msm_media_info.h",
    "depends_on": [],
    "start_line": 618,
    "end_line": 639,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline unsigned int VENUS_RGB_STRIDE(int color_fmt, int width)\n{\n\tunsigned int alignment = 0, stride = 0;\n\tif (!width)\n\t\tgoto invalid_input;\n\n\tswitch (color_fmt) {\n\tcase COLOR_FMT_RGBA8888:\n\t\talignment = 128;\n\t\tbreak;\n\tcase COLOR_FMT_RGBA8888_UBWC:\n\t\talignment = 256;\n\t\tbreak;\n\tdefault:\n\t\tgoto invalid_input;\n\t}\n\n\tstride = MSM_MEDIA_ALIGN(width * 4, alignment);\n\ninvalid_input:\n\treturn stride;\n}\n"
  },
  "third_party.linux.include.msm_media_info.VENUS_RGB_SCANLINES": {
    "id": "third_party.linux.include.msm_media_info.VENUS_RGB_SCANLINES",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\linux\\include\\msm_media_info.h",
    "relative_path": "third_party\\linux\\include\\msm_media_info.h",
    "depends_on": [],
    "start_line": 641,
    "end_line": 663,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline unsigned int VENUS_RGB_SCANLINES(int color_fmt, int height)\n{\n\tunsigned int alignment = 0, scanlines = 0;\n\n\tif (!height)\n\t\tgoto invalid_input;\n\n\tswitch (color_fmt) {\n\tcase COLOR_FMT_RGBA8888:\n\t\talignment = 32;\n\t\tbreak;\n\tcase COLOR_FMT_RGBA8888_UBWC:\n\t\talignment = 16;\n\t\tbreak;\n\tdefault:\n\t\tgoto invalid_input;\n\t}\n\n\tscanlines = MSM_MEDIA_ALIGN(height, alignment);\n\ninvalid_input:\n\treturn scanlines;\n}\n"
  },
  "third_party.linux.include.msm_media_info.VENUS_RGB_META_STRIDE": {
    "id": "third_party.linux.include.msm_media_info.VENUS_RGB_META_STRIDE",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\linux\\include\\msm_media_info.h",
    "relative_path": "third_party\\linux\\include\\msm_media_info.h",
    "depends_on": [],
    "start_line": 665,
    "end_line": 685,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline unsigned int VENUS_RGB_META_STRIDE(int color_fmt, int width)\n{\n\tint rgb_tile_width = 0, rgb_meta_stride = 0;\n\n\tif (!width)\n\t\tgoto invalid_input;\n\n\tswitch (color_fmt) {\n\tcase COLOR_FMT_RGBA8888_UBWC:\n\t\trgb_tile_width = 16;\n\t\tbreak;\n\tdefault:\n\t\tgoto invalid_input;\n\t}\n\n\trgb_meta_stride = MSM_MEDIA_ROUNDUP(width, rgb_tile_width);\n\trgb_meta_stride = MSM_MEDIA_ALIGN(rgb_meta_stride, 64);\n\ninvalid_input:\n\treturn rgb_meta_stride;\n}\n"
  },
  "third_party.linux.include.msm_media_info.VENUS_RGB_META_SCANLINES": {
    "id": "third_party.linux.include.msm_media_info.VENUS_RGB_META_SCANLINES",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\linux\\include\\msm_media_info.h",
    "relative_path": "third_party\\linux\\include\\msm_media_info.h",
    "depends_on": [],
    "start_line": 687,
    "end_line": 707,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline unsigned int VENUS_RGB_META_SCANLINES(int color_fmt, int height)\n{\n\tint rgb_tile_height = 0, rgb_meta_scanlines = 0;\n\n\tif (!height)\n\t\tgoto invalid_input;\n\n\tswitch (color_fmt) {\n\tcase COLOR_FMT_RGBA8888_UBWC:\n\t\trgb_tile_height = 4;\n\t\tbreak;\n\tdefault:\n\t\tgoto invalid_input;\n\t}\n\n\trgb_meta_scanlines = MSM_MEDIA_ROUNDUP(height, rgb_tile_height);\n\trgb_meta_scanlines = MSM_MEDIA_ALIGN(rgb_meta_scanlines, 16);\n\ninvalid_input:\n\treturn rgb_meta_scanlines;\n}\n"
  },
  "third_party.linux.include.msm_media_info.VENUS_BUFFER_SIZE": {
    "id": "third_party.linux.include.msm_media_info.VENUS_BUFFER_SIZE",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\linux\\include\\msm_media_info.h",
    "relative_path": "third_party\\linux\\include\\msm_media_info.h",
    "depends_on": [],
    "start_line": 709,
    "end_line": 791,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline unsigned int VENUS_BUFFER_SIZE(\n\tint color_fmt, int width, int height)\n{\n\tconst unsigned int extra_size = VENUS_EXTRADATA_SIZE(width, height);\n\tunsigned int uv_alignment = 0, size = 0;\n\tunsigned int y_plane, uv_plane, y_stride,\n\t\tuv_stride, y_sclines, uv_sclines;\n\tunsigned int y_ubwc_plane = 0, uv_ubwc_plane = 0;\n\tunsigned int y_meta_stride = 0, y_meta_scanlines = 0;\n\tunsigned int uv_meta_stride = 0, uv_meta_scanlines = 0;\n\tunsigned int y_meta_plane = 0, uv_meta_plane = 0;\n\tunsigned int rgb_stride = 0, rgb_scanlines = 0;\n\tunsigned int rgb_plane = 0, rgb_ubwc_plane = 0, rgb_meta_plane = 0;\n\tunsigned int rgb_meta_stride = 0, rgb_meta_scanlines = 0;\n\n\tif (!width || !height)\n\t\tgoto invalid_input;\n\n\ty_stride = VENUS_Y_STRIDE(color_fmt, width);\n\tuv_stride = VENUS_UV_STRIDE(color_fmt, width);\n\ty_sclines = VENUS_Y_SCANLINES(color_fmt, height);\n\tuv_sclines = VENUS_UV_SCANLINES(color_fmt, height);\n\trgb_stride = VENUS_RGB_STRIDE(color_fmt, width);\n\trgb_scanlines = VENUS_RGB_SCANLINES(color_fmt, height);\n\n\tswitch (color_fmt) {\n\tcase COLOR_FMT_NV21:\n\tcase COLOR_FMT_NV12:\n\t\tuv_alignment = 4096;\n\t\ty_plane = y_stride * y_sclines;\n\t\tuv_plane = uv_stride * uv_sclines + uv_alignment;\n\t\tsize = y_plane + uv_plane +\n\t\t\t\tMSM_MEDIA_MAX(extra_size, 8 * y_stride);\n\t\tsize = MSM_MEDIA_ALIGN(size, 4096);\n\t\tbreak;\n\tcase COLOR_FMT_NV12_MVTB:\n\t\tuv_alignment = 4096;\n\t\ty_plane = y_stride * y_sclines;\n\t\tuv_plane = uv_stride * uv_sclines + uv_alignment;\n\t\tsize = y_plane + uv_plane;\n\t\tsize = 2 * size + extra_size;\n\t\tsize = MSM_MEDIA_ALIGN(size, 4096);\n\t\tbreak;\n\tcase COLOR_FMT_NV12_UBWC:\n\tcase COLOR_FMT_NV12_BPP10_UBWC:\n\t\ty_ubwc_plane = MSM_MEDIA_ALIGN(y_stride * y_sclines, 4096);\n\t\tuv_ubwc_plane = MSM_MEDIA_ALIGN(uv_stride * uv_sclines, 4096);\n\t\ty_meta_stride = VENUS_Y_META_STRIDE(color_fmt, width);\n\t\ty_meta_scanlines = VENUS_Y_META_SCANLINES(color_fmt, height);\n\t\ty_meta_plane = MSM_MEDIA_ALIGN(\n\t\t\t\ty_meta_stride * y_meta_scanlines, 4096);\n\t\tuv_meta_stride = VENUS_UV_META_STRIDE(color_fmt, width);\n\t\tuv_meta_scanlines = VENUS_UV_META_SCANLINES(color_fmt, height);\n\t\tuv_meta_plane = MSM_MEDIA_ALIGN(uv_meta_stride *\n\t\t\t\t\tuv_meta_scanlines, 4096);\n\n\t\tsize = y_ubwc_plane + uv_ubwc_plane + y_meta_plane +\n\t\t\tuv_meta_plane +\n\t\t\tMSM_MEDIA_MAX(extra_size + 8192, 48 * y_stride);\n\t\tsize = MSM_MEDIA_ALIGN(size, 4096);\n\t\tbreak;\n\tcase COLOR_FMT_RGBA8888:\n\t\trgb_plane = MSM_MEDIA_ALIGN(rgb_stride  * rgb_scanlines, 4096);\n\t\tsize = rgb_plane;\n\t\tsize =  MSM_MEDIA_ALIGN(size, 4096);\n\t\tbreak;\n\tcase COLOR_FMT_RGBA8888_UBWC:\n\t\trgb_ubwc_plane = MSM_MEDIA_ALIGN(rgb_stride * rgb_scanlines,\n\t\t\t\t\t\t\t4096);\n\t\trgb_meta_stride = VENUS_RGB_META_STRIDE(color_fmt, width);\n\t\trgb_meta_scanlines = VENUS_RGB_META_SCANLINES(color_fmt,\n\t\t\t\t\theight);\n\t\trgb_meta_plane = MSM_MEDIA_ALIGN(rgb_meta_stride *\n\t\t\t\t\trgb_meta_scanlines, 4096);\n\t\tsize = rgb_ubwc_plane + rgb_meta_plane;\n\t\tsize = MSM_MEDIA_ALIGN(size, 4096);\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\ninvalid_input:\n\treturn size;\n}\n"
  },
  "third_party.linux.include.msm_media_info.VENUS_VIEW2_OFFSET": {
    "id": "third_party.linux.include.msm_media_info.VENUS_VIEW2_OFFSET",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\linux\\include\\msm_media_info.h",
    "relative_path": "third_party\\linux\\include\\msm_media_info.h",
    "depends_on": [],
    "start_line": 793,
    "end_line": 817,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static inline unsigned int VENUS_VIEW2_OFFSET(\n\tint color_fmt, int width, int height)\n{\n\tunsigned int offset = 0;\n\tunsigned int y_plane, uv_plane, y_stride,\n\t\tuv_stride, y_sclines, uv_sclines;\n\tif (!width || !height)\n\t\tgoto invalid_input;\n\n\ty_stride = VENUS_Y_STRIDE(color_fmt, width);\n\tuv_stride = VENUS_UV_STRIDE(color_fmt, width);\n\ty_sclines = VENUS_Y_SCANLINES(color_fmt, height);\n\tuv_sclines = VENUS_UV_SCANLINES(color_fmt, height);\n\tswitch (color_fmt) {\n\tcase COLOR_FMT_NV12_MVTB:\n\t\ty_plane = y_stride * y_sclines;\n\t\tuv_plane = uv_stride * uv_sclines;\n\t\toffset = y_plane + uv_plane;\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\ninvalid_input:\n\treturn offset;\n}\n"
  },
  "third_party.qrcode.QrCode.Mode.getModeBits": {
    "id": "third_party.qrcode.QrCode.Mode.getModeBits",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 50,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int QrSegment::Mode::getModeBits() const {\n\treturn modeBits;\n}\n"
  },
  "third_party.qrcode.QrCode.Mode.numCharCountBits": {
    "id": "third_party.qrcode.QrCode.Mode.numCharCountBits",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 55,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int QrSegment::Mode::numCharCountBits(int ver) const {\n\treturn numBitsCharCount[(ver + 7) / 17];\n}\n"
  },
  "third_party.qrcode.QrCode.QrSegment.makeBytes": {
    "id": "third_party.qrcode.QrCode.QrSegment.makeBytes",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 67,
    "end_line": 74,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QrSegment QrSegment::makeBytes(const vector<uint8_t> &data) {\n\tif (data.size() > static_cast<unsigned int>(INT_MAX))\n\t\tthrow std::length_error(\"Data too long\");\n\tBitBuffer bb;\n\tfor (uint8_t b : data)\n\t\tbb.appendBits(b, 8);\n\treturn QrSegment(Mode::BYTE, static_cast<int>(data.size()), std::move(bb));\n}\n"
  },
  "third_party.qrcode.QrCode.QrSegment.makeNumeric": {
    "id": "third_party.qrcode.QrCode.QrSegment.makeNumeric",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 77,
    "end_line": 97,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QrSegment QrSegment::makeNumeric(const char *digits) {\n\tBitBuffer bb;\n\tint accumData = 0;\n\tint accumCount = 0;\n\tint charCount = 0;\n\tfor (; *digits != '\\0'; digits++, charCount++) {\n\t\tchar c = *digits;\n\t\tif (c < '0' || c > '9')\n\t\t\tthrow std::domain_error(\"String contains non-numeric characters\");\n\t\taccumData = accumData * 10 + (c - '0');\n\t\taccumCount++;\n\t\tif (accumCount == 3) {\n\t\t\tbb.appendBits(static_cast<uint32_t>(accumData), 10);\n\t\t\taccumData = 0;\n\t\t\taccumCount = 0;\n\t\t}\n\t}\n\tif (accumCount > 0)  // 1 or 2 digits remaining\n\t\tbb.appendBits(static_cast<uint32_t>(accumData), accumCount * 3 + 1);\n\treturn QrSegment(Mode::NUMERIC, charCount, std::move(bb));\n}\n"
  },
  "third_party.qrcode.QrCode.QrSegment.makeAlphanumeric": {
    "id": "third_party.qrcode.QrCode.QrSegment.makeAlphanumeric",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 100,
    "end_line": 120,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QrSegment QrSegment::makeAlphanumeric(const char *text) {\n\tBitBuffer bb;\n\tint accumData = 0;\n\tint accumCount = 0;\n\tint charCount = 0;\n\tfor (; *text != '\\0'; text++, charCount++) {\n\t\tconst char *temp = std::strchr(ALPHANUMERIC_CHARSET, *text);\n\t\tif (temp == nullptr)\n\t\t\tthrow std::domain_error(\"String contains unencodable characters in alphanumeric mode\");\n\t\taccumData = accumData * 45 + static_cast<int>(temp - ALPHANUMERIC_CHARSET);\n\t\taccumCount++;\n\t\tif (accumCount == 2) {\n\t\t\tbb.appendBits(static_cast<uint32_t>(accumData), 11);\n\t\t\taccumData = 0;\n\t\t\taccumCount = 0;\n\t\t}\n\t}\n\tif (accumCount > 0)  // 1 character remaining\n\t\tbb.appendBits(static_cast<uint32_t>(accumData), 6);\n\treturn QrSegment(Mode::ALPHANUMERIC, charCount, std::move(bb));\n}\n"
  },
  "third_party.qrcode.QrCode.QrSegment.makeSegments": {
    "id": "third_party.qrcode.QrCode.QrSegment.makeSegments",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 123,
    "end_line": 138,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "vector<QrSegment> QrSegment::makeSegments(const char *text) {\n\t// Select the most efficient segment encoding automatically\n\tvector<QrSegment> result;\n\tif (*text == '\\0');  // Leave result empty\n\telse if (isNumeric(text))\n\t\tresult.push_back(makeNumeric(text));\n\telse if (isAlphanumeric(text))\n\t\tresult.push_back(makeAlphanumeric(text));\n\telse {\n\t\tvector<uint8_t> bytes;\n\t\tfor (; *text != '\\0'; text++)\n\t\t\tbytes.push_back(static_cast<uint8_t>(*text));\n\t\tresult.push_back(makeBytes(bytes));\n\t}\n\treturn result;\n}\n"
  },
  "third_party.qrcode.QrCode.QrSegment.makeEci": {
    "id": "third_party.qrcode.QrCode.QrSegment.makeEci",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 141,
    "end_line": 156,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QrSegment QrSegment::makeEci(long assignVal) {\n\tBitBuffer bb;\n\tif (assignVal < 0)\n\t\tthrow std::domain_error(\"ECI assignment value out of range\");\n\telse if (assignVal < (1 << 7))\n\t\tbb.appendBits(static_cast<uint32_t>(assignVal), 8);\n\telse if (assignVal < (1 << 14)) {\n\t\tbb.appendBits(2, 2);\n\t\tbb.appendBits(static_cast<uint32_t>(assignVal), 14);\n\t} else if (assignVal < 1000000L) {\n\t\tbb.appendBits(6, 3);\n\t\tbb.appendBits(static_cast<uint32_t>(assignVal), 21);\n\t} else\n\t\tthrow std::domain_error(\"ECI assignment value out of range\");\n\treturn QrSegment(Mode::ECI, 0, std::move(bb));\n}\n"
  },
  "third_party.qrcode.QrCode.QrSegment.getTotalBits": {
    "id": "third_party.qrcode.QrCode.QrSegment.getTotalBits",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 177,
    "end_line": 191,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int QrSegment::getTotalBits(const vector<QrSegment> &segs, int version) {\n\tint result = 0;\n\tfor (const QrSegment &seg : segs) {\n\t\tint ccbits = seg.mode.numCharCountBits(version);\n\t\tif (seg.numChars >= (1L << ccbits))\n\t\t\treturn -1;  // The segment's length doesn't fit the field's bit width\n\t\tif (4 + ccbits > INT_MAX - result)\n\t\t\treturn -1;  // The sum will overflow an int type\n\t\tresult += 4 + ccbits;\n\t\tif (seg.data.size() > static_cast<unsigned int>(INT_MAX - result))\n\t\t\treturn -1;  // The sum will overflow an int type\n\t\tresult += static_cast<int>(seg.data.size());\n\t}\n\treturn result;\n}\n"
  },
  "third_party.qrcode.QrCode.QrSegment.isAlphanumeric": {
    "id": "third_party.qrcode.QrCode.QrSegment.isAlphanumeric",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 194,
    "end_line": 200,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "bool QrSegment::isAlphanumeric(const char *text) {\n\tfor (; *text != '\\0'; text++) {\n\t\tif (std::strchr(ALPHANUMERIC_CHARSET, *text) == nullptr)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n"
  },
  "third_party.qrcode.QrCode.QrSegment.isNumeric": {
    "id": "third_party.qrcode.QrCode.QrSegment.isNumeric",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 203,
    "end_line": 210,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "bool QrSegment::isNumeric(const char *text) {\n\tfor (; *text != '\\0'; text++) {\n\t\tchar c = *text;\n\t\tif (c < '0' || c > '9')\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n"
  },
  "third_party.qrcode.QrCode.QrSegment.getMode": {
    "id": "third_party.qrcode.QrCode.QrSegment.getMode",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 213,
    "end_line": 215,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QrSegment::Mode QrSegment::getMode() const {\n\treturn mode;\n}\n"
  },
  "third_party.qrcode.QrCode.QrSegment.getNumChars": {
    "id": "third_party.qrcode.QrCode.QrSegment.getNumChars",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 218,
    "end_line": 220,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int QrSegment::getNumChars() const {\n\treturn numChars;\n}\n"
  },
  "third_party.qrcode.QrCode.QrSegment.getData": {
    "id": "third_party.qrcode.QrCode.QrSegment.getData",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 223,
    "end_line": 225,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "const std::vector<bool> &QrSegment::getData() const {\n\treturn data;\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.getFormatBits": {
    "id": "third_party.qrcode.QrCode.QrCode.getFormatBits",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 232,
    "end_line": 240,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int QrCode::getFormatBits(Ecc ecl) {\n\tswitch (ecl) {\n\t\tcase Ecc::LOW     :  return 1;\n\t\tcase Ecc::MEDIUM  :  return 0;\n\t\tcase Ecc::QUARTILE:  return 3;\n\t\tcase Ecc::HIGH    :  return 2;\n\t\tdefault:  throw std::logic_error(\"Assertion error\");\n\t}\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.encodeText": {
    "id": "third_party.qrcode.QrCode.QrCode.encodeText",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 243,
    "end_line": 246,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QrCode QrCode::encodeText(const char *text, Ecc ecl) {\n\tvector<QrSegment> segs = QrSegment::makeSegments(text);\n\treturn encodeSegments(segs, ecl);\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.encodeBinary": {
    "id": "third_party.qrcode.QrCode.QrCode.encodeBinary",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 249,
    "end_line": 252,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QrCode QrCode::encodeBinary(const vector<uint8_t> &data, Ecc ecl) {\n\tvector<QrSegment> segs{QrSegment::makeBytes(data)};\n\treturn encodeSegments(segs, ecl);\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.encodeSegments": {
    "id": "third_party.qrcode.QrCode.QrCode.encodeSegments",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 255,
    "end_line": 317,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QrCode QrCode::encodeSegments(const vector<QrSegment> &segs, Ecc ecl,\n\t\tint minVersion, int maxVersion, int mask, bool boostEcl) {\n\tif (!(MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= MAX_VERSION) || mask < -1 || mask > 7)\n\t\tthrow std::invalid_argument(\"Invalid value\");\n\t\n\t// Find the minimal version number to use\n\tint version, dataUsedBits;\n\tfor (version = minVersion; ; version++) {\n\t\tint dataCapacityBits = getNumDataCodewords(version, ecl) * 8;  // Number of data bits available\n\t\tdataUsedBits = QrSegment::getTotalBits(segs, version);\n\t\tif (dataUsedBits != -1 && dataUsedBits <= dataCapacityBits)\n\t\t\tbreak;  // This version number is found to be suitable\n\t\tif (version >= maxVersion) {  // All versions in the range could not fit the given data\n\t\t\tstd::ostringstream sb;\n\t\t\tif (dataUsedBits == -1)\n\t\t\t\tsb << \"Segment too long\";\n\t\t\telse {\n\t\t\t\tsb << \"Data length = \" << dataUsedBits << \" bits, \";\n\t\t\t\tsb << \"Max capacity = \" << dataCapacityBits << \" bits\";\n\t\t\t}\n\t\t\tthrow data_too_long(sb.str());\n\t\t}\n\t}\n\tif (dataUsedBits == -1)\n\t\tthrow std::logic_error(\"Assertion error\");\n\t\n\t// Increase the error correction level while the data still fits in the current version number\n\tfor (Ecc newEcl : vector<Ecc>{Ecc::MEDIUM, Ecc::QUARTILE, Ecc::HIGH}) {  // From low to high\n\t\tif (boostEcl && dataUsedBits <= getNumDataCodewords(version, newEcl) * 8)\n\t\t\tecl = newEcl;\n\t}\n\t\n\t// Concatenate all segments to create the data bit string\n\tBitBuffer bb;\n\tfor (const QrSegment &seg : segs) {\n\t\tbb.appendBits(static_cast<uint32_t>(seg.getMode().getModeBits()), 4);\n\t\tbb.appendBits(static_cast<uint32_t>(seg.getNumChars()), seg.getMode().numCharCountBits(version));\n\t\tbb.insert(bb.end(), seg.getData().begin(), seg.getData().end());\n\t}\n\tif (bb.size() != static_cast<unsigned int>(dataUsedBits))\n\t\tthrow std::logic_error(\"Assertion error\");\n\t\n\t// Add terminator and pad up to a byte if applicable\n\tsize_t dataCapacityBits = static_cast<size_t>(getNumDataCodewords(version, ecl)) * 8;\n\tif (bb.size() > dataCapacityBits)\n\t\tthrow std::logic_error(\"Assertion error\");\n\tbb.appendBits(0, std::min(4, static_cast<int>(dataCapacityBits - bb.size())));\n\tbb.appendBits(0, (8 - static_cast<int>(bb.size() % 8)) % 8);\n\tif (bb.size() % 8 != 0)\n\t\tthrow std::logic_error(\"Assertion error\");\n\t\n\t// Pad with alternating bytes until data capacity is reached\n\tfor (uint8_t padByte = 0xEC; bb.size() < dataCapacityBits; padByte ^= 0xEC ^ 0x11)\n\t\tbb.appendBits(padByte, 8);\n\t\n\t// Pack bits into bytes in big endian\n\tvector<uint8_t> dataCodewords(bb.size() / 8);\n\tfor (size_t i = 0; i < bb.size(); i++)\n\t\tdataCodewords[i >> 3] |= (bb.at(i) ? 1 : 0) << (7 - (i & 7));\n\t\n\t// Create the QR Code object\n\treturn QrCode(version, ecl, dataCodewords, mask);\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.getVersion": {
    "id": "third_party.qrcode.QrCode.QrCode.getVersion",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 363,
    "end_line": 365,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int QrCode::getVersion() const {\n\treturn version;\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.getSize": {
    "id": "third_party.qrcode.QrCode.QrCode.getSize",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 368,
    "end_line": 370,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int QrCode::getSize() const {\n\treturn size;\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.getErrorCorrectionLevel": {
    "id": "third_party.qrcode.QrCode.QrCode.getErrorCorrectionLevel",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 373,
    "end_line": 375,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QrCode::Ecc QrCode::getErrorCorrectionLevel() const {\n\treturn errorCorrectionLevel;\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.getMask": {
    "id": "third_party.qrcode.QrCode.QrCode.getMask",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 378,
    "end_line": 380,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int QrCode::getMask() const {\n\treturn mask;\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.getModule": {
    "id": "third_party.qrcode.QrCode.QrCode.getModule",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 383,
    "end_line": 385,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "bool QrCode::getModule(int x, int y) const {\n\treturn 0 <= x && x < size && 0 <= y && y < size && module(x, y);\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.toSvgString": {
    "id": "third_party.qrcode.QrCode.QrCode.toSvgString",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 388,
    "end_line": 413,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string QrCode::toSvgString(int border) const {\n\tif (border < 0)\n\t\tthrow std::domain_error(\"Border must be non-negative\");\n\tif (border > INT_MAX / 2 || border * 2 > INT_MAX - size)\n\t\tthrow std::overflow_error(\"Border too large\");\n\t\n\tstd::ostringstream sb;\n\tsb << \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\";\n\tsb << \"<!DOCTYPE svg PUBLIC \\\"-//W3C//DTD SVG 1.1//EN\\\" \\\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\\\">\\n\";\n\tsb << \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 \";\n\tsb << (size + border * 2) << \" \" << (size + border * 2) << \"\\\" stroke=\\\"none\\\">\\n\";\n\tsb << \"\\t<rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#FFFFFF\\\"/>\\n\";\n\tsb << \"\\t<path d=\\\"\";\n\tfor (int y = 0; y < size; y++) {\n\t\tfor (int x = 0; x < size; x++) {\n\t\t\tif (getModule(x, y)) {\n\t\t\t\tif (x != 0 || y != 0)\n\t\t\t\t\tsb << \" \";\n\t\t\t\tsb << \"M\" << (x + border) << \",\" << (y + border) << \"h1v1h-1z\";\n\t\t\t}\n\t\t}\n\t}\n\tsb << \"\\\" fill=\\\"#000000\\\"/>\\n\";\n\tsb << \"</svg>\\n\";\n\treturn sb.str();\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.drawFunctionPatterns": {
    "id": "third_party.qrcode.QrCode.QrCode.drawFunctionPatterns",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 416,
    "end_line": 442,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void QrCode::drawFunctionPatterns() {\n\t// Draw horizontal and vertical timing patterns\n\tfor (int i = 0; i < size; i++) {\n\t\tsetFunctionModule(6, i, i % 2 == 0);\n\t\tsetFunctionModule(i, 6, i % 2 == 0);\n\t}\n\t\n\t// Draw 3 finder patterns (all corners except bottom right; overwrites some timing modules)\n\tdrawFinderPattern(3, 3);\n\tdrawFinderPattern(size - 4, 3);\n\tdrawFinderPattern(3, size - 4);\n\t\n\t// Draw numerous alignment patterns\n\tconst vector<int> alignPatPos = getAlignmentPatternPositions();\n\tsize_t numAlign = alignPatPos.size();\n\tfor (size_t i = 0; i < numAlign; i++) {\n\t\tfor (size_t j = 0; j < numAlign; j++) {\n\t\t\t// Don't draw on the three finder corners\n\t\t\tif (!((i == 0 && j == 0) || (i == 0 && j == numAlign - 1) || (i == numAlign - 1 && j == 0)))\n\t\t\t\tdrawAlignmentPattern(alignPatPos.at(i), alignPatPos.at(j));\n\t\t}\n\t}\n\t\n\t// Draw configuration data\n\tdrawFormatBits(0);  // Dummy mask value; overwritten later in the constructor\n\tdrawVersion();\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.drawFormatBits": {
    "id": "third_party.qrcode.QrCode.QrCode.drawFormatBits",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 445,
    "end_line": 470,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void QrCode::drawFormatBits(int msk) {\n\t// Calculate error correction code and pack bits\n\tint data = getFormatBits(errorCorrectionLevel) << 3 | msk;  // errCorrLvl is uint2, msk is uint3\n\tint rem = data;\n\tfor (int i = 0; i < 10; i++)\n\t\trem = (rem << 1) ^ ((rem >> 9) * 0x537);\n\tint bits = (data << 10 | rem) ^ 0x5412;  // uint15\n\tif (bits >> 15 != 0)\n\t\tthrow std::logic_error(\"Assertion error\");\n\t\n\t// Draw first copy\n\tfor (int i = 0; i <= 5; i++)\n\t\tsetFunctionModule(8, i, getBit(bits, i));\n\tsetFunctionModule(8, 7, getBit(bits, 6));\n\tsetFunctionModule(8, 8, getBit(bits, 7));\n\tsetFunctionModule(7, 8, getBit(bits, 8));\n\tfor (int i = 9; i < 15; i++)\n\t\tsetFunctionModule(14 - i, 8, getBit(bits, i));\n\t\n\t// Draw second copy\n\tfor (int i = 0; i < 8; i++)\n\t\tsetFunctionModule(size - 1 - i, 8, getBit(bits, i));\n\tfor (int i = 8; i < 15; i++)\n\t\tsetFunctionModule(8, size - 15 + i, getBit(bits, i));\n\tsetFunctionModule(8, size - 8, true);  // Always black\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.drawVersion": {
    "id": "third_party.qrcode.QrCode.QrCode.drawVersion",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 473,
    "end_line": 493,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void QrCode::drawVersion() {\n\tif (version < 7)\n\t\treturn;\n\t\n\t// Calculate error correction code and pack bits\n\tint rem = version;  // version is uint6, in the range [7, 40]\n\tfor (int i = 0; i < 12; i++)\n\t\trem = (rem << 1) ^ ((rem >> 11) * 0x1F25);\n\tlong bits = static_cast<long>(version) << 12 | rem;  // uint18\n\tif (bits >> 18 != 0)\n\t\tthrow std::logic_error(\"Assertion error\");\n\t\n\t// Draw two copies\n\tfor (int i = 0; i < 18; i++) {\n\t\tbool bit = getBit(bits, i);\n\t\tint a = size - 11 + i % 3;\n\t\tint b = i / 3;\n\t\tsetFunctionModule(a, b, bit);\n\t\tsetFunctionModule(b, a, bit);\n\t}\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.drawFinderPattern": {
    "id": "third_party.qrcode.QrCode.QrCode.drawFinderPattern",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 496,
    "end_line": 505,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void QrCode::drawFinderPattern(int x, int y) {\n\tfor (int dy = -4; dy <= 4; dy++) {\n\t\tfor (int dx = -4; dx <= 4; dx++) {\n\t\t\tint dist = std::max(std::abs(dx), std::abs(dy));  // Chebyshev/infinity norm\n\t\t\tint xx = x + dx, yy = y + dy;\n\t\t\tif (0 <= xx && xx < size && 0 <= yy && yy < size)\n\t\t\t\tsetFunctionModule(xx, yy, dist != 2 && dist != 4);\n\t\t}\n\t}\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.drawAlignmentPattern": {
    "id": "third_party.qrcode.QrCode.QrCode.drawAlignmentPattern",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 508,
    "end_line": 513,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void QrCode::drawAlignmentPattern(int x, int y) {\n\tfor (int dy = -2; dy <= 2; dy++) {\n\t\tfor (int dx = -2; dx <= 2; dx++)\n\t\t\tsetFunctionModule(x + dx, y + dy, std::max(std::abs(dx), std::abs(dy)) != 1);\n\t}\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.setFunctionModule": {
    "id": "third_party.qrcode.QrCode.QrCode.setFunctionModule",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 516,
    "end_line": 521,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void QrCode::setFunctionModule(int x, int y, bool isBlack) {\n\tsize_t ux = static_cast<size_t>(x);\n\tsize_t uy = static_cast<size_t>(y);\n\tmodules   .at(uy).at(ux) = isBlack;\n\tisFunction.at(uy).at(ux) = true;\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.module": {
    "id": "third_party.qrcode.QrCode.QrCode.module",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 524,
    "end_line": 526,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "bool QrCode::module(int x, int y) const {\n\treturn modules.at(static_cast<size_t>(y)).at(static_cast<size_t>(x));\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.addEccAndInterleave": {
    "id": "third_party.qrcode.QrCode.QrCode.addEccAndInterleave",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 529,
    "end_line": 565,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "vector<uint8_t> QrCode::addEccAndInterleave(const vector<uint8_t> &data) const {\n\tif (data.size() != static_cast<unsigned int>(getNumDataCodewords(version, errorCorrectionLevel)))\n\t\tthrow std::invalid_argument(\"Invalid argument\");\n\t\n\t// Calculate parameter numbers\n\tint numBlocks = NUM_ERROR_CORRECTION_BLOCKS[static_cast<int>(errorCorrectionLevel)][version];\n\tint blockEccLen = ECC_CODEWORDS_PER_BLOCK  [static_cast<int>(errorCorrectionLevel)][version];\n\tint rawCodewords = getNumRawDataModules(version) / 8;\n\tint numShortBlocks = numBlocks - rawCodewords % numBlocks;\n\tint shortBlockLen = rawCodewords / numBlocks;\n\t\n\t// Split data into blocks and append ECC to each block\n\tvector<vector<uint8_t> > blocks;\n\tconst vector<uint8_t> rsDiv = reedSolomonComputeDivisor(blockEccLen);\n\tfor (int i = 0, k = 0; i < numBlocks; i++) {\n\t\tvector<uint8_t> dat(data.cbegin() + k, data.cbegin() + (k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1)));\n\t\tk += static_cast<int>(dat.size());\n\t\tconst vector<uint8_t> ecc = reedSolomonComputeRemainder(dat, rsDiv);\n\t\tif (i < numShortBlocks)\n\t\t\tdat.push_back(0);\n\t\tdat.insert(dat.end(), ecc.cbegin(), ecc.cend());\n\t\tblocks.push_back(std::move(dat));\n\t}\n\t\n\t// Interleave (not concatenate) the bytes from every block into a single sequence\n\tvector<uint8_t> result;\n\tfor (size_t i = 0; i < blocks.at(0).size(); i++) {\n\t\tfor (size_t j = 0; j < blocks.size(); j++) {\n\t\t\t// Skip the padding byte in short blocks\n\t\t\tif (i != static_cast<unsigned int>(shortBlockLen - blockEccLen) || j >= static_cast<unsigned int>(numShortBlocks))\n\t\t\t\tresult.push_back(blocks.at(j).at(i));\n\t\t}\n\t}\n\tif (result.size() != static_cast<unsigned int>(rawCodewords))\n\t\tthrow std::logic_error(\"Assertion error\");\n\treturn result;\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.drawCodewords": {
    "id": "third_party.qrcode.QrCode.QrCode.drawCodewords",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 568,
    "end_line": 593,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void QrCode::drawCodewords(const vector<uint8_t> &data) {\n\tif (data.size() != static_cast<unsigned int>(getNumRawDataModules(version) / 8))\n\t\tthrow std::invalid_argument(\"Invalid argument\");\n\t\n\tsize_t i = 0;  // Bit index into the data\n\t// Do the funny zigzag scan\n\tfor (int right = size - 1; right >= 1; right -= 2) {  // Index of right column in each column pair\n\t\tif (right == 6)\n\t\t\tright = 5;\n\t\tfor (int vert = 0; vert < size; vert++) {  // Vertical counter\n\t\t\tfor (int j = 0; j < 2; j++) {\n\t\t\t\tsize_t x = static_cast<size_t>(right - j);  // Actual x coordinate\n\t\t\t\tbool upward = ((right + 1) & 2) == 0;\n\t\t\t\tsize_t y = static_cast<size_t>(upward ? size - 1 - vert : vert);  // Actual y coordinate\n\t\t\t\tif (!isFunction.at(y).at(x) && i < data.size() * 8) {\n\t\t\t\t\tmodules.at(y).at(x) = getBit(data.at(i >> 3), 7 - static_cast<int>(i & 7));\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t// If this QR Code has any remainder bits (0 to 7), they were assigned as\n\t\t\t\t// 0/false/white by the constructor and are left unchanged by this method\n\t\t\t}\n\t\t}\n\t}\n\tif (i != data.size() * 8)\n\t\tthrow std::logic_error(\"Assertion error\");\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.applyMask": {
    "id": "third_party.qrcode.QrCode.QrCode.applyMask",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 596,
    "end_line": 617,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void QrCode::applyMask(int msk) {\n\tif (msk < 0 || msk > 7)\n\t\tthrow std::domain_error(\"Mask value out of range\");\n\tsize_t sz = static_cast<size_t>(size);\n\tfor (size_t y = 0; y < sz; y++) {\n\t\tfor (size_t x = 0; x < sz; x++) {\n\t\t\tbool invert;\n\t\t\tswitch (msk) {\n\t\t\t\tcase 0:  invert = (x + y) % 2 == 0;                    break;\n\t\t\t\tcase 1:  invert = y % 2 == 0;                          break;\n\t\t\t\tcase 2:  invert = x % 3 == 0;                          break;\n\t\t\t\tcase 3:  invert = (x + y) % 3 == 0;                    break;\n\t\t\t\tcase 4:  invert = (x / 3 + y / 2) % 2 == 0;            break;\n\t\t\t\tcase 5:  invert = x * y % 2 + x * y % 3 == 0;          break;\n\t\t\t\tcase 6:  invert = (x * y % 2 + x * y % 3) % 2 == 0;    break;\n\t\t\t\tcase 7:  invert = ((x + y) % 2 + x * y % 3) % 2 == 0;  break;\n\t\t\t\tdefault:  throw std::logic_error(\"Assertion error\");\n\t\t\t}\n\t\t\tmodules.at(y).at(x) = modules.at(y).at(x) ^ (invert & !isFunction.at(y).at(x));\n\t\t}\n\t}\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.getPenaltyScore": {
    "id": "third_party.qrcode.QrCode.QrCode.getPenaltyScore",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 620,
    "end_line": 692,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "long QrCode::getPenaltyScore() const {\n\tlong result = 0;\n\t\n\t// Adjacent modules in row having same color, and finder-like patterns\n\tfor (int y = 0; y < size; y++) {\n\t\tbool runColor = false;\n\t\tint runX = 0;\n\t\tstd::array<int,7> runHistory = {};\n\t\tfor (int x = 0; x < size; x++) {\n\t\t\tif (module(x, y) == runColor) {\n\t\t\t\trunX++;\n\t\t\t\tif (runX == 5)\n\t\t\t\t\tresult += PENALTY_N1;\n\t\t\t\telse if (runX > 5)\n\t\t\t\t\tresult++;\n\t\t\t} else {\n\t\t\t\tfinderPenaltyAddHistory(runX, runHistory);\n\t\t\t\tif (!runColor)\n\t\t\t\t\tresult += finderPenaltyCountPatterns(runHistory) * PENALTY_N3;\n\t\t\t\trunColor = module(x, y);\n\t\t\t\trunX = 1;\n\t\t\t}\n\t\t}\n\t\tresult += finderPenaltyTerminateAndCount(runColor, runX, runHistory) * PENALTY_N3;\n\t}\n\t// Adjacent modules in column having same color, and finder-like patterns\n\tfor (int x = 0; x < size; x++) {\n\t\tbool runColor = false;\n\t\tint runY = 0;\n\t\tstd::array<int,7> runHistory = {};\n\t\tfor (int y = 0; y < size; y++) {\n\t\t\tif (module(x, y) == runColor) {\n\t\t\t\trunY++;\n\t\t\t\tif (runY == 5)\n\t\t\t\t\tresult += PENALTY_N1;\n\t\t\t\telse if (runY > 5)\n\t\t\t\t\tresult++;\n\t\t\t} else {\n\t\t\t\tfinderPenaltyAddHistory(runY, runHistory);\n\t\t\t\tif (!runColor)\n\t\t\t\t\tresult += finderPenaltyCountPatterns(runHistory) * PENALTY_N3;\n\t\t\t\trunColor = module(x, y);\n\t\t\t\trunY = 1;\n\t\t\t}\n\t\t}\n\t\tresult += finderPenaltyTerminateAndCount(runColor, runY, runHistory) * PENALTY_N3;\n\t}\n\t\n\t// 2*2 blocks of modules having same color\n\tfor (int y = 0; y < size - 1; y++) {\n\t\tfor (int x = 0; x < size - 1; x++) {\n\t\t\tbool  color = module(x, y);\n\t\t\tif (  color == module(x + 1, y) &&\n\t\t\t      color == module(x, y + 1) &&\n\t\t\t      color == module(x + 1, y + 1))\n\t\t\t\tresult += PENALTY_N2;\n\t\t}\n\t}\n\t\n\t// Balance of black and white modules\n\tint black = 0;\n\tfor (const vector<bool> &row : modules) {\n\t\tfor (bool color : row) {\n\t\t\tif (color)\n\t\t\t\tblack++;\n\t\t}\n\t}\n\tint total = size * size;  // Note that size is odd, so black/total != 1/2\n\t// Compute the smallest integer k >= 0 such that (45-5k)% <= black/total <= (55+5k)%\n\tint k = static_cast<int>((std::abs(black * 20L - total * 10L) + total - 1) / total) - 1;\n\tresult += k * PENALTY_N4;\n\treturn result;\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.getAlignmentPatternPositions": {
    "id": "third_party.qrcode.QrCode.QrCode.getAlignmentPatternPositions",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 695,
    "end_line": 708,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "vector<int> QrCode::getAlignmentPatternPositions() const {\n\tif (version == 1)\n\t\treturn vector<int>();\n\telse {\n\t\tint numAlign = version / 7 + 2;\n\t\tint step = (version == 32) ? 26 :\n\t\t\t(version*4 + numAlign*2 + 1) / (numAlign*2 - 2) * 2;\n\t\tvector<int> result;\n\t\tfor (int i = 0, pos = size - 7; i < numAlign - 1; i++, pos -= step)\n\t\t\tresult.insert(result.begin(), pos);\n\t\tresult.insert(result.begin(), 6);\n\t\treturn result;\n\t}\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.getNumRawDataModules": {
    "id": "third_party.qrcode.QrCode.QrCode.getNumRawDataModules",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 711,
    "end_line": 724,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int QrCode::getNumRawDataModules(int ver) {\n\tif (ver < MIN_VERSION || ver > MAX_VERSION)\n\t\tthrow std::domain_error(\"Version number out of range\");\n\tint result = (16 * ver + 128) * ver + 64;\n\tif (ver >= 2) {\n\t\tint numAlign = ver / 7 + 2;\n\t\tresult -= (25 * numAlign - 10) * numAlign - 55;\n\t\tif (ver >= 7)\n\t\t\tresult -= 36;\n\t}\n\tif (!(208 <= result && result <= 29648))\n\t\tthrow std::logic_error(\"Assertion error\");\n\treturn result;\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.getNumDataCodewords": {
    "id": "third_party.qrcode.QrCode.QrCode.getNumDataCodewords",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 727,
    "end_line": 731,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int QrCode::getNumDataCodewords(int ver, Ecc ecl) {\n\treturn getNumRawDataModules(ver) / 8\n\t\t- ECC_CODEWORDS_PER_BLOCK    [static_cast<int>(ecl)][ver]\n\t\t* NUM_ERROR_CORRECTION_BLOCKS[static_cast<int>(ecl)][ver];\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.reedSolomonComputeDivisor": {
    "id": "third_party.qrcode.QrCode.QrCode.reedSolomonComputeDivisor",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 734,
    "end_line": 756,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "vector<uint8_t> QrCode::reedSolomonComputeDivisor(int degree) {\n\tif (degree < 1 || degree > 255)\n\t\tthrow std::domain_error(\"Degree out of range\");\n\t// Polynomial coefficients are stored from highest to lowest power, excluding the leading term which is always 1.\n\t// For example the polynomial x^3 + 255x^2 + 8x + 93 is stored as the uint8 array {255, 8, 93}.\n\tvector<uint8_t> result(static_cast<size_t>(degree));\n\tresult.at(result.size() - 1) = 1;  // Start off with the monomial x^0\n\t\n\t// Compute the product polynomial (x - r^0) * (x - r^1) * (x - r^2) * ... * (x - r^{degree-1}),\n\t// and drop the highest monomial term which is always 1x^degree.\n\t// Note that r = 0x02, which is a generator element of this field GF(2^8/0x11D).\n\tuint8_t root = 1;\n\tfor (int i = 0; i < degree; i++) {\n\t\t// Multiply the current product by (x - r^i)\n\t\tfor (size_t j = 0; j < result.size(); j++) {\n\t\t\tresult.at(j) = reedSolomonMultiply(result.at(j), root);\n\t\t\tif (j + 1 < result.size())\n\t\t\t\tresult.at(j) ^= result.at(j + 1);\n\t\t}\n\t\troot = reedSolomonMultiply(root, 0x02);\n\t}\n\treturn result;\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.reedSolomonComputeRemainder": {
    "id": "third_party.qrcode.QrCode.QrCode.reedSolomonComputeRemainder",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 759,
    "end_line": 769,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "vector<uint8_t> QrCode::reedSolomonComputeRemainder(const vector<uint8_t> &data, const vector<uint8_t> &divisor) {\n\tvector<uint8_t> result(divisor.size());\n\tfor (uint8_t b : data) {  // Polynomial division\n\t\tuint8_t factor = b ^ result.at(0);\n\t\tresult.erase(result.begin());\n\t\tresult.push_back(0);\n\t\tfor (size_t i = 0; i < result.size(); i++)\n\t\t\tresult.at(i) ^= reedSolomonMultiply(divisor.at(i), factor);\n\t}\n\treturn result;\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.reedSolomonMultiply": {
    "id": "third_party.qrcode.QrCode.QrCode.reedSolomonMultiply",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 772,
    "end_line": 782,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "uint8_t QrCode::reedSolomonMultiply(uint8_t x, uint8_t y) {\n\t// Russian peasant multiplication\n\tint z = 0;\n\tfor (int i = 7; i >= 0; i--) {\n\t\tz = (z << 1) ^ ((z >> 7) * 0x11D);\n\t\tz ^= ((y >> i) & 1) * x;\n\t}\n\tif (z >> 8 != 0)\n\t\tthrow std::logic_error(\"Assertion error\");\n\treturn static_cast<uint8_t>(z);\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.finderPenaltyCountPatterns": {
    "id": "third_party.qrcode.QrCode.QrCode.finderPenaltyCountPatterns",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 785,
    "end_line": 792,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int QrCode::finderPenaltyCountPatterns(const std::array<int,7> &runHistory) const {\n\tint n = runHistory.at(1);\n\tif (n > size * 3)\n\t\tthrow std::logic_error(\"Assertion error\");\n\tbool core = n > 0 && runHistory.at(2) == n && runHistory.at(3) == n * 3 && runHistory.at(4) == n && runHistory.at(5) == n;\n\treturn (core && runHistory.at(0) >= n * 4 && runHistory.at(6) >= n ? 1 : 0)\n\t     + (core && runHistory.at(6) >= n * 4 && runHistory.at(0) >= n ? 1 : 0);\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.finderPenaltyTerminateAndCount": {
    "id": "third_party.qrcode.QrCode.QrCode.finderPenaltyTerminateAndCount",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 795,
    "end_line": 803,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int QrCode::finderPenaltyTerminateAndCount(bool currentRunColor, int currentRunLength, std::array<int,7> &runHistory) const {\n\tif (currentRunColor) {  // Terminate black run\n\t\tfinderPenaltyAddHistory(currentRunLength, runHistory);\n\t\tcurrentRunLength = 0;\n\t}\n\tcurrentRunLength += size;  // Add white border to final run\n\tfinderPenaltyAddHistory(currentRunLength, runHistory);\n\treturn finderPenaltyCountPatterns(runHistory);\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.finderPenaltyAddHistory": {
    "id": "third_party.qrcode.QrCode.QrCode.finderPenaltyAddHistory",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 806,
    "end_line": 811,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void QrCode::finderPenaltyAddHistory(int currentRunLength, std::array<int,7> &runHistory) const {\n\tif (runHistory.at(0) == 0)\n\t\tcurrentRunLength += size;  // Add white border to initial run\n\tstd::copy_backward(runHistory.cbegin(), runHistory.cend() - 1, runHistory.end());\n\trunHistory.at(0) = currentRunLength;\n}\n"
  },
  "third_party.qrcode.QrCode.QrCode.getBit": {
    "id": "third_party.qrcode.QrCode.QrCode.getBit",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 814,
    "end_line": 816,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "bool QrCode::getBit(long x, int i) {\n\treturn ((x >> i) & 1) != 0;\n}\n"
  },
  "third_party.qrcode.QrCode.BitBuffer.appendBits": {
    "id": "third_party.qrcode.QrCode.BitBuffer.appendBits",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.cc",
    "relative_path": "third_party\\qrcode\\QrCode.cc",
    "depends_on": [],
    "start_line": 855,
    "end_line": 860,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void BitBuffer::appendBits(std::uint32_t val, int len) {\n\tif (len < 0 || len > 31 || val >> len != 0)\n\t\tthrow std::domain_error(\"Value out of range\");\n\tfor (int i = len - 1; i >= 0; i--)  // Append bit by bit\n\t\tthis->push_back(((val >> i) & 1) != 0);\n}\n"
  },
  "third_party.qrcode.QrCode.QrSegment": {
    "id": "third_party.qrcode.QrCode.QrSegment",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.hpp",
    "relative_path": "third_party\\qrcode\\QrCode.hpp",
    "depends_on": [],
    "start_line": 46,
    "end_line": 216,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class QrSegment final {\n\t\n\t/*---- Public helper enumeration ----*/\n\t\n\t/* \n\t * Describes how a segment's data bits are interpreted. Immutable.\n\t */\n\tpublic: class Mode final {\n\t\t\n\t\t/*-- Constants --*/\n\t\t\n\t\tpublic: static const Mode NUMERIC;\n\t\tpublic: static const Mode ALPHANUMERIC;\n\t\tpublic: static const Mode BYTE;\n\t\tpublic: static const Mode KANJI;\n\t\tpublic: static const Mode ECI;\n\t\t\n\t\t\n\t\t/*-- Fields --*/\n\t\t\n\t\t// The mode indicator bits, which is a uint4 value (range 0 to 15).\n\t\tprivate: int modeBits;\n\t\t\n\t\t// Number of character count bits for three different version ranges.\n\t\tprivate: int numBitsCharCount[3];\n\t\t\n\t\t\n\t\t/*-- Constructor --*/\n\t\t\n\t\tprivate: Mode(int mode, int cc0, int cc1, int cc2);\n\t\t\n\t\t\n\t\t/*-- Methods --*/\n\t\t\n\t\t/* \n\t\t * (Package-private) Returns the mode indicator bits, which is an unsigned 4-bit value (range 0 to 15).\n\t\t */\n\t\tpublic: int getModeBits() const;\n\t\t\n\t\t/* \n\t\t * (Package-private) Returns the bit width of the character count field for a segment in\n\t\t * this mode in a QR Code at the given version number. The result is in the range [0, 16].\n\t\t */\n\t\tpublic: int numCharCountBits(int ver) const;\n\t\t\n\t};\n\t\n\t\n\t\n\t/*---- Static factory functions (mid level) ----*/\n\t\n\t/* \n\t * Returns a segment representing the given binary data encoded in\n\t * byte mode. All input byte vectors are acceptable. Any text string\n\t * can be converted to UTF-8 bytes and encoded as a byte mode segment.\n\t */\n\tpublic: static QrSegment makeBytes(const std::vector<std::uint8_t> &data);\n\t\n\t\n\t/* \n\t * Returns a segment representing the given string of decimal digits encoded in numeric mode.\n\t */\n\tpublic: static QrSegment makeNumeric(const char *digits);\n\t\n\t\n\t/* \n\t * Returns a segment representing the given text string encoded in alphanumeric mode.\n\t * The characters allowed are: 0 to 9, A to Z (uppercase only), space,\n\t * dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n\t */\n\tpublic: static QrSegment makeAlphanumeric(const char *text);\n\t\n\t\n\t/* \n\t * Returns a list of zero or more segments to represent the given text string. The result\n\t * may use various segment modes and switch modes to optimize the length of the bit stream.\n\t */\n\tpublic: static std::vector<QrSegment> makeSegments(const char *text);\n\t\n\t\n\t/* \n\t * Returns a segment representing an Extended Channel Interpretation\n\t * (ECI) designator with the given assignment value.\n\t */\n\tpublic: static QrSegment makeEci(long assignVal);\n\t\n\t\n\t/*---- Public static helper functions ----*/\n\t\n\t/* \n\t * Tests whether the given string can be encoded as a segment in alphanumeric mode.\n\t * A string is encodable iff each character is in the following set: 0 to 9, A to Z\n\t * (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n\t */\n\tpublic: static bool isAlphanumeric(const char *text);\n\t\n\t\n\t/* \n\t * Tests whether the given string can be encoded as a segment in numeric mode.\n\t * A string is encodable iff each character is in the range 0 to 9.\n\t */\n\tpublic: static bool isNumeric(const char *text);\n\t\n\t\n\t\n\t/*---- Instance fields ----*/\n\t\n\t/* The mode indicator of this segment. Accessed through getMode(). */\n\tprivate: Mode mode;\n\t\n\t/* The length of this segment's unencoded data. Measured in characters for\n\t * numeric/alphanumeric/kanji mode, bytes for byte mode, and 0 for ECI mode.\n\t * Always zero or positive. Not the same as the data's bit length.\n\t * Accessed through getNumChars(). */\n\tprivate: int numChars;\n\t\n\t/* The data bits of this segment. Accessed through getData(). */\n\tprivate: std::vector<bool> data;\n\t\n\t\n\t/*---- Constructors (low level) ----*/\n\t\n\t/* \n\t * Creates a new QR Code segment with the given attributes and data.\n\t * The character count (numCh) must agree with the mode and the bit buffer length,\n\t * but the constraint isn't checked. The given bit buffer is copied and stored.\n\t */\n\tpublic: QrSegment(Mode md, int numCh, const std::vector<bool> &dt);\n\t\n\t\n\t/* \n\t * Creates a new QR Code segment with the given parameters and data.\n\t * The character count (numCh) must agree with the mode and the bit buffer length,\n\t * but the constraint isn't checked. The given bit buffer is moved and stored.\n\t */\n\tpublic: QrSegment(Mode md, int numCh, std::vector<bool> &&dt);\n\t\n\t\n\t/*---- Methods ----*/\n\t\n\t/* \n\t * Returns the mode field of this segment.\n\t */\n\tpublic: Mode getMode() const;\n\t\n\t\n\t/* \n\t * Returns the character count field of this segment.\n\t */\n\tpublic: int getNumChars() const;\n\t\n\t\n\t/* \n\t * Returns the data bits of this segment.\n\t */\n\tpublic: const std::vector<bool> &getData() const;\n\t\n\t\n\t// (Package-private) Calculates the number of bits needed to encode the given segments at\n\t// the given version. Returns a non-negative number if successful. Otherwise returns -1 if a\n\t// segment has too many characters to fit its length field, or the total bits exceeds INT_MAX.\n\tpublic: static int getTotalBits(const std::vector<QrSegment> &segs, int version);\n\t\n\t\n\t/*---- Private constant ----*/\n\t\n\t/* The set of all legal characters in alphanumeric mode, where\n\t * each character value maps to the index in the string. */\n\tprivate: static const char *ALPHANUMERIC_CHARSET;\n\t\n};\n"
  },
  "third_party.qrcode.QrCode.Mode": {
    "id": "third_party.qrcode.QrCode.Mode",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.hpp",
    "relative_path": "third_party\\qrcode\\QrCode.hpp",
    "depends_on": [],
    "start_line": 53,
    "end_line": 91,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "\tpublic: class Mode final {\n\t\t\n\t\t/*-- Constants --*/\n\t\t\n\t\tpublic: static const Mode NUMERIC;\n\t\tpublic: static const Mode ALPHANUMERIC;\n\t\tpublic: static const Mode BYTE;\n\t\tpublic: static const Mode KANJI;\n\t\tpublic: static const Mode ECI;\n\t\t\n\t\t\n\t\t/*-- Fields --*/\n\t\t\n\t\t// The mode indicator bits, which is a uint4 value (range 0 to 15).\n\t\tprivate: int modeBits;\n\t\t\n\t\t// Number of character count bits for three different version ranges.\n\t\tprivate: int numBitsCharCount[3];\n\t\t\n\t\t\n\t\t/*-- Constructor --*/\n\t\t\n\t\tprivate: Mode(int mode, int cc0, int cc1, int cc2);\n\t\t\n\t\t\n\t\t/*-- Methods --*/\n\t\t\n\t\t/* \n\t\t * (Package-private) Returns the mode indicator bits, which is an unsigned 4-bit value (range 0 to 15).\n\t\t */\n\t\tpublic: int getModeBits() const;\n\t\t\n\t\t/* \n\t\t * (Package-private) Returns the bit width of the character count field for a segment in\n\t\t * this mode in a QR Code at the given version number. The result is in the range [0, 16].\n\t\t */\n\t\tpublic: int numCharCountBits(int ver) const;\n\t\t\n\t};\n"
  },
  "third_party.qrcode.QrCode.QrCode": {
    "id": "third_party.qrcode.QrCode.QrCode",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.hpp",
    "relative_path": "third_party\\qrcode\\QrCode.hpp",
    "depends_on": [],
    "start_line": 236,
    "end_line": 511,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class QrCode final {\n\t\n\t/*---- Public helper enumeration ----*/\n\t\n\t/* \n\t * The error correction level in a QR Code symbol.\n\t */\n\tpublic: enum class Ecc {\n\t\tLOW = 0 ,  // The QR Code can tolerate about  7% erroneous codewords\n\t\tMEDIUM  ,  // The QR Code can tolerate about 15% erroneous codewords\n\t\tQUARTILE,  // The QR Code can tolerate about 25% erroneous codewords\n\t\tHIGH    ,  // The QR Code can tolerate about 30% erroneous codewords\n\t};\n\t\n\t\n\t// Returns a value in the range 0 to 3 (unsigned 2-bit integer).\n\tprivate: static int getFormatBits(Ecc ecl);\n\t\n\t\n\t\n\t/*---- Static factory functions (high level) ----*/\n\t\n\t/* \n\t * Returns a QR Code representing the given Unicode text string at the given error correction level.\n\t * As a conservative upper bound, this function is guaranteed to succeed for strings that have 2953 or fewer\n\t * UTF-8 code units (not Unicode code points) if the low error correction level is used. The smallest possible\n\t * QR Code version is automatically chosen for the output. The ECC level of the result may be higher than\n\t * the ecl argument if it can be done without increasing the version.\n\t */\n\tpublic: static QrCode encodeText(const char *text, Ecc ecl);\n\t\n\t\n\t/* \n\t * Returns a QR Code representing the given binary data at the given error correction level.\n\t * This function always encodes using the binary segment mode, not any text mode. The maximum number of\n\t * bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.\n\t * The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.\n\t */\n\tpublic: static QrCode encodeBinary(const std::vector<std::uint8_t> &data, Ecc ecl);\n\t\n\t\n\t/*---- Static factory functions (mid level) ----*/\n\t\n\t/* \n\t * Returns a QR Code representing the given segments with the given encoding parameters.\n\t * The smallest possible QR Code version within the given range is automatically\n\t * chosen for the output. Iff boostEcl is true, then the ECC level of the result\n\t * may be higher than the ecl argument if it can be done without increasing the\n\t * version. The mask number is either between 0 to 7 (inclusive) to force that\n\t * mask, or -1 to automatically choose an appropriate mask (which may be slow).\n\t * This function allows the user to create a custom sequence of segments that switches\n\t * between modes (such as alphanumeric and byte) to encode text in less space.\n\t * This is a mid-level API; the high-level API is encodeText() and encodeBinary().\n\t */\n\tpublic: static QrCode encodeSegments(const std::vector<QrSegment> &segs, Ecc ecl,\n\t\tint minVersion=1, int maxVersion=40, int mask=-1, bool boostEcl=true);  // All optional parameters\n\t\n\t\n\t\n\t/*---- Instance fields ----*/\n\t\n\t// Immutable scalar parameters:\n\t\n\t/* The version number of this QR Code, which is between 1 and 40 (inclusive).\n\t * This determines the size of this barcode. */\n\tprivate: int version;\n\t\n\t/* The width and height of this QR Code, measured in modules, between\n\t * 21 and 177 (inclusive). This is equal to version * 4 + 17. */\n\tprivate: int size;\n\t\n\t/* The error correction level used in this QR Code. */\n\tprivate: Ecc errorCorrectionLevel;\n\t\n\t/* The index of the mask pattern used in this QR Code, which is between 0 and 7 (inclusive).\n\t * Even if a QR Code is created with automatic masking requested (mask = -1),\n\t * the resulting object still has a mask value between 0 and 7. */\n\tprivate: int mask;\n\t\n\t// Private grids of modules/pixels, with dimensions of size*size:\n\t\n\t// The modules of this QR Code (false = white, true = black).\n\t// Immutable after constructor finishes. Accessed through getModule().\n\tprivate: std::vector<std::vector<bool> > modules;\n\t\n\t// Indicates function modules that are not subjected to masking. Discarded when constructor finishes.\n\tprivate: std::vector<std::vector<bool> > isFunction;\n\t\n\t\n\t\n\t/*---- Constructor (low level) ----*/\n\t\n\t/* \n\t * Creates a new QR Code with the given version number,\n\t * error correction level, data codeword bytes, and mask number.\n\t * This is a low-level API that most users should not use directly.\n\t * A mid-level API is the encodeSegments() function.\n\t */\n\tpublic: QrCode(int ver, Ecc ecl, const std::vector<std::uint8_t> &dataCodewords, int msk);\n\t\n\t\n\t\n\t/*---- Public instance methods ----*/\n\t\n\t/* \n\t * Returns this QR Code's version, in the range [1, 40].\n\t */\n\tpublic: int getVersion() const;\n\t\n\t\n\t/* \n\t * Returns this QR Code's size, in the range [21, 177].\n\t */\n\tpublic: int getSize() const;\n\t\n\t\n\t/* \n\t * Returns this QR Code's error correction level.\n\t */\n\tpublic: Ecc getErrorCorrectionLevel() const;\n\t\n\t\n\t/* \n\t * Returns this QR Code's mask, in the range [0, 7].\n\t */\n\tpublic: int getMask() const;\n\t\n\t\n\t/* \n\t * Returns the color of the module (pixel) at the given coordinates, which is false\n\t * for white or true for black. The top left corner has the coordinates (x=0, y=0).\n\t * If the given coordinates are out of bounds, then false (white) is returned.\n\t */\n\tpublic: bool getModule(int x, int y) const;\n\t\n\t\n\t/* \n\t * Returns a string of SVG code for an image depicting this QR Code, with the given number\n\t * of border modules. The string always uses Unix newlines (\\n), regardless of the platform.\n\t */\n\tpublic: std::string toSvgString(int border) const;\n\t\n\t\n\t\n\t/*---- Private helper methods for constructor: Drawing function modules ----*/\n\t\n\t// Reads this object's version field, and draws and marks all function modules.\n\tprivate: void drawFunctionPatterns();\n\t\n\t\n\t// Draws two copies of the format bits (with its own error correction code)\n\t// based on the given mask and this object's error correction level field.\n\tprivate: void drawFormatBits(int msk);\n\t\n\t\n\t// Draws two copies of the version bits (with its own error correction code),\n\t// based on this object's version field, iff 7 <= version <= 40.\n\tprivate: void drawVersion();\n\t\n\t\n\t// Draws a 9*9 finder pattern including the border separator,\n\t// with the center module at (x, y). Modules can be out of bounds.\n\tprivate: void drawFinderPattern(int x, int y);\n\t\n\t\n\t// Draws a 5*5 alignment pattern, with the center module\n\t// at (x, y). All modules must be in bounds.\n\tprivate: void drawAlignmentPattern(int x, int y);\n\t\n\t\n\t// Sets the color of a module and marks it as a function module.\n\t// Only used by the constructor. Coordinates must be in bounds.\n\tprivate: void setFunctionModule(int x, int y, bool isBlack);\n\t\n\t\n\t// Returns the color of the module at the given coordinates, which must be in range.\n\tprivate: bool module(int x, int y) const;\n\t\n\t\n\t/*---- Private helper methods for constructor: Codewords and masking ----*/\n\t\n\t// Returns a new byte string representing the given data with the appropriate error correction\n\t// codewords appended to it, based on this object's version and error correction level.\n\tprivate: std::vector<std::uint8_t> addEccAndInterleave(const std::vector<std::uint8_t> &data) const;\n\t\n\t\n\t// Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n\t// data area of this QR Code. Function modules need to be marked off before this is called.\n\tprivate: void drawCodewords(const std::vector<std::uint8_t> &data);\n\t\n\t\n\t// XORs the codeword modules in this QR Code with the given mask pattern.\n\t// The function modules must be marked and the codeword bits must be drawn\n\t// before masking. Due to the arithmetic of XOR, calling applyMask() with\n\t// the same mask value a second time will undo the mask. A final well-formed\n\t// QR Code needs exactly one (not zero, two, etc.) mask applied.\n\tprivate: void applyMask(int msk);\n\t\n\t\n\t// Calculates and returns the penalty score based on state of this QR Code's current modules.\n\t// This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n\tprivate: long getPenaltyScore() const;\n\t\n\t\n\t\n\t/*---- Private helper functions ----*/\n\t\n\t// Returns an ascending list of positions of alignment patterns for this version number.\n\t// Each position is in the range [0,177), and are used on both the x and y axes.\n\t// This could be implemented as lookup table of 40 variable-length lists of unsigned bytes.\n\tprivate: std::vector<int> getAlignmentPatternPositions() const;\n\t\n\t\n\t// Returns the number of data bits that can be stored in a QR Code of the given version number, after\n\t// all function modules are excluded. This includes remainder bits, so it might not be a multiple of 8.\n\t// The result is in the range [208, 29648]. This could be implemented as a 40-entry lookup table.\n\tprivate: static int getNumRawDataModules(int ver);\n\t\n\t\n\t// Returns the number of 8-bit data (i.e. not error correction) codewords contained in any\n\t// QR Code of the given version number and error correction level, with remainder bits discarded.\n\t// This stateless pure function could be implemented as a (40*4)-cell lookup table.\n\tprivate: static int getNumDataCodewords(int ver, Ecc ecl);\n\t\n\t\n\t// Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be\n\t// implemented as a lookup table over all possible parameter values, instead of as an algorithm.\n\tprivate: static std::vector<std::uint8_t> reedSolomonComputeDivisor(int degree);\n\t\n\t\n\t// Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.\n\tprivate: static std::vector<std::uint8_t> reedSolomonComputeRemainder(const std::vector<std::uint8_t> &data, const std::vector<std::uint8_t> &divisor);\n\t\n\t\n\t// Returns the product of the two given field elements modulo GF(2^8/0x11D).\n\t// All inputs are valid. This could be implemented as a 256*256 lookup table.\n\tprivate: static std::uint8_t reedSolomonMultiply(std::uint8_t x, std::uint8_t y);\n\t\n\t\n\t// Can only be called immediately after a white run is added, and\n\t// returns either 0, 1, or 2. A helper function for getPenaltyScore().\n\tprivate: int finderPenaltyCountPatterns(const std::array<int,7> &runHistory) const;\n\t\n\t\n\t// Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n\tprivate: int finderPenaltyTerminateAndCount(bool currentRunColor, int currentRunLength, std::array<int,7> &runHistory) const;\n\t\n\t\n\t// Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n\tprivate: void finderPenaltyAddHistory(int currentRunLength, std::array<int,7> &runHistory) const;\n\t\n\t\n\t// Returns true iff the i'th bit of x is set to 1.\n\tprivate: static bool getBit(long x, int i);\n\t\n\t\n\t/*---- Constants and tables ----*/\n\t\n\t// The minimum version number supported in the QR Code Model 2 standard.\n\tpublic: static constexpr int MIN_VERSION =  1;\n\t\n\t// The maximum version number supported in the QR Code Model 2 standard.\n\tpublic: static constexpr int MAX_VERSION = 40;\n\t\n\t\n\t// For use in getPenaltyScore(), when evaluating which mask is best.\n\tprivate: static const int PENALTY_N1;\n\tprivate: static const int PENALTY_N2;\n\tprivate: static const int PENALTY_N3;\n\tprivate: static const int PENALTY_N4;\n\t\n\t\n\tprivate: static const std::int8_t ECC_CODEWORDS_PER_BLOCK[4][41];\n\tprivate: static const std::int8_t NUM_ERROR_CORRECTION_BLOCKS[4][41];\n\t\n};\n"
  },
  "third_party.qrcode.QrCode.data_too_long": {
    "id": "third_party.qrcode.QrCode.data_too_long",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.hpp",
    "relative_path": "third_party\\qrcode\\QrCode.hpp",
    "depends_on": [],
    "start_line": 528,
    "end_line": 532,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class data_too_long : public std::length_error {\n\t\n\tpublic: explicit data_too_long(const std::string &msg);\n\t\n};\n"
  },
  "third_party.qrcode.QrCode.BitBuffer": {
    "id": "third_party.qrcode.QrCode.BitBuffer",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\qrcode\\QrCode.hpp",
    "relative_path": "third_party\\qrcode\\QrCode.hpp",
    "depends_on": [],
    "start_line": 539,
    "end_line": 554,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class BitBuffer final : public std::vector<bool> {\n\t\n\t/*---- Constructor ----*/\n\t\n\t// Creates an empty bit buffer (length 0).\n\tpublic: BitBuffer();\n\t\n\t\n\t\n\t/*---- Method ----*/\n\t\n\t// Appends the given number of low-order bits of the given value\n\t// to this buffer. Requires 0 <= len <= 31 and val < 2^len.\n\tpublic: void appendBits(std::uint32_t val, int len);\n\t\n};\n"
  },
  "third_party.raylib.include.raymath.Clamp": {
    "id": "third_party.raylib.include.raymath.Clamp",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 178,
    "end_line": 185,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float Clamp(float value, float min, float max)\n{\n    float result = (value < min)? min : value;\n\n    if (result > max) result = max;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Lerp": {
    "id": "third_party.raylib.include.raymath.Lerp",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 188,
    "end_line": 193,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float Lerp(float start, float end, float amount)\n{\n    float result = start + amount*(end - start);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Normalize": {
    "id": "third_party.raylib.include.raymath.Normalize",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 196,
    "end_line": 201,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float Normalize(float value, float start, float end)\n{\n    float result = (value - start)/(end - start);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Remap": {
    "id": "third_party.raylib.include.raymath.Remap",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 204,
    "end_line": 209,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float Remap(float value, float inputStart, float inputEnd, float outputStart, float outputEnd)\n{\n    float result = (value - inputStart)/(inputEnd - inputStart)*(outputEnd - outputStart) + outputStart;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Wrap": {
    "id": "third_party.raylib.include.raymath.Wrap",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 212,
    "end_line": 217,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float Wrap(float value, float min, float max)\n{\n    float result = value - (max - min)*floorf((value - min)/(max - min));\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.FloatEquals": {
    "id": "third_party.raylib.include.raymath.FloatEquals",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 220,
    "end_line": 229,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI int FloatEquals(float x, float y)\n{\n#if !defined(EPSILON)\n    #define EPSILON 0.000001f\n#endif\n\n    int result = (fabsf(x - y)) <= (EPSILON*fmaxf(1.0f, fmaxf(fabsf(x), fabsf(y))));\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2Zero": {
    "id": "third_party.raylib.include.raymath.Vector2Zero",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 236,
    "end_line": 241,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector2 Vector2Zero(void)\n{\n    Vector2 result = { 0.0f, 0.0f };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2One": {
    "id": "third_party.raylib.include.raymath.Vector2One",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 244,
    "end_line": 249,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector2 Vector2One(void)\n{\n    Vector2 result = { 1.0f, 1.0f };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2Add": {
    "id": "third_party.raylib.include.raymath.Vector2Add",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 252,
    "end_line": 257,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector2 Vector2Add(Vector2 v1, Vector2 v2)\n{\n    Vector2 result = { v1.x + v2.x, v1.y + v2.y };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2AddValue": {
    "id": "third_party.raylib.include.raymath.Vector2AddValue",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 260,
    "end_line": 265,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector2 Vector2AddValue(Vector2 v, float add)\n{\n    Vector2 result = { v.x + add, v.y + add };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2Subtract": {
    "id": "third_party.raylib.include.raymath.Vector2Subtract",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 268,
    "end_line": 273,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector2 Vector2Subtract(Vector2 v1, Vector2 v2)\n{\n    Vector2 result = { v1.x - v2.x, v1.y - v2.y };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2SubtractValue": {
    "id": "third_party.raylib.include.raymath.Vector2SubtractValue",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 276,
    "end_line": 281,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector2 Vector2SubtractValue(Vector2 v, float sub)\n{\n    Vector2 result = { v.x - sub, v.y - sub };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2Length": {
    "id": "third_party.raylib.include.raymath.Vector2Length",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 284,
    "end_line": 289,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float Vector2Length(Vector2 v)\n{\n    float result = sqrtf((v.x*v.x) + (v.y*v.y));\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2LengthSqr": {
    "id": "third_party.raylib.include.raymath.Vector2LengthSqr",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 292,
    "end_line": 297,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float Vector2LengthSqr(Vector2 v)\n{\n    float result = (v.x*v.x) + (v.y*v.y);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2DotProduct": {
    "id": "third_party.raylib.include.raymath.Vector2DotProduct",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 300,
    "end_line": 305,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float Vector2DotProduct(Vector2 v1, Vector2 v2)\n{\n    float result = (v1.x*v2.x + v1.y*v2.y);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2CrossProduct": {
    "id": "third_party.raylib.include.raymath.Vector2CrossProduct",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 308,
    "end_line": 313,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float Vector2CrossProduct(Vector2 v1, Vector2 v2)\n{\n    float result = (v1.x*v2.y - v1.y*v2.x);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2Distance": {
    "id": "third_party.raylib.include.raymath.Vector2Distance",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 316,
    "end_line": 321,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float Vector2Distance(Vector2 v1, Vector2 v2)\n{\n    float result = sqrtf((v1.x - v2.x)*(v1.x - v2.x) + (v1.y - v2.y)*(v1.y - v2.y));\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2DistanceSqr": {
    "id": "third_party.raylib.include.raymath.Vector2DistanceSqr",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 324,
    "end_line": 329,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float Vector2DistanceSqr(Vector2 v1, Vector2 v2)\n{\n    float result = ((v1.x - v2.x)*(v1.x - v2.x) + (v1.y - v2.y)*(v1.y - v2.y));\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2Angle": {
    "id": "third_party.raylib.include.raymath.Vector2Angle",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 333,
    "end_line": 343,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float Vector2Angle(Vector2 v1, Vector2 v2)\n{\n    float result = 0.0f;\n\n    float dot = v1.x*v2.x + v1.y*v2.y;\n    float det = v1.x*v2.y - v1.y*v2.x;\n\n    result = atan2f(det, dot);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2LineAngle": {
    "id": "third_party.raylib.include.raymath.Vector2LineAngle",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 348,
    "end_line": 356,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float Vector2LineAngle(Vector2 start, Vector2 end)\n{\n    float result = 0.0f;\n\n    // TODO(10/9/2023): Currently angles move clockwise, determine if this is wanted behavior\n    result = -atan2f(end.y - start.y, end.x - start.x);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2Scale": {
    "id": "third_party.raylib.include.raymath.Vector2Scale",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 359,
    "end_line": 364,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector2 Vector2Scale(Vector2 v, float scale)\n{\n    Vector2 result = { v.x*scale, v.y*scale };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2Multiply": {
    "id": "third_party.raylib.include.raymath.Vector2Multiply",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 367,
    "end_line": 372,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector2 Vector2Multiply(Vector2 v1, Vector2 v2)\n{\n    Vector2 result = { v1.x*v2.x, v1.y*v2.y };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2Negate": {
    "id": "third_party.raylib.include.raymath.Vector2Negate",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 375,
    "end_line": 380,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector2 Vector2Negate(Vector2 v)\n{\n    Vector2 result = { -v.x, -v.y };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2Divide": {
    "id": "third_party.raylib.include.raymath.Vector2Divide",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 383,
    "end_line": 388,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector2 Vector2Divide(Vector2 v1, Vector2 v2)\n{\n    Vector2 result = { v1.x/v2.x, v1.y/v2.y };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2Normalize": {
    "id": "third_party.raylib.include.raymath.Vector2Normalize",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 391,
    "end_line": 404,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector2 Vector2Normalize(Vector2 v)\n{\n    Vector2 result = { 0 };\n    float length = sqrtf((v.x*v.x) + (v.y*v.y));\n\n    if (length > 0)\n    {\n        float ilength = 1.0f/length;\n        result.x = v.x*ilength;\n        result.y = v.y*ilength;\n    }\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2Transform": {
    "id": "third_party.raylib.include.raymath.Vector2Transform",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 407,
    "end_line": 419,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector2 Vector2Transform(Vector2 v, Matrix mat)\n{\n    Vector2 result = { 0 };\n\n    float x = v.x;\n    float y = v.y;\n    float z = 0;\n\n    result.x = mat.m0*x + mat.m4*y + mat.m8*z + mat.m12;\n    result.y = mat.m1*x + mat.m5*y + mat.m9*z + mat.m13;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2Lerp": {
    "id": "third_party.raylib.include.raymath.Vector2Lerp",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 422,
    "end_line": 430,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector2 Vector2Lerp(Vector2 v1, Vector2 v2, float amount)\n{\n    Vector2 result = { 0 };\n\n    result.x = v1.x + amount*(v2.x - v1.x);\n    result.y = v1.y + amount*(v2.y - v1.y);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2Reflect": {
    "id": "third_party.raylib.include.raymath.Vector2Reflect",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 433,
    "end_line": 443,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector2 Vector2Reflect(Vector2 v, Vector2 normal)\n{\n    Vector2 result = { 0 };\n\n    float dotProduct = (v.x*normal.x + v.y*normal.y); // Dot product\n\n    result.x = v.x - (2.0f*normal.x)*dotProduct;\n    result.y = v.y - (2.0f*normal.y)*dotProduct;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2Min": {
    "id": "third_party.raylib.include.raymath.Vector2Min",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 446,
    "end_line": 454,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector2 Vector2Min(Vector2 v1, Vector2 v2)\n{\n    Vector2 result = { 0 };\n\n    result.x = fminf(v1.x, v2.x);\n    result.y = fminf(v1.y, v2.y);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2Max": {
    "id": "third_party.raylib.include.raymath.Vector2Max",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 457,
    "end_line": 465,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector2 Vector2Max(Vector2 v1, Vector2 v2)\n{\n    Vector2 result = { 0 };\n\n    result.x = fmaxf(v1.x, v2.x);\n    result.y = fmaxf(v1.y, v2.y);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2Rotate": {
    "id": "third_party.raylib.include.raymath.Vector2Rotate",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 468,
    "end_line": 479,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector2 Vector2Rotate(Vector2 v, float angle)\n{\n    Vector2 result = { 0 };\n\n    float cosres = cosf(angle);\n    float sinres = sinf(angle);\n\n    result.x = v.x*cosres - v.y*sinres;\n    result.y = v.x*sinres + v.y*cosres;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2MoveTowards": {
    "id": "third_party.raylib.include.raymath.Vector2MoveTowards",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 482,
    "end_line": 498,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector2 Vector2MoveTowards(Vector2 v, Vector2 target, float maxDistance)\n{\n    Vector2 result = { 0 };\n\n    float dx = target.x - v.x;\n    float dy = target.y - v.y;\n    float value = (dx*dx) + (dy*dy);\n\n    if ((value == 0) || ((maxDistance >= 0) && (value <= maxDistance*maxDistance))) return target;\n\n    float dist = sqrtf(value);\n\n    result.x = v.x + dx/dist*maxDistance;\n    result.y = v.y + dy/dist*maxDistance;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2Invert": {
    "id": "third_party.raylib.include.raymath.Vector2Invert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 501,
    "end_line": 506,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector2 Vector2Invert(Vector2 v)\n{\n    Vector2 result = { 1.0f/v.x, 1.0f/v.y };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2Clamp": {
    "id": "third_party.raylib.include.raymath.Vector2Clamp",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 510,
    "end_line": 518,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector2 Vector2Clamp(Vector2 v, Vector2 min, Vector2 max)\n{\n    Vector2 result = { 0 };\n\n    result.x = fminf(max.x, fmaxf(min.x, v.x));\n    result.y = fminf(max.y, fmaxf(min.y, v.y));\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2ClampValue": {
    "id": "third_party.raylib.include.raymath.Vector2ClampValue",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 521,
    "end_line": 545,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector2 Vector2ClampValue(Vector2 v, float min, float max)\n{\n    Vector2 result = v;\n\n    float length = (v.x*v.x) + (v.y*v.y);\n    if (length > 0.0f)\n    {\n        length = sqrtf(length);\n\n        float scale = 1;    // By default, 1 as the neutral element.\n        if (length < min)\n        {\n            scale = min/length;\n        }\n        else if (length > max)\n        {\n            scale = max/length;\n        }\n\n        result.x = v.x*scale;\n        result.y = v.y*scale;\n    }\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2Equals": {
    "id": "third_party.raylib.include.raymath.Vector2Equals",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 548,
    "end_line": 558,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI int Vector2Equals(Vector2 p, Vector2 q)\n{\n#if !defined(EPSILON)\n    #define EPSILON 0.000001f\n#endif\n\n    int result = ((fabsf(p.x - q.x)) <= (EPSILON*fmaxf(1.0f, fmaxf(fabsf(p.x), fabsf(q.x))))) &&\n                  ((fabsf(p.y - q.y)) <= (EPSILON*fmaxf(1.0f, fmaxf(fabsf(p.y), fabsf(q.y)))));\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector2Refract": {
    "id": "third_party.raylib.include.raymath.Vector2Refract",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 565,
    "end_line": 582,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector2 Vector2Refract(Vector2 v, Vector2 n, float r)\n{\n    Vector2 result = { 0 };\n\n    float dot = v.x*n.x + v.y*n.y;\n    float d = 1.0f - r*r*(1.0f - dot*dot);\n\n    if (d >= 0.0f)\n    {\n        d = sqrtf(d);\n        v.x = r*v.x - (r*dot + d)*n.x;\n        v.y = r*v.y - (r*dot + d)*n.y;\n\n        result = v;\n    }\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Zero": {
    "id": "third_party.raylib.include.raymath.Vector3Zero",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 590,
    "end_line": 595,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3Zero(void)\n{\n    Vector3 result = { 0.0f, 0.0f, 0.0f };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3One": {
    "id": "third_party.raylib.include.raymath.Vector3One",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 598,
    "end_line": 603,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3One(void)\n{\n    Vector3 result = { 1.0f, 1.0f, 1.0f };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Add": {
    "id": "third_party.raylib.include.raymath.Vector3Add",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 606,
    "end_line": 611,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3Add(Vector3 v1, Vector3 v2)\n{\n    Vector3 result = { v1.x + v2.x, v1.y + v2.y, v1.z + v2.z };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3AddValue": {
    "id": "third_party.raylib.include.raymath.Vector3AddValue",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 614,
    "end_line": 619,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3AddValue(Vector3 v, float add)\n{\n    Vector3 result = { v.x + add, v.y + add, v.z + add };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Subtract": {
    "id": "third_party.raylib.include.raymath.Vector3Subtract",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 622,
    "end_line": 627,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3Subtract(Vector3 v1, Vector3 v2)\n{\n    Vector3 result = { v1.x - v2.x, v1.y - v2.y, v1.z - v2.z };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3SubtractValue": {
    "id": "third_party.raylib.include.raymath.Vector3SubtractValue",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 630,
    "end_line": 635,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3SubtractValue(Vector3 v, float sub)\n{\n    Vector3 result = { v.x - sub, v.y - sub, v.z - sub };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Scale": {
    "id": "third_party.raylib.include.raymath.Vector3Scale",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 638,
    "end_line": 643,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3Scale(Vector3 v, float scalar)\n{\n    Vector3 result = { v.x*scalar, v.y*scalar, v.z*scalar };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Multiply": {
    "id": "third_party.raylib.include.raymath.Vector3Multiply",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 646,
    "end_line": 651,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3Multiply(Vector3 v1, Vector3 v2)\n{\n    Vector3 result = { v1.x*v2.x, v1.y*v2.y, v1.z*v2.z };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3CrossProduct": {
    "id": "third_party.raylib.include.raymath.Vector3CrossProduct",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 654,
    "end_line": 659,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3CrossProduct(Vector3 v1, Vector3 v2)\n{\n    Vector3 result = { v1.y*v2.z - v1.z*v2.y, v1.z*v2.x - v1.x*v2.z, v1.x*v2.y - v1.y*v2.x };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Perpendicular": {
    "id": "third_party.raylib.include.raymath.Vector3Perpendicular",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 662,
    "end_line": 688,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3Perpendicular(Vector3 v)\n{\n    Vector3 result = { 0 };\n\n    float min = fabsf(v.x);\n    Vector3 cardinalAxis = {1.0f, 0.0f, 0.0f};\n\n    if (fabsf(v.y) < min)\n    {\n        min = fabsf(v.y);\n        Vector3 tmp = {0.0f, 1.0f, 0.0f};\n        cardinalAxis = tmp;\n    }\n\n    if (fabsf(v.z) < min)\n    {\n        Vector3 tmp = {0.0f, 0.0f, 1.0f};\n        cardinalAxis = tmp;\n    }\n\n    // Cross product between vectors\n    result.x = v.y*cardinalAxis.z - v.z*cardinalAxis.y;\n    result.y = v.z*cardinalAxis.x - v.x*cardinalAxis.z;\n    result.z = v.x*cardinalAxis.y - v.y*cardinalAxis.x;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Length": {
    "id": "third_party.raylib.include.raymath.Vector3Length",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 691,
    "end_line": 696,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float Vector3Length(const Vector3 v)\n{\n    float result = sqrtf(v.x*v.x + v.y*v.y + v.z*v.z);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3LengthSqr": {
    "id": "third_party.raylib.include.raymath.Vector3LengthSqr",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 699,
    "end_line": 704,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float Vector3LengthSqr(const Vector3 v)\n{\n    float result = v.x*v.x + v.y*v.y + v.z*v.z;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3DotProduct": {
    "id": "third_party.raylib.include.raymath.Vector3DotProduct",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 707,
    "end_line": 712,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float Vector3DotProduct(Vector3 v1, Vector3 v2)\n{\n    float result = (v1.x*v2.x + v1.y*v2.y + v1.z*v2.z);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Distance": {
    "id": "third_party.raylib.include.raymath.Vector3Distance",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 715,
    "end_line": 725,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float Vector3Distance(Vector3 v1, Vector3 v2)\n{\n    float result = 0.0f;\n\n    float dx = v2.x - v1.x;\n    float dy = v2.y - v1.y;\n    float dz = v2.z - v1.z;\n    result = sqrtf(dx*dx + dy*dy + dz*dz);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3DistanceSqr": {
    "id": "third_party.raylib.include.raymath.Vector3DistanceSqr",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 728,
    "end_line": 738,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float Vector3DistanceSqr(Vector3 v1, Vector3 v2)\n{\n    float result = 0.0f;\n\n    float dx = v2.x - v1.x;\n    float dy = v2.y - v1.y;\n    float dz = v2.z - v1.z;\n    result = dx*dx + dy*dy + dz*dz;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Angle": {
    "id": "third_party.raylib.include.raymath.Vector3Angle",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 741,
    "end_line": 751,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float Vector3Angle(Vector3 v1, Vector3 v2)\n{\n    float result = 0.0f;\n\n    Vector3 cross = { v1.y*v2.z - v1.z*v2.y, v1.z*v2.x - v1.x*v2.z, v1.x*v2.y - v1.y*v2.x };\n    float len = sqrtf(cross.x*cross.x + cross.y*cross.y + cross.z*cross.z);\n    float dot = (v1.x*v2.x + v1.y*v2.y + v1.z*v2.z);\n    result = atan2f(len, dot);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Negate": {
    "id": "third_party.raylib.include.raymath.Vector3Negate",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 754,
    "end_line": 759,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3Negate(Vector3 v)\n{\n    Vector3 result = { -v.x, -v.y, -v.z };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Divide": {
    "id": "third_party.raylib.include.raymath.Vector3Divide",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 762,
    "end_line": 767,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3Divide(Vector3 v1, Vector3 v2)\n{\n    Vector3 result = { v1.x/v2.x, v1.y/v2.y, v1.z/v2.z };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Normalize": {
    "id": "third_party.raylib.include.raymath.Vector3Normalize",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 770,
    "end_line": 785,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3Normalize(Vector3 v)\n{\n    Vector3 result = v;\n\n    float length = sqrtf(v.x*v.x + v.y*v.y + v.z*v.z);\n    if (length != 0.0f)\n    {\n        float ilength = 1.0f/length;\n\n        result.x *= ilength;\n        result.y *= ilength;\n        result.z *= ilength;\n    }\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Project": {
    "id": "third_party.raylib.include.raymath.Vector3Project",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 788,
    "end_line": 802,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3Project(Vector3 v1, Vector3 v2)\n{\n    Vector3 result = { 0 };\n\n    float v1dv2 = (v1.x*v2.x + v1.y*v2.y + v1.z*v2.z);\n    float v2dv2 = (v2.x*v2.x + v2.y*v2.y + v2.z*v2.z);\n\n    float mag = v1dv2/v2dv2;\n\n    result.x = v2.x*mag;\n    result.y = v2.y*mag;\n    result.z = v2.z*mag;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Reject": {
    "id": "third_party.raylib.include.raymath.Vector3Reject",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 805,
    "end_line": 819,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3Reject(Vector3 v1, Vector3 v2)\n{\n    Vector3 result = { 0 };\n\n    float v1dv2 = (v1.x*v2.x + v1.y*v2.y + v1.z*v2.z);\n    float v2dv2 = (v2.x*v2.x + v2.y*v2.y + v2.z*v2.z);\n\n    float mag = v1dv2/v2dv2;\n\n    result.x = v1.x - (v2.x*mag);\n    result.y = v1.y - (v2.y*mag);\n    result.z = v1.z - (v2.z*mag);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3OrthoNormalize": {
    "id": "third_party.raylib.include.raymath.Vector3OrthoNormalize",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 824,
    "end_line": 854,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI void Vector3OrthoNormalize(Vector3 *v1, Vector3 *v2)\n{\n    float length = 0.0f;\n    float ilength = 0.0f;\n\n    // Vector3Normalize(*v1);\n    Vector3 v = *v1;\n    length = sqrtf(v.x*v.x + v.y*v.y + v.z*v.z);\n    if (length == 0.0f) length = 1.0f;\n    ilength = 1.0f/length;\n    v1->x *= ilength;\n    v1->y *= ilength;\n    v1->z *= ilength;\n\n    // Vector3CrossProduct(*v1, *v2)\n    Vector3 vn1 = { v1->y*v2->z - v1->z*v2->y, v1->z*v2->x - v1->x*v2->z, v1->x*v2->y - v1->y*v2->x };\n\n    // Vector3Normalize(vn1);\n    v = vn1;\n    length = sqrtf(v.x*v.x + v.y*v.y + v.z*v.z);\n    if (length == 0.0f) length = 1.0f;\n    ilength = 1.0f/length;\n    vn1.x *= ilength;\n    vn1.y *= ilength;\n    vn1.z *= ilength;\n\n    // Vector3CrossProduct(vn1, *v1)\n    Vector3 vn2 = { vn1.y*v1->z - vn1.z*v1->y, vn1.z*v1->x - vn1.x*v1->z, vn1.x*v1->y - vn1.y*v1->x };\n\n    *v2 = vn2;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Transform": {
    "id": "third_party.raylib.include.raymath.Vector3Transform",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 857,
    "end_line": 870,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3Transform(Vector3 v, Matrix mat)\n{\n    Vector3 result = { 0 };\n\n    float x = v.x;\n    float y = v.y;\n    float z = v.z;\n\n    result.x = mat.m0*x + mat.m4*y + mat.m8*z + mat.m12;\n    result.y = mat.m1*x + mat.m5*y + mat.m9*z + mat.m13;\n    result.z = mat.m2*x + mat.m6*y + mat.m10*z + mat.m14;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3RotateByQuaternion": {
    "id": "third_party.raylib.include.raymath.Vector3RotateByQuaternion",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 873,
    "end_line": 882,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3RotateByQuaternion(Vector3 v, Quaternion q)\n{\n    Vector3 result = { 0 };\n\n    result.x = v.x*(q.x*q.x + q.w*q.w - q.y*q.y - q.z*q.z) + v.y*(2*q.x*q.y - 2*q.w*q.z) + v.z*(2*q.x*q.z + 2*q.w*q.y);\n    result.y = v.x*(2*q.w*q.z + 2*q.x*q.y) + v.y*(q.w*q.w - q.x*q.x + q.y*q.y - q.z*q.z) + v.z*(-2*q.w*q.x + 2*q.y*q.z);\n    result.z = v.x*(-2*q.w*q.y + 2*q.x*q.z) + v.y*(2*q.w*q.x + 2*q.y*q.z)+ v.z*(q.w*q.w - q.x*q.x - q.y*q.y + q.z*q.z);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3RotateByAxisAngle": {
    "id": "third_party.raylib.include.raymath.Vector3RotateByAxisAngle",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 885,
    "end_line": 934,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3RotateByAxisAngle(Vector3 v, Vector3 axis, float angle)\n{\n    // Using Euler-Rodrigues Formula\n    // Ref.: https://en.wikipedia.org/w/index.php?title=Euler%E2%80%93Rodrigues_formula\n\n    Vector3 result = v;\n\n    // Vector3Normalize(axis);\n    float length = sqrtf(axis.x*axis.x + axis.y*axis.y + axis.z*axis.z);\n    if (length == 0.0f) length = 1.0f;\n    float ilength = 1.0f/length;\n    axis.x *= ilength;\n    axis.y *= ilength;\n    axis.z *= ilength;\n\n    angle /= 2.0f;\n    float a = sinf(angle);\n    float b = axis.x*a;\n    float c = axis.y*a;\n    float d = axis.z*a;\n    a = cosf(angle);\n    Vector3 w = { b, c, d };\n\n    // Vector3CrossProduct(w, v)\n    Vector3 wv = { w.y*v.z - w.z*v.y, w.z*v.x - w.x*v.z, w.x*v.y - w.y*v.x };\n\n    // Vector3CrossProduct(w, wv)\n    Vector3 wwv = { w.y*wv.z - w.z*wv.y, w.z*wv.x - w.x*wv.z, w.x*wv.y - w.y*wv.x };\n\n    // Vector3Scale(wv, 2*a)\n    a *= 2;\n    wv.x *= a;\n    wv.y *= a;\n    wv.z *= a;\n\n    // Vector3Scale(wwv, 2)\n    wwv.x *= 2;\n    wwv.y *= 2;\n    wwv.z *= 2;\n\n    result.x += wv.x;\n    result.y += wv.y;\n    result.z += wv.z;\n\n    result.x += wwv.x;\n    result.y += wwv.y;\n    result.z += wwv.z;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3MoveTowards": {
    "id": "third_party.raylib.include.raymath.Vector3MoveTowards",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 937,
    "end_line": 955,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3MoveTowards(Vector3 v, Vector3 target, float maxDistance)\n{\n    Vector3 result = { 0 };\n\n    float dx = target.x - v.x;\n    float dy = target.y - v.y;\n    float dz = target.z - v.z;\n    float value = (dx*dx) + (dy*dy) + (dz*dz);\n\n    if ((value == 0) || ((maxDistance >= 0) && (value <= maxDistance*maxDistance))) return target;\n\n    float dist = sqrtf(value);\n\n    result.x = v.x + dx/dist*maxDistance;\n    result.y = v.y + dy/dist*maxDistance;\n    result.z = v.z + dz/dist*maxDistance;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Lerp": {
    "id": "third_party.raylib.include.raymath.Vector3Lerp",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 958,
    "end_line": 967,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3Lerp(Vector3 v1, Vector3 v2, float amount)\n{\n    Vector3 result = { 0 };\n\n    result.x = v1.x + amount*(v2.x - v1.x);\n    result.y = v1.y + amount*(v2.y - v1.y);\n    result.z = v1.z + amount*(v2.z - v1.z);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3CubicHermite": {
    "id": "third_party.raylib.include.raymath.Vector3CubicHermite",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 971,
    "end_line": 983,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3CubicHermite(Vector3 v1, Vector3 tangent1, Vector3 v2, Vector3 tangent2, float amount)\n{\n    Vector3 result = { 0 };\n\n    float amountPow2 = amount*amount;\n    float amountPow3 = amount*amount*amount;\n\n    result.x = (2*amountPow3 - 3*amountPow2 + 1)*v1.x + (amountPow3 - 2*amountPow2 + amount)*tangent1.x + (-2*amountPow3 + 3*amountPow2)*v2.x + (amountPow3 - amountPow2)*tangent2.x;\n    result.y = (2*amountPow3 - 3*amountPow2 + 1)*v1.y + (amountPow3 - 2*amountPow2 + amount)*tangent1.y + (-2*amountPow3 + 3*amountPow2)*v2.y + (amountPow3 - amountPow2)*tangent2.y;\n    result.z = (2*amountPow3 - 3*amountPow2 + 1)*v1.z + (amountPow3 - 2*amountPow2 + amount)*tangent1.z + (-2*amountPow3 + 3*amountPow2)*v2.z + (amountPow3 - amountPow2)*tangent2.z;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Reflect": {
    "id": "third_party.raylib.include.raymath.Vector3Reflect",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 986,
    "end_line": 1001,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3Reflect(Vector3 v, Vector3 normal)\n{\n    Vector3 result = { 0 };\n\n    // I is the original vector\n    // N is the normal of the incident plane\n    // R = I - (2*N*(DotProduct[I, N]))\n\n    float dotProduct = (v.x*normal.x + v.y*normal.y + v.z*normal.z);\n\n    result.x = v.x - (2.0f*normal.x)*dotProduct;\n    result.y = v.y - (2.0f*normal.y)*dotProduct;\n    result.z = v.z - (2.0f*normal.z)*dotProduct;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Min": {
    "id": "third_party.raylib.include.raymath.Vector3Min",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1004,
    "end_line": 1013,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3Min(Vector3 v1, Vector3 v2)\n{\n    Vector3 result = { 0 };\n\n    result.x = fminf(v1.x, v2.x);\n    result.y = fminf(v1.y, v2.y);\n    result.z = fminf(v1.z, v2.z);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Max": {
    "id": "third_party.raylib.include.raymath.Vector3Max",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1016,
    "end_line": 1025,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3Max(Vector3 v1, Vector3 v2)\n{\n    Vector3 result = { 0 };\n\n    result.x = fmaxf(v1.x, v2.x);\n    result.y = fmaxf(v1.y, v2.y);\n    result.z = fmaxf(v1.z, v2.z);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Barycenter": {
    "id": "third_party.raylib.include.raymath.Vector3Barycenter",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1029,
    "end_line": 1049,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3Barycenter(Vector3 p, Vector3 a, Vector3 b, Vector3 c)\n{\n    Vector3 result = { 0 };\n\n    Vector3 v0 = { b.x - a.x, b.y - a.y, b.z - a.z };   // Vector3Subtract(b, a)\n    Vector3 v1 = { c.x - a.x, c.y - a.y, c.z - a.z };   // Vector3Subtract(c, a)\n    Vector3 v2 = { p.x - a.x, p.y - a.y, p.z - a.z };   // Vector3Subtract(p, a)\n    float d00 = (v0.x*v0.x + v0.y*v0.y + v0.z*v0.z);    // Vector3DotProduct(v0, v0)\n    float d01 = (v0.x*v1.x + v0.y*v1.y + v0.z*v1.z);    // Vector3DotProduct(v0, v1)\n    float d11 = (v1.x*v1.x + v1.y*v1.y + v1.z*v1.z);    // Vector3DotProduct(v1, v1)\n    float d20 = (v2.x*v0.x + v2.y*v0.y + v2.z*v0.z);    // Vector3DotProduct(v2, v0)\n    float d21 = (v2.x*v1.x + v2.y*v1.y + v2.z*v1.z);    // Vector3DotProduct(v2, v1)\n\n    float denom = d00*d11 - d01*d01;\n\n    result.y = (d11*d20 - d01*d21)/denom;\n    result.z = (d00*d21 - d01*d20)/denom;\n    result.x = 1.0f - (result.z + result.y);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Unproject": {
    "id": "third_party.raylib.include.raymath.Vector3Unproject",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1053,
    "end_line": 1133,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3Unproject(Vector3 source, Matrix projection, Matrix view)\n{\n    Vector3 result = { 0 };\n\n    // Calculate unprojected matrix (multiply view matrix by projection matrix) and invert it\n    Matrix matViewProj = {      // MatrixMultiply(view, projection);\n        view.m0*projection.m0 + view.m1*projection.m4 + view.m2*projection.m8 + view.m3*projection.m12,\n        view.m0*projection.m1 + view.m1*projection.m5 + view.m2*projection.m9 + view.m3*projection.m13,\n        view.m0*projection.m2 + view.m1*projection.m6 + view.m2*projection.m10 + view.m3*projection.m14,\n        view.m0*projection.m3 + view.m1*projection.m7 + view.m2*projection.m11 + view.m3*projection.m15,\n        view.m4*projection.m0 + view.m5*projection.m4 + view.m6*projection.m8 + view.m7*projection.m12,\n        view.m4*projection.m1 + view.m5*projection.m5 + view.m6*projection.m9 + view.m7*projection.m13,\n        view.m4*projection.m2 + view.m5*projection.m6 + view.m6*projection.m10 + view.m7*projection.m14,\n        view.m4*projection.m3 + view.m5*projection.m7 + view.m6*projection.m11 + view.m7*projection.m15,\n        view.m8*projection.m0 + view.m9*projection.m4 + view.m10*projection.m8 + view.m11*projection.m12,\n        view.m8*projection.m1 + view.m9*projection.m5 + view.m10*projection.m9 + view.m11*projection.m13,\n        view.m8*projection.m2 + view.m9*projection.m6 + view.m10*projection.m10 + view.m11*projection.m14,\n        view.m8*projection.m3 + view.m9*projection.m7 + view.m10*projection.m11 + view.m11*projection.m15,\n        view.m12*projection.m0 + view.m13*projection.m4 + view.m14*projection.m8 + view.m15*projection.m12,\n        view.m12*projection.m1 + view.m13*projection.m5 + view.m14*projection.m9 + view.m15*projection.m13,\n        view.m12*projection.m2 + view.m13*projection.m6 + view.m14*projection.m10 + view.m15*projection.m14,\n        view.m12*projection.m3 + view.m13*projection.m7 + view.m14*projection.m11 + view.m15*projection.m15 };\n\n    // Calculate inverted matrix -> MatrixInvert(matViewProj);\n    // Cache the matrix values (speed optimization)\n    float a00 = matViewProj.m0, a01 = matViewProj.m1, a02 = matViewProj.m2, a03 = matViewProj.m3;\n    float a10 = matViewProj.m4, a11 = matViewProj.m5, a12 = matViewProj.m6, a13 = matViewProj.m7;\n    float a20 = matViewProj.m8, a21 = matViewProj.m9, a22 = matViewProj.m10, a23 = matViewProj.m11;\n    float a30 = matViewProj.m12, a31 = matViewProj.m13, a32 = matViewProj.m14, a33 = matViewProj.m15;\n\n    float b00 = a00*a11 - a01*a10;\n    float b01 = a00*a12 - a02*a10;\n    float b02 = a00*a13 - a03*a10;\n    float b03 = a01*a12 - a02*a11;\n    float b04 = a01*a13 - a03*a11;\n    float b05 = a02*a13 - a03*a12;\n    float b06 = a20*a31 - a21*a30;\n    float b07 = a20*a32 - a22*a30;\n    float b08 = a20*a33 - a23*a30;\n    float b09 = a21*a32 - a22*a31;\n    float b10 = a21*a33 - a23*a31;\n    float b11 = a22*a33 - a23*a32;\n\n    // Calculate the invert determinant (inlined to avoid double-caching)\n    float invDet = 1.0f/(b00*b11 - b01*b10 + b02*b09 + b03*b08 - b04*b07 + b05*b06);\n\n    Matrix matViewProjInv = {\n        (a11*b11 - a12*b10 + a13*b09)*invDet,\n        (-a01*b11 + a02*b10 - a03*b09)*invDet,\n        (a31*b05 - a32*b04 + a33*b03)*invDet,\n        (-a21*b05 + a22*b04 - a23*b03)*invDet,\n        (-a10*b11 + a12*b08 - a13*b07)*invDet,\n        (a00*b11 - a02*b08 + a03*b07)*invDet,\n        (-a30*b05 + a32*b02 - a33*b01)*invDet,\n        (a20*b05 - a22*b02 + a23*b01)*invDet,\n        (a10*b10 - a11*b08 + a13*b06)*invDet,\n        (-a00*b10 + a01*b08 - a03*b06)*invDet,\n        (a30*b04 - a31*b02 + a33*b00)*invDet,\n        (-a20*b04 + a21*b02 - a23*b00)*invDet,\n        (-a10*b09 + a11*b07 - a12*b06)*invDet,\n        (a00*b09 - a01*b07 + a02*b06)*invDet,\n        (-a30*b03 + a31*b01 - a32*b00)*invDet,\n        (a20*b03 - a21*b01 + a22*b00)*invDet };\n\n    // Create quaternion from source point\n    Quaternion quat = { source.x, source.y, source.z, 1.0f };\n\n    // Multiply quat point by unprojecte matrix\n    Quaternion qtransformed = {     // QuaternionTransform(quat, matViewProjInv)\n        matViewProjInv.m0*quat.x + matViewProjInv.m4*quat.y + matViewProjInv.m8*quat.z + matViewProjInv.m12*quat.w,\n        matViewProjInv.m1*quat.x + matViewProjInv.m5*quat.y + matViewProjInv.m9*quat.z + matViewProjInv.m13*quat.w,\n        matViewProjInv.m2*quat.x + matViewProjInv.m6*quat.y + matViewProjInv.m10*quat.z + matViewProjInv.m14*quat.w,\n        matViewProjInv.m3*quat.x + matViewProjInv.m7*quat.y + matViewProjInv.m11*quat.z + matViewProjInv.m15*quat.w };\n\n    // Normalized world points in vectors\n    result.x = qtransformed.x/qtransformed.w;\n    result.y = qtransformed.y/qtransformed.w;\n    result.z = qtransformed.z/qtransformed.w;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3ToFloatV": {
    "id": "third_party.raylib.include.raymath.Vector3ToFloatV",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1136,
    "end_line": 1145,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float3 Vector3ToFloatV(Vector3 v)\n{\n    float3 buffer = { 0 };\n\n    buffer.v[0] = v.x;\n    buffer.v[1] = v.y;\n    buffer.v[2] = v.z;\n\n    return buffer;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Invert": {
    "id": "third_party.raylib.include.raymath.Vector3Invert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1148,
    "end_line": 1153,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3Invert(Vector3 v)\n{\n    Vector3 result = { 1.0f/v.x, 1.0f/v.y, 1.0f/v.z };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Clamp": {
    "id": "third_party.raylib.include.raymath.Vector3Clamp",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1157,
    "end_line": 1166,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3Clamp(Vector3 v, Vector3 min, Vector3 max)\n{\n    Vector3 result = { 0 };\n\n    result.x = fminf(max.x, fmaxf(min.x, v.x));\n    result.y = fminf(max.y, fmaxf(min.y, v.y));\n    result.z = fminf(max.z, fmaxf(min.z, v.z));\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3ClampValue": {
    "id": "third_party.raylib.include.raymath.Vector3ClampValue",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1169,
    "end_line": 1194,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3ClampValue(Vector3 v, float min, float max)\n{\n    Vector3 result = v;\n\n    float length = (v.x*v.x) + (v.y*v.y) + (v.z*v.z);\n    if (length > 0.0f)\n    {\n        length = sqrtf(length);\n\n        float scale = 1;    // By default, 1 as the neutral element.\n        if (length < min)\n        {\n            scale = min/length;\n        }\n        else if (length > max)\n        {\n            scale = max/length;\n        }\n\n        result.x = v.x*scale;\n        result.y = v.y*scale;\n        result.z = v.z*scale;\n    }\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Equals": {
    "id": "third_party.raylib.include.raymath.Vector3Equals",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1197,
    "end_line": 1208,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI int Vector3Equals(Vector3 p, Vector3 q)\n{\n#if !defined(EPSILON)\n    #define EPSILON 0.000001f\n#endif\n\n    int result = ((fabsf(p.x - q.x)) <= (EPSILON*fmaxf(1.0f, fmaxf(fabsf(p.x), fabsf(q.x))))) &&\n                 ((fabsf(p.y - q.y)) <= (EPSILON*fmaxf(1.0f, fmaxf(fabsf(p.y), fabsf(q.y))))) &&\n                 ((fabsf(p.z - q.z)) <= (EPSILON*fmaxf(1.0f, fmaxf(fabsf(p.z), fabsf(q.z)))));\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector3Refract": {
    "id": "third_party.raylib.include.raymath.Vector3Refract",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1215,
    "end_line": 1233,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 Vector3Refract(Vector3 v, Vector3 n, float r)\n{\n    Vector3 result = { 0 };\n\n    float dot = v.x*n.x + v.y*n.y + v.z*n.z;\n    float d = 1.0f - r*r*(1.0f - dot*dot);\n\n    if (d >= 0.0f)\n    {\n        d = sqrtf(d);\n        v.x = r*v.x - (r*dot + d)*n.x;\n        v.y = r*v.y - (r*dot + d)*n.y;\n        v.z = r*v.z - (r*dot + d)*n.z;\n\n        result = v;\n    }\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector4Zero": {
    "id": "third_party.raylib.include.raymath.Vector4Zero",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1240,
    "end_line": 1244,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector4 Vector4Zero(void)\n{\n    Vector4 result = { 0.0f, 0.0f, 0.0f, 0.0f };\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector4One": {
    "id": "third_party.raylib.include.raymath.Vector4One",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1246,
    "end_line": 1250,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector4 Vector4One(void)\n{\n    Vector4 result = { 1.0f, 1.0f, 1.0f, 1.0f };\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector4Add": {
    "id": "third_party.raylib.include.raymath.Vector4Add",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1252,
    "end_line": 1261,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector4 Vector4Add(Vector4 v1, Vector4 v2)\n{\n    Vector4 result = {\n        v1.x + v2.x,\n        v1.y + v2.y,\n        v1.z + v2.z,\n        v1.w + v2.w\n    };\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector4AddValue": {
    "id": "third_party.raylib.include.raymath.Vector4AddValue",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1263,
    "end_line": 1272,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector4 Vector4AddValue(Vector4 v, float add)\n{\n    Vector4 result = {\n        v.x + add,\n        v.y + add,\n        v.z + add,\n        v.w + add\n    };\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector4Subtract": {
    "id": "third_party.raylib.include.raymath.Vector4Subtract",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1274,
    "end_line": 1283,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector4 Vector4Subtract(Vector4 v1, Vector4 v2)\n{\n    Vector4 result = {\n        v1.x - v2.x,\n        v1.y - v2.y,\n        v1.z - v2.z,\n        v1.w - v2.w\n    };\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector4SubtractValue": {
    "id": "third_party.raylib.include.raymath.Vector4SubtractValue",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1285,
    "end_line": 1294,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector4 Vector4SubtractValue(Vector4 v, float add)\n{\n    Vector4 result = {\n        v.x - add,\n        v.y - add,\n        v.z - add,\n        v.w - add\n    };\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector4Length": {
    "id": "third_party.raylib.include.raymath.Vector4Length",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1296,
    "end_line": 1300,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float Vector4Length(Vector4 v)\n{\n    float result = sqrtf((v.x*v.x) + (v.y*v.y) + (v.z*v.z) + (v.w*v.w));\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector4LengthSqr": {
    "id": "third_party.raylib.include.raymath.Vector4LengthSqr",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1302,
    "end_line": 1306,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float Vector4LengthSqr(Vector4 v)\n{\n    float result = (v.x*v.x) + (v.y*v.y) + (v.z*v.z) + (v.w*v.w);\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector4DotProduct": {
    "id": "third_party.raylib.include.raymath.Vector4DotProduct",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1308,
    "end_line": 1312,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float Vector4DotProduct(Vector4 v1, Vector4 v2)\n{\n    float result = (v1.x*v2.x + v1.y*v2.y + v1.z*v2.z + v1.w*v2.w);\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector4Distance": {
    "id": "third_party.raylib.include.raymath.Vector4Distance",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1315,
    "end_line": 1321,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float Vector4Distance(Vector4 v1, Vector4 v2)\n{\n    float result = sqrtf(\n        (v1.x - v2.x)*(v1.x - v2.x) + (v1.y - v2.y)*(v1.y - v2.y) +\n        (v1.z - v2.z)*(v1.z - v2.z) + (v1.w - v2.w)*(v1.w - v2.w));\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector4DistanceSqr": {
    "id": "third_party.raylib.include.raymath.Vector4DistanceSqr",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1324,
    "end_line": 1331,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float Vector4DistanceSqr(Vector4 v1, Vector4 v2)\n{\n    float result =\n        (v1.x - v2.x)*(v1.x - v2.x) + (v1.y - v2.y)*(v1.y - v2.y) +\n        (v1.z - v2.z)*(v1.z - v2.z) + (v1.w - v2.w)*(v1.w - v2.w);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector4Scale": {
    "id": "third_party.raylib.include.raymath.Vector4Scale",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1333,
    "end_line": 1337,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector4 Vector4Scale(Vector4 v, float scale)\n{\n    Vector4 result = { v.x*scale, v.y*scale, v.z*scale, v.w*scale };\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector4Multiply": {
    "id": "third_party.raylib.include.raymath.Vector4Multiply",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1340,
    "end_line": 1344,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector4 Vector4Multiply(Vector4 v1, Vector4 v2)\n{\n    Vector4 result = { v1.x*v2.x, v1.y*v2.y, v1.z*v2.z, v1.w*v2.w };\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector4Negate": {
    "id": "third_party.raylib.include.raymath.Vector4Negate",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1347,
    "end_line": 1351,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector4 Vector4Negate(Vector4 v)\n{\n    Vector4 result = { -v.x, -v.y, -v.z, -v.w };\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector4Divide": {
    "id": "third_party.raylib.include.raymath.Vector4Divide",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1354,
    "end_line": 1358,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector4 Vector4Divide(Vector4 v1, Vector4 v2)\n{\n    Vector4 result = { v1.x/v2.x, v1.y/v2.y, v1.z/v2.z, v1.w/v2.w };\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector4Normalize": {
    "id": "third_party.raylib.include.raymath.Vector4Normalize",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1361,
    "end_line": 1376,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector4 Vector4Normalize(Vector4 v)\n{\n    Vector4 result = { 0 };\n    float length = sqrtf((v.x*v.x) + (v.y*v.y) + (v.z*v.z) + (v.w*v.w));\n\n    if (length > 0)\n    {\n        float ilength = 1.0f/length;\n        result.x = v.x*ilength;\n        result.y = v.y*ilength;\n        result.z = v.z*ilength;\n        result.w = v.w*ilength;\n    }\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector4Min": {
    "id": "third_party.raylib.include.raymath.Vector4Min",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1379,
    "end_line": 1389,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector4 Vector4Min(Vector4 v1, Vector4 v2)\n{\n    Vector4 result = { 0 };\n\n    result.x = fminf(v1.x, v2.x);\n    result.y = fminf(v1.y, v2.y);\n    result.z = fminf(v1.z, v2.z);\n    result.w = fminf(v1.w, v2.w);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector4Max": {
    "id": "third_party.raylib.include.raymath.Vector4Max",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1392,
    "end_line": 1402,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector4 Vector4Max(Vector4 v1, Vector4 v2)\n{\n    Vector4 result = { 0 };\n\n    result.x = fmaxf(v1.x, v2.x);\n    result.y = fmaxf(v1.y, v2.y);\n    result.z = fmaxf(v1.z, v2.z);\n    result.w = fmaxf(v1.w, v2.w);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector4Lerp": {
    "id": "third_party.raylib.include.raymath.Vector4Lerp",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1405,
    "end_line": 1415,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector4 Vector4Lerp(Vector4 v1, Vector4 v2, float amount)\n{\n    Vector4 result = { 0 };\n\n    result.x = v1.x + amount*(v2.x - v1.x);\n    result.y = v1.y + amount*(v2.y - v1.y);\n    result.z = v1.z + amount*(v2.z - v1.z);\n    result.w = v1.w + amount*(v2.w - v1.w);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector4MoveTowards": {
    "id": "third_party.raylib.include.raymath.Vector4MoveTowards",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1418,
    "end_line": 1438,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector4 Vector4MoveTowards(Vector4 v, Vector4 target, float maxDistance)\n{\n    Vector4 result = { 0 };\n\n    float dx = target.x - v.x;\n    float dy = target.y - v.y;\n    float dz = target.z - v.z;\n    float dw = target.w - v.w;\n    float value = (dx*dx) + (dy*dy) + (dz*dz) + (dw*dw);\n\n    if ((value == 0) || ((maxDistance >= 0) && (value <= maxDistance*maxDistance))) return target;\n\n    float dist = sqrtf(value);\n\n    result.x = v.x + dx/dist*maxDistance;\n    result.y = v.y + dy/dist*maxDistance;\n    result.z = v.z + dz/dist*maxDistance;\n    result.w = v.w + dw/dist*maxDistance;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector4Invert": {
    "id": "third_party.raylib.include.raymath.Vector4Invert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1441,
    "end_line": 1445,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector4 Vector4Invert(Vector4 v)\n{\n    Vector4 result = { 1.0f/v.x, 1.0f/v.y, 1.0f/v.z, 1.0f/v.w };\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.Vector4Equals": {
    "id": "third_party.raylib.include.raymath.Vector4Equals",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1448,
    "end_line": 1459,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI int Vector4Equals(Vector4 p, Vector4 q)\n{\n#if !defined(EPSILON)\n    #define EPSILON 0.000001f\n#endif\n\n    int result = ((fabsf(p.x - q.x)) <= (EPSILON*fmaxf(1.0f, fmaxf(fabsf(p.x), fabsf(q.x))))) &&\n                  ((fabsf(p.y - q.y)) <= (EPSILON*fmaxf(1.0f, fmaxf(fabsf(p.y), fabsf(q.y))))) &&\n                  ((fabsf(p.z - q.z)) <= (EPSILON*fmaxf(1.0f, fmaxf(fabsf(p.z), fabsf(q.z))))) &&\n                  ((fabsf(p.w - q.w)) <= (EPSILON*fmaxf(1.0f, fmaxf(fabsf(p.w), fabsf(q.w)))));\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.MatrixDeterminant": {
    "id": "third_party.raylib.include.raymath.MatrixDeterminant",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1467,
    "end_line": 1485,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float MatrixDeterminant(Matrix mat)\n{\n    float result = 0.0f;\n\n    // Cache the matrix values (speed optimization)\n    float a00 = mat.m0, a01 = mat.m1, a02 = mat.m2, a03 = mat.m3;\n    float a10 = mat.m4, a11 = mat.m5, a12 = mat.m6, a13 = mat.m7;\n    float a20 = mat.m8, a21 = mat.m9, a22 = mat.m10, a23 = mat.m11;\n    float a30 = mat.m12, a31 = mat.m13, a32 = mat.m14, a33 = mat.m15;\n\n    result = a30*a21*a12*a03 - a20*a31*a12*a03 - a30*a11*a22*a03 + a10*a31*a22*a03 +\n             a20*a11*a32*a03 - a10*a21*a32*a03 - a30*a21*a02*a13 + a20*a31*a02*a13 +\n             a30*a01*a22*a13 - a00*a31*a22*a13 - a20*a01*a32*a13 + a00*a21*a32*a13 +\n             a30*a11*a02*a23 - a10*a31*a02*a23 - a30*a01*a12*a23 + a00*a31*a12*a23 +\n             a10*a01*a32*a23 - a00*a11*a32*a23 - a20*a11*a02*a33 + a10*a21*a02*a33 +\n             a20*a01*a12*a33 - a00*a21*a12*a33 - a10*a01*a22*a33 + a00*a11*a22*a33;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.MatrixTrace": {
    "id": "third_party.raylib.include.raymath.MatrixTrace",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1488,
    "end_line": 1493,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float MatrixTrace(Matrix mat)\n{\n    float result = (mat.m0 + mat.m5 + mat.m10 + mat.m15);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.MatrixTranspose": {
    "id": "third_party.raylib.include.raymath.MatrixTranspose",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1496,
    "end_line": 1518,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Matrix MatrixTranspose(Matrix mat)\n{\n    Matrix result = { 0 };\n\n    result.m0 = mat.m0;\n    result.m1 = mat.m4;\n    result.m2 = mat.m8;\n    result.m3 = mat.m12;\n    result.m4 = mat.m1;\n    result.m5 = mat.m5;\n    result.m6 = mat.m9;\n    result.m7 = mat.m13;\n    result.m8 = mat.m2;\n    result.m9 = mat.m6;\n    result.m10 = mat.m10;\n    result.m11 = mat.m14;\n    result.m12 = mat.m3;\n    result.m13 = mat.m7;\n    result.m14 = mat.m11;\n    result.m15 = mat.m15;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.MatrixInvert": {
    "id": "third_party.raylib.include.raymath.MatrixInvert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1521,
    "end_line": 1565,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Matrix MatrixInvert(Matrix mat)\n{\n    Matrix result = { 0 };\n\n    // Cache the matrix values (speed optimization)\n    float a00 = mat.m0, a01 = mat.m1, a02 = mat.m2, a03 = mat.m3;\n    float a10 = mat.m4, a11 = mat.m5, a12 = mat.m6, a13 = mat.m7;\n    float a20 = mat.m8, a21 = mat.m9, a22 = mat.m10, a23 = mat.m11;\n    float a30 = mat.m12, a31 = mat.m13, a32 = mat.m14, a33 = mat.m15;\n\n    float b00 = a00*a11 - a01*a10;\n    float b01 = a00*a12 - a02*a10;\n    float b02 = a00*a13 - a03*a10;\n    float b03 = a01*a12 - a02*a11;\n    float b04 = a01*a13 - a03*a11;\n    float b05 = a02*a13 - a03*a12;\n    float b06 = a20*a31 - a21*a30;\n    float b07 = a20*a32 - a22*a30;\n    float b08 = a20*a33 - a23*a30;\n    float b09 = a21*a32 - a22*a31;\n    float b10 = a21*a33 - a23*a31;\n    float b11 = a22*a33 - a23*a32;\n\n    // Calculate the invert determinant (inlined to avoid double-caching)\n    float invDet = 1.0f/(b00*b11 - b01*b10 + b02*b09 + b03*b08 - b04*b07 + b05*b06);\n\n    result.m0 = (a11*b11 - a12*b10 + a13*b09)*invDet;\n    result.m1 = (-a01*b11 + a02*b10 - a03*b09)*invDet;\n    result.m2 = (a31*b05 - a32*b04 + a33*b03)*invDet;\n    result.m3 = (-a21*b05 + a22*b04 - a23*b03)*invDet;\n    result.m4 = (-a10*b11 + a12*b08 - a13*b07)*invDet;\n    result.m5 = (a00*b11 - a02*b08 + a03*b07)*invDet;\n    result.m6 = (-a30*b05 + a32*b02 - a33*b01)*invDet;\n    result.m7 = (a20*b05 - a22*b02 + a23*b01)*invDet;\n    result.m8 = (a10*b10 - a11*b08 + a13*b06)*invDet;\n    result.m9 = (-a00*b10 + a01*b08 - a03*b06)*invDet;\n    result.m10 = (a30*b04 - a31*b02 + a33*b00)*invDet;\n    result.m11 = (-a20*b04 + a21*b02 - a23*b00)*invDet;\n    result.m12 = (-a10*b09 + a11*b07 - a12*b06)*invDet;\n    result.m13 = (a00*b09 - a01*b07 + a02*b06)*invDet;\n    result.m14 = (-a30*b03 + a31*b01 - a32*b00)*invDet;\n    result.m15 = (a20*b03 - a21*b01 + a22*b00)*invDet;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.MatrixIdentity": {
    "id": "third_party.raylib.include.raymath.MatrixIdentity",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1568,
    "end_line": 1576,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Matrix MatrixIdentity(void)\n{\n    Matrix result = { 1.0f, 0.0f, 0.0f, 0.0f,\n                      0.0f, 1.0f, 0.0f, 0.0f,\n                      0.0f, 0.0f, 1.0f, 0.0f,\n                      0.0f, 0.0f, 0.0f, 1.0f };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.MatrixAdd": {
    "id": "third_party.raylib.include.raymath.MatrixAdd",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1579,
    "end_line": 1601,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Matrix MatrixAdd(Matrix left, Matrix right)\n{\n    Matrix result = { 0 };\n\n    result.m0 = left.m0 + right.m0;\n    result.m1 = left.m1 + right.m1;\n    result.m2 = left.m2 + right.m2;\n    result.m3 = left.m3 + right.m3;\n    result.m4 = left.m4 + right.m4;\n    result.m5 = left.m5 + right.m5;\n    result.m6 = left.m6 + right.m6;\n    result.m7 = left.m7 + right.m7;\n    result.m8 = left.m8 + right.m8;\n    result.m9 = left.m9 + right.m9;\n    result.m10 = left.m10 + right.m10;\n    result.m11 = left.m11 + right.m11;\n    result.m12 = left.m12 + right.m12;\n    result.m13 = left.m13 + right.m13;\n    result.m14 = left.m14 + right.m14;\n    result.m15 = left.m15 + right.m15;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.MatrixSubtract": {
    "id": "third_party.raylib.include.raymath.MatrixSubtract",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1604,
    "end_line": 1626,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Matrix MatrixSubtract(Matrix left, Matrix right)\n{\n    Matrix result = { 0 };\n\n    result.m0 = left.m0 - right.m0;\n    result.m1 = left.m1 - right.m1;\n    result.m2 = left.m2 - right.m2;\n    result.m3 = left.m3 - right.m3;\n    result.m4 = left.m4 - right.m4;\n    result.m5 = left.m5 - right.m5;\n    result.m6 = left.m6 - right.m6;\n    result.m7 = left.m7 - right.m7;\n    result.m8 = left.m8 - right.m8;\n    result.m9 = left.m9 - right.m9;\n    result.m10 = left.m10 - right.m10;\n    result.m11 = left.m11 - right.m11;\n    result.m12 = left.m12 - right.m12;\n    result.m13 = left.m13 - right.m13;\n    result.m14 = left.m14 - right.m14;\n    result.m15 = left.m15 - right.m15;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.MatrixMultiply": {
    "id": "third_party.raylib.include.raymath.MatrixMultiply",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1630,
    "end_line": 1652,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Matrix MatrixMultiply(Matrix left, Matrix right)\n{\n    Matrix result = { 0 };\n\n    result.m0 = left.m0*right.m0 + left.m1*right.m4 + left.m2*right.m8 + left.m3*right.m12;\n    result.m1 = left.m0*right.m1 + left.m1*right.m5 + left.m2*right.m9 + left.m3*right.m13;\n    result.m2 = left.m0*right.m2 + left.m1*right.m6 + left.m2*right.m10 + left.m3*right.m14;\n    result.m3 = left.m0*right.m3 + left.m1*right.m7 + left.m2*right.m11 + left.m3*right.m15;\n    result.m4 = left.m4*right.m0 + left.m5*right.m4 + left.m6*right.m8 + left.m7*right.m12;\n    result.m5 = left.m4*right.m1 + left.m5*right.m5 + left.m6*right.m9 + left.m7*right.m13;\n    result.m6 = left.m4*right.m2 + left.m5*right.m6 + left.m6*right.m10 + left.m7*right.m14;\n    result.m7 = left.m4*right.m3 + left.m5*right.m7 + left.m6*right.m11 + left.m7*right.m15;\n    result.m8 = left.m8*right.m0 + left.m9*right.m4 + left.m10*right.m8 + left.m11*right.m12;\n    result.m9 = left.m8*right.m1 + left.m9*right.m5 + left.m10*right.m9 + left.m11*right.m13;\n    result.m10 = left.m8*right.m2 + left.m9*right.m6 + left.m10*right.m10 + left.m11*right.m14;\n    result.m11 = left.m8*right.m3 + left.m9*right.m7 + left.m10*right.m11 + left.m11*right.m15;\n    result.m12 = left.m12*right.m0 + left.m13*right.m4 + left.m14*right.m8 + left.m15*right.m12;\n    result.m13 = left.m12*right.m1 + left.m13*right.m5 + left.m14*right.m9 + left.m15*right.m13;\n    result.m14 = left.m12*right.m2 + left.m13*right.m6 + left.m14*right.m10 + left.m15*right.m14;\n    result.m15 = left.m12*right.m3 + left.m13*right.m7 + left.m14*right.m11 + left.m15*right.m15;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.MatrixTranslate": {
    "id": "third_party.raylib.include.raymath.MatrixTranslate",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1655,
    "end_line": 1663,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Matrix MatrixTranslate(float x, float y, float z)\n{\n    Matrix result = { 1.0f, 0.0f, 0.0f, x,\n                      0.0f, 1.0f, 0.0f, y,\n                      0.0f, 0.0f, 1.0f, z,\n                      0.0f, 0.0f, 0.0f, 1.0f };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.MatrixRotate": {
    "id": "third_party.raylib.include.raymath.MatrixRotate",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1667,
    "end_line": 1708,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Matrix MatrixRotate(Vector3 axis, float angle)\n{\n    Matrix result = { 0 };\n\n    float x = axis.x, y = axis.y, z = axis.z;\n\n    float lengthSquared = x*x + y*y + z*z;\n\n    if ((lengthSquared != 1.0f) && (lengthSquared != 0.0f))\n    {\n        float ilength = 1.0f/sqrtf(lengthSquared);\n        x *= ilength;\n        y *= ilength;\n        z *= ilength;\n    }\n\n    float sinres = sinf(angle);\n    float cosres = cosf(angle);\n    float t = 1.0f - cosres;\n\n    result.m0 = x*x*t + cosres;\n    result.m1 = y*x*t + z*sinres;\n    result.m2 = z*x*t - y*sinres;\n    result.m3 = 0.0f;\n\n    result.m4 = x*y*t - z*sinres;\n    result.m5 = y*y*t + cosres;\n    result.m6 = z*y*t + x*sinres;\n    result.m7 = 0.0f;\n\n    result.m8 = x*z*t + y*sinres;\n    result.m9 = y*z*t - x*sinres;\n    result.m10 = z*z*t + cosres;\n    result.m11 = 0.0f;\n\n    result.m12 = 0.0f;\n    result.m13 = 0.0f;\n    result.m14 = 0.0f;\n    result.m15 = 1.0f;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.MatrixRotateX": {
    "id": "third_party.raylib.include.raymath.MatrixRotateX",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1712,
    "end_line": 1728,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Matrix MatrixRotateX(float angle)\n{\n    Matrix result = { 1.0f, 0.0f, 0.0f, 0.0f,\n                      0.0f, 1.0f, 0.0f, 0.0f,\n                      0.0f, 0.0f, 1.0f, 0.0f,\n                      0.0f, 0.0f, 0.0f, 1.0f }; // MatrixIdentity()\n\n    float cosres = cosf(angle);\n    float sinres = sinf(angle);\n\n    result.m5 = cosres;\n    result.m6 = sinres;\n    result.m9 = -sinres;\n    result.m10 = cosres;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.MatrixRotateY": {
    "id": "third_party.raylib.include.raymath.MatrixRotateY",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1732,
    "end_line": 1748,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Matrix MatrixRotateY(float angle)\n{\n    Matrix result = { 1.0f, 0.0f, 0.0f, 0.0f,\n                      0.0f, 1.0f, 0.0f, 0.0f,\n                      0.0f, 0.0f, 1.0f, 0.0f,\n                      0.0f, 0.0f, 0.0f, 1.0f }; // MatrixIdentity()\n\n    float cosres = cosf(angle);\n    float sinres = sinf(angle);\n\n    result.m0 = cosres;\n    result.m2 = -sinres;\n    result.m8 = sinres;\n    result.m10 = cosres;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.MatrixRotateZ": {
    "id": "third_party.raylib.include.raymath.MatrixRotateZ",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1752,
    "end_line": 1768,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Matrix MatrixRotateZ(float angle)\n{\n    Matrix result = { 1.0f, 0.0f, 0.0f, 0.0f,\n                      0.0f, 1.0f, 0.0f, 0.0f,\n                      0.0f, 0.0f, 1.0f, 0.0f,\n                      0.0f, 0.0f, 0.0f, 1.0f }; // MatrixIdentity()\n\n    float cosres = cosf(angle);\n    float sinres = sinf(angle);\n\n    result.m0 = cosres;\n    result.m1 = sinres;\n    result.m4 = -sinres;\n    result.m5 = cosres;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.MatrixRotateXYZ": {
    "id": "third_party.raylib.include.raymath.MatrixRotateXYZ",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1773,
    "end_line": 1800,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Matrix MatrixRotateXYZ(Vector3 angle)\n{\n    Matrix result = { 1.0f, 0.0f, 0.0f, 0.0f,\n                      0.0f, 1.0f, 0.0f, 0.0f,\n                      0.0f, 0.0f, 1.0f, 0.0f,\n                      0.0f, 0.0f, 0.0f, 1.0f }; // MatrixIdentity()\n\n    float cosz = cosf(-angle.z);\n    float sinz = sinf(-angle.z);\n    float cosy = cosf(-angle.y);\n    float siny = sinf(-angle.y);\n    float cosx = cosf(-angle.x);\n    float sinx = sinf(-angle.x);\n\n    result.m0 = cosz*cosy;\n    result.m1 = (cosz*siny*sinx) - (sinz*cosx);\n    result.m2 = (cosz*siny*cosx) + (sinz*sinx);\n\n    result.m4 = sinz*cosy;\n    result.m5 = (sinz*siny*sinx) + (cosz*cosx);\n    result.m6 = (sinz*siny*cosx) - (cosz*sinx);\n\n    result.m8 = -siny;\n    result.m9 = cosy*sinx;\n    result.m10= cosy*cosx;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.MatrixRotateZYX": {
    "id": "third_party.raylib.include.raymath.MatrixRotateZYX",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1804,
    "end_line": 1836,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Matrix MatrixRotateZYX(Vector3 angle)\n{\n    Matrix result = { 0 };\n\n    float cz = cosf(angle.z);\n    float sz = sinf(angle.z);\n    float cy = cosf(angle.y);\n    float sy = sinf(angle.y);\n    float cx = cosf(angle.x);\n    float sx = sinf(angle.x);\n\n    result.m0 = cz*cy;\n    result.m4 = cz*sy*sx - cx*sz;\n    result.m8 = sz*sx + cz*cx*sy;\n    result.m12 = 0;\n\n    result.m1 = cy*sz;\n    result.m5 = cz*cx + sz*sy*sx;\n    result.m9 = cx*sz*sy - cz*sx;\n    result.m13 = 0;\n\n    result.m2 = -sy;\n    result.m6 = cy*sx;\n    result.m10 = cy*cx;\n    result.m14 = 0;\n\n    result.m3 = 0;\n    result.m7 = 0;\n    result.m11 = 0;\n    result.m15 = 1;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.MatrixScale": {
    "id": "third_party.raylib.include.raymath.MatrixScale",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1839,
    "end_line": 1847,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Matrix MatrixScale(float x, float y, float z)\n{\n    Matrix result = { x, 0.0f, 0.0f, 0.0f,\n                      0.0f, y, 0.0f, 0.0f,\n                      0.0f, 0.0f, z, 0.0f,\n                      0.0f, 0.0f, 0.0f, 1.0f };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.MatrixFrustum": {
    "id": "third_party.raylib.include.raymath.MatrixFrustum",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1850,
    "end_line": 1879,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Matrix MatrixFrustum(double left, double right, double bottom, double top, double nearPlane, double farPlane)\n{\n    Matrix result = { 0 };\n\n    float rl = (float)(right - left);\n    float tb = (float)(top - bottom);\n    float fn = (float)(farPlane - nearPlane);\n\n    result.m0 = ((float)nearPlane*2.0f)/rl;\n    result.m1 = 0.0f;\n    result.m2 = 0.0f;\n    result.m3 = 0.0f;\n\n    result.m4 = 0.0f;\n    result.m5 = ((float)nearPlane*2.0f)/tb;\n    result.m6 = 0.0f;\n    result.m7 = 0.0f;\n\n    result.m8 = ((float)right + (float)left)/rl;\n    result.m9 = ((float)top + (float)bottom)/tb;\n    result.m10 = -((float)farPlane + (float)nearPlane)/fn;\n    result.m11 = -1.0f;\n\n    result.m12 = 0.0f;\n    result.m13 = 0.0f;\n    result.m14 = -((float)farPlane*(float)nearPlane*2.0f)/fn;\n    result.m15 = 0.0f;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.MatrixPerspective": {
    "id": "third_party.raylib.include.raymath.MatrixPerspective",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1883,
    "end_line": 1906,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Matrix MatrixPerspective(double fovY, double aspect, double nearPlane, double farPlane)\n{\n    Matrix result = { 0 };\n\n    double top = nearPlane*tan(fovY*0.5);\n    double bottom = -top;\n    double right = top*aspect;\n    double left = -right;\n\n    // MatrixFrustum(-right, right, -top, top, near, far);\n    float rl = (float)(right - left);\n    float tb = (float)(top - bottom);\n    float fn = (float)(farPlane - nearPlane);\n\n    result.m0 = ((float)nearPlane*2.0f)/rl;\n    result.m5 = ((float)nearPlane*2.0f)/tb;\n    result.m8 = ((float)right + (float)left)/rl;\n    result.m9 = ((float)top + (float)bottom)/tb;\n    result.m10 = -((float)farPlane + (float)nearPlane)/fn;\n    result.m11 = -1.0f;\n    result.m14 = -((float)farPlane*(float)nearPlane*2.0f)/fn;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.MatrixOrtho": {
    "id": "third_party.raylib.include.raymath.MatrixOrtho",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1909,
    "end_line": 1935,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Matrix MatrixOrtho(double left, double right, double bottom, double top, double nearPlane, double farPlane)\n{\n    Matrix result = { 0 };\n\n    float rl = (float)(right - left);\n    float tb = (float)(top - bottom);\n    float fn = (float)(farPlane - nearPlane);\n\n    result.m0 = 2.0f/rl;\n    result.m1 = 0.0f;\n    result.m2 = 0.0f;\n    result.m3 = 0.0f;\n    result.m4 = 0.0f;\n    result.m5 = 2.0f/tb;\n    result.m6 = 0.0f;\n    result.m7 = 0.0f;\n    result.m8 = 0.0f;\n    result.m9 = 0.0f;\n    result.m10 = -2.0f/fn;\n    result.m11 = 0.0f;\n    result.m12 = -((float)left + (float)right)/rl;\n    result.m13 = -((float)top + (float)bottom)/tb;\n    result.m14 = -((float)farPlane + (float)nearPlane)/fn;\n    result.m15 = 1.0f;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.MatrixLookAt": {
    "id": "third_party.raylib.include.raymath.MatrixLookAt",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1938,
    "end_line": 1990,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Matrix MatrixLookAt(Vector3 eye, Vector3 target, Vector3 up)\n{\n    Matrix result = { 0 };\n\n    float length = 0.0f;\n    float ilength = 0.0f;\n\n    // Vector3Subtract(eye, target)\n    Vector3 vz = { eye.x - target.x, eye.y - target.y, eye.z - target.z };\n\n    // Vector3Normalize(vz)\n    Vector3 v = vz;\n    length = sqrtf(v.x*v.x + v.y*v.y + v.z*v.z);\n    if (length == 0.0f) length = 1.0f;\n    ilength = 1.0f/length;\n    vz.x *= ilength;\n    vz.y *= ilength;\n    vz.z *= ilength;\n\n    // Vector3CrossProduct(up, vz)\n    Vector3 vx = { up.y*vz.z - up.z*vz.y, up.z*vz.x - up.x*vz.z, up.x*vz.y - up.y*vz.x };\n\n    // Vector3Normalize(x)\n    v = vx;\n    length = sqrtf(v.x*v.x + v.y*v.y + v.z*v.z);\n    if (length == 0.0f) length = 1.0f;\n    ilength = 1.0f/length;\n    vx.x *= ilength;\n    vx.y *= ilength;\n    vx.z *= ilength;\n\n    // Vector3CrossProduct(vz, vx)\n    Vector3 vy = { vz.y*vx.z - vz.z*vx.y, vz.z*vx.x - vz.x*vx.z, vz.x*vx.y - vz.y*vx.x };\n\n    result.m0 = vx.x;\n    result.m1 = vy.x;\n    result.m2 = vz.x;\n    result.m3 = 0.0f;\n    result.m4 = vx.y;\n    result.m5 = vy.y;\n    result.m6 = vz.y;\n    result.m7 = 0.0f;\n    result.m8 = vx.z;\n    result.m9 = vy.z;\n    result.m10 = vz.z;\n    result.m11 = 0.0f;\n    result.m12 = -(vx.x*eye.x + vx.y*eye.y + vx.z*eye.z);   // Vector3DotProduct(vx, eye)\n    result.m13 = -(vy.x*eye.x + vy.y*eye.y + vy.z*eye.z);   // Vector3DotProduct(vy, eye)\n    result.m14 = -(vz.x*eye.x + vz.y*eye.y + vz.z*eye.z);   // Vector3DotProduct(vz, eye)\n    result.m15 = 1.0f;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.MatrixToFloatV": {
    "id": "third_party.raylib.include.raymath.MatrixToFloatV",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 1993,
    "end_line": 2015,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float16 MatrixToFloatV(Matrix mat)\n{\n    float16 result = { 0 };\n\n    result.v[0] = mat.m0;\n    result.v[1] = mat.m1;\n    result.v[2] = mat.m2;\n    result.v[3] = mat.m3;\n    result.v[4] = mat.m4;\n    result.v[5] = mat.m5;\n    result.v[6] = mat.m6;\n    result.v[7] = mat.m7;\n    result.v[8] = mat.m8;\n    result.v[9] = mat.m9;\n    result.v[10] = mat.m10;\n    result.v[11] = mat.m11;\n    result.v[12] = mat.m12;\n    result.v[13] = mat.m13;\n    result.v[14] = mat.m14;\n    result.v[15] = mat.m15;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.QuaternionAdd": {
    "id": "third_party.raylib.include.raymath.QuaternionAdd",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2022,
    "end_line": 2027,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Quaternion QuaternionAdd(Quaternion q1, Quaternion q2)\n{\n    Quaternion result = {q1.x + q2.x, q1.y + q2.y, q1.z + q2.z, q1.w + q2.w};\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.QuaternionAddValue": {
    "id": "third_party.raylib.include.raymath.QuaternionAddValue",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2030,
    "end_line": 2035,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Quaternion QuaternionAddValue(Quaternion q, float add)\n{\n    Quaternion result = {q.x + add, q.y + add, q.z + add, q.w + add};\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.QuaternionSubtract": {
    "id": "third_party.raylib.include.raymath.QuaternionSubtract",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2038,
    "end_line": 2043,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Quaternion QuaternionSubtract(Quaternion q1, Quaternion q2)\n{\n    Quaternion result = {q1.x - q2.x, q1.y - q2.y, q1.z - q2.z, q1.w - q2.w};\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.QuaternionSubtractValue": {
    "id": "third_party.raylib.include.raymath.QuaternionSubtractValue",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2046,
    "end_line": 2051,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Quaternion QuaternionSubtractValue(Quaternion q, float sub)\n{\n    Quaternion result = {q.x - sub, q.y - sub, q.z - sub, q.w - sub};\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.QuaternionIdentity": {
    "id": "third_party.raylib.include.raymath.QuaternionIdentity",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2054,
    "end_line": 2059,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Quaternion QuaternionIdentity(void)\n{\n    Quaternion result = { 0.0f, 0.0f, 0.0f, 1.0f };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.QuaternionLength": {
    "id": "third_party.raylib.include.raymath.QuaternionLength",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2062,
    "end_line": 2067,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI float QuaternionLength(Quaternion q)\n{\n    float result = sqrtf(q.x*q.x + q.y*q.y + q.z*q.z + q.w*q.w);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.QuaternionNormalize": {
    "id": "third_party.raylib.include.raymath.QuaternionNormalize",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2070,
    "end_line": 2084,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Quaternion QuaternionNormalize(Quaternion q)\n{\n    Quaternion result = { 0 };\n\n    float length = sqrtf(q.x*q.x + q.y*q.y + q.z*q.z + q.w*q.w);\n    if (length == 0.0f) length = 1.0f;\n    float ilength = 1.0f/length;\n\n    result.x = q.x*ilength;\n    result.y = q.y*ilength;\n    result.z = q.z*ilength;\n    result.w = q.w*ilength;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.QuaternionInvert": {
    "id": "third_party.raylib.include.raymath.QuaternionInvert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2087,
    "end_line": 2104,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Quaternion QuaternionInvert(Quaternion q)\n{\n    Quaternion result = q;\n\n    float lengthSq = q.x*q.x + q.y*q.y + q.z*q.z + q.w*q.w;\n\n    if (lengthSq != 0.0f)\n    {\n        float invLength = 1.0f/lengthSq;\n\n        result.x *= -invLength;\n        result.y *= -invLength;\n        result.z *= -invLength;\n        result.w *= invLength;\n    }\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.QuaternionMultiply": {
    "id": "third_party.raylib.include.raymath.QuaternionMultiply",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2107,
    "end_line": 2120,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Quaternion QuaternionMultiply(Quaternion q1, Quaternion q2)\n{\n    Quaternion result = { 0 };\n\n    float qax = q1.x, qay = q1.y, qaz = q1.z, qaw = q1.w;\n    float qbx = q2.x, qby = q2.y, qbz = q2.z, qbw = q2.w;\n\n    result.x = qax*qbw + qaw*qbx + qay*qbz - qaz*qby;\n    result.y = qay*qbw + qaw*qby + qaz*qbx - qax*qbz;\n    result.z = qaz*qbw + qaw*qbz + qax*qby - qay*qbx;\n    result.w = qaw*qbw - qax*qbx - qay*qby - qaz*qbz;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.QuaternionScale": {
    "id": "third_party.raylib.include.raymath.QuaternionScale",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2123,
    "end_line": 2133,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Quaternion QuaternionScale(Quaternion q, float mul)\n{\n    Quaternion result = { 0 };\n\n    result.x = q.x*mul;\n    result.y = q.y*mul;\n    result.z = q.z*mul;\n    result.w = q.w*mul;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.QuaternionDivide": {
    "id": "third_party.raylib.include.raymath.QuaternionDivide",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2136,
    "end_line": 2141,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Quaternion QuaternionDivide(Quaternion q1, Quaternion q2)\n{\n    Quaternion result = { q1.x/q2.x, q1.y/q2.y, q1.z/q2.z, q1.w/q2.w };\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.QuaternionLerp": {
    "id": "third_party.raylib.include.raymath.QuaternionLerp",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2144,
    "end_line": 2154,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Quaternion QuaternionLerp(Quaternion q1, Quaternion q2, float amount)\n{\n    Quaternion result = { 0 };\n\n    result.x = q1.x + amount*(q2.x - q1.x);\n    result.y = q1.y + amount*(q2.y - q1.y);\n    result.z = q1.z + amount*(q2.z - q1.z);\n    result.w = q1.w + amount*(q2.w - q1.w);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.QuaternionNlerp": {
    "id": "third_party.raylib.include.raymath.QuaternionNlerp",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2157,
    "end_line": 2179,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Quaternion QuaternionNlerp(Quaternion q1, Quaternion q2, float amount)\n{\n    Quaternion result = { 0 };\n\n    // QuaternionLerp(q1, q2, amount)\n    result.x = q1.x + amount*(q2.x - q1.x);\n    result.y = q1.y + amount*(q2.y - q1.y);\n    result.z = q1.z + amount*(q2.z - q1.z);\n    result.w = q1.w + amount*(q2.w - q1.w);\n\n    // QuaternionNormalize(q);\n    Quaternion q = result;\n    float length = sqrtf(q.x*q.x + q.y*q.y + q.z*q.z + q.w*q.w);\n    if (length == 0.0f) length = 1.0f;\n    float ilength = 1.0f/length;\n\n    result.x = q.x*ilength;\n    result.y = q.y*ilength;\n    result.z = q.z*ilength;\n    result.w = q.w*ilength;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.QuaternionSlerp": {
    "id": "third_party.raylib.include.raymath.QuaternionSlerp",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2182,
    "end_line": 2225,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Quaternion QuaternionSlerp(Quaternion q1, Quaternion q2, float amount)\n{\n    Quaternion result = { 0 };\n\n#if !defined(EPSILON)\n    #define EPSILON 0.000001f\n#endif\n\n    float cosHalfTheta = q1.x*q2.x + q1.y*q2.y + q1.z*q2.z + q1.w*q2.w;\n\n    if (cosHalfTheta < 0)\n    {\n        q2.x = -q2.x; q2.y = -q2.y; q2.z = -q2.z; q2.w = -q2.w;\n        cosHalfTheta = -cosHalfTheta;\n    }\n\n    if (fabsf(cosHalfTheta) >= 1.0f) result = q1;\n    else if (cosHalfTheta > 0.95f) result = QuaternionNlerp(q1, q2, amount);\n    else\n    {\n        float halfTheta = acosf(cosHalfTheta);\n        float sinHalfTheta = sqrtf(1.0f - cosHalfTheta*cosHalfTheta);\n\n        if (fabsf(sinHalfTheta) < EPSILON)\n        {\n            result.x = (q1.x*0.5f + q2.x*0.5f);\n            result.y = (q1.y*0.5f + q2.y*0.5f);\n            result.z = (q1.z*0.5f + q2.z*0.5f);\n            result.w = (q1.w*0.5f + q2.w*0.5f);\n        }\n        else\n        {\n            float ratioA = sinf((1 - amount)*halfTheta)/sinHalfTheta;\n            float ratioB = sinf(amount*halfTheta)/sinHalfTheta;\n\n            result.x = (q1.x*ratioA + q2.x*ratioB);\n            result.y = (q1.y*ratioA + q2.y*ratioB);\n            result.z = (q1.z*ratioA + q2.z*ratioB);\n            result.w = (q1.w*ratioA + q2.w*ratioB);\n        }\n    }\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.QuaternionCubicHermiteSpline": {
    "id": "third_party.raylib.include.raymath.QuaternionCubicHermiteSpline",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2229,
    "end_line": 2251,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Quaternion QuaternionCubicHermiteSpline(Quaternion q1, Quaternion outTangent1, Quaternion q2, Quaternion inTangent2, float t)\n{\n    float t2 = t*t;\n    float t3 = t2*t;\n    float h00 = 2*t3 - 3*t2 + 1;\n    float h10 = t3 - 2*t2 + t;\n    float h01 = -2*t3 + 3*t2;\n    float h11 = t3 - t2;\n\n    Quaternion p0 = QuaternionScale(q1, h00);\n    Quaternion m0 = QuaternionScale(outTangent1, h10);\n    Quaternion p1 = QuaternionScale(q2, h01);\n    Quaternion m1 = QuaternionScale(inTangent2, h11);\n\n    Quaternion result = { 0 };\n\n    result = QuaternionAdd(p0, m0);\n    result = QuaternionAdd(result, p1);\n    result = QuaternionAdd(result, m1);\n    result = QuaternionNormalize(result);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.QuaternionFromVector3ToVector3": {
    "id": "third_party.raylib.include.raymath.QuaternionFromVector3ToVector3",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2254,
    "end_line": 2279,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Quaternion QuaternionFromVector3ToVector3(Vector3 from, Vector3 to)\n{\n    Quaternion result = { 0 };\n\n    float cos2Theta = (from.x*to.x + from.y*to.y + from.z*to.z);    // Vector3DotProduct(from, to)\n    Vector3 cross = { from.y*to.z - from.z*to.y, from.z*to.x - from.x*to.z, from.x*to.y - from.y*to.x }; // Vector3CrossProduct(from, to)\n\n    result.x = cross.x;\n    result.y = cross.y;\n    result.z = cross.z;\n    result.w = 1.0f + cos2Theta;\n\n    // QuaternionNormalize(q);\n    // NOTE: Normalize to essentially nlerp the original and identity to 0.5\n    Quaternion q = result;\n    float length = sqrtf(q.x*q.x + q.y*q.y + q.z*q.z + q.w*q.w);\n    if (length == 0.0f) length = 1.0f;\n    float ilength = 1.0f/length;\n\n    result.x = q.x*ilength;\n    result.y = q.y*ilength;\n    result.z = q.z*ilength;\n    result.w = q.w*ilength;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.QuaternionFromMatrix": {
    "id": "third_party.raylib.include.raymath.QuaternionFromMatrix",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2282,
    "end_line": 2343,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Quaternion QuaternionFromMatrix(Matrix mat)\n{\n    Quaternion result = { 0 };\n\n    float fourWSquaredMinus1 = mat.m0  + mat.m5 + mat.m10;\n    float fourXSquaredMinus1 = mat.m0  - mat.m5 - mat.m10;\n    float fourYSquaredMinus1 = mat.m5  - mat.m0 - mat.m10;\n    float fourZSquaredMinus1 = mat.m10 - mat.m0 - mat.m5;\n\n    int biggestIndex = 0;\n    float fourBiggestSquaredMinus1 = fourWSquaredMinus1;\n    if (fourXSquaredMinus1 > fourBiggestSquaredMinus1)\n    {\n        fourBiggestSquaredMinus1 = fourXSquaredMinus1;\n        biggestIndex = 1;\n    }\n\n    if (fourYSquaredMinus1 > fourBiggestSquaredMinus1)\n    {\n        fourBiggestSquaredMinus1 = fourYSquaredMinus1;\n        biggestIndex = 2;\n    }\n\n    if (fourZSquaredMinus1 > fourBiggestSquaredMinus1)\n    {\n        fourBiggestSquaredMinus1 = fourZSquaredMinus1;\n        biggestIndex = 3;\n    }\n\n    float biggestVal = sqrtf(fourBiggestSquaredMinus1 + 1.0f)*0.5f;\n    float mult = 0.25f/biggestVal;\n\n    switch (biggestIndex)\n    {\n        case 0:\n            result.w = biggestVal;\n            result.x = (mat.m6 - mat.m9)*mult;\n            result.y = (mat.m8 - mat.m2)*mult;\n            result.z = (mat.m1 - mat.m4)*mult;\n            break;\n        case 1:\n            result.x = biggestVal;\n            result.w = (mat.m6 - mat.m9)*mult;\n            result.y = (mat.m1 + mat.m4)*mult;\n            result.z = (mat.m8 + mat.m2)*mult;\n            break;\n        case 2:\n            result.y = biggestVal;\n            result.w = (mat.m8 - mat.m2)*mult;\n            result.x = (mat.m1 + mat.m4)*mult;\n            result.z = (mat.m6 + mat.m9)*mult;\n            break;\n        case 3:\n            result.z = biggestVal;\n            result.w = (mat.m1 - mat.m4)*mult;\n            result.x = (mat.m8 + mat.m2)*mult;\n            result.y = (mat.m6 + mat.m9)*mult;\n            break;\n    }\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.QuaternionToMatrix": {
    "id": "third_party.raylib.include.raymath.QuaternionToMatrix",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2346,
    "end_line": 2376,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Matrix QuaternionToMatrix(Quaternion q)\n{\n    Matrix result = { 1.0f, 0.0f, 0.0f, 0.0f,\n                      0.0f, 1.0f, 0.0f, 0.0f,\n                      0.0f, 0.0f, 1.0f, 0.0f,\n                      0.0f, 0.0f, 0.0f, 1.0f }; // MatrixIdentity()\n\n    float a2 = q.x*q.x;\n    float b2 = q.y*q.y;\n    float c2 = q.z*q.z;\n    float ac = q.x*q.z;\n    float ab = q.x*q.y;\n    float bc = q.y*q.z;\n    float ad = q.w*q.x;\n    float bd = q.w*q.y;\n    float cd = q.w*q.z;\n\n    result.m0 = 1 - 2*(b2 + c2);\n    result.m1 = 2*(ab + cd);\n    result.m2 = 2*(ac - bd);\n\n    result.m4 = 2*(ab - cd);\n    result.m5 = 1 - 2*(a2 + c2);\n    result.m6 = 2*(bc + ad);\n\n    result.m8 = 2*(ac + bd);\n    result.m9 = 2*(bc - ad);\n    result.m10 = 1 - 2*(a2 + b2);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.QuaternionFromAxisAngle": {
    "id": "third_party.raylib.include.raymath.QuaternionFromAxisAngle",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2380,
    "end_line": 2421,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Quaternion QuaternionFromAxisAngle(Vector3 axis, float angle)\n{\n    Quaternion result = { 0.0f, 0.0f, 0.0f, 1.0f };\n\n    float axisLength = sqrtf(axis.x*axis.x + axis.y*axis.y + axis.z*axis.z);\n\n    if (axisLength != 0.0f)\n    {\n        angle *= 0.5f;\n\n        float length = 0.0f;\n        float ilength = 0.0f;\n\n        // Vector3Normalize(axis)\n        length = axisLength;\n        if (length == 0.0f) length = 1.0f;\n        ilength = 1.0f/length;\n        axis.x *= ilength;\n        axis.y *= ilength;\n        axis.z *= ilength;\n\n        float sinres = sinf(angle);\n        float cosres = cosf(angle);\n\n        result.x = axis.x*sinres;\n        result.y = axis.y*sinres;\n        result.z = axis.z*sinres;\n        result.w = cosres;\n\n        // QuaternionNormalize(q);\n        Quaternion q = result;\n        length = sqrtf(q.x*q.x + q.y*q.y + q.z*q.z + q.w*q.w);\n        if (length == 0.0f) length = 1.0f;\n        ilength = 1.0f/length;\n        result.x = q.x*ilength;\n        result.y = q.y*ilength;\n        result.z = q.z*ilength;\n        result.w = q.w*ilength;\n    }\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.QuaternionToAxisAngle": {
    "id": "third_party.raylib.include.raymath.QuaternionToAxisAngle",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2424,
    "end_line": 2458,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI void QuaternionToAxisAngle(Quaternion q, Vector3 *outAxis, float *outAngle)\n{\n    if (fabsf(q.w) > 1.0f)\n    {\n        // QuaternionNormalize(q);\n        float length = sqrtf(q.x*q.x + q.y*q.y + q.z*q.z + q.w*q.w);\n        if (length == 0.0f) length = 1.0f;\n        float ilength = 1.0f/length;\n\n        q.x = q.x*ilength;\n        q.y = q.y*ilength;\n        q.z = q.z*ilength;\n        q.w = q.w*ilength;\n    }\n\n    Vector3 resAxis = { 0.0f, 0.0f, 0.0f };\n    float resAngle = 2.0f*acosf(q.w);\n    float den = sqrtf(1.0f - q.w*q.w);\n\n    if (den > EPSILON)\n    {\n        resAxis.x = q.x/den;\n        resAxis.y = q.y/den;\n        resAxis.z = q.z/den;\n    }\n    else\n    {\n        // This occurs when the angle is zero.\n        // Not a problem: just set an arbitrary normalized axis.\n        resAxis.x = 1.0f;\n    }\n\n    *outAxis = resAxis;\n    *outAngle = resAngle;\n}\n"
  },
  "third_party.raylib.include.raymath.QuaternionFromEuler": {
    "id": "third_party.raylib.include.raymath.QuaternionFromEuler",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2462,
    "end_line": 2479,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Quaternion QuaternionFromEuler(float pitch, float yaw, float roll)\n{\n    Quaternion result = { 0 };\n\n    float x0 = cosf(pitch*0.5f);\n    float x1 = sinf(pitch*0.5f);\n    float y0 = cosf(yaw*0.5f);\n    float y1 = sinf(yaw*0.5f);\n    float z0 = cosf(roll*0.5f);\n    float z1 = sinf(roll*0.5f);\n\n    result.x = x1*y0*z0 - x0*y1*z1;\n    result.y = x0*y1*z0 + x1*y0*z1;\n    result.z = x0*y0*z1 - x1*y1*z0;\n    result.w = x0*y0*z0 + x1*y1*z1;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.QuaternionToEuler": {
    "id": "third_party.raylib.include.raymath.QuaternionToEuler",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2483,
    "end_line": 2504,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Vector3 QuaternionToEuler(Quaternion q)\n{\n    Vector3 result = { 0 };\n\n    // Roll (x-axis rotation)\n    float x0 = 2.0f*(q.w*q.x + q.y*q.z);\n    float x1 = 1.0f - 2.0f*(q.x*q.x + q.y*q.y);\n    result.x = atan2f(x0, x1);\n\n    // Pitch (y-axis rotation)\n    float y0 = 2.0f*(q.w*q.y - q.z*q.x);\n    y0 = y0 > 1.0f ? 1.0f : y0;\n    y0 = y0 < -1.0f ? -1.0f : y0;\n    result.y = asinf(y0);\n\n    // Yaw (z-axis rotation)\n    float z0 = 2.0f*(q.w*q.z + q.x*q.y);\n    float z1 = 1.0f - 2.0f*(q.y*q.y + q.z*q.z);\n    result.z = atan2f(z0, z1);\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.QuaternionTransform": {
    "id": "third_party.raylib.include.raymath.QuaternionTransform",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2507,
    "end_line": 2517,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI Quaternion QuaternionTransform(Quaternion q, Matrix mat)\n{\n    Quaternion result = { 0 };\n\n    result.x = mat.m0*q.x + mat.m4*q.y + mat.m8*q.z + mat.m12*q.w;\n    result.y = mat.m1*q.x + mat.m5*q.y + mat.m9*q.z + mat.m13*q.w;\n    result.z = mat.m2*q.x + mat.m6*q.y + mat.m10*q.z + mat.m14*q.w;\n    result.w = mat.m3*q.x + mat.m7*q.y + mat.m11*q.z + mat.m15*q.w;\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.QuaternionEquals": {
    "id": "third_party.raylib.include.raymath.QuaternionEquals",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2520,
    "end_line": 2536,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI int QuaternionEquals(Quaternion p, Quaternion q)\n{\n#if !defined(EPSILON)\n    #define EPSILON 0.000001f\n#endif\n\n    int result = (((fabsf(p.x - q.x)) <= (EPSILON*fmaxf(1.0f, fmaxf(fabsf(p.x), fabsf(q.x))))) &&\n                  ((fabsf(p.y - q.y)) <= (EPSILON*fmaxf(1.0f, fmaxf(fabsf(p.y), fabsf(q.y))))) &&\n                  ((fabsf(p.z - q.z)) <= (EPSILON*fmaxf(1.0f, fmaxf(fabsf(p.z), fabsf(q.z))))) &&\n                  ((fabsf(p.w - q.w)) <= (EPSILON*fmaxf(1.0f, fmaxf(fabsf(p.w), fabsf(q.w)))))) ||\n                 (((fabsf(p.x + q.x)) <= (EPSILON*fmaxf(1.0f, fmaxf(fabsf(p.x), fabsf(q.x))))) &&\n                  ((fabsf(p.y + q.y)) <= (EPSILON*fmaxf(1.0f, fmaxf(fabsf(p.y), fabsf(q.y))))) &&\n                  ((fabsf(p.z + q.z)) <= (EPSILON*fmaxf(1.0f, fmaxf(fabsf(p.z), fabsf(q.z))))) &&\n                  ((fabsf(p.w + q.w)) <= (EPSILON*fmaxf(1.0f, fmaxf(fabsf(p.w), fabsf(q.w))))));\n\n    return result;\n}\n"
  },
  "third_party.raylib.include.raymath.MatrixDecompose": {
    "id": "third_party.raylib.include.raymath.MatrixDecompose",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2539,
    "end_line": 2597,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "RMAPI void MatrixDecompose(Matrix mat, Vector3 *translation, Quaternion *rotation, Vector3 *scale)\n{\n    // Extract translation.\n    translation->x = mat.m12;\n    translation->y = mat.m13;\n    translation->z = mat.m14;\n\n    // Extract upper-left for determinant computation\n    const float a = mat.m0;\n    const float b = mat.m4;\n    const float c = mat.m8;\n    const float d = mat.m1;\n    const float e = mat.m5;\n    const float f = mat.m9;\n    const float g = mat.m2;\n    const float h = mat.m6;\n    const float i = mat.m10;\n    const float A = e*i - f*h;\n    const float B = f*g - d*i;\n    const float C = d*h - e*g;\n\n    // Extract scale\n    const float det = a*A + b*B + c*C;\n    Vector3 abc = { a, b, c };\n    Vector3 def = { d, e, f };\n    Vector3 ghi = { g, h, i };\n\n    float scalex = Vector3Length(abc);\n    float scaley = Vector3Length(def);\n    float scalez = Vector3Length(ghi);\n    Vector3 s = { scalex, scaley, scalez };\n\n    if (det < 0) s = Vector3Negate(s);\n\n    *scale = s;\n\n    // Remove scale from the matrix if it is not close to zero\n    Matrix clone = mat;\n    if (!FloatEquals(det, 0))\n    {\n        clone.m0 /= s.x;\n        clone.m4 /= s.x;\n        clone.m8 /= s.x;\n        clone.m1 /= s.y;\n        clone.m5 /= s.y;\n        clone.m9 /= s.y;\n        clone.m2 /= s.z;\n        clone.m6 /= s.z;\n        clone.m10 /= s.z;\n\n        // Extract rotation\n        *rotation = QuaternionFromMatrix(clone);\n    }\n    else\n    {\n        // Set to identity if close to zero\n        *rotation = QuaternionIdentity();\n    }\n}\n"
  },
  "third_party.raylib.include.raymath.operator+": {
    "id": "third_party.raylib.include.raymath.operator+",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2914,
    "end_line": 2917,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "inline Matrix operator + (const Matrix& lhs, const Matrix& rhs)\n{\n    return MatrixAdd(lhs, rhs);\n}\n"
  },
  "third_party.raylib.include.raymath.operator+=": {
    "id": "third_party.raylib.include.raymath.operator+=",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2919,
    "end_line": 2923,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "inline const Matrix& operator += (Matrix& lhs, const Matrix& rhs)\n{\n    lhs = MatrixAdd(lhs, rhs);\n    return lhs;\n}\n"
  },
  "third_party.raylib.include.raymath.operator-": {
    "id": "third_party.raylib.include.raymath.operator-",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2925,
    "end_line": 2928,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "inline Matrix operator - (const Matrix& lhs, const Matrix& rhs)\n{\n    return MatrixSubtract(lhs, rhs);\n}\n"
  },
  "third_party.raylib.include.raymath.operator-=": {
    "id": "third_party.raylib.include.raymath.operator-=",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2930,
    "end_line": 2934,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "inline const Matrix& operator -= (Matrix& lhs, const Matrix& rhs)\n{\n    lhs = MatrixSubtract(lhs, rhs);\n    return lhs;\n}\n"
  },
  "third_party.raylib.include.raymath.operator*": {
    "id": "third_party.raylib.include.raymath.operator*",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2936,
    "end_line": 2939,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "inline Matrix operator * (const Matrix& lhs, const Matrix& rhs)\n{\n    return MatrixMultiply(lhs, rhs);\n}\n"
  },
  "third_party.raylib.include.raymath.operator*=": {
    "id": "third_party.raylib.include.raymath.operator*=",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2941,
    "end_line": 2945,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "inline const Matrix& operator *= (Matrix& lhs, const Matrix& rhs)\n{\n    lhs = MatrixMultiply(lhs, rhs);\n    return lhs;\n}\n"
  },
  "third_party.raylib.include.raymath.operator/": {
    "id": "third_party.raylib.include.raymath.operator/",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2854,
    "end_line": 2857,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "inline Vector4 operator / (const Vector4& lhs, const Vector4& rhs)\n{\n    return Vector4Divide(lhs, rhs);\n}\n"
  },
  "third_party.raylib.include.raymath.operator/=": {
    "id": "third_party.raylib.include.raymath.operator/=",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2859,
    "end_line": 2863,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "inline const Vector4& operator /= (Vector4& lhs, const Vector4& rhs)\n{\n    lhs = Vector4Divide(lhs, rhs);\n    return lhs;\n}\n"
  },
  "third_party.raylib.include.raymath.operator==": {
    "id": "third_party.raylib.include.raymath.operator==",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2865,
    "end_line": 2868,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "inline bool operator == (const Vector4& lhs, const Vector4& rhs)\n{\n    return FloatEquals(lhs.x, rhs.x) && FloatEquals(lhs.y, rhs.y) && FloatEquals(lhs.z, rhs.z) && FloatEquals(lhs.w, rhs.w);\n}\n"
  },
  "third_party.raylib.include.raymath.operator!=": {
    "id": "third_party.raylib.include.raymath.operator!=",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\third_party\\raylib\\include\\raymath.h",
    "relative_path": "third_party\\raylib\\include\\raymath.h",
    "depends_on": [],
    "start_line": 2870,
    "end_line": 2873,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "inline bool operator != (const Vector4& lhs, const Vector4& rhs)\n{\n    return !FloatEquals(lhs.x, rhs.x) || !FloatEquals(lhs.y, rhs.y) || !FloatEquals(lhs.z, rhs.z) || !FloatEquals(lhs.w, rhs.w);\n}\n"
  },
  "tools.auto_source.main": {
    "id": "tools.auto_source.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\auto_source.py",
    "relative_path": "tools\\auto_source.py",
    "depends_on": [],
    "start_line": 6,
    "end_line": 13,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.bodyteleop.web.play_sound": {
    "id": "tools.bodyteleop.web.play_sound",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\bodyteleop\\web.py",
    "relative_path": "tools\\bodyteleop\\web.py",
    "depends_on": [],
    "start_line": 26,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.bodyteleop.web.create_ssl_cert": {
    "id": "tools.bodyteleop.web.create_ssl_cert",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\bodyteleop\\web.py",
    "relative_path": "tools\\bodyteleop\\web.py",
    "depends_on": [],
    "start_line": 55,
    "end_line": 62,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.bodyteleop.web.create_ssl_context": {
    "id": "tools.bodyteleop.web.create_ssl_context",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\bodyteleop\\web.py",
    "relative_path": "tools\\bodyteleop\\web.py",
    "depends_on": [
      "tools.bodyteleop.web.create_ssl_cert"
    ],
    "start_line": 65,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.bodyteleop.web.index": {
    "id": "tools.bodyteleop.web.index",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\bodyteleop\\web.py",
    "relative_path": "tools\\bodyteleop\\web.py",
    "depends_on": [],
    "start_line": 79,
    "end_line": 82,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.bodyteleop.web.ping": {
    "id": "tools.bodyteleop.web.ping",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\bodyteleop\\web.py",
    "relative_path": "tools\\bodyteleop\\web.py",
    "depends_on": [],
    "start_line": 85,
    "end_line": 86,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.bodyteleop.web.sound": {
    "id": "tools.bodyteleop.web.sound",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\bodyteleop\\web.py",
    "relative_path": "tools\\bodyteleop\\web.py",
    "depends_on": [
      "tools.bodyteleop.web.play_sound"
    ],
    "start_line": 89,
    "end_line": 94,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.bodyteleop.web.offer": {
    "id": "tools.bodyteleop.web.offer",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\bodyteleop\\web.py",
    "relative_path": "tools\\bodyteleop\\web.py",
    "depends_on": [],
    "start_line": 97,
    "end_line": 107,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.bodyteleop.web.main": {
    "id": "tools.bodyteleop.web.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\bodyteleop\\web.py",
    "relative_path": "tools\\bodyteleop\\web.py",
    "depends_on": [
      "tools.bodyteleop.web.offer",
      "tools.bodyteleop.web.sound",
      "tools.bodyteleop.web.index",
      "tools.bodyteleop.web.create_ssl_context",
      "tools.bodyteleop.web.ping"
    ],
    "start_line": 110,
    "end_line": 123,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.cabana.binaryview.BinaryItemDelegate": {
    "id": "tools.cabana.binaryview.BinaryItemDelegate",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\binaryview.h",
    "relative_path": "tools\\cabana\\binaryview.h",
    "depends_on": [],
    "start_line": 14,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class BinaryItemDelegate : public QStyledItemDelegate {\npublic:\n  BinaryItemDelegate(QObject *parent);\n  void paint(QPainter *painter, const QStyleOptionViewItem &option, const QModelIndex &index) const override;\n  bool hasSignal(const QModelIndex &index, int dx, int dy, const cabana::Signal *sig) const;\n  void drawSignalCell(QPainter* painter, const QStyleOptionViewItem &option, const QModelIndex &index, const cabana::Signal *sig) const;\n\n  QFont small_font, hex_font;\n  std::array<QStaticText, 256> hex_text_table;\n  std::array<QStaticText, 2> bin_text_table;\n};\n"
  },
  "tools.cabana.binaryview.BinaryViewModel": {
    "id": "tools.cabana.binaryview.BinaryViewModel",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\binaryview.h",
    "relative_path": "tools\\cabana\\binaryview.h",
    "depends_on": [],
    "start_line": 26,
    "end_line": 62,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class BinaryViewModel : public QAbstractTableModel {\npublic:\n  BinaryViewModel(QObject *parent) : QAbstractTableModel(parent) {}\n  void refresh();\n  void updateState();\n  void updateItem(int row, int col, uint8_t val, const QColor &color);\n  QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const override;\n  QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const override;\n  int rowCount(const QModelIndex &parent = QModelIndex()) const override { return row_count; }\n  int columnCount(const QModelIndex &parent = QModelIndex()) const override { return column_count; }\n  QModelIndex index(int row, int column, const QModelIndex &parent = QModelIndex()) const override {\n    return createIndex(row, column, (void *)&items[row * column_count + column]);\n  }\n  Qt::ItemFlags flags(const QModelIndex &index) const override {\n    return (index.column() == column_count - 1) ? Qt::ItemIsEnabled : Qt::ItemIsEnabled | Qt::ItemIsSelectable;\n  }\n  const std::vector<std::array<uint32_t, 8>> &getBitFlipChanges(size_t msg_size);\n\n  struct BitFlipTracker {\n    std::optional<std::pair<double, double>> time_range;\n    std::vector<std::array<uint32_t, 8>> flip_counts;\n  } bit_flip_tracker;\n\n  struct Item {\n    QColor bg_color = QColor(102, 86, 169, 255);\n    bool is_msb = false;\n    bool is_lsb = false;\n    uint8_t val;\n    QList<const cabana::Signal *> sigs;\n    bool valid = false;\n  };\n  std::vector<Item> items;\n  bool heatmap_live_mode = true;\n  MessageId msg_id;\n  int row_count = 0;\n  const int column_count = 9;\n};\n"
  },
  "tools.cabana.binaryview.BinaryViewModel.index": {
    "id": "tools.cabana.binaryview.BinaryViewModel.index",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\binaryview.h",
    "relative_path": "tools\\cabana\\binaryview.h",
    "depends_on": [],
    "start_line": 36,
    "end_line": 38,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  QModelIndex index(int row, int column, const QModelIndex &parent = QModelIndex()) const override {\n    return createIndex(row, column, (void *)&items[row * column_count + column]);\n  }\n"
  },
  "tools.cabana.binaryview.BinaryViewModel.flags": {
    "id": "tools.cabana.binaryview.BinaryViewModel.flags",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\binaryview.h",
    "relative_path": "tools\\cabana\\binaryview.h",
    "depends_on": [],
    "start_line": 39,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  Qt::ItemFlags flags(const QModelIndex &index) const override {\n    return (index.column() == column_count - 1) ? Qt::ItemIsEnabled : Qt::ItemIsEnabled | Qt::ItemIsSelectable;\n  }\n"
  },
  "tools.cabana.binaryview.BinaryView": {
    "id": "tools.cabana.binaryview.BinaryView",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\binaryview.h",
    "relative_path": "tools\\cabana\\binaryview.h",
    "depends_on": [],
    "start_line": 64,
    "end_line": 104,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class BinaryView : public QTableView {\n  Q_OBJECT\n\npublic:\n  BinaryView(QWidget *parent = nullptr);\n  void setMessage(const MessageId &message_id);\n  void highlight(const cabana::Signal *sig);\n  QSet<const cabana::Signal*> getOverlappingSignals() const;\n  void updateState() { model->updateState(); }\n  void paintEvent(QPaintEvent *event) override {\n    is_message_active = can->isMessageActive(model->msg_id);\n    QTableView::paintEvent(event);\n  }\n  QSize minimumSizeHint() const override;\n  void setHeatmapLiveMode(bool live) { model->heatmap_live_mode = live; updateState(); }\n\nsignals:\n  void signalClicked(const cabana::Signal *sig);\n  void signalHovered(const cabana::Signal *sig);\n  void editSignal(const cabana::Signal *origin_s, cabana::Signal &s);\n  void showChart(const MessageId &id, const cabana::Signal *sig, bool show, bool merge);\n\nprivate:\n  void addShortcuts();\n  void refresh();\n  std::tuple<int, int, bool> getSelection(QModelIndex index);\n  void setSelection(const QRect &rect, QItemSelectionModel::SelectionFlags flags) override;\n  void mousePressEvent(QMouseEvent *event) override;\n  void mouseMoveEvent(QMouseEvent *event) override;\n  void mouseReleaseEvent(QMouseEvent *event) override;\n  void leaveEvent(QEvent *event) override;\n  void highlightPosition(const QPoint &pt);\n\n  QModelIndex anchor_index;\n  BinaryViewModel *model;\n  BinaryItemDelegate *delegate;\n  bool is_message_active = false;\n  const cabana::Signal *resize_sig = nullptr;\n  const cabana::Signal *hovered_sig = nullptr;\n  friend class BinaryItemDelegate;\n};\n"
  },
  "tools.cabana.binaryview.BinaryView.paintEvent": {
    "id": "tools.cabana.binaryview.BinaryView.paintEvent",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\binaryview.h",
    "relative_path": "tools\\cabana\\binaryview.h",
    "depends_on": [],
    "start_line": 73,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  void paintEvent(QPaintEvent *event) override {\n    is_message_active = can->isMessageActive(model->msg_id);\n    QTableView::paintEvent(event);\n  }\n"
  },
  "tools.cabana.cabana.main": {
    "id": "tools.cabana.cabana.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\cabana.cc",
    "relative_path": "tools\\cabana\\cabana.cc",
    "depends_on": [],
    "start_line": 11,
    "end_line": 83,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int main(int argc, char *argv[]) {\n  QCoreApplication::setApplicationName(\"Cabana\");\n  QCoreApplication::setAttribute(Qt::AA_ShareOpenGLContexts);\n  initApp(argc, argv, false);\n  QApplication app(argc, argv);\n  app.setApplicationDisplayName(\"Cabana\");\n  app.setWindowIcon(QIcon(\":cabana-icon.png\"));\n\n  UnixSignalHandler signalHandler;\n  utils::setTheme(settings.theme);\n\n  QCommandLineParser cmd_parser;\n  cmd_parser.addHelpOption();\n  cmd_parser.addPositionalArgument(\"route\", \"the drive to replay. find your drives at connect.comma.ai\");\n  cmd_parser.addOption({\"demo\", \"use a demo route instead of providing your own\"});\n  cmd_parser.addOption({\"auto\", \"Auto load the route from the best available source (no video): internal, openpilotci, comma_api, car_segments, testing_closet\"});\n  cmd_parser.addOption({\"qcam\", \"load qcamera\"});\n  cmd_parser.addOption({\"ecam\", \"load wide road camera\"});\n  cmd_parser.addOption({\"dcam\", \"load driver camera\"});\n  cmd_parser.addOption({\"msgq\", \"read can messages from the msgq\"});\n  cmd_parser.addOption({\"panda\", \"read can messages from panda\"});\n  cmd_parser.addOption({\"panda-serial\", \"read can messages from panda with given serial\", \"panda-serial\"});\n  if (SocketCanStream::available()) {\n    cmd_parser.addOption({\"socketcan\", \"read can messages from given SocketCAN device\", \"socketcan\"});\n  }\n  cmd_parser.addOption({\"zmq\", \"read can messages from zmq at the specified ip-address\", \"ip-address\"});\n  cmd_parser.addOption({\"data_dir\", \"local directory with routes\", \"data_dir\"});\n  cmd_parser.addOption({\"no-vipc\", \"do not output video\"});\n  cmd_parser.addOption({\"dbc\", \"dbc file to open\", \"dbc\"});\n  cmd_parser.process(app);\n\n  AbstractStream *stream = nullptr;\n\n  if (cmd_parser.isSet(\"msgq\")) {\n    stream = new DeviceStream(&app);\n  } else if (cmd_parser.isSet(\"zmq\")) {\n    stream = new DeviceStream(&app, cmd_parser.value(\"zmq\"));\n  } else if (cmd_parser.isSet(\"panda\") || cmd_parser.isSet(\"panda-serial\")) {\n    try {\n      stream = new PandaStream(&app, {.serial = cmd_parser.value(\"panda-serial\")});\n    } catch (std::exception &e) {\n      qWarning() << e.what();\n      return 0;\n    }\n  } else if (SocketCanStream::available() && cmd_parser.isSet(\"socketcan\")) {\n    stream = new SocketCanStream(&app, {.device = cmd_parser.value(\"socketcan\")});\n  } else {\n    uint32_t replay_flags = REPLAY_FLAG_NONE;\n    if (cmd_parser.isSet(\"ecam\")) replay_flags |= REPLAY_FLAG_ECAM;\n    if (cmd_parser.isSet(\"qcam\")) replay_flags |= REPLAY_FLAG_QCAMERA;\n    if (cmd_parser.isSet(\"dcam\")) replay_flags |= REPLAY_FLAG_DCAM;\n    if (cmd_parser.isSet(\"no-vipc\")) replay_flags |= REPLAY_FLAG_NO_VIPC;\n\n    const QStringList args = cmd_parser.positionalArguments();\n    QString route;\n    if (args.size() > 0) {\n      route = args.first();\n    } else if (cmd_parser.isSet(\"demo\")) {\n      route = DEMO_ROUTE;\n    }\n    if (!route.isEmpty()) {\n      auto replay_stream = std::make_unique<ReplayStream>(&app);\n      bool auto_source = cmd_parser.isSet(\"auto\");\n      if (!replay_stream->loadRoute(route, cmd_parser.value(\"data_dir\"), replay_flags, auto_source)) {\n        return 0;\n      }\n      stream = replay_stream.release();\n    }\n  }\n\n  MainWindow w(stream, cmd_parser.value(\"dbc\"));\n  return app.exec();\n}\n"
  },
  "tools.cabana.commands.instance": {
    "id": "tools.cabana.commands.instance",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\commands.cc",
    "relative_path": "tools\\cabana\\commands.cc",
    "depends_on": [],
    "start_line": 119,
    "end_line": 122,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QUndoStack *instance() {\n  static QUndoStack *undo_stack = new QUndoStack(qApp);\n  return undo_stack;\n}\n"
  },
  "tools.cabana.commands.EditMsgCommand": {
    "id": "tools.cabana.commands.EditMsgCommand",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\commands.h",
    "relative_path": "tools\\cabana\\commands.h",
    "depends_on": [],
    "start_line": 11,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class EditMsgCommand : public QUndoCommand {\npublic:\n  EditMsgCommand(const MessageId &id, const QString &name, int size, const QString &node,\n                 const QString &comment, QUndoCommand *parent = nullptr);\n  void undo() override;\n  void redo() override;\n\nprivate:\n  const MessageId id;\n  QString old_name, new_name, old_comment, new_comment, old_node, new_node;\n  int old_size = 0, new_size = 0;\n};\n"
  },
  "tools.cabana.commands.RemoveMsgCommand": {
    "id": "tools.cabana.commands.RemoveMsgCommand",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\commands.h",
    "relative_path": "tools\\cabana\\commands.h",
    "depends_on": [],
    "start_line": 24,
    "end_line": 33,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class RemoveMsgCommand : public QUndoCommand {\npublic:\n  RemoveMsgCommand(const MessageId &id, QUndoCommand *parent = nullptr);\n  void undo() override;\n  void redo() override;\n\nprivate:\n  const MessageId id;\n  cabana::Msg message;\n};\n"
  },
  "tools.cabana.commands.AddSigCommand": {
    "id": "tools.cabana.commands.AddSigCommand",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\commands.h",
    "relative_path": "tools\\cabana\\commands.h",
    "depends_on": [],
    "start_line": 35,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class AddSigCommand : public QUndoCommand {\npublic:\n  AddSigCommand(const MessageId &id, const cabana::Signal &sig, QUndoCommand *parent = nullptr);\n  void undo() override;\n  void redo() override;\n\nprivate:\n  const MessageId id;\n  bool msg_created = false;\n  cabana::Signal signal = {};\n};\n"
  },
  "tools.cabana.commands.RemoveSigCommand": {
    "id": "tools.cabana.commands.RemoveSigCommand",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\commands.h",
    "relative_path": "tools\\cabana\\commands.h",
    "depends_on": [],
    "start_line": 47,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class RemoveSigCommand : public QUndoCommand {\npublic:\n  RemoveSigCommand(const MessageId &id, const cabana::Signal *sig, QUndoCommand *parent = nullptr);\n  void undo() override;\n  void redo() override;\n\nprivate:\n  const MessageId id;\n  QList<cabana::Signal> sigs;\n};\n"
  },
  "tools.cabana.commands.EditSignalCommand": {
    "id": "tools.cabana.commands.EditSignalCommand",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\commands.h",
    "relative_path": "tools\\cabana\\commands.h",
    "depends_on": [],
    "start_line": 58,
    "end_line": 67,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class EditSignalCommand : public QUndoCommand {\npublic:\n  EditSignalCommand(const MessageId &id, const cabana::Signal *sig, const cabana::Signal &new_sig, QUndoCommand *parent = nullptr);\n  void undo() override;\n  void redo() override;\n\nprivate:\n  const MessageId id;\n  QList<std::pair<cabana::Signal, cabana::Signal>> sigs; // QList<{old_sig, new_sig}>\n};\n"
  },
  "tools.cabana.detailwidget.EditMessageDialog": {
    "id": "tools.cabana.detailwidget.EditMessageDialog",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\detailwidget.h",
    "relative_path": "tools\\cabana\\detailwidget.h",
    "depends_on": [],
    "start_line": 15,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class EditMessageDialog : public QDialog {\npublic:\n  EditMessageDialog(const MessageId &msg_id, const QString &title, int size, QWidget *parent);\n  void validateName(const QString &text);\n\n  MessageId msg_id;\n  QString original_name;\n  QDialogButtonBox *btn_box;\n  QLineEdit *name_edit;\n  QLineEdit *node;\n  QTextEdit *comment_edit;\n  QLabel *error_label;\n  QSpinBox *size_spin;\n};\n"
  },
  "tools.cabana.detailwidget.DetailWidget": {
    "id": "tools.cabana.detailwidget.DetailWidget",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\detailwidget.h",
    "relative_path": "tools\\cabana\\detailwidget.h",
    "depends_on": [],
    "start_line": 30,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class DetailWidget : public QWidget {\n  Q_OBJECT\n\npublic:\n  DetailWidget(ChartsWidget *charts, QWidget *parent);\n  void setMessage(const MessageId &message_id);\n  void refresh();\n\nprivate:\n  void createToolBar();\n  void showTabBarContextMenu(const QPoint &pt);\n  void editMsg();\n  void removeMsg();\n  void updateState(const std::set<MessageId> *msgs = nullptr);\n\n  MessageId msg_id;\n  QLabel *warning_icon, *warning_label;\n  ElidedLabel *name_label;\n  QWidget *warning_widget;\n  TabBar *tabbar;\n  QTabWidget *tab_widget;\n  QAction *action_remove_msg;\n  LogsWidget *history_log;\n  BinaryView *binary_view;\n  SignalView *signal_view;\n  ChartsWidget *charts;\n  QSplitter *splitter;\n};\n"
  },
  "tools.cabana.detailwidget.CenterWidget": {
    "id": "tools.cabana.detailwidget.CenterWidget",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\detailwidget.h",
    "relative_path": "tools\\cabana\\detailwidget.h",
    "depends_on": [],
    "start_line": 59,
    "end_line": 70,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class CenterWidget : public QWidget {\n  Q_OBJECT\npublic:\n  CenterWidget(QWidget *parent);\n  void setMessage(const MessageId &msg_id);\n  void clear();\n\nprivate:\n  QWidget *createWelcomeWidget();\n  DetailWidget *detail_widget = nullptr;\n  QWidget *welcome_widget = nullptr;\n};\n"
  },
  "tools.cabana.historylog.HeaderView": {
    "id": "tools.cabana.historylog.HeaderView",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\historylog.h",
    "relative_path": "tools\\cabana\\historylog.h",
    "depends_on": [],
    "start_line": 14,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class HeaderView : public QHeaderView {\npublic:\n  HeaderView(Qt::Orientation orientation, QWidget *parent = nullptr) : QHeaderView(orientation, parent) {}\n  QSize sectionSizeFromContents(int logicalIndex) const override;\n  void paintSection(QPainter *painter, const QRect &rect, int logicalIndex) const;\n};\n"
  },
  "tools.cabana.historylog.HistoryLogModel": {
    "id": "tools.cabana.historylog.HistoryLogModel",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\historylog.h",
    "relative_path": "tools\\cabana\\historylog.h",
    "depends_on": [],
    "start_line": 21,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class HistoryLogModel : public QAbstractTableModel {\n  Q_OBJECT\n\npublic:\n  HistoryLogModel(QObject *parent) : QAbstractTableModel(parent) {}\n  void setMessage(const MessageId &message_id);\n  void updateState(bool clear = false);\n  void setFilter(int sig_idx, const QString &value, std::function<bool(double, double)> cmp);\n  QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const override;\n  QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const override;\n  void fetchMore(const QModelIndex &parent) override;\n  bool canFetchMore(const QModelIndex &parent) const override;\n  int rowCount(const QModelIndex &parent = QModelIndex()) const override { return messages.size(); }\n  int columnCount(const QModelIndex &parent = QModelIndex()) const override { return !isHexMode() ? sigs.size() + 1 : 2; }\n  inline bool isHexMode() const { return sigs.empty() || hex_mode; }\n  void reset();\n  void setHexMode(bool hex_mode);\n\n  struct Message {\n    uint64_t mono_time = 0;\n    std::vector<double> sig_values;\n    std::vector<uint8_t> data;\n    std::vector<QColor> colors;\n  };\n\n  void fetchData(std::deque<Message>::iterator insert_pos, uint64_t from_time, uint64_t min_time);\n\n  MessageId msg_id;\n  CanData hex_colors;\n  const int batch_size = 50;\n  int filter_sig_idx = -1;\n  double filter_value = 0;\n  std::function<bool(double, double)> filter_cmp = nullptr;\n  std::deque<Message> messages;\n  std::vector<cabana::Signal *> sigs;\n  bool hex_mode = false;\n};\n"
  },
  "tools.cabana.historylog.LogsWidget": {
    "id": "tools.cabana.historylog.LogsWidget",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\historylog.h",
    "relative_path": "tools\\cabana\\historylog.h",
    "depends_on": [],
    "start_line": 59,
    "end_line": 81,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class LogsWidget : public QFrame {\n  Q_OBJECT\n\npublic:\n  LogsWidget(QWidget *parent);\n  void setMessage(const MessageId &message_id) { model->setMessage(message_id); }\n  void updateState() { model->updateState(); }\n  void showEvent(QShowEvent *event) override { model->updateState(true); }\n\nprivate slots:\n  void filterChanged();\n  void exportToCSV();\n  void modelReset();\n\nprivate:\n  QTableView *logs;\n  HistoryLogModel *model;\n  QComboBox *signals_cb, *comp_box, *display_type_cb;\n  QLineEdit *value_edit;\n  QWidget *filters_widget;\n  ToolButton *export_btn;\n  MessageBytesDelegate *delegate;\n};\n"
  },
  "tools.cabana.mainwin.MainWindow": {
    "id": "tools.cabana.mainwin.MainWindow",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\mainwin.h",
    "relative_path": "tools\\cabana\\mainwin.h",
    "depends_on": [],
    "start_line": 19,
    "end_line": 98,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class MainWindow : public QMainWindow {\n  Q_OBJECT\n\npublic:\n  MainWindow(AbstractStream *stream, const QString &dbc_file);\n  void toggleChartsDocking();\n  void showStatusMessage(const QString &msg, int timeout = 0) { statusBar()->showMessage(msg, timeout); }\n  void loadFile(const QString &fn, SourceSet s = SOURCE_ALL);\n  ChartsWidget *charts_widget = nullptr;\n\npublic slots:\n  void selectAndOpenStream();\n  void openStream(AbstractStream *stream, const QString &dbc_file = {});\n  void closeStream();\n  void exportToCSV();\n\n  void newFile(SourceSet s = SOURCE_ALL);\n  void openFile(SourceSet s = SOURCE_ALL);\n  void loadDBCFromOpendbc(const QString &name);\n  void save();\n  void saveAs();\n  void saveToClipboard();\n\nsignals:\n  void showMessage(const QString &msg, int timeout);\n  void updateProgressBar(uint64_t cur, uint64_t total, bool success);\n\nprotected:\n  bool eventFilter(QObject *obj, QEvent *event) override;\n  void remindSaveChanges();\n  void closeFile(SourceSet s = SOURCE_ALL);\n  void closeFile(DBCFile *dbc_file);\n  void saveFile(DBCFile *dbc_file);\n  void saveFileAs(DBCFile *dbc_file);\n  void saveFileToClipboard(DBCFile *dbc_file);\n  void loadFingerprints();\n  void loadFromClipboard(SourceSet s = SOURCE_ALL, bool close_all = true);\n  void updateRecentFiles(const QString &fn);\n  void updateRecentFileMenu();\n  void createActions();\n  void createDockWindows();\n  void createStatusBar();\n  void createShortcuts();\n  void closeEvent(QCloseEvent *event) override;\n  void DBCFileChanged();\n  void updateDownloadProgress(uint64_t cur, uint64_t total, bool success);\n  void setOption();\n  void findSimilarBits();\n  void findSignal();\n  void undoStackCleanChanged(bool clean);\n  void onlineHelp();\n  void toggleFullScreen();\n  void updateStatus();\n  void updateLoadSaveMenus();\n  void createDockWidgets();\n  void eventsMerged();\n\n  VideoWidget *video_widget = nullptr;\n  QDockWidget *video_dock;\n  QDockWidget *messages_dock;\n  MessagesWidget *messages_widget = nullptr;\n  CenterWidget *center_widget;\n  QWidget *floating_window = nullptr;\n  QVBoxLayout *charts_layout;\n  QProgressBar *progress_bar;\n  QLabel *status_label;\n  QJsonDocument fingerprint_to_dbc;\n  QSplitter *video_splitter = nullptr;\n  enum { MAX_RECENT_FILES = 15 };\n  QMenu *open_recent_menu = nullptr;\n  QMenu *manage_dbcs_menu = nullptr;\n  QMenu *tools_menu = nullptr;\n  QAction *close_stream_act = nullptr;\n  QAction *export_to_csv_act = nullptr;\n  QAction *save_dbc = nullptr;\n  QAction *save_dbc_as = nullptr;\n  QAction *copy_dbc_to_clipboard = nullptr;\n  QString car_fingerprint;\n  QByteArray default_state;\n};\n"
  },
  "tools.cabana.mainwin.HelpOverlay": {
    "id": "tools.cabana.mainwin.HelpOverlay",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\mainwin.h",
    "relative_path": "tools\\cabana\\mainwin.h",
    "depends_on": [],
    "start_line": 100,
    "end_line": 110,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class HelpOverlay : public QWidget {\n  Q_OBJECT\npublic:\n  HelpOverlay(MainWindow *parent);\n\nprotected:\n  void drawHelpForWidget(QPainter &painter, QWidget *w);\n  void paintEvent(QPaintEvent *event) override;\n  void mouseReleaseEvent(QMouseEvent *event) override;\n  bool eventFilter(QObject *obj, QEvent *event) override;\n};\n"
  },
  "tools.cabana.messageswidget.parseRange": {
    "id": "tools.cabana.messageswidget.parseRange",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\messageswidget.cc",
    "relative_path": "tools\\cabana\\messageswidget.cc",
    "depends_on": [],
    "start_line": 251,
    "end_line": 264,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static bool parseRange(const QString &filter, uint32_t value, int base = 10) {\n  // Parse out filter string into a range (e.g. \"1\" -> {1, 1}, \"1-3\" -> {1, 3}, \"1-\" -> {1, inf})\n  unsigned int min = std::numeric_limits<unsigned int>::min();\n  unsigned int max = std::numeric_limits<unsigned int>::max();\n  auto s = filter.split('-');\n  bool ok = s.size() >= 1 && s.size() <= 2;\n  if (ok && !s[0].isEmpty()) min = s[0].toUInt(&ok, base);\n  if (ok && s.size() == 1) {\n    max = min;\n  } else if (ok && s.size() == 2 && !s[1].isEmpty()) {\n    max = s[1].toUInt(&ok, base);\n  }\n  return ok && value >= min && value <= max;\n}\n"
  },
  "tools.cabana.messageswidget.MessageListModel": {
    "id": "tools.cabana.messageswidget.MessageListModel",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\messageswidget.h",
    "relative_path": "tools\\cabana\\messageswidget.h",
    "depends_on": [],
    "start_line": 18,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class MessageListModel : public QAbstractTableModel {\nQ_OBJECT\n\npublic:\n  enum Column {\n    NAME = 0,\n    SOURCE,\n    ADDRESS,\n    NODE,\n    FREQ,\n    COUNT,\n    DATA,\n  };\n\n  MessageListModel(QObject *parent) : QAbstractTableModel(parent) {}\n  QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const override;\n  int columnCount(const QModelIndex &parent = QModelIndex()) const override { return Column::DATA + 1; }\n  QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const;\n  int rowCount(const QModelIndex &parent = QModelIndex()) const override { return items_.size(); }\n  void sort(int column, Qt::SortOrder order = Qt::AscendingOrder) override;\n  void setFilterStrings(const QMap<int, QString> &filters);\n  void showInactivemessages(bool show);\n  void msgsReceived(const std::set<MessageId> *new_msgs, bool has_new_ids);\n  bool filterAndSort();\n  void dbcModified();\n\n  struct Item {\n    MessageId id;\n    QString name;\n    QString node;\n    bool operator==(const Item &other) const {\n      return id == other.id && name == other.name && node == other.node;\n    }\n  };\n  std::vector<Item> items_;\n  bool show_inactive_messages = true;\n\nprivate:\n  void sortItems(std::vector<MessageListModel::Item> &items);\n  bool match(const MessageListModel::Item &id);\n\n  QMap<int, QString> filters_;\n  std::set<MessageId> dbc_messages_;\n  int sort_column = 0;\n  Qt::SortOrder sort_order = Qt::AscendingOrder;\n  int sort_threshold_ = 0;\n};\n"
  },
  "tools.cabana.messageswidget.Item.operator==": {
    "id": "tools.cabana.messageswidget.Item.operator==",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\messageswidget.h",
    "relative_path": "tools\\cabana\\messageswidget.h",
    "depends_on": [],
    "start_line": 48,
    "end_line": 50,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    bool operator==(const Item &other) const {\n      return id == other.id && name == other.name && node == other.node;\n    }\n"
  },
  "tools.cabana.messageswidget.MessageView": {
    "id": "tools.cabana.messageswidget.MessageView",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\messageswidget.h",
    "relative_path": "tools\\cabana\\messageswidget.h",
    "depends_on": [],
    "start_line": 66,
    "end_line": 77,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class MessageView : public QTreeView {\n  Q_OBJECT\npublic:\n  MessageView(QWidget *parent) : QTreeView(parent) {}\n  void updateBytesSectionSize();\n\nprotected:\n  void drawRow(QPainter *painter, const QStyleOptionViewItem &option, const QModelIndex &index) const override;\n  void drawBranches(QPainter *painter, const QRect &rect, const QModelIndex &index) const override {}\n  void dataChanged(const QModelIndex &topLeft, const QModelIndex &bottomRight, const QVector<int> &roles = QVector<int>()) override;\n  void wheelEvent(QWheelEvent *event) override;\n};\n"
  },
  "tools.cabana.messageswidget.MessageViewHeader": {
    "id": "tools.cabana.messageswidget.MessageViewHeader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\messageswidget.h",
    "relative_path": "tools\\cabana\\messageswidget.h",
    "depends_on": [],
    "start_line": 79,
    "end_line": 90,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class MessageViewHeader : public QHeaderView {\n  // https://stackoverflow.com/a/44346317\n  Q_OBJECT\npublic:\n  MessageViewHeader(QWidget *parent);\n  void updateHeaderPositions();\n  void updateGeometries() override;\n  QSize sizeHint() const override;\n  void updateFilters();\n\n  QMap<int, QLineEdit *> editors;\n};\n"
  },
  "tools.cabana.messageswidget.MessagesWidget": {
    "id": "tools.cabana.messageswidget.MessagesWidget",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\messageswidget.h",
    "relative_path": "tools\\cabana\\messageswidget.h",
    "depends_on": [],
    "start_line": 92,
    "end_line": 121,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class MessagesWidget : public QWidget {\n  Q_OBJECT\n\npublic:\n  MessagesWidget(QWidget *parent);\n  void selectMessage(const MessageId &message_id);\n  QByteArray saveHeaderState() const { return view->header()->saveState(); }\n  bool restoreHeaderState(const QByteArray &state) const { return view->header()->restoreState(state); }\n  void suppressHighlighted();\n\nsignals:\n  void msgSelectionChanged(const MessageId &message_id);\n  void titleChanged(const QString &title);\n\nprotected:\n  QWidget *createToolBar();\n  void headerContextMenuEvent(const QPoint &pos);\n  void menuAboutToShow();\n  void setMultiLineBytes(bool multi);\n  void updateTitle();\n\n  MessageView *view;\n  MessageViewHeader *header;\n  MessageBytesDelegate *delegate;\n  std::optional<MessageId> current_msg_id;\n  MessageListModel *model;\n  QPushButton *suppress_add;\n  QPushButton *suppress_clear;\n  QMenu *menu;\n};\n"
  },
  "tools.cabana.settings.Settings": {
    "id": "tools.cabana.settings.Settings",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\settings.h",
    "relative_path": "tools\\cabana\\settings.h",
    "depends_on": [],
    "start_line": 13,
    "end_line": 51,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class Settings : public QObject {\n  Q_OBJECT\n\npublic:\n  enum DragDirection {\n    MsbFirst,\n    LsbFirst,\n    AlwaysLE,\n    AlwaysBE,\n  };\n\n  Settings();\n  ~Settings();\n\n  bool absolute_time = false;\n  int fps = 10;\n  int max_cached_minutes = 30;\n  int chart_height = 200;\n  int chart_column_count = 1;\n  int chart_range = 3 * 60; // 3 minutes\n  int chart_series_type = 0;\n  int theme = 0;\n  int sparkline_range = 15; // 15 seconds\n  bool multiple_lines_hex = false;\n  bool log_livestream = true;\n  bool suppress_defined_signals = false;\n  QString log_path;\n  QString last_dir;\n  QString last_route_dir;\n  QByteArray geometry;\n  QByteArray video_splitter_state;\n  QByteArray window_state;\n  QStringList recent_files;\n  QByteArray message_header_state;\n  DragDirection drag_direction = MsbFirst;\n\nsignals:\n  void changed();\n};\n"
  },
  "tools.cabana.settings.SettingsDlg": {
    "id": "tools.cabana.settings.SettingsDlg",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\settings.h",
    "relative_path": "tools\\cabana\\settings.h",
    "depends_on": [],
    "start_line": 53,
    "end_line": 65,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class SettingsDlg : public QDialog {\npublic:\n  SettingsDlg(QWidget *parent);\n  void save();\n  QSpinBox *fps;\n  QSpinBox *cached_minutes;\n  QSpinBox *chart_height;\n  QComboBox *chart_series_type;\n  QComboBox *theme;\n  QGroupBox *log_livestream;\n  QLineEdit *log_path;\n  QComboBox *drag_direction;\n};\n"
  },
  "tools.cabana.signalview.signalTypeToString": {
    "id": "tools.cabana.signalview.signalTypeToString",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\signalview.cc",
    "relative_path": "tools\\cabana\\signalview.cc",
    "depends_on": [],
    "start_line": 21,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static QString signalTypeToString(cabana::Signal::Type type) {\n  if (type == cabana::Signal::Type::Multiplexor) return \"Multiplexor Signal\";\n  else if (type == cabana::Signal::Type::Multiplexed) return \"Multiplexed Signal\";\n  else return \"Normal Signal\";\n}\n"
  },
  "tools.cabana.signalview.SignalModel": {
    "id": "tools.cabana.signalview.SignalModel",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\signalview.h",
    "relative_path": "tools\\cabana\\signalview.h",
    "depends_on": [],
    "start_line": 18,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class SignalModel : public QAbstractItemModel {\n  Q_OBJECT\npublic:\n  struct Item {\n    enum Type {Root, Sig, Name, Size, Node, Endian, Signed, Offset, Factor, SignalType, MultiplexValue, ExtraInfo, Unit, Comment, Min, Max, Desc };\n    ~Item() { qDeleteAll(children); }\n    inline int row() { return parent->children.indexOf(this); }\n\n    Type type = Type::Root;\n    Item *parent = nullptr;\n    QList<Item *> children;\n\n    const cabana::Signal *sig = nullptr;\n    QString title;\n    bool highlight = false;\n    QString sig_val = \"-\";\n    Sparkline sparkline;\n  };\n\n  SignalModel(QObject *parent);\n  int rowCount(const QModelIndex &parent = QModelIndex()) const override;\n  int columnCount(const QModelIndex &parent = QModelIndex()) const override { return 2; }\n  QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const override;\n  QModelIndex index(int row, int column, const QModelIndex &parent = QModelIndex()) const override;\n  QModelIndex parent(const QModelIndex &index) const override;\n  Qt::ItemFlags flags(const QModelIndex &index) const override;\n  bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole) override;\n  void setMessage(const MessageId &id);\n  void setFilter(const QString &txt);\n  bool saveSignal(const cabana::Signal *origin_s, cabana::Signal &s);\n  Item *getItem(const QModelIndex &index) const;\n  int signalRow(const cabana::Signal *sig) const;\n\nprivate:\n  void insertItem(SignalModel::Item *root_item, int pos, const cabana::Signal *sig);\n  void handleSignalAdded(MessageId id, const cabana::Signal *sig);\n  void handleSignalUpdated(const cabana::Signal *sig);\n  void handleSignalRemoved(const cabana::Signal *sig);\n  void handleMsgChanged(MessageId id);\n  void refresh();\n\n  MessageId msg_id;\n  QString filter_str;\n  std::unique_ptr<Item> root;\n  friend class SignalView;\n  friend class SignalItemDelegate;\n};\n"
  },
  "tools.cabana.signalview.ValueDescriptionDlg": {
    "id": "tools.cabana.signalview.ValueDescriptionDlg",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\signalview.h",
    "relative_path": "tools\\cabana\\signalview.h",
    "depends_on": [],
    "start_line": 66,
    "end_line": 79,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ValueDescriptionDlg : public QDialog {\npublic:\n  ValueDescriptionDlg(const ValueDescription &descriptions, QWidget *parent);\n  ValueDescription val_desc;\n\nprivate:\n  struct Delegate : public QStyledItemDelegate {\n    Delegate(QWidget *parent) : QStyledItemDelegate(parent) {}\n    QWidget *createEditor(QWidget *parent, const QStyleOptionViewItem &option, const QModelIndex &index) const override;\n  };\n\n  void save();\n  QTableWidget *table;\n};\n"
  },
  "tools.cabana.signalview.SignalItemDelegate": {
    "id": "tools.cabana.signalview.SignalItemDelegate",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\signalview.h",
    "relative_path": "tools\\cabana\\signalview.h",
    "depends_on": [],
    "start_line": 81,
    "end_line": 94,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class SignalItemDelegate : public QStyledItemDelegate {\npublic:\n  SignalItemDelegate(QObject *parent);\n  void paint(QPainter *painter, const QStyleOptionViewItem &option, const QModelIndex &index) const override;\n  QSize sizeHint(const QStyleOptionViewItem &option, const QModelIndex &index) const override;\n  QWidget *createEditor(QWidget *parent, const QStyleOptionViewItem &option, const QModelIndex &index) const override;\n  void updateEditorGeometry(QWidget *editor, const QStyleOptionViewItem &option, const QModelIndex &index) const override;\n  void setModelData(QWidget *editor, QAbstractItemModel *model, const QModelIndex &index) const override;\n\n  QValidator *name_validator, *double_validator, *node_validator;\n  QFont label_font, minmax_font;\n  const int color_label_width = 18;\n  mutable QSize button_size;\n};\n"
  },
  "tools.cabana.signalview.SignalView": {
    "id": "tools.cabana.signalview.SignalView",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\signalview.h",
    "relative_path": "tools\\cabana\\signalview.h",
    "depends_on": [],
    "start_line": 96,
    "end_line": 147,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class SignalView : public QFrame {\n  Q_OBJECT\n\npublic:\n  SignalView(ChartsWidget *charts, QWidget *parent);\n  void setMessage(const MessageId &id);\n  void signalHovered(const cabana::Signal *sig);\n  void updateChartState();\n  void selectSignal(const cabana::Signal *sig, bool expand = false);\n  void rowClicked(const QModelIndex &index);\n  SignalModel *model = nullptr;\n\nsignals:\n  void highlight(const cabana::Signal *sig);\n  void showChart(const MessageId &id, const cabana::Signal *sig, bool show, bool merge);\n\nprivate:\n  void rowsChanged();\n  void resizeEvent(QResizeEvent* event) override;\n  void updateToolBar();\n  void setSparklineRange(int value);\n  void handleSignalAdded(MessageId id, const cabana::Signal *sig);\n  void handleSignalUpdated(const cabana::Signal *sig);\n  void updateState(const std::set<MessageId> *msgs = nullptr);\n  std::pair<QModelIndex, QModelIndex> visibleSignalRange();\n\n  struct TreeView : public QTreeView {\n    TreeView(QWidget *parent) : QTreeView(parent) {}\n    void rowsInserted(const QModelIndex &parent, int start, int end) override {\n      ((SignalView *)parentWidget())->rowsChanged();\n      // update widget geometries in QTreeView::rowsInserted\n      QTreeView::rowsInserted(parent, start, end);\n    }\n    void dataChanged(const QModelIndex &topLeft, const QModelIndex &bottomRight, const QVector<int> &roles = QVector<int>()) override {\n      // Bypass the slow call to QTreeView::dataChanged.\n      QAbstractItemView::dataChanged(topLeft, bottomRight, roles);\n    }\n    void leaveEvent(QEvent *event) override {\n      emit static_cast<SignalView *>(parentWidget())->highlight(nullptr);\n      QTreeView::leaveEvent(event);\n    }\n  };\n  int max_value_width = 0;\n  int value_column_width = 0;\n  TreeView *tree;\n  QLabel *sparkline_label;\n  QSlider *sparkline_range_slider;\n  QLineEdit *filter_edit;\n  ChartsWidget *charts;\n  QLabel *signal_count_lb;\n  SignalItemDelegate *delegate;\n};\n"
  },
  "tools.cabana.signalview.TreeView.rowsInserted": {
    "id": "tools.cabana.signalview.TreeView.rowsInserted",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\signalview.h",
    "relative_path": "tools\\cabana\\signalview.h",
    "depends_on": [],
    "start_line": 124,
    "end_line": 128,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    void rowsInserted(const QModelIndex &parent, int start, int end) override {\n      ((SignalView *)parentWidget())->rowsChanged();\n      // update widget geometries in QTreeView::rowsInserted\n      QTreeView::rowsInserted(parent, start, end);\n    }\n"
  },
  "tools.cabana.signalview.TreeView.dataChanged": {
    "id": "tools.cabana.signalview.TreeView.dataChanged",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\signalview.h",
    "relative_path": "tools\\cabana\\signalview.h",
    "depends_on": [],
    "start_line": 129,
    "end_line": 132,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    void dataChanged(const QModelIndex &topLeft, const QModelIndex &bottomRight, const QVector<int> &roles = QVector<int>()) override {\n      // Bypass the slow call to QTreeView::dataChanged.\n      QAbstractItemView::dataChanged(topLeft, bottomRight, roles);\n    }\n"
  },
  "tools.cabana.signalview.TreeView.leaveEvent": {
    "id": "tools.cabana.signalview.TreeView.leaveEvent",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\signalview.h",
    "relative_path": "tools\\cabana\\signalview.h",
    "depends_on": [],
    "start_line": 133,
    "end_line": 136,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "    void leaveEvent(QEvent *event) override {\n      emit static_cast<SignalView *>(parentWidget())->highlight(nullptr);\n      QTreeView::leaveEvent(event);\n    }\n"
  },
  "tools.cabana.streamselector.StreamSelector": {
    "id": "tools.cabana.streamselector.StreamSelector",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streamselector.h",
    "relative_path": "tools\\cabana\\streamselector.h",
    "depends_on": [],
    "start_line": 10,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class StreamSelector : public QDialog {\n  Q_OBJECT\n\npublic:\n  StreamSelector(QWidget *parent = nullptr);\n  void addStreamWidget(AbstractOpenStreamWidget *w, const QString &title);\n  QString dbcFile() const { return dbc_file->text(); }\n  AbstractStream *stream() const { return stream_; }\n\nprivate:\n  AbstractStream *stream_ = nullptr;\n  QLineEdit *dbc_file;\n  QTabWidget *tab;\n  QDialogButtonBox *btn_box;\n};\n"
  },
  "tools.cabana.videowidget.getReplay": {
    "id": "tools.cabana.videowidget.getReplay",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\videowidget.cc",
    "relative_path": "tools\\cabana\\videowidget.cc",
    "depends_on": [],
    "start_line": 28,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static Replay *getReplay() {\n  auto stream = qobject_cast<ReplayStream *>(can);\n  return stream ? stream->getReplay() : nullptr;\n}\n"
  },
  "tools.cabana.videowidget.Slider": {
    "id": "tools.cabana.videowidget.Slider",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\videowidget.h",
    "relative_path": "tools\\cabana\\videowidget.h",
    "depends_on": [],
    "start_line": 19,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class Slider : public QSlider {\n  Q_OBJECT\n\npublic:\n  Slider(QWidget *parent);\n  double currentSecond() const { return value() / factor; }\n  void setCurrentSecond(double sec) { setValue(sec * factor); }\n  void setTimeRange(double min, double max) { setRange(min * factor, max * factor); }\n  void mousePressEvent(QMouseEvent *e) override;\n  void paintEvent(QPaintEvent *ev) override;\n  const double factor = 1000.0;\n  double thumbnail_dispaly_time = -1;\n};\n"
  },
  "tools.cabana.videowidget.StreamCameraView": {
    "id": "tools.cabana.videowidget.StreamCameraView",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\videowidget.h",
    "relative_path": "tools\\cabana\\videowidget.h",
    "depends_on": [],
    "start_line": 33,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class StreamCameraView : public CameraWidget {\n  Q_OBJECT\n\npublic:\n  StreamCameraView(std::string stream_name, VisionStreamType stream_type, QWidget *parent = nullptr);\n  void paintGL() override;\n  void showPausedOverlay() { fade_animation->start(); }\n  void parseQLog(std::shared_ptr<LogReader> qlog);\n\nprivate:\n  QPixmap generateThumbnail(QPixmap thumbnail, double seconds);\n  void drawAlert(QPainter &p, const QRect &rect, const Timeline::Entry &alert);\n  void drawThumbnail(QPainter &p);\n  void drawScrubThumbnail(QPainter &p);\n  void drawTime(QPainter &p, const QRect &rect, double seconds);\n\n  QPropertyAnimation *fade_animation;\n  QMap<uint64_t, QPixmap> big_thumbnails;\n  QMap<uint64_t, QPixmap> thumbnails;\n  double thumbnail_dispaly_time = -1;\n  friend class VideoWidget;\n};\n"
  },
  "tools.cabana.videowidget.VideoWidget": {
    "id": "tools.cabana.videowidget.VideoWidget",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\videowidget.h",
    "relative_path": "tools\\cabana\\videowidget.h",
    "depends_on": [],
    "start_line": 56,
    "end_line": 83,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class VideoWidget : public QFrame {\n  Q_OBJECT\n\npublic:\n  VideoWidget(QWidget *parnet = nullptr);\n  void showThumbnail(double seconds);\n\nprotected:\n  bool eventFilter(QObject *obj, QEvent *event) override;\n  QString formatTime(double sec, bool include_milliseconds = false);\n  void timeRangeChanged();\n  void updateState();\n  void updatePlayBtnState();\n  QWidget *createCameraWidget();\n  void createPlaybackController();\n  void createSpeedDropdown(QToolBar *toolbar);\n  void loopPlaybackClicked();\n  void vipcAvailableStreamsUpdated(std::set<VisionStreamType> streams);\n  void showRouteInfo();\n\n  StreamCameraView *cam_widget;\n  QAction *time_display_action = nullptr;\n  QAction *play_toggle_action = nullptr;\n  QToolButton *speed_btn = nullptr;\n  QAction *skip_to_end_action = nullptr;\n  Slider *slider = nullptr;\n  QTabBar *camera_tab = nullptr;\n};\n"
  },
  "tools.cabana.chart.chart.getBlankShadowPixmap": {
    "id": "tools.cabana.chart.chart.getBlankShadowPixmap",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\chart\\chart.cc",
    "relative_path": "tools\\cabana\\chart\\chart.cc",
    "depends_on": [],
    "start_line": 422,
    "end_line": 444,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QPixmap getBlankShadowPixmap(const QPixmap &px, int radius) {\n  QGraphicsDropShadowEffect *e = new QGraphicsDropShadowEffect;\n  e->setColor(QColor(40, 40, 40, 245));\n  e->setOffset(0, 0);\n  e->setBlurRadius(radius);\n\n  qreal dpr = px.devicePixelRatio();\n  QPixmap blank(px.size());\n  blank.setDevicePixelRatio(dpr);\n  blank.fill(Qt::white);\n\n  QGraphicsScene scene;\n  QGraphicsPixmapItem item(blank);\n  item.setGraphicsEffect(e);\n  scene.addItem(&item);\n\n  QPixmap shadow(px.size() + QSize(radius * dpr * 2, radius * dpr * 2));\n  shadow.setDevicePixelRatio(dpr);\n  shadow.fill(Qt::transparent);\n  QPainter p(&shadow);\n  scene.render(&p, {QPoint(), shadow.size() / dpr}, item.boundingRect().adjusted(-radius, -radius, radius, radius));\n  return shadow;\n}\n"
  },
  "tools.cabana.chart.chart.getDropPixmap": {
    "id": "tools.cabana.chart.chart.getDropPixmap",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\chart\\chart.cc",
    "relative_path": "tools\\cabana\\chart\\chart.cc",
    "depends_on": [],
    "start_line": 446,
    "end_line": 459,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "static QPixmap getDropPixmap(const QPixmap &src) {\n  static QPixmap shadow_px;\n  const int radius = 10;\n  if (shadow_px.size() != src.size() + QSize(radius * 2, radius * 2)) {\n    shadow_px = getBlankShadowPixmap(src, radius);\n  }\n  QPixmap px = shadow_px;\n  QPainter p(&px);\n  QRectF target_rect(QPointF(radius, radius), src.size() / src.devicePixelRatio());\n  p.drawPixmap(target_rect.topLeft(), src);\n  p.setCompositionMode(QPainter::CompositionMode_DestinationIn);\n  p.fillRect(target_rect, QColor(0, 0, 0, 200));\n  return px;\n}\n"
  },
  "tools.cabana.chart.chart.ChartView": {
    "id": "tools.cabana.chart.chart.ChartView",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\chart\\chart.h",
    "relative_path": "tools\\cabana\\chart\\chart.h",
    "depends_on": [],
    "start_line": 28,
    "end_line": 123,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ChartView : public QChartView {\n  Q_OBJECT\n\npublic:\n  ChartView(const std::pair<double, double> &x_range, ChartsWidget *parent = nullptr);\n  void addSignal(const MessageId &msg_id, const cabana::Signal *sig);\n  bool hasSignal(const MessageId &msg_id, const cabana::Signal *sig) const;\n  void updateSeries(const cabana::Signal *sig = nullptr, const MessageEventsMap *msg_new_events = nullptr);\n  void updatePlot(double cur, double min, double max);\n  void setSeriesType(SeriesType type);\n  void updatePlotArea(int left, bool force = false);\n  void showTip(double sec);\n  void hideTip();\n  void startAnimation();\n  double secondsAtPoint(const QPointF &pt) const { return chart()->mapToValue(pt).x(); }\n\n  struct SigItem {\n    MessageId msg_id;\n    const cabana::Signal *sig = nullptr;\n    QXYSeries *series = nullptr;\n    std::vector<QPointF> vals;\n    std::vector<QPointF> step_vals;\n    QPointF track_pt{};\n    SegmentTree segment_tree;\n    double min = 0;\n    double max = 0;\n  };\n\nsignals:\n  void axisYLabelWidthChanged(int w);\n\nprivate slots:\n  void signalUpdated(const cabana::Signal *sig);\n  void manageSignals();\n  void handleMarkerClicked();\n  void msgUpdated(MessageId id);\n  void msgRemoved(MessageId id) { removeIf([=](auto &s) { return s.msg_id.address == id.address && !dbc()->msg(id); }); }\n  void signalRemoved(const cabana::Signal *sig) { removeIf([=](auto &s) { return s.sig == sig; }); }\n\nprivate:\n  void appendCanEvents(const cabana::Signal *sig, const std::vector<const CanEvent *> &events,\n                       std::vector<QPointF> &vals, std::vector<QPointF> &step_vals);\n  void createToolButtons();\n  void addSeries(QXYSeries *series);\n  void contextMenuEvent(QContextMenuEvent *event) override;\n  void mousePressEvent(QMouseEvent *event) override;\n  void mouseReleaseEvent(QMouseEvent *event) override;\n  void mouseMoveEvent(QMouseEvent *ev) override;\n  void dragEnterEvent(QDragEnterEvent *event) override;\n  void dragLeaveEvent(QDragLeaveEvent *event) override { drawDropIndicator(false); }\n  void dragMoveEvent(QDragMoveEvent *event) override;\n  void dropEvent(QDropEvent *event) override;\n  void resizeEvent(QResizeEvent *event) override;\n  QSize sizeHint() const override;\n  void updateAxisY();\n  void updateTitle();\n  void resetChartCache();\n  void setTheme(QChart::ChartTheme theme);\n  void paintEvent(QPaintEvent *event) override;\n  void drawForeground(QPainter *painter, const QRectF &rect) override;\n  void drawBackground(QPainter *painter, const QRectF &rect) override;\n  void drawDropIndicator(bool draw) { if (std::exchange(can_drop, draw) != can_drop) viewport()->update(); }\n  void drawSignalValue(QPainter *painter);\n  void drawTimeline(QPainter *painter);\n  void drawRubberBandTimeRange(QPainter *painter);\n  std::tuple<double, double, int> getNiceAxisNumbers(qreal min, qreal max, int tick_count);\n  qreal niceNumber(qreal x, bool ceiling);\n  QXYSeries *createSeries(SeriesType type, QColor color);\n  void setSeriesColor(QXYSeries *, QColor color);\n  void updateSeriesPoints();\n  void removeIf(std::function<bool(const SigItem &)> predicate);\n  inline void clearTrackPoints() { for (auto &s : sigs) s.track_pt = {}; }\n\n  int y_label_width = 0;\n  int align_to = 0;\n  QValueAxis *axis_x;\n  QValueAxis *axis_y;\n  QMenu *menu;\n  QAction *split_chart_act;\n  QAction *close_act;\n  QGraphicsPixmapItem *move_icon;\n  QGraphicsProxyWidget *close_btn_proxy;\n  QGraphicsProxyWidget *manage_btn_proxy;\n  TipLabel *tip_label;\n  std::vector<SigItem> sigs;\n  double cur_sec = 0;\n  SeriesType series_type = SeriesType::Line;\n  bool is_scrubbing = false;\n  bool resume_after_scrub = false;\n  QPixmap chart_pixmap;\n  bool can_drop = false;\n  double tooltip_x = -1;\n  QFont signal_value_font;\n  ChartsWidget *charts_widget;\n  friend class ChartsWidget;\n};\n"
  },
  "tools.cabana.chart.chartswidget.ChartsContainer": {
    "id": "tools.cabana.chart.chartswidget.ChartsContainer",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\chart\\chartswidget.h",
    "relative_path": "tools\\cabana\\chart\\chartswidget.h",
    "depends_on": [],
    "start_line": 24,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ChartsContainer : public QWidget {\npublic:\n  ChartsContainer(ChartsWidget *parent);\n  void dragEnterEvent(QDragEnterEvent *event) override;\n  void dropEvent(QDropEvent *event) override;\n  void dragLeaveEvent(QDragLeaveEvent *event) override { drawDropIndicator({}); }\n  void drawDropIndicator(const QPoint &pt) { drop_indictor_pos = pt; update(); }\n  void paintEvent(QPaintEvent *ev) override;\n  ChartView *getDropAfter(const QPoint &pos) const;\n\n  QGridLayout *charts_layout;\n  ChartsWidget *charts_widget;\n  QPoint drop_indictor_pos;\n};\n"
  },
  "tools.cabana.chart.chartswidget.ChartsWidget": {
    "id": "tools.cabana.chart.chartswidget.ChartsWidget",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\chart\\chartswidget.h",
    "relative_path": "tools\\cabana\\chart\\chartswidget.h",
    "depends_on": [],
    "start_line": 39,
    "end_line": 118,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ChartsWidget : public QFrame {\n  Q_OBJECT\n\npublic:\n  ChartsWidget(QWidget *parent = nullptr);\n  void showChart(const MessageId &id, const cabana::Signal *sig, bool show, bool merge);\n  inline bool hasSignal(const MessageId &id, const cabana::Signal *sig) { return findChart(id, sig) != nullptr; }\n\npublic slots:\n  void setColumnCount(int n);\n  void removeAll();\n  void timeRangeChanged(const std::optional<std::pair<double, double>> &time_range);\n  void setIsDocked(bool dock);\n\nsignals:\n  void toggleChartsDocking();\n  void seriesChanged();\n  void showTip(double seconds);\n\nprivate:\n  QSize minimumSizeHint() const override;\n  bool event(QEvent *event) override;\n  void alignCharts();\n  void newChart();\n  ChartView *createChart(int pos = 0);\n  void removeChart(ChartView *chart);\n  void splitChart(ChartView *chart);\n  QRect chartVisibleRect(ChartView *chart);\n  void eventsMerged(const MessageEventsMap &new_events);\n  void updateState();\n  void zoomReset();\n  void startAutoScroll();\n  void stopAutoScroll();\n  void doAutoScroll();\n  void updateToolBar();\n  void updateTabBar();\n  void setMaxChartRange(int value);\n  void updateLayout(bool force = false);\n  void settingChanged();\n  void showValueTip(double sec);\n  bool eventFilter(QObject *obj, QEvent *event) override;\n  void newTab();\n  void removeTab(int index);\n  inline QList<ChartView *> &currentCharts() { return tab_charts[tabbar->tabData(tabbar->currentIndex()).toInt()]; }\n  ChartView *findChart(const MessageId &id, const cabana::Signal *sig);\n\n  QLabel *title_label;\n  QLabel *range_lb;\n  LogSlider *range_slider;\n  QAction *range_lb_action;\n  QAction *range_slider_action;\n  bool is_docked = true;\n  ToolButton *dock_btn;\n\n  QToolBar *toolbar;\n  QAction *undo_zoom_action;\n  QAction *redo_zoom_action;\n  QAction *reset_zoom_action;\n  ToolButton *reset_zoom_btn;\n  QUndoStack *zoom_undo_stack;\n\n  ToolButton *remove_all_btn;\n  QList<ChartView *> charts;\n  std::unordered_map<int, QList<ChartView *>> tab_charts;\n  TabBar *tabbar;\n  ChartsContainer *charts_container;\n  QScrollArea *charts_scroll;\n  uint32_t max_chart_range = 0;\n  std::pair<double, double> display_range;\n  QAction *columns_action;\n  int column_count = 1;\n  int current_column_count = 0;\n  int auto_scroll_count = 0;\n  QTimer *auto_scroll_timer;\n  QTimer *align_timer;\n  int current_theme = 0;\n  bool value_tip_visible_ = false;\n  friend class ChartView;\n  friend class ChartsContainer;\n};\n"
  },
  "tools.cabana.chart.chartswidget.ZoomCommand": {
    "id": "tools.cabana.chart.chartswidget.ZoomCommand",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\chart\\chartswidget.h",
    "relative_path": "tools\\cabana\\chart\\chartswidget.h",
    "depends_on": [],
    "start_line": 120,
    "end_line": 129,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ZoomCommand : public QUndoCommand {\npublic:\n  ZoomCommand(std::pair<double, double> range) : range(range), QUndoCommand() {\n    prev_range = can->timeRange();\n    setText(QObject::tr(\"Zoom to %1-%2\").arg(range.first, 0, 'f', 2).arg(range.second, 0, 'f', 2));\n  }\n  void undo() override { can->setTimeRange(prev_range); }\n  void redo() override { can->setTimeRange(range); }\n  std::optional<std::pair<double, double>> prev_range, range;\n};\n"
  },
  "tools.cabana.chart.signalselector.SignalSelector": {
    "id": "tools.cabana.chart.signalselector.SignalSelector",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\chart\\signalselector.h",
    "relative_path": "tools\\cabana\\chart\\signalselector.h",
    "depends_on": [],
    "start_line": 9,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class SignalSelector : public QDialog {\npublic:\n  struct ListItem : public QListWidgetItem {\n    ListItem(const MessageId &msg_id, const cabana::Signal *sig, QListWidget *parent) : msg_id(msg_id), sig(sig), QListWidgetItem(parent) {}\n    MessageId msg_id;\n    const cabana::Signal *sig;\n  };\n\n  SignalSelector(QString title, QWidget *parent);\n  QList<ListItem *> seletedItems();\n  inline void addSelected(const MessageId &id, const cabana::Signal *sig) { addItemToList(selected_list, id, sig, true); }\n\nprivate:\n  void updateAvailableList(int index);\n  void addItemToList(QListWidget *parent, const MessageId id, const cabana::Signal *sig, bool show_msg_name = false);\n  void add(QListWidgetItem *item);\n  void remove(QListWidgetItem *item);\n\n  QComboBox *msgs_combo;\n  QListWidget *available_list;\n  QListWidget *selected_list;\n};\n"
  },
  "tools.cabana.chart.sparkline.Sparkline": {
    "id": "tools.cabana.chart.sparkline.Sparkline",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\chart\\sparkline.h",
    "relative_path": "tools\\cabana\\chart\\sparkline.h",
    "depends_on": [],
    "start_line": 10,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class Sparkline {\npublic:\n  void update(const MessageId &msg_id, const cabana::Signal *sig, double last_msg_ts, int range, QSize size);\n  inline double freq() const { return freq_; }\n  bool isEmpty() const { return pixmap.isNull(); }\n\n  QPixmap pixmap;\n  double min_val = 0;\n  double max_val = 0;\n\nprivate:\n  void render(const QColor &color, int range, QSize size);\n\n  std::vector<QPointF> points;\n  double freq_ = 0;\n};\n"
  },
  "tools.cabana.chart.tiplabel.TipLabel": {
    "id": "tools.cabana.chart.tiplabel.TipLabel",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\chart\\tiplabel.h",
    "relative_path": "tools\\cabana\\chart\\tiplabel.h",
    "depends_on": [],
    "start_line": 5,
    "end_line": 12,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class TipLabel : public QLabel {\n  Q_OBJECT\n\npublic:\n  TipLabel(QWidget *parent = nullptr);\n  void showText(const QPoint &pt, const QString &sec, QWidget *w, const QRect &rect);\n  void paintEvent(QPaintEvent *ev) override;\n};\n"
  },
  "tools.cabana.dbc.dbc.qHash": {
    "id": "tools.cabana.dbc.dbc.qHash",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\dbc\\dbc.cc",
    "relative_path": "tools\\cabana\\dbc\\dbc.cc",
    "depends_on": [],
    "start_line": 7,
    "end_line": 9,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "uint qHash(const MessageId &item) {\n  return qHash(item.source) ^ qHash(item.address);\n}\n"
  },
  "tools.cabana.dbc.dbc.get_raw_value": {
    "id": "tools.cabana.dbc.dbc.get_raw_value",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\dbc\\dbc.cc",
    "relative_path": "tools\\cabana\\dbc\\dbc.cc",
    "depends_on": [],
    "start_line": 182,
    "end_line": 213,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "double get_raw_value(const uint8_t *data, size_t data_size, const cabana::Signal &sig) {\n  const int msb_byte = sig.msb / 8;\n  if (msb_byte >= (int)data_size) return 0;\n\n  const int lsb_byte = sig.lsb / 8;\n  uint64_t val = 0;\n\n  // Fast path: signal fits in a single byte\n  if (msb_byte == lsb_byte) {\n    val = (data[msb_byte] >> (sig.lsb & 7)) & ((1ULL << sig.size) - 1);\n  } else {\n    // Multi-byte case: signal spans across multiple bytes\n    int bits = sig.size;\n    int i = msb_byte;\n    const int step = sig.is_little_endian ? -1 : 1;\n    while (i >= 0 && i < (int)data_size && bits > 0) {\n      const int msb = (i == msb_byte) ? sig.msb & 7 : 7;\n      const int lsb = (i == lsb_byte) ? sig.lsb & 7 : 0;\n      const int nbits = msb - lsb + 1;\n      val = (val << nbits) | ((data[i] >> lsb) & ((1ULL << nbits) - 1));\n      bits -= nbits;\n      i += step;\n    }\n  }\n\n  // Sign extension (if needed)\n  if (sig.is_signed && (val & (1ULL << (sig.size - 1)))) {\n    val |= ~((1ULL << sig.size) - 1);\n  }\n\n  return static_cast<int64_t>(val) * sig.factor + sig.offset;\n}\n"
  },
  "tools.cabana.dbc.dbc.updateMsbLsb": {
    "id": "tools.cabana.dbc.dbc.updateMsbLsb",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\dbc\\dbc.cc",
    "relative_path": "tools\\cabana\\dbc\\dbc.cc",
    "depends_on": [],
    "start_line": 215,
    "end_line": 223,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void updateMsbLsb(cabana::Signal &s) {\n  if (s.is_little_endian) {\n    s.lsb = s.start_bit;\n    s.msb = s.start_bit + s.size - 1;\n  } else {\n    s.lsb = flipBitPos(flipBitPos(s.start_bit) + s.size - 1);\n    s.msb = s.start_bit;\n  }\n}\n"
  },
  "tools.cabana.dbc.dbc.MessageId.toString": {
    "id": "tools.cabana.dbc.dbc.MessageId.toString",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\dbc\\dbc.h",
    "relative_path": "tools\\cabana\\dbc\\dbc.h",
    "depends_on": [],
    "start_line": 19,
    "end_line": 21,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  QString toString() const {\n    return QString(\"%1:%2\").arg(source).arg(QString::number(address, 16).toUpper());\n  }\n"
  },
  "tools.cabana.dbc.dbc.MessageId.operator==": {
    "id": "tools.cabana.dbc.dbc.MessageId.operator==",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\dbc\\dbc.h",
    "relative_path": "tools\\cabana\\dbc\\dbc.h",
    "depends_on": [],
    "start_line": 23,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  bool operator==(const MessageId &other) const {\n    return source == other.source && address == other.address;\n  }\n"
  },
  "tools.cabana.dbc.dbc.MessageId.operator!=": {
    "id": "tools.cabana.dbc.dbc.MessageId.operator!=",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\dbc\\dbc.h",
    "relative_path": "tools\\cabana\\dbc\\dbc.h",
    "depends_on": [],
    "start_line": 27,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  bool operator!=(const MessageId &other) const {\n    return !(*this == other);\n  }\n"
  },
  "tools.cabana.dbc.dbc.MessageId.operator<": {
    "id": "tools.cabana.dbc.dbc.MessageId.operator<",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\dbc\\dbc.h",
    "relative_path": "tools\\cabana\\dbc\\dbc.h",
    "depends_on": [],
    "start_line": 31,
    "end_line": 33,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  bool operator<(const MessageId &other) const {\n    return std::tie(source, address) < std::tie(other.source, other.address);\n  }\n"
  },
  "tools.cabana.dbc.dbc.MessageId.operator>": {
    "id": "tools.cabana.dbc.dbc.MessageId.operator>",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\dbc\\dbc.h",
    "relative_path": "tools\\cabana\\dbc\\dbc.h",
    "depends_on": [],
    "start_line": 35,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  bool operator>(const MessageId &other) const {\n    return std::tie(source, address) > std::tie(other.source, other.address);\n  }\n"
  },
  "tools.cabana.dbc.dbc.Signal": {
    "id": "tools.cabana.dbc.dbc.Signal",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\dbc\\dbc.h",
    "relative_path": "tools\\cabana\\dbc\\dbc.h",
    "depends_on": [],
    "start_line": 52,
    "end_line": 86,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class Signal {\npublic:\n  Signal() = default;\n  Signal(const Signal &other) = default;\n  void update();\n  bool getValue(const uint8_t *data, size_t data_size, double *val) const;\n  QString formatValue(double value, bool with_unit = true) const;\n  bool operator==(const cabana::Signal &other) const;\n  inline bool operator!=(const cabana::Signal &other) const { return !(*this == other); }\n\n  enum class Type {\n    Normal = 0,\n    Multiplexed,\n    Multiplexor\n  };\n\n  Type type = Type::Normal;\n  QString name;\n  int start_bit, msb, lsb, size;\n  double factor = 1.0;\n  double offset = 0;\n  bool is_signed;\n  bool is_little_endian;\n  double min, max;\n  QString unit;\n  QString comment;\n  QString receiver_name;\n  ValueDescription val_desc;\n  int precision = 0;\n  QColor color;\n\n  // Multiplexed\n  int multiplex_value = 0;\n  Signal *multiplexor = nullptr;\n};\n"
  },
  "tools.cabana.dbc.dbc.Msg": {
    "id": "tools.cabana.dbc.dbc.Msg",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\dbc\\dbc.h",
    "relative_path": "tools\\cabana\\dbc\\dbc.h",
    "depends_on": [],
    "start_line": 88,
    "end_line": 112,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class Msg {\npublic:\n  Msg() = default;\n  Msg(const Msg &other) { *this = other; }\n  ~Msg();\n  cabana::Signal *addSignal(const cabana::Signal &sig);\n  cabana::Signal *updateSignal(const QString &sig_name, const cabana::Signal &sig);\n  void removeSignal(const QString &sig_name);\n  Msg &operator=(const Msg &other);\n  int indexOf(const cabana::Signal *sig) const;\n  cabana::Signal *sig(const QString &sig_name) const;\n  QString newSignalName();\n  void update();\n  inline const std::vector<cabana::Signal *> &getSignals() const { return sigs; }\n\n  uint32_t address;\n  QString name;\n  uint32_t size;\n  QString comment;\n  QString transmitter;\n  std::vector<cabana::Signal *> sigs;\n\n  std::vector<uint8_t> mask;\n  cabana::Signal *multiplexor = nullptr;\n};\n"
  },
  "tools.cabana.dbc.dbcfile.DBCFile": {
    "id": "tools.cabana.dbc.dbcfile.DBCFile",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\dbc\\dbcfile.h",
    "relative_path": "tools\\cabana\\dbc\\dbcfile.h",
    "depends_on": [],
    "start_line": 8,
    "end_line": 44,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class DBCFile {\npublic:\n  DBCFile(const QString &dbc_file_name);\n  DBCFile(const QString &name, const QString &content);\n  ~DBCFile() {}\n\n  bool save();\n  bool saveAs(const QString &new_filename);\n  bool writeContents(const QString &fn);\n  QString generateDBC();\n\n  void updateMsg(const MessageId &id, const QString &name, uint32_t size, const QString &node, const QString &comment);\n  inline void removeMsg(const MessageId &id) { msgs.erase(id.address); }\n\n  inline const std::map<uint32_t, cabana::Msg> &getMessages() const { return msgs; }\n  cabana::Msg *msg(uint32_t address);\n  cabana::Msg *msg(const QString &name);\n  inline cabana::Msg *msg(const MessageId &id) { return msg(id.address); }\n  cabana::Signal *signal(uint32_t address, const QString &name);\n\n  inline QString name() const { return name_.isEmpty() ? \"untitled\" : name_; }\n  inline bool isEmpty() const { return msgs.empty() && name_.isEmpty(); }\n\n  QString filename;\n\nprivate:\n  void parse(const QString &content);\n  cabana::Msg *parseBO(const QString &line);\n  void parseSG(const QString &line, cabana::Msg *current_msg, int &multiplexor_cnt);\n  void parseCM_BO(const QString &line, const QString &content, const QString &raw_line, const QTextStream &stream);\n  void parseCM_SG(const QString &line, const QString &content, const QString &raw_line, const QTextStream &stream);\n  void parseVAL(const QString &line);\n\n  QString header;\n  std::map<uint32_t, cabana::Msg> msgs;\n  QString name_;\n};\n"
  },
  "tools.cabana.dbc.dbcmanager.toString": {
    "id": "tools.cabana.dbc.dbcmanager.toString",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\dbc\\dbcmanager.cc",
    "relative_path": "tools\\cabana\\dbc\\dbcmanager.cc",
    "depends_on": [],
    "start_line": 168,
    "end_line": 173,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QString toString(const SourceSet &ss) {\n  return std::accumulate(ss.cbegin(), ss.cend(), QString(), [](QString str, int source) {\n    if (!str.isEmpty()) str += \", \";\n    return str + (source == -1 ? QStringLiteral(\"all\") : QString::number(source));\n  });\n}\n"
  },
  "tools.cabana.dbc.dbcmanager.dbc": {
    "id": "tools.cabana.dbc.dbcmanager.dbc",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\dbc\\dbcmanager.cc",
    "relative_path": "tools\\cabana\\dbc\\dbcmanager.cc",
    "depends_on": [],
    "start_line": 175,
    "end_line": 178,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "DBCManager *dbc() {\n  static DBCManager dbc_manager(nullptr);\n  return &dbc_manager;\n}\n"
  },
  "tools.cabana.dbc.dbcmanager.DBCManager": {
    "id": "tools.cabana.dbc.dbcmanager.DBCManager",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\dbc\\dbcmanager.h",
    "relative_path": "tools\\cabana\\dbc\\dbcmanager.h",
    "depends_on": [],
    "start_line": 15,
    "end_line": 61,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class DBCManager : public QObject {\n  Q_OBJECT\n\npublic:\n  DBCManager(QObject *parent) : QObject(parent) {}\n  ~DBCManager() {}\n  bool open(const SourceSet &sources, const QString &dbc_file_name, QString *error = nullptr);\n  bool open(const SourceSet &sources, const QString &name, const QString &content, QString *error = nullptr);\n  void close(const SourceSet &sources);\n  void close(DBCFile *dbc_file);\n  void closeAll();\n\n  void addSignal(const MessageId &id, const cabana::Signal &sig);\n  void updateSignal(const MessageId &id, const QString &sig_name, const cabana::Signal &sig);\n  void removeSignal(const MessageId &id, const QString &sig_name);\n\n  void updateMsg(const MessageId &id, const QString &name, uint32_t size, const QString &node, const QString &comment);\n  void removeMsg(const MessageId &id);\n\n  QString newMsgName(const MessageId &id);\n  QString newSignalName(const MessageId &id);\n\n  const std::map<uint32_t, cabana::Msg> &getMessages(uint8_t source);\n  cabana::Msg *msg(const MessageId &id);\n  cabana::Msg* msg(uint8_t source, const QString &name);\n\n  QStringList signalNames();\n  inline int dbcCount() { return allDBCFiles().size(); }\n  int nonEmptyDBCCount();\n\n  const SourceSet sources(const DBCFile *dbc_file) const;\n  DBCFile *findDBCFile(const uint8_t source);\n  inline DBCFile *findDBCFile(const MessageId &id) { return findDBCFile(id.source); }\n  std::set<DBCFile *> allDBCFiles();\n\nsignals:\n  void signalAdded(MessageId id, const cabana::Signal *sig);\n  void signalRemoved(const cabana::Signal *sig);\n  void signalUpdated(const cabana::Signal *sig);\n  void msgUpdated(MessageId id);\n  void msgRemoved(MessageId id);\n  void DBCFileChanged();\n  void maskUpdated();\n\nprivate:\n  std::map<int, std::shared_ptr<DBCFile>> dbc_files;\n};\n"
  },
  "tools.cabana.dbc.dbcmanager.msgName": {
    "id": "tools.cabana.dbc.dbcmanager.msgName",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\dbc\\dbcmanager.h",
    "relative_path": "tools\\cabana\\dbc\\dbcmanager.h",
    "depends_on": [],
    "start_line": 66,
    "end_line": 69,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "inline QString msgName(const MessageId &id) {\n  auto msg = dbc()->msg(id);\n  return msg ? msg->name : UNTITLED;\n}\n"
  },
  "tools.cabana.dbc.generate_dbc_json.generate_dbc_dict": {
    "id": "tools.cabana.dbc.generate_dbc_json.generate_dbc_dict",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\dbc\\generate_dbc_json.py",
    "relative_path": "tools\\cabana\\dbc\\generate_dbc_json.py",
    "depends_on": [],
    "start_line": 10,
    "end_line": 27,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.cabana.streams.abstractstream.getColor": {
    "id": "tools.cabana.streams.abstractstream.getColor",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streams\\abstractstream.cc",
    "relative_path": "tools\\cabana\\streams\\abstractstream.cc",
    "depends_on": [],
    "start_line": 236,
    "end_line": 244,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QColor getColor(int c) {\n  constexpr int start_alpha = 128;\n  static const QColor colors[] = {\n      [GREYISH_BLUE] = QColor(102, 86, 169, start_alpha / 2),\n      [CYAN] = QColor(0, 187, 255, start_alpha),\n      [RED] = QColor(255, 0, 0, start_alpha),\n  };\n  return settings.theme == LIGHT_THEME ? colors[c] : colors[c].lighter(135);\n}\n"
  },
  "tools.cabana.streams.abstractstream.blend": {
    "id": "tools.cabana.streams.abstractstream.blend",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streams\\abstractstream.cc",
    "relative_path": "tools\\cabana\\streams\\abstractstream.cc",
    "depends_on": [],
    "start_line": 246,
    "end_line": 248,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "inline QColor blend(const QColor &a, const QColor &b) {\n  return QColor((a.red() + b.red()) / 2, (a.green() + b.green()) / 2, (a.blue() + b.blue()) / 2, (a.alpha() + b.alpha()) / 2);\n}\n"
  },
  "tools.cabana.streams.abstractstream.calc_freq": {
    "id": "tools.cabana.streams.abstractstream.calc_freq",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streams\\abstractstream.cc",
    "relative_path": "tools\\cabana\\streams\\abstractstream.cc",
    "depends_on": [],
    "start_line": 251,
    "end_line": 258,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "double calc_freq(const MessageId &msg_id, double current_sec) {\n  auto [first, last] = can->eventsInRange(msg_id, std::make_pair(current_sec - 59, current_sec));\n  int count = std::distance(first, last);\n  if (count <= 1) return 0.0;\n\n  double duration = ((*std::prev(last))->mono_time - (*first)->mono_time) / 1e9;\n  return duration > std::numeric_limits<double>::epsilon() ? (count - 1) / duration : 0.0;\n}\n"
  },
  "tools.cabana.streams.abstractstream.AbstractStream": {
    "id": "tools.cabana.streams.abstractstream.AbstractStream",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streams\\abstractstream.h",
    "relative_path": "tools\\cabana\\streams\\abstractstream.h",
    "depends_on": [],
    "start_line": 59,
    "end_line": 136,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class AbstractStream : public QObject {\n  Q_OBJECT\n\npublic:\n  AbstractStream(QObject *parent);\n  virtual ~AbstractStream() {}\n  virtual void start() = 0;\n  virtual bool liveStreaming() const { return true; }\n  virtual void seekTo(double ts) {}\n  virtual QString routeName() const = 0;\n  virtual QString carFingerprint() const { return \"\"; }\n  virtual QDateTime beginDateTime() const { return {}; }\n  virtual uint64_t beginMonoTime() const { return 0; }\n  virtual double minSeconds() const { return 0; }\n  virtual double maxSeconds() const { return 0; }\n  virtual void setSpeed(float speed) {}\n  virtual double getSpeed() { return 1; }\n  virtual bool isPaused() const { return false; }\n  virtual void pause(bool pause) {}\n  void setTimeRange(const std::optional<std::pair<double, double>> &range);\n  const std::optional<std::pair<double, double>> &timeRange() const { return time_range_; }\n\n  inline double currentSec() const { return current_sec_; }\n  inline uint64_t toMonoTime(double sec) const { return beginMonoTime() + std::max(sec, 0.0) * 1e9; }\n  inline double toSeconds(uint64_t mono_time) const { return std::max(0.0, (mono_time - beginMonoTime()) / 1e9); }\n\n  inline const std::unordered_map<MessageId, CanData> &lastMessages() const { return last_msgs; }\n  bool isMessageActive(const MessageId &id) const;\n  inline const MessageEventsMap &eventsMap() const { return events_; }\n  inline const std::vector<const CanEvent *> &allEvents() const { return all_events_; }\n  const CanData &lastMessage(const MessageId &id) const;\n  const std::vector<const CanEvent *> &events(const MessageId &id) const;\n  std::pair<CanEventIter, CanEventIter> eventsInRange(const MessageId &id, std::optional<std::pair<double, double>> time_range) const;\n\n  size_t suppressHighlighted();\n  void clearSuppressed();\n  void suppressDefinedSignals(bool suppress);\n\nsignals:\n  void paused();\n  void resume();\n  void seeking(double sec);\n  void seekedTo(double sec);\n  void timeRangeChanged(const std::optional<std::pair<double, double>> &range);\n  void eventsMerged(const MessageEventsMap &events_map);\n  void msgsReceived(const std::set<MessageId> *new_msgs, bool has_new_ids);\n  void sourcesUpdated(const SourceSet &s);\n  void privateUpdateLastMsgsSignal();\n\npublic:\n  SourceSet sources;\n\nprotected:\n  void mergeEvents(const std::vector<const CanEvent *> &events);\n  const CanEvent *newEvent(uint64_t mono_time, const cereal::CanData::Reader &c);\n  void updateEvent(const MessageId &id, double sec, const uint8_t *data, uint8_t size);\n  void waitForSeekFinshed();\n  std::vector<const CanEvent *> all_events_;\n  double current_sec_ = 0;\n  std::optional<std::pair<double, double>> time_range_;\n\nprivate:\n  void updateLastMessages();\n  void updateLastMsgsTo(double sec);\n  void updateMasks();\n\n  MessageEventsMap events_;\n  std::unordered_map<MessageId, CanData> last_msgs;\n  std::unique_ptr<MonotonicBuffer> event_buffer_;\n\n  // Members accessed in multiple threads. (mutex protected)\n  std::mutex mutex_;\n  std::condition_variable seek_finished_cv_;\n  bool seek_finished_ = false;\n  std::set<MessageId> new_msgs_;\n  std::unordered_map<MessageId, CanData> messages_;\n  std::unordered_map<MessageId, std::vector<uint8_t>> masks_;\n};\n"
  },
  "tools.cabana.streams.abstractstream.AbstractOpenStreamWidget": {
    "id": "tools.cabana.streams.abstractstream.AbstractOpenStreamWidget",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streams\\abstractstream.h",
    "relative_path": "tools\\cabana\\streams\\abstractstream.h",
    "depends_on": [],
    "start_line": 138,
    "end_line": 146,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class AbstractOpenStreamWidget : public QWidget {\n  Q_OBJECT\npublic:\n  AbstractOpenStreamWidget(QWidget *parent = nullptr) : QWidget(parent) {}\n  virtual AbstractStream *open() = 0;\n\nsignals:\n  void enableOpenButton(bool);\n};\n"
  },
  "tools.cabana.streams.abstractstream.DummyStream": {
    "id": "tools.cabana.streams.abstractstream.DummyStream",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streams\\abstractstream.h",
    "relative_path": "tools\\cabana\\streams\\abstractstream.h",
    "depends_on": [],
    "start_line": 148,
    "end_line": 154,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class DummyStream : public AbstractStream {\n  Q_OBJECT\npublic:\n  DummyStream(QObject *parent) : AbstractStream(parent) {}\n  QString routeName() const override { return tr(\"No Stream\"); }\n  void start() override {}\n};\n"
  },
  "tools.cabana.streams.devicestream.DeviceStream": {
    "id": "tools.cabana.streams.devicestream.DeviceStream",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streams\\devicestream.h",
    "relative_path": "tools\\cabana\\streams\\devicestream.h",
    "depends_on": [],
    "start_line": 5,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class DeviceStream : public LiveStream {\n  Q_OBJECT\npublic:\n  DeviceStream(QObject *parent, QString address = {});\n  inline QString routeName() const override {\n    return QString(\"Live Streaming From %1\").arg(zmq_address.isEmpty() ? \"127.0.0.1\" : zmq_address);\n  }\n\nprotected:\n  void streamThread() override;\n  const QString zmq_address;\n};\n"
  },
  "tools.cabana.streams.devicestream.DeviceStream.routeName": {
    "id": "tools.cabana.streams.devicestream.DeviceStream.routeName",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streams\\devicestream.h",
    "relative_path": "tools\\cabana\\streams\\devicestream.h",
    "depends_on": [],
    "start_line": 9,
    "end_line": 11,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  inline QString routeName() const override {\n    return QString(\"Live Streaming From %1\").arg(zmq_address.isEmpty() ? \"127.0.0.1\" : zmq_address);\n  }\n"
  },
  "tools.cabana.streams.devicestream.OpenDeviceWidget": {
    "id": "tools.cabana.streams.devicestream.OpenDeviceWidget",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streams\\devicestream.h",
    "relative_path": "tools\\cabana\\streams\\devicestream.h",
    "depends_on": [],
    "start_line": 18,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class OpenDeviceWidget : public AbstractOpenStreamWidget {\n  Q_OBJECT\n\npublic:\n  OpenDeviceWidget(QWidget *parent = nullptr);\n  AbstractStream *open() override;\n\nprivate:\n  QLineEdit *ip_address;\n  QButtonGroup *group;\n};\n"
  },
  "tools.cabana.streams.livestream.LiveStream": {
    "id": "tools.cabana.streams.livestream.LiveStream",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streams\\livestream.h",
    "relative_path": "tools\\cabana\\streams\\livestream.h",
    "depends_on": [],
    "start_line": 11,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class LiveStream : public AbstractStream {\n  Q_OBJECT\n\npublic:\n  LiveStream(QObject *parent);\n  virtual ~LiveStream();\n  void start() override;\n  void stop();\n  inline QDateTime beginDateTime() const { return begin_date_time; }\n  inline uint64_t beginMonoTime() const override { return begin_event_ts; }\n  double maxSeconds() const override { return std::max(1.0, (lastest_event_ts - begin_event_ts) / 1e9); }\n  void setSpeed(float speed) override { speed_ = speed; }\n  double getSpeed() override { return speed_; }\n  bool isPaused() const override { return paused_; }\n  void pause(bool pause) override;\n  void seekTo(double sec) override;\n\nprotected:\n  virtual void streamThread() = 0;\n  void handleEvent(kj::ArrayPtr<capnp::word> event);\n\nprivate:\n  void startUpdateTimer();\n  void timerEvent(QTimerEvent *event) override;\n  void updateEvents();\n\n  std::mutex lock;\n  QThread *stream_thread;\n  std::vector<const CanEvent *> received_events_;\n\n  int timer_id;\n  QBasicTimer update_timer;\n\n  QDateTime begin_date_time;\n  uint64_t begin_event_ts = 0;\n  uint64_t lastest_event_ts = 0;\n  uint64_t current_event_ts = 0;\n  uint64_t first_event_ts = 0;\n  uint64_t first_update_ts = 0;\n  bool post_last_event = true;\n  double speed_ = 1;\n  bool paused_ = false;\n\n  struct Logger;\n  std::unique_ptr<Logger> logger;\n};\n"
  },
  "tools.cabana.streams.pandastream.PandaStream": {
    "id": "tools.cabana.streams.pandastream.PandaStream",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streams\\pandastream.h",
    "relative_path": "tools\\cabana\\streams\\pandastream.h",
    "depends_on": [],
    "start_line": 26,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class PandaStream : public LiveStream {\n  Q_OBJECT\npublic:\n  PandaStream(QObject *parent, PandaStreamConfig config_ = {});\n  ~PandaStream() { stop(); }\n  inline QString routeName() const override {\n    return QString(\"Panda: %1\").arg(config.serial);\n  }\n\nprotected:\n  bool connect();\n  void streamThread() override;\n\n  std::unique_ptr<Panda> panda;\n  PandaStreamConfig config = {};\n};\n"
  },
  "tools.cabana.streams.pandastream.PandaStream.routeName": {
    "id": "tools.cabana.streams.pandastream.PandaStream.routeName",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streams\\pandastream.h",
    "relative_path": "tools\\cabana\\streams\\pandastream.h",
    "depends_on": [],
    "start_line": 31,
    "end_line": 33,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  inline QString routeName() const override {\n    return QString(\"Panda: %1\").arg(config.serial);\n  }\n"
  },
  "tools.cabana.streams.pandastream.OpenPandaWidget": {
    "id": "tools.cabana.streams.pandastream.OpenPandaWidget",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streams\\pandastream.h",
    "relative_path": "tools\\cabana\\streams\\pandastream.h",
    "depends_on": [],
    "start_line": 43,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class OpenPandaWidget : public AbstractOpenStreamWidget {\n  Q_OBJECT\n\npublic:\n  OpenPandaWidget(QWidget *parent = nullptr);\n  AbstractStream *open() override;\n\nprivate:\n  void refreshSerials();\n  void buildConfigForm();\n\n  QComboBox *serial_edit;\n  QFormLayout *form_layout;\n  PandaStreamConfig config = {};\n};\n"
  },
  "tools.cabana.streams.replaystream.ReplayStream": {
    "id": "tools.cabana.streams.replaystream.ReplayStream",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streams\\replaystream.h",
    "relative_path": "tools\\cabana\\streams\\replaystream.h",
    "depends_on": [],
    "start_line": 15,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ReplayStream : public AbstractStream {\n  Q_OBJECT\n\npublic:\n  ReplayStream(QObject *parent);\n  void start() override { replay->start(); }\n  bool loadRoute(const QString &route, const QString &data_dir, uint32_t replay_flags = REPLAY_FLAG_NONE, bool auto_source = false);\n  bool eventFilter(const Event *event);\n  void seekTo(double ts) override { replay->seekTo(std::max(double(0), ts), false); }\n  bool liveStreaming() const override { return false; }\n  inline QString routeName() const override { return QString::fromStdString(replay->route().name()); }\n  inline QString carFingerprint() const override { return replay->carFingerprint().c_str(); }\n  double minSeconds() const override { return replay->minSeconds(); }\n  double maxSeconds() const { return replay->maxSeconds(); }\n  inline QDateTime beginDateTime() const { return QDateTime::fromSecsSinceEpoch(replay->routeDateTime()); }\n  inline uint64_t beginMonoTime() const override { return replay->routeStartNanos(); }\n  inline void setSpeed(float speed) override { replay->setSpeed(speed); }\n  inline float getSpeed() const { return replay->getSpeed(); }\n  inline Replay *getReplay() const { return replay.get(); }\n  inline bool isPaused() const override { return replay->isPaused(); }\n  void pause(bool pause) override;\n\nsignals:\n  void qLogLoaded(std::shared_ptr<LogReader> qlog);\n\nprivate:\n  void mergeSegments();\n  std::unique_ptr<Replay> replay = nullptr;\n  std::set<int> processed_segments;\n  std::unique_ptr<OpenpilotPrefix> op_prefix;\n};\n"
  },
  "tools.cabana.streams.replaystream.OpenReplayWidget": {
    "id": "tools.cabana.streams.replaystream.OpenReplayWidget",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streams\\replaystream.h",
    "relative_path": "tools\\cabana\\streams\\replaystream.h",
    "depends_on": [],
    "start_line": 47,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class OpenReplayWidget : public AbstractOpenStreamWidget {\n  Q_OBJECT\n\npublic:\n  OpenReplayWidget(QWidget *parent = nullptr);\n  AbstractStream *open() override;\n\nprivate:\n  QLineEdit *route_edit;\n  std::vector<QCheckBox *> cameras;\n};\n"
  },
  "tools.cabana.streams.routes.OneShotHttpRequest": {
    "id": "tools.cabana.streams.routes.OneShotHttpRequest",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streams\\routes.cc",
    "relative_path": "tools\\cabana\\streams\\routes.cc",
    "depends_on": [],
    "start_line": 12,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class OneShotHttpRequest : public HttpRequest {\npublic:\n  OneShotHttpRequest(QObject *parent) : HttpRequest(parent, false) {}\n  void send(const QString &url) {\n    if (reply) {\n      reply->disconnect();\n      reply->abort();\n      reply->deleteLater();\n      reply = nullptr;\n    }\n    sendRequest(url);\n  }\n};\n"
  },
  "tools.cabana.streams.routes.OneShotHttpRequest.send": {
    "id": "tools.cabana.streams.routes.OneShotHttpRequest.send",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streams\\routes.cc",
    "relative_path": "tools\\cabana\\streams\\routes.cc",
    "depends_on": [],
    "start_line": 15,
    "end_line": 23,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  void send(const QString &url) {\n    if (reply) {\n      reply->disconnect();\n      reply->abort();\n      reply->deleteLater();\n      reply = nullptr;\n    }\n    sendRequest(url);\n  }\n"
  },
  "tools.cabana.streams.routes.RouteListWidget": {
    "id": "tools.cabana.streams.routes.RouteListWidget",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streams\\routes.cc",
    "relative_path": "tools\\cabana\\streams\\routes.cc",
    "depends_on": [],
    "start_line": 27,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class RouteListWidget : public QListWidget {\npublic:\n  RouteListWidget(QWidget *parent = nullptr) : QListWidget(parent) {}\n  void setEmptyText(const QString &text) {\n    empty_text_ = text;\n    viewport()->update();\n  }\n  void paintEvent(QPaintEvent *event) override {\n    QListWidget::paintEvent(event);\n    if (count() == 0) {\n      QPainter painter(viewport());\n      painter.drawText(viewport()->rect(), Qt::AlignCenter, empty_text_);\n    }\n  }\n  QString empty_text_ = tr(\"No items\");\n};\n"
  },
  "tools.cabana.streams.routes.RouteListWidget.setEmptyText": {
    "id": "tools.cabana.streams.routes.RouteListWidget.setEmptyText",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streams\\routes.cc",
    "relative_path": "tools\\cabana\\streams\\routes.cc",
    "depends_on": [],
    "start_line": 30,
    "end_line": 33,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  void setEmptyText(const QString &text) {\n    empty_text_ = text;\n    viewport()->update();\n  }\n"
  },
  "tools.cabana.streams.routes.RouteListWidget.paintEvent": {
    "id": "tools.cabana.streams.routes.RouteListWidget.paintEvent",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streams\\routes.cc",
    "relative_path": "tools\\cabana\\streams\\routes.cc",
    "depends_on": [],
    "start_line": 34,
    "end_line": 40,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  void paintEvent(QPaintEvent *event) override {\n    QListWidget::paintEvent(event);\n    if (count() == 0) {\n      QPainter painter(viewport());\n      painter.drawText(viewport()->rect(), Qt::AlignCenter, empty_text_);\n    }\n  }\n"
  },
  "tools.cabana.streams.routes.RoutesDialog": {
    "id": "tools.cabana.streams.routes.RoutesDialog",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streams\\routes.h",
    "relative_path": "tools\\cabana\\streams\\routes.h",
    "depends_on": [],
    "start_line": 11,
    "end_line": 26,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class RoutesDialog : public QDialog {\n  Q_OBJECT\npublic:\n  RoutesDialog(QWidget *parent);\n  QString route();\n\nprotected:\n  void parseDeviceList(const QString &json, bool success, QNetworkReply::NetworkError err);\n  void parseRouteList(const QString &json, bool success, QNetworkReply::NetworkError err);\n  void fetchRoutes();\n\n  QComboBox *device_list_;\n  QComboBox *period_selector_;\n  RouteListWidget *route_list_;\n  OneShotHttpRequest *route_requester_;\n};\n"
  },
  "tools.cabana.streams.socketcanstream.SocketCanStream": {
    "id": "tools.cabana.streams.socketcanstream.SocketCanStream",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streams\\socketcanstream.h",
    "relative_path": "tools\\cabana\\streams\\socketcanstream.h",
    "depends_on": [],
    "start_line": 16,
    "end_line": 33,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class SocketCanStream : public LiveStream {\n  Q_OBJECT\npublic:\n  SocketCanStream(QObject *parent, SocketCanStreamConfig config_ = {});\n  ~SocketCanStream() { stop(); }\n  static bool available();\n\n  inline QString routeName() const override {\n    return QString(\"Live Streaming From Socket CAN %1\").arg(config.device);\n  }\n\nprotected:\n  void streamThread() override;\n  bool connect();\n\n  SocketCanStreamConfig config = {};\n  std::unique_ptr<QCanBusDevice> device;\n};\n"
  },
  "tools.cabana.streams.socketcanstream.SocketCanStream.routeName": {
    "id": "tools.cabana.streams.socketcanstream.SocketCanStream.routeName",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streams\\socketcanstream.h",
    "relative_path": "tools\\cabana\\streams\\socketcanstream.h",
    "depends_on": [],
    "start_line": 23,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  inline QString routeName() const override {\n    return QString(\"Live Streaming From Socket CAN %1\").arg(config.device);\n  }\n"
  },
  "tools.cabana.streams.socketcanstream.OpenSocketCanWidget": {
    "id": "tools.cabana.streams.socketcanstream.OpenSocketCanWidget",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\streams\\socketcanstream.h",
    "relative_path": "tools\\cabana\\streams\\socketcanstream.h",
    "depends_on": [],
    "start_line": 35,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class OpenSocketCanWidget : public AbstractOpenStreamWidget {\n  Q_OBJECT\n\npublic:\n  OpenSocketCanWidget(QWidget *parent = nullptr);\n  AbstractStream *open() override;\n\nprivate:\n  void refreshDevices();\n\n  QComboBox *device_edit;\n  SocketCanStreamConfig config = {};\n};\n"
  },
  "tools.cabana.tests.test_runner.main": {
    "id": "tools.cabana.tests.test_runner.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\tests\\test_runner.cc",
    "relative_path": "tools\\cabana\\tests\\test_runner.cc",
    "depends_on": [],
    "start_line": 5,
    "end_line": 10,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int main(int argc, char **argv) {\n  // unit tests for Qt\n  QCoreApplication app(argc, argv);\n  const int res = Catch::Session().run(argc, argv);\n  return (res < 0xff ? res : 0xff);\n}\n"
  },
  "tools.cabana.tools.findsignal.FindSignalModel": {
    "id": "tools.cabana.tools.findsignal.FindSignalModel",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\tools\\findsignal.h",
    "relative_path": "tools\\cabana\\tools\\findsignal.h",
    "depends_on": [],
    "start_line": 15,
    "end_line": 38,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class FindSignalModel : public QAbstractTableModel {\npublic:\n  struct SearchSignal {\n    MessageId id = {};\n    uint64_t mono_time = 0;\n    cabana::Signal sig = {};\n    double value = 0.;\n    QStringList values;\n  };\n\n  FindSignalModel(QObject *parent) : QAbstractTableModel(parent) {}\n  QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const override;\n  QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const override;\n  int columnCount(const QModelIndex &parent = QModelIndex()) const override { return 3; }\n  int rowCount(const QModelIndex &parent = QModelIndex()) const override { return std::min(filtered_signals.size(), 300); }\n  void search(std::function<bool(double)> cmp);\n  void reset();\n  void undo();\n\n  QList<SearchSignal> filtered_signals;\n  QList<SearchSignal> initial_signals;\n  QList<QList<SearchSignal>> histories;\n  uint64_t last_time = std::numeric_limits<uint64_t>::max();\n};\n"
  },
  "tools.cabana.tools.findsignal.FindSignalDlg": {
    "id": "tools.cabana.tools.findsignal.FindSignalDlg",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\tools\\findsignal.h",
    "relative_path": "tools\\cabana\\tools\\findsignal.h",
    "depends_on": [],
    "start_line": 40,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class FindSignalDlg : public QDialog {\n  Q_OBJECT\npublic:\n  FindSignalDlg(QWidget *parent);\n\nsignals:\n  void openMessage(const MessageId &id);\n\nprivate:\n  void search();\n  void modelReset();\n  void setInitialSignals();\n  void customMenuRequested(const QPoint &pos);\n\n  QLineEdit *value1, *value2, *factor_edit, *offset_edit;\n  QLineEdit *bus_edit, *address_edit, *first_time_edit, *last_time_edit;\n  QComboBox *compare_cb;\n  QSpinBox *min_size, *max_size;\n  QCheckBox *litter_endian, *is_signed;\n  QPushButton *search_btn, *reset_btn, *undo_btn;\n  QGroupBox *properties_group, *message_group;\n  QTableView *view;\n  QLabel *to_label, *stats_label;\n  FindSignalModel *model;\n};\n"
  },
  "tools.cabana.tools.findsimilarbits.FindSimilarBitsDlg": {
    "id": "tools.cabana.tools.findsimilarbits.FindSimilarBitsDlg",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\tools\\findsimilarbits.h",
    "relative_path": "tools\\cabana\\tools\\findsimilarbits.h",
    "depends_on": [],
    "start_line": 11,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class FindSimilarBitsDlg : public QDialog {\n  Q_OBJECT\n\npublic:\n  FindSimilarBitsDlg(QWidget *parent);\n\nsignals:\n  void openMessage(const MessageId &msg_id);\n\nprivate:\n  struct mismatched_struct {\n    uint32_t address, byte_idx, bit_idx, mismatches, total;\n    float perc;\n  };\n  QList<mismatched_struct> calcBits(uint8_t bus, uint32_t selected_address, int byte_idx, int bit_idx, uint8_t find_bus,\n                                    bool equal, int min_msgs_cnt);\n  void find();\n\n  QTableWidget *table;\n  QComboBox *src_bus_combo, *find_bus_combo, *msg_cb, *equal_combo;\n  QSpinBox *byte_idx_sb, *bit_idx_sb;\n  QPushButton *search_btn;\n  QLineEdit *min_msgs;\n};\n"
  },
  "tools.cabana.tools.routeinfo.RouteInfoDlg": {
    "id": "tools.cabana.tools.routeinfo.RouteInfoDlg",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\tools\\routeinfo.h",
    "relative_path": "tools\\cabana\\tools\\routeinfo.h",
    "depends_on": [],
    "start_line": 4,
    "end_line": 8,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class RouteInfoDlg : public QDialog {\n  Q_OBJECT\npublic:\n  RouteInfoDlg(QWidget *parent = nullptr);\n};\n"
  },
  "tools.cabana.utils.export.exportToCSV": {
    "id": "tools.cabana.utils.export.exportToCSV",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\utils\\export.cc",
    "relative_path": "tools\\cabana\\utils\\export.cc",
    "depends_on": [],
    "start_line": 10,
    "end_line": 21,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void exportToCSV(const QString &file_name, std::optional<MessageId> msg_id) {\n  QFile file(file_name);\n  if (file.open(QIODevice::ReadWrite | QIODevice::Truncate)) {\n    QTextStream stream(&file);\n    stream << \"time,addr,bus,data\\n\";\n    for (auto e : msg_id ? can->events(*msg_id) : can->allEvents()) {\n      stream << QString::number(can->toSeconds(e->mono_time), 'f', 3) << \",\"\n             << \"0x\" << QString::number(e->address, 16) << \",\" << e->src << \",\"\n             << \"0x\" << QByteArray::fromRawData((const char *)e->dat, e->size).toHex().toUpper() << \"\\n\";\n    }\n  }\n}\n"
  },
  "tools.cabana.utils.export.exportSignalsToCSV": {
    "id": "tools.cabana.utils.export.exportSignalsToCSV",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\utils\\export.cc",
    "relative_path": "tools\\cabana\\utils\\export.cc",
    "depends_on": [],
    "start_line": 23,
    "end_line": 43,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void exportSignalsToCSV(const QString &file_name, const MessageId &msg_id) {\n  QFile file(file_name);\n  if (auto msg = dbc()->msg(msg_id); msg && msg->sigs.size() && file.open(QIODevice::ReadWrite | QIODevice::Truncate)) {\n    QTextStream stream(&file);\n    stream << \"time,addr,bus\";\n    for (auto s : msg->sigs)\n      stream << \",\" << s->name;\n    stream << \"\\n\";\n\n    for (auto e : can->events(msg_id)) {\n      stream << QString::number(can->toSeconds(e->mono_time), 'f', 3) << \",\"\n             << \"0x\" << QString::number(e->address, 16) << \",\" << e->src;\n      for (auto s : msg->sigs) {\n        double value = 0;\n        s->getValue(e->dat, e->size, &value);\n        stream << \",\" << QString::number(value, 'f', s->precision);\n      }\n      stream << \"\\n\";\n    }\n  }\n}\n"
  },
  "tools.cabana.utils.util.icon": {
    "id": "tools.cabana.utils.util.icon",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\utils\\util.cc",
    "relative_path": "tools\\cabana\\utils\\util.cc",
    "depends_on": [],
    "start_line": 194,
    "end_line": 208,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QPixmap icon(const QString &id) {\n  bool dark_theme = settings.theme == DARK_THEME;\n  QPixmap pm;\n  QString key = \"bootstrap_\" % id % (dark_theme ? \"1\" : \"0\");\n  if (!QPixmapCache::find(key, &pm)) {\n    pm = bootstrapPixmap(id);\n    if (dark_theme) {\n      QPainter p(&pm);\n      p.setCompositionMode(QPainter::CompositionMode_SourceIn);\n      p.fillRect(pm.rect(), QColor(\"#bbbbbb\"));\n    }\n    QPixmapCache::insert(key, pm);\n  }\n  return pm;\n}\n"
  },
  "tools.cabana.utils.util.setTheme": {
    "id": "tools.cabana.utils.util.setTheme",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\utils\\util.cc",
    "relative_path": "tools\\cabana\\utils\\util.cc",
    "depends_on": [],
    "start_line": 210,
    "end_line": 246,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void setTheme(int theme) {\n  auto style = QApplication::style();\n  if (!style) return;\n\n  static int prev_theme = 0;\n  if (theme != prev_theme) {\n    prev_theme = theme;\n    QPalette new_palette;\n    if (theme == DARK_THEME) {\n      // \"Darcula\" like dark theme\n      new_palette.setColor(QPalette::Window, QColor(\"#353535\"));\n      new_palette.setColor(QPalette::WindowText, QColor(\"#bbbbbb\"));\n      new_palette.setColor(QPalette::Base, QColor(\"#3c3f41\"));\n      new_palette.setColor(QPalette::AlternateBase, QColor(\"#3c3f41\"));\n      new_palette.setColor(QPalette::ToolTipBase, QColor(\"#3c3f41\"));\n      new_palette.setColor(QPalette::ToolTipText, QColor(\"#bbb\"));\n      new_palette.setColor(QPalette::Text, QColor(\"#bbbbbb\"));\n      new_palette.setColor(QPalette::Button, QColor(\"#3c3f41\"));\n      new_palette.setColor(QPalette::ButtonText, QColor(\"#bbbbbb\"));\n      new_palette.setColor(QPalette::Highlight, QColor(\"#2f65ca\"));\n      new_palette.setColor(QPalette::HighlightedText, QColor(\"#bbbbbb\"));\n      new_palette.setColor(QPalette::BrightText, QColor(\"#f0f0f0\"));\n      new_palette.setColor(QPalette::Disabled, QPalette::ButtonText, QColor(\"#777777\"));\n      new_palette.setColor(QPalette::Disabled, QPalette::WindowText, QColor(\"#777777\"));\n      new_palette.setColor(QPalette::Disabled, QPalette::Text, QColor(\"#777777\"));\n      new_palette.setColor(QPalette::Light, QColor(\"#777777\"));\n      new_palette.setColor(QPalette::Dark, QColor(\"#353535\"));\n    } else {\n      new_palette = style->standardPalette();\n    }\n    qApp->setPalette(new_palette);\n    style->polish(qApp);\n    for (auto w : QApplication::allWidgets()) {\n      w->setPalette(new_palette);\n    }\n  }\n}\n"
  },
  "tools.cabana.utils.util.formatSeconds": {
    "id": "tools.cabana.utils.util.formatSeconds",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\utils\\util.cc",
    "relative_path": "tools\\cabana\\utils\\util.cc",
    "depends_on": [],
    "start_line": 248,
    "end_line": 253,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QString formatSeconds(double sec, bool include_milliseconds, bool absolute_time) {\n  QString format = absolute_time ? \"yyyy-MM-dd hh:mm:ss\"\n                                 : (sec > 60 * 60 ? \"hh:mm:ss\" : \"mm:ss\");\n  if (include_milliseconds) format += \".zzz\";\n  return QDateTime::fromMSecsSinceEpoch(sec * 1000).toString(format);\n}\n"
  },
  "tools.cabana.utils.util.num_decimals": {
    "id": "tools.cabana.utils.util.num_decimals",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\utils\\util.cc",
    "relative_path": "tools\\cabana\\utils\\util.cc",
    "depends_on": [],
    "start_line": 257,
    "end_line": 261,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int num_decimals(double num) {\n  const QString string = QString::number(num);\n  auto dot_pos = string.indexOf('.');\n  return dot_pos == -1 ? 0 : string.size() - dot_pos - 1;\n}\n"
  },
  "tools.cabana.utils.util.signalToolTip": {
    "id": "tools.cabana.utils.util.signalToolTip",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\utils\\util.cc",
    "relative_path": "tools\\cabana\\utils\\util.cc",
    "depends_on": [],
    "start_line": 263,
    "end_line": 271,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "QString signalToolTip(const cabana::Signal *sig) {\n  return QObject::tr(R\"(\n    %1<br /><span font-size:small\">\n    Start Bit: %2 Size: %3<br />\n    MSB: %4 LSB: %5<br />\n    Little Endian: %6 Signed: %7</span>\n  )\").arg(sig->name).arg(sig->start_bit).arg(sig->size).arg(sig->msb).arg(sig->lsb)\n     .arg(sig->is_little_endian ? \"Y\" : \"N\").arg(sig->is_signed ? \"Y\" : \"N\");\n}\n"
  },
  "tools.cabana.utils.util.LogSlider": {
    "id": "tools.cabana.utils.util.LogSlider",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\utils\\util.h",
    "relative_path": "tools\\cabana\\utils\\util.h",
    "depends_on": [],
    "start_line": 24,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class LogSlider : public QSlider {\n  Q_OBJECT\n\npublic:\n  LogSlider(double factor, Qt::Orientation orientation, QWidget *parent = nullptr) : factor(factor), QSlider(orientation, parent) {}\n\n  void setRange(double min, double max) {\n    log_min = factor * std::log10(min);\n    log_max = factor * std::log10(max);\n    QSlider::setRange(min, max);\n    setValue(QSlider::value());\n  }\n  int value() const {\n    double v = log_min + (log_max - log_min) * ((QSlider::value() - minimum()) / double(maximum() - minimum()));\n    return std::lround(std::pow(10, v / factor));\n  }\n  void setValue(int v) {\n    double log_v = std::clamp(factor * std::log10(v), log_min, log_max);\n    v = minimum() + (maximum() - minimum()) * ((log_v - log_min) / (log_max - log_min));\n    QSlider::setValue(v);\n  }\n\nprivate:\n  double factor, log_min = 0, log_max = 1;\n};\n"
  },
  "tools.cabana.utils.util.SegmentTree": {
    "id": "tools.cabana.utils.util.SegmentTree",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\utils\\util.h",
    "relative_path": "tools\\cabana\\utils\\util.h",
    "depends_on": [],
    "start_line": 55,
    "end_line": 66,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class SegmentTree {\npublic:\n  SegmentTree() = default;\n  void build(const std::vector<QPointF> &arr);\n  inline std::pair<double, double> minmax(int left, int right) const { return get_minmax(1, 0, size - 1, left, right); }\n\nprivate:\n  std::pair<double, double> get_minmax(int n, int left, int right, int range_left, int range_right) const;\n  void build_tree(const std::vector<QPointF> &arr, int n, int left, int right);\n  std::vector<std::pair<double, double>> tree;\n  int size = 0;\n};\n"
  },
  "tools.cabana.utils.util.MessageBytesDelegate": {
    "id": "tools.cabana.utils.util.MessageBytesDelegate",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\utils\\util.h",
    "relative_path": "tools\\cabana\\utils\\util.h",
    "depends_on": [],
    "start_line": 68,
    "end_line": 85,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class MessageBytesDelegate : public QStyledItemDelegate {\n  Q_OBJECT\npublic:\n  MessageBytesDelegate(QObject *parent, bool multiple_lines = false);\n  void paint(QPainter *painter, const QStyleOptionViewItem &option, const QModelIndex &index) const override;\n  QSize sizeHint(const QStyleOptionViewItem &option, const QModelIndex &index) const override;\n  bool multipleLines() const { return multiple_lines; }\n  void setMultipleLines(bool v) { multiple_lines = v; }\n  QSize sizeForBytes(int n) const;\n\nprivate:\n  std::array<QStaticText, 256> hex_text_table;\n  QFontMetrics font_metrics;\n  QFont fixed_font;\n  QSize byte_size = {};\n  bool multiple_lines = false;\n  int h_margin, v_margin;\n};\n"
  },
  "tools.cabana.utils.util.NameValidator": {
    "id": "tools.cabana.utils.util.NameValidator",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\utils\\util.h",
    "relative_path": "tools\\cabana\\utils\\util.h",
    "depends_on": [],
    "start_line": 87,
    "end_line": 92,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class NameValidator : public QRegExpValidator {\n  Q_OBJECT\npublic:\n  NameValidator(QObject *parent=nullptr);\n  QValidator::State validate(QString &input, int &pos) const override;\n};\n"
  },
  "tools.cabana.utils.util.DoubleValidator": {
    "id": "tools.cabana.utils.util.DoubleValidator",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\utils\\util.h",
    "relative_path": "tools\\cabana\\utils\\util.h",
    "depends_on": [],
    "start_line": 94,
    "end_line": 98,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class DoubleValidator : public QDoubleValidator {\n  Q_OBJECT\npublic:\n  DoubleValidator(QObject *parent = nullptr);\n};\n"
  },
  "tools.cabana.utils.util.drawStaticText": {
    "id": "tools.cabana.utils.util.drawStaticText",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\utils\\util.h",
    "relative_path": "tools\\cabana\\utils\\util.h",
    "depends_on": [],
    "start_line": 104,
    "end_line": 107,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "inline void drawStaticText(QPainter *p, const QRect &r, const QStaticText &text) {\n  auto size = (r.size() - text.size()) / 2;\n  p->drawStaticText(r.left() + size.width(), r.top() + size.height(), text);\n}\n"
  },
  "tools.cabana.utils.util.toHex": {
    "id": "tools.cabana.utils.util.toHex",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\utils\\util.h",
    "relative_path": "tools\\cabana\\utils\\util.h",
    "depends_on": [],
    "start_line": 108,
    "end_line": 110,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "inline QString toHex(const std::vector<uint8_t> &dat, char separator = '\\0') {\n  return QByteArray::fromRawData((const char *)dat.data(), dat.size()).toHex(separator).toUpper();\n}\n"
  },
  "tools.cabana.utils.util.ToolButton": {
    "id": "tools.cabana.utils.util.ToolButton",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\utils\\util.h",
    "relative_path": "tools\\cabana\\utils\\util.h",
    "depends_on": [],
    "start_line": 114,
    "end_line": 135,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ToolButton : public QToolButton {\n  Q_OBJECT\npublic:\n  ToolButton(const QString &icon, const QString &tooltip = {}, QWidget *parent = nullptr) : QToolButton(parent) {\n    setIcon(icon);\n    setToolTip(tooltip);\n    setAutoRaise(true);\n    const int metric = QApplication::style()->pixelMetric(QStyle::PM_SmallIconSize);\n    setIconSize({metric, metric});\n    theme = settings.theme;\n    connect(&settings, &Settings::changed, this, &ToolButton::updateIcon);\n  }\n  void setIcon(const QString &icon) {\n    icon_str = icon;\n    QToolButton::setIcon(utils::icon(icon_str));\n  }\n\nprivate:\n  void updateIcon() { if (std::exchange(theme, settings.theme) != theme) setIcon(icon_str); }\n  QString icon_str;\n  int theme;\n};\n"
  },
  "tools.cabana.utils.util.TabBar": {
    "id": "tools.cabana.utils.util.TabBar",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\utils\\util.h",
    "relative_path": "tools\\cabana\\utils\\util.h",
    "depends_on": [],
    "start_line": 137,
    "end_line": 146,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class TabBar : public QTabBar {\n  Q_OBJECT\n\npublic:\n  TabBar(QWidget *parent) : QTabBar(parent) {}\n  int addTab(const QString &text);\n\nprivate:\n  void closeTabClicked();\n};\n"
  },
  "tools.cabana.utils.util.UnixSignalHandler": {
    "id": "tools.cabana.utils.util.UnixSignalHandler",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\cabana\\utils\\util.h",
    "relative_path": "tools\\cabana\\utils\\util.h",
    "depends_on": [],
    "start_line": 148,
    "end_line": 162,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class UnixSignalHandler : public QObject {\n  Q_OBJECT\n\npublic:\n  UnixSignalHandler(QObject *parent = nullptr);\n  ~UnixSignalHandler();\n  static void signalHandler(int s);\n\npublic slots:\n  void handleSigTerm();\n\nprivate:\n  inline static int sig_fd[2] = {};\n  QSocketNotifier *sn;\n};\n"
  },
  "tools.camerastream.compressed_vipc.decoder": {
    "id": "tools.camerastream.compressed_vipc.decoder",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\camerastream\\compressed_vipc.py",
    "relative_path": "tools\\camerastream\\compressed_vipc.py",
    "depends_on": [],
    "start_line": 27,
    "end_line": 106,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.camerastream.compressed_vipc.CompressedVipc": {
    "id": "tools.camerastream.compressed_vipc.CompressedVipc",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\camerastream\\compressed_vipc.py",
    "relative_path": "tools\\camerastream\\compressed_vipc.py",
    "depends_on": [
      "tools.camerastream.compressed_vipc.decoder"
    ],
    "start_line": 109,
    "end_line": 140,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.camerastream.compressed_vipc.CompressedVipc.__init__": {
    "id": "tools.camerastream.compressed_vipc.CompressedVipc.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\camerastream\\compressed_vipc.py",
    "relative_path": "tools\\camerastream\\compressed_vipc.py",
    "depends_on": [
      "tools.camerastream.compressed_vipc.decoder"
    ],
    "start_line": 110,
    "end_line": 131,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.camerastream.compressed_vipc.CompressedVipc.join": {
    "id": "tools.camerastream.compressed_vipc.CompressedVipc.join",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\camerastream\\compressed_vipc.py",
    "relative_path": "tools\\camerastream\\compressed_vipc.py",
    "depends_on": [],
    "start_line": 133,
    "end_line": 135,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.camerastream.compressed_vipc.CompressedVipc.kill": {
    "id": "tools.camerastream.compressed_vipc.CompressedVipc.kill",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\camerastream\\compressed_vipc.py",
    "relative_path": "tools\\camerastream\\compressed_vipc.py",
    "depends_on": [],
    "start_line": 137,
    "end_line": 140,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.car_porting.test_car_model.create_test_models_suite": {
    "id": "tools.car_porting.test_car_model.create_test_models_suite",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\car_porting\\test_car_model.py",
    "relative_path": "tools\\car_porting\\test_car_model.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.clip.run.check_for_failure": {
    "id": "tools.clip.run.check_for_failure",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\clip\\run.py",
    "relative_path": "tools\\clip\\run.py",
    "depends_on": [],
    "start_line": 41,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.clip.run.escape_ffmpeg_text": {
    "id": "tools.clip.run.escape_ffmpeg_text",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\clip\\run.py",
    "relative_path": "tools\\clip\\run.py",
    "depends_on": [],
    "start_line": 59,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.clip.run.get_logreader": {
    "id": "tools.clip.run.get_logreader",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\clip\\run.py",
    "relative_path": "tools\\clip\\run.py",
    "depends_on": [],
    "start_line": 67,
    "end_line": 68,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.clip.run.get_meta_text": {
    "id": "tools.clip.run.get_meta_text",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\clip\\run.py",
    "relative_path": "tools\\clip\\run.py",
    "depends_on": [],
    "start_line": 71,
    "end_line": 84,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.clip.run.parse_args": {
    "id": "tools.clip.run.parse_args",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\clip\\run.py",
    "relative_path": "tools\\clip\\run.py",
    "depends_on": [],
    "start_line": 87,
    "end_line": 121,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.clip.run.populate_car_params": {
    "id": "tools.clip.run.populate_car_params",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\clip\\run.py",
    "relative_path": "tools\\clip\\run.py",
    "depends_on": [],
    "start_line": 124,
    "end_line": 137,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.clip.run.start_proc": {
    "id": "tools.clip.run.start_proc",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\clip\\run.py",
    "relative_path": "tools\\clip\\run.py",
    "depends_on": [],
    "start_line": 140,
    "end_line": 141,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.clip.run.validate_env": {
    "id": "tools.clip.run.validate_env",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\clip\\run.py",
    "relative_path": "tools\\clip\\run.py",
    "depends_on": [],
    "start_line": 144,
    "end_line": 152,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.clip.run.validate_output_file": {
    "id": "tools.clip.run.validate_output_file",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\clip\\run.py",
    "relative_path": "tools\\clip\\run.py",
    "depends_on": [],
    "start_line": 155,
    "end_line": 158,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.clip.run.validate_route": {
    "id": "tools.clip.run.validate_route",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\clip\\run.py",
    "relative_path": "tools\\clip\\run.py",
    "depends_on": [],
    "start_line": 161,
    "end_line": 164,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.clip.run.validate_title": {
    "id": "tools.clip.run.validate_title",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\clip\\run.py",
    "relative_path": "tools\\clip\\run.py",
    "depends_on": [],
    "start_line": 167,
    "end_line": 170,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.clip.run.wait_for_frames": {
    "id": "tools.clip.run.wait_for_frames",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\clip\\run.py",
    "relative_path": "tools\\clip\\run.py",
    "depends_on": [
      "tools.clip.run.check_for_failure"
    ],
    "start_line": 173,
    "end_line": 180,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.clip.run.clip": {
    "id": "tools.clip.run.clip",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\clip\\run.py",
    "relative_path": "tools\\clip\\run.py",
    "depends_on": [
      "tools.clip.run.get_logreader",
      "tools.clip.run.populate_car_params",
      "tools.clip.run.get_meta_text",
      "tools.clip.run.check_for_failure",
      "tools.clip.run.escape_ffmpeg_text",
      "tools.clip.run.wait_for_frames",
      "tools.clip.run.start_proc"
    ],
    "start_line": 183,
    "end_line": 277,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.clip.run.main": {
    "id": "tools.clip.run.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\clip\\run.py",
    "relative_path": "tools\\clip\\run.py",
    "depends_on": [
      "tools.clip.run.validate_output_file",
      "tools.clip.run.validate_title",
      "tools.clip.run.parse_args",
      "tools.clip.run.clip",
      "tools.clip.run.validate_env",
      "tools.clip.run.validate_route"
    ],
    "start_line": 280,
    "end_line": 315,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.joystick.joystickd.joystickd_thread": {
    "id": "tools.joystick.joystickd.joystickd_thread",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\joystick\\joystickd.py",
    "relative_path": "tools\\joystick\\joystickd.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 72,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.joystick.joystickd.main": {
    "id": "tools.joystick.joystickd.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\joystick\\joystickd.py",
    "relative_path": "tools\\joystick\\joystickd.py",
    "depends_on": [
      "tools.joystick.joystickd.joystickd_thread"
    ],
    "start_line": 75,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.joystick.joystick_control.Keyboard": {
    "id": "tools.joystick.joystick_control.Keyboard",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\joystick\\joystick_control.py",
    "relative_path": "tools\\joystick\\joystick_control.py",
    "depends_on": [],
    "start_line": 17,
    "end_line": 40,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.joystick.joystick_control.Keyboard.__init__": {
    "id": "tools.joystick.joystick_control.Keyboard.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\joystick\\joystick_control.py",
    "relative_path": "tools\\joystick\\joystick_control.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.joystick.joystick_control.Keyboard.update": {
    "id": "tools.joystick.joystick_control.Keyboard.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\joystick\\joystick_control.py",
    "relative_path": "tools\\joystick\\joystick_control.py",
    "depends_on": [],
    "start_line": 27,
    "end_line": 40,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.joystick.joystick_control.Joystick": {
    "id": "tools.joystick.joystick_control.Joystick",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\joystick\\joystick_control.py",
    "relative_path": "tools\\joystick\\joystick_control.py",
    "depends_on": [],
    "start_line": 43,
    "end_line": 91,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.joystick.joystick_control.Joystick.__init__": {
    "id": "tools.joystick.joystick_control.Joystick.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\joystick\\joystick_control.py",
    "relative_path": "tools\\joystick\\joystick_control.py",
    "depends_on": [],
    "start_line": 44,
    "end_line": 62,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.joystick.joystick_control.Joystick.update": {
    "id": "tools.joystick.joystick_control.Joystick.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\joystick\\joystick_control.py",
    "relative_path": "tools\\joystick\\joystick_control.py",
    "depends_on": [],
    "start_line": 64,
    "end_line": 91,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.joystick.joystick_control.send_thread": {
    "id": "tools.joystick.joystick_control.send_thread",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\joystick\\joystick_control.py",
    "relative_path": "tools\\joystick\\joystick_control.py",
    "depends_on": [],
    "start_line": 94,
    "end_line": 109,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.joystick.joystick_control.joystick_control_thread": {
    "id": "tools.joystick.joystick_control.joystick_control_thread",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\joystick\\joystick_control.py",
    "relative_path": "tools\\joystick\\joystick_control.py",
    "depends_on": [
      "tools.joystick.joystick_control.send_thread"
    ],
    "start_line": 112,
    "end_line": 116,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.joystick.joystick_control.main": {
    "id": "tools.joystick.joystick_control.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\joystick\\joystick_control.py",
    "relative_path": "tools\\joystick\\joystick_control.py",
    "depends_on": [
      "tools.joystick.joystick_control.joystick_control_thread",
      "tools.joystick.joystick_control.Joystick"
    ],
    "start_line": 119,
    "end_line": 120,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.api.CommaApi": {
    "id": "tools.lib.api.CommaApi",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\api.py",
    "relative_path": "tools\\lib\\api.py",
    "depends_on": [
      "tools.lib.api.APIError",
      "tools.lib.api.UnauthorizedError"
    ],
    "start_line": 5,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.api.CommaApi.__init__": {
    "id": "tools.lib.api.CommaApi.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\api.py",
    "relative_path": "tools\\lib\\api.py",
    "depends_on": [],
    "start_line": 6,
    "end_line": 10,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.api.CommaApi.request": {
    "id": "tools.lib.api.CommaApi.request",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\api.py",
    "relative_path": "tools\\lib\\api.py",
    "depends_on": [
      "tools.lib.api.APIError",
      "tools.lib.api.UnauthorizedError"
    ],
    "start_line": 12,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.api.CommaApi.get": {
    "id": "tools.lib.api.CommaApi.get",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\api.py",
    "relative_path": "tools\\lib\\api.py",
    "depends_on": [],
    "start_line": 24,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.api.CommaApi.post": {
    "id": "tools.lib.api.CommaApi.post",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\api.py",
    "relative_path": "tools\\lib\\api.py",
    "depends_on": [],
    "start_line": 27,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.api.APIError": {
    "id": "tools.lib.api.APIError",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\api.py",
    "relative_path": "tools\\lib\\api.py",
    "depends_on": [],
    "start_line": 30,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.api.UnauthorizedError": {
    "id": "tools.lib.api.UnauthorizedError",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\api.py",
    "relative_path": "tools\\lib\\api.py",
    "depends_on": [],
    "start_line": 33,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.auth.ClientRedirectServer": {
    "id": "tools.lib.auth.ClientRedirectServer",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\auth.py",
    "relative_path": "tools\\lib\\auth.py",
    "depends_on": [],
    "start_line": 38,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.auth.ClientRedirectHandler": {
    "id": "tools.lib.auth.ClientRedirectHandler",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\auth.py",
    "relative_path": "tools\\lib\\auth.py",
    "depends_on": [],
    "start_line": 42,
    "end_line": 58,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.auth.ClientRedirectHandler.do_GET": {
    "id": "tools.lib.auth.ClientRedirectHandler.do_GET",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\auth.py",
    "relative_path": "tools\\lib\\auth.py",
    "depends_on": [],
    "start_line": 43,
    "end_line": 55,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.auth.ClientRedirectHandler.log_message": {
    "id": "tools.lib.auth.ClientRedirectHandler.log_message",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\auth.py",
    "relative_path": "tools\\lib\\auth.py",
    "depends_on": [],
    "start_line": 57,
    "end_line": 58,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.auth.auth_redirect_link": {
    "id": "tools.lib.auth.auth_redirect_link",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\auth.py",
    "relative_path": "tools\\lib\\auth.py",
    "depends_on": [],
    "start_line": 61,
    "end_line": 97,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.auth.login": {
    "id": "tools.lib.auth.login",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\auth.py",
    "relative_path": "tools\\lib\\auth.py",
    "depends_on": [
      "tools.lib.auth.auth_redirect_link",
      "tools.lib.auth.ClientRedirectHandler",
      "tools.lib.auth.ClientRedirectServer"
    ],
    "start_line": 100,
    "end_line": 121,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.auth_config.MissingAuthConfigError": {
    "id": "tools.lib.auth_config.MissingAuthConfigError",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\auth_config.py",
    "relative_path": "tools\\lib\\auth_config.py",
    "depends_on": [],
    "start_line": 6,
    "end_line": 7,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.auth_config.get_token": {
    "id": "tools.lib.auth_config.get_token",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\auth_config.py",
    "relative_path": "tools\\lib\\auth_config.py",
    "depends_on": [],
    "start_line": 10,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.auth_config.set_token": {
    "id": "tools.lib.auth_config.set_token",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\auth_config.py",
    "relative_path": "tools\\lib\\auth_config.py",
    "depends_on": [],
    "start_line": 19,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.auth_config.clear_token": {
    "id": "tools.lib.auth_config.clear_token",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\auth_config.py",
    "relative_path": "tools\\lib\\auth_config.py",
    "depends_on": [],
    "start_line": 25,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.azure_container.get_azure_credential": {
    "id": "tools.lib.azure_container.get_azure_credential",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\azure_container.py",
    "relative_path": "tools\\lib\\azure_container.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.azure_container.get_container_sas": {
    "id": "tools.lib.azure_container.get_container_sas",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\azure_container.py",
    "relative_path": "tools\\lib\\azure_container.py",
    "depends_on": [
      "tools.lib.azure_container.get_azure_credential"
    ],
    "start_line": 21,
    "end_line": 35,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.azure_container.AzureContainer": {
    "id": "tools.lib.azure_container.AzureContainer",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\azure_container.py",
    "relative_path": "tools\\lib\\azure_container.py",
    "depends_on": [
      "tools.lib.azure_container.get_azure_credential",
      "tools.lib.azure_container.get_container_sas"
    ],
    "start_line": 37,
    "end_line": 73,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.azure_container.AzureContainer.__init__": {
    "id": "tools.lib.azure_container.AzureContainer.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\azure_container.py",
    "relative_path": "tools\\lib\\azure_container.py",
    "depends_on": [],
    "start_line": 38,
    "end_line": 40,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.azure_container.AzureContainer.ACCOUNT_URL": {
    "id": "tools.lib.azure_container.AzureContainer.ACCOUNT_URL",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\azure_container.py",
    "relative_path": "tools\\lib\\azure_container.py",
    "depends_on": [],
    "start_line": 43,
    "end_line": 44,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.azure_container.AzureContainer.BASE_URL": {
    "id": "tools.lib.azure_container.AzureContainer.BASE_URL",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\azure_container.py",
    "relative_path": "tools\\lib\\azure_container.py",
    "depends_on": [],
    "start_line": 47,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.azure_container.AzureContainer.get_client_and_key": {
    "id": "tools.lib.azure_container.AzureContainer.get_client_and_key",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\azure_container.py",
    "relative_path": "tools\\lib\\azure_container.py",
    "depends_on": [
      "tools.lib.azure_container.get_azure_credential",
      "tools.lib.azure_container.get_container_sas"
    ],
    "start_line": 50,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.azure_container.AzureContainer.get_url": {
    "id": "tools.lib.azure_container.AzureContainer.get_url",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\azure_container.py",
    "relative_path": "tools\\lib\\azure_container.py",
    "depends_on": [],
    "start_line": 56,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.azure_container.AzureContainer.upload_bytes": {
    "id": "tools.lib.azure_container.AzureContainer.upload_bytes",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\azure_container.py",
    "relative_path": "tools\\lib\\azure_container.py",
    "depends_on": [
      "tools.lib.azure_container.get_azure_credential"
    ],
    "start_line": 59,
    "end_line": 69,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.azure_container.AzureContainer.upload_file": {
    "id": "tools.lib.azure_container.AzureContainer.upload_file",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\azure_container.py",
    "relative_path": "tools\\lib\\azure_container.py",
    "depends_on": [],
    "start_line": 71,
    "end_line": 73,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.bootlog.Bootlog": {
    "id": "tools.lib.bootlog.Bootlog",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\bootlog.py",
    "relative_path": "tools\\lib\\bootlog.py",
    "depends_on": [
      "tools.lib.bootlog.Bootlog"
    ],
    "start_line": 10,
    "end_line": 44,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.bootlog.Bootlog.__init__": {
    "id": "tools.lib.bootlog.Bootlog.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\bootlog.py",
    "relative_path": "tools\\lib\\bootlog.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.bootlog.Bootlog.url": {
    "id": "tools.lib.bootlog.Bootlog.url",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\bootlog.py",
    "relative_path": "tools\\lib\\bootlog.py",
    "depends_on": [],
    "start_line": 22,
    "end_line": 23,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.bootlog.Bootlog.dongle_id": {
    "id": "tools.lib.bootlog.Bootlog.dongle_id",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\bootlog.py",
    "relative_path": "tools\\lib\\bootlog.py",
    "depends_on": [],
    "start_line": 26,
    "end_line": 27,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.bootlog.Bootlog.id": {
    "id": "tools.lib.bootlog.Bootlog.id",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\bootlog.py",
    "relative_path": "tools\\lib\\bootlog.py",
    "depends_on": [],
    "start_line": 30,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.bootlog.Bootlog.__str__": {
    "id": "tools.lib.bootlog.Bootlog.__str__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\bootlog.py",
    "relative_path": "tools\\lib\\bootlog.py",
    "depends_on": [],
    "start_line": 33,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.bootlog.Bootlog.__eq__": {
    "id": "tools.lib.bootlog.Bootlog.__eq__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\bootlog.py",
    "relative_path": "tools\\lib\\bootlog.py",
    "depends_on": [
      "tools.lib.bootlog.Bootlog"
    ],
    "start_line": 36,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.bootlog.Bootlog.__lt__": {
    "id": "tools.lib.bootlog.Bootlog.__lt__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\bootlog.py",
    "relative_path": "tools\\lib\\bootlog.py",
    "depends_on": [
      "tools.lib.bootlog.Bootlog"
    ],
    "start_line": 41,
    "end_line": 44,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.bootlog.get_bootlog_from_id": {
    "id": "tools.lib.bootlog.get_bootlog_from_id",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\bootlog.py",
    "relative_path": "tools\\lib\\bootlog.py",
    "depends_on": [
      "tools.lib.bootlog.Bootlog",
      "tools.lib.bootlog.get_bootlogs"
    ],
    "start_line": 46,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.bootlog.get_bootlogs": {
    "id": "tools.lib.bootlog.get_bootlogs",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\bootlog.py",
    "relative_path": "tools\\lib\\bootlog.py",
    "depends_on": [
      "tools.lib.bootlog.Bootlog"
    ],
    "start_line": 54,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.cache.cache_path_for_file_path": {
    "id": "tools.lib.cache.cache_path_for_file_path",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\cache.py",
    "relative_path": "tools\\lib\\cache.py",
    "depends_on": [],
    "start_line": 6,
    "end_line": 14,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.comma_car_segments.get_comma_car_segments_database": {
    "id": "tools.lib.comma_car_segments.get_comma_car_segments_database",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\comma_car_segments.py",
    "relative_path": "tools\\lib\\comma_car_segments.py",
    "depends_on": [
      "tools.lib.comma_car_segments.get_repo_raw_url"
    ],
    "start_line": 10,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.comma_car_segments.parse_lfs_pointer": {
    "id": "tools.lib.comma_car_segments.parse_lfs_pointer",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\comma_car_segments.py",
    "relative_path": "tools\\lib\\comma_car_segments.py",
    "depends_on": [],
    "start_line": 24,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.comma_car_segments.get_lfs_file_url": {
    "id": "tools.lib.comma_car_segments.get_lfs_file_url",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\comma_car_segments.py",
    "relative_path": "tools\\lib\\comma_car_segments.py",
    "depends_on": [],
    "start_line": 39,
    "end_line": 65,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.comma_car_segments.get_repo_raw_url": {
    "id": "tools.lib.comma_car_segments.get_repo_raw_url",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\comma_car_segments.py",
    "relative_path": "tools\\lib\\comma_car_segments.py",
    "depends_on": [],
    "start_line": 67,
    "end_line": 69,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.comma_car_segments.get_repo_url": {
    "id": "tools.lib.comma_car_segments.get_repo_url",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\comma_car_segments.py",
    "relative_path": "tools\\lib\\comma_car_segments.py",
    "depends_on": [
      "tools.lib.comma_car_segments.get_lfs_file_url",
      "tools.lib.comma_car_segments.get_repo_raw_url",
      "tools.lib.comma_car_segments.parse_lfs_pointer"
    ],
    "start_line": 71,
    "end_line": 86,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.comma_car_segments.get_url": {
    "id": "tools.lib.comma_car_segments.get_url",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\comma_car_segments.py",
    "relative_path": "tools\\lib\\comma_car_segments.py",
    "depends_on": [
      "tools.lib.comma_car_segments.get_repo_url"
    ],
    "start_line": 89,
    "end_line": 90,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.exceptions.DataUnreadableError": {
    "id": "tools.lib.exceptions.DataUnreadableError",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\exceptions.py",
    "relative_path": "tools\\lib\\exceptions.py",
    "depends_on": [],
    "start_line": 1,
    "end_line": 2,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.filereader.internal_source_available": {
    "id": "tools.lib.filereader.internal_source_available",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\filereader.py",
    "relative_path": "tools\\lib\\filereader.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.filereader.resolve_name": {
    "id": "tools.lib.filereader.resolve_name",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\filereader.py",
    "relative_path": "tools\\lib\\filereader.py",
    "depends_on": [],
    "start_line": 27,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.filereader.file_exists": {
    "id": "tools.lib.filereader.file_exists",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\filereader.py",
    "relative_path": "tools\\lib\\filereader.py",
    "depends_on": [
      "tools.lib.filereader.resolve_name"
    ],
    "start_line": 33,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.filereader.FileReader": {
    "id": "tools.lib.filereader.FileReader",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\filereader.py",
    "relative_path": "tools\\lib\\filereader.py",
    "depends_on": [
      "tools.lib.filereader.resolve_name"
    ],
    "start_line": 40,
    "end_line": 44,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.GOPReader": {
    "id": "tools.lib.framereader.GOPReader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 26,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.GOPReader.get_gop": {
    "id": "tools.lib.framereader.GOPReader.get_gop",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 27,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.DoNothingContextManager": {
    "id": "tools.lib.framereader.DoNothingContextManager",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 32,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.DoNothingContextManager.__enter__": {
    "id": "tools.lib.framereader.DoNothingContextManager.__enter__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 33,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.DoNothingContextManager.__exit__": {
    "id": "tools.lib.framereader.DoNothingContextManager.__exit__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 36,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.FrameType": {
    "id": "tools.lib.framereader.FrameType",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 40,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.fingerprint_video": {
    "id": "tools.lib.framereader.fingerprint_video",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [
      "tools.lib.framereader.FrameType"
    ],
    "start_line": 45,
    "end_line": 58,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.ffprobe": {
    "id": "tools.lib.framereader.ffprobe",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 61,
    "end_line": 74,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.cache_fn": {
    "id": "tools.lib.framereader.cache_fn",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 77,
    "end_line": 97,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.index_stream": {
    "id": "tools.lib.framereader.index_stream",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [
      "tools.lib.framereader.ffprobe",
      "tools.lib.framereader.FrameType",
      "tools.lib.framereader.cache_fn"
    ],
    "start_line": 101,
    "end_line": 113,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.get_video_index": {
    "id": "tools.lib.framereader.get_video_index",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [
      "tools.lib.framereader.index_stream"
    ],
    "start_line": 116,
    "end_line": 117,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.read_file_check_size": {
    "id": "tools.lib.framereader.read_file_check_size",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 119,
    "end_line": 123,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.rgb24toyuv": {
    "id": "tools.lib.framereader.rgb24toyuv",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 126,
    "end_line": 138,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.rgb24toyuv420": {
    "id": "tools.lib.framereader.rgb24toyuv420",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [
      "tools.lib.framereader.rgb24toyuv"
    ],
    "start_line": 141,
    "end_line": 152,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.rgb24tonv12": {
    "id": "tools.lib.framereader.rgb24tonv12",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [
      "tools.lib.framereader.rgb24toyuv"
    ],
    "start_line": 155,
    "end_line": 166,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.decompress_video_data": {
    "id": "tools.lib.framereader.decompress_video_data",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 169,
    "end_line": 197,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.BaseFrameReader": {
    "id": "tools.lib.framereader.BaseFrameReader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 200,
    "end_line": 213,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.BaseFrameReader.__enter__": {
    "id": "tools.lib.framereader.BaseFrameReader.__enter__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 203,
    "end_line": 204,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.BaseFrameReader.__exit__": {
    "id": "tools.lib.framereader.BaseFrameReader.__exit__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 206,
    "end_line": 207,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.BaseFrameReader.close": {
    "id": "tools.lib.framereader.BaseFrameReader.close",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 209,
    "end_line": 210,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.BaseFrameReader.get": {
    "id": "tools.lib.framereader.BaseFrameReader.get",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 212,
    "end_line": 213,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.FrameReader": {
    "id": "tools.lib.framereader.FrameReader",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [
      "tools.lib.framereader.get_video_index",
      "tools.lib.framereader.fingerprint_video",
      "tools.lib.framereader.FrameType",
      "tools.lib.framereader.StreamFrameReader",
      "tools.lib.framereader.RawFrameReader"
    ],
    "start_line": 216,
    "end_line": 225,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.RawData": {
    "id": "tools.lib.framereader.RawData",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 228,
    "end_line": 236,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.RawData.__init__": {
    "id": "tools.lib.framereader.RawData.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 229,
    "end_line": 232,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.RawData.read": {
    "id": "tools.lib.framereader.RawData.read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 234,
    "end_line": 236,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.RawFrameReader": {
    "id": "tools.lib.framereader.RawFrameReader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [
      "tools.lib.framereader.rgb24toyuv420",
      "tools.lib.framereader.BaseFrameReader",
      "tools.lib.framereader.FrameType",
      "tools.lib.framereader.rgb24tonv12",
      "tools.lib.framereader.RawData"
    ],
    "start_line": 239,
    "end_line": 273,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.RawFrameReader.__init__": {
    "id": "tools.lib.framereader.RawFrameReader.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [
      "tools.lib.framereader.FrameType",
      "tools.lib.framereader.RawData"
    ],
    "start_line": 240,
    "end_line": 246,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.RawFrameReader.load_and_debayer": {
    "id": "tools.lib.framereader.RawFrameReader.load_and_debayer",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 248,
    "end_line": 251,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.RawFrameReader.get": {
    "id": "tools.lib.framereader.RawFrameReader.get",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [
      "tools.lib.framereader.rgb24tonv12",
      "tools.lib.framereader.rgb24toyuv420"
    ],
    "start_line": 253,
    "end_line": 273,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.VideoStreamDecompressor": {
    "id": "tools.lib.framereader.VideoStreamDecompressor",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 276,
    "end_line": 354,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.VideoStreamDecompressor.__init__": {
    "id": "tools.lib.framereader.VideoStreamDecompressor.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 277,
    "end_line": 293,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.VideoStreamDecompressor.write_thread": {
    "id": "tools.lib.framereader.VideoStreamDecompressor.write_thread",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 295,
    "end_line": 306,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.VideoStreamDecompressor.read": {
    "id": "tools.lib.framereader.VideoStreamDecompressor.read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 308,
    "end_line": 354,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.StreamGOPReader": {
    "id": "tools.lib.framereader.StreamGOPReader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [
      "tools.lib.framereader.FrameType",
      "tools.lib.framereader.GOPReader"
    ],
    "start_line": 356,
    "end_line": 423,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.StreamGOPReader.__init__": {
    "id": "tools.lib.framereader.StreamGOPReader.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [
      "tools.lib.framereader.FrameType"
    ],
    "start_line": 357,
    "end_line": 387,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.StreamGOPReader._lookup_gop": {
    "id": "tools.lib.framereader.StreamGOPReader._lookup_gop",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 389,
    "end_line": 401,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.StreamGOPReader.get_gop": {
    "id": "tools.lib.framereader.StreamGOPReader.get_gop",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 403,
    "end_line": 423,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.GOPFrameReader": {
    "id": "tools.lib.framereader.GOPFrameReader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [
      "tools.lib.framereader.BaseFrameReader",
      "tools.lib.framereader.DoNothingContextManager",
      "tools.lib.framereader.decompress_video_data"
    ],
    "start_line": 426,
    "end_line": 517,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.GOPFrameReader.__init__": {
    "id": "tools.lib.framereader.GOPFrameReader.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [
      "tools.lib.framereader.DoNothingContextManager"
    ],
    "start_line": 429,
    "end_line": 445,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.GOPFrameReader.close": {
    "id": "tools.lib.framereader.GOPFrameReader.close",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 447,
    "end_line": 456,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.GOPFrameReader._readahead_thread": {
    "id": "tools.lib.framereader.GOPFrameReader._readahead_thread",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 458,
    "end_line": 477,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.GOPFrameReader._get_one": {
    "id": "tools.lib.framereader.GOPFrameReader._get_one",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [
      "tools.lib.framereader.decompress_video_data"
    ],
    "start_line": 479,
    "end_line": 498,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.GOPFrameReader.get": {
    "id": "tools.lib.framereader.GOPFrameReader.get",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 500,
    "end_line": 517,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.StreamFrameReader": {
    "id": "tools.lib.framereader.StreamFrameReader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [
      "tools.lib.framereader.GOPFrameReader",
      "tools.lib.framereader.StreamGOPReader"
    ],
    "start_line": 520,
    "end_line": 523,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.StreamFrameReader.__init__": {
    "id": "tools.lib.framereader.StreamFrameReader.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [
      "tools.lib.framereader.GOPFrameReader",
      "tools.lib.framereader.StreamGOPReader"
    ],
    "start_line": 521,
    "end_line": 523,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.GOPFrameIterator": {
    "id": "tools.lib.framereader.GOPFrameIterator",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [
      "tools.lib.framereader.VideoStreamDecompressor"
    ],
    "start_line": 526,
    "end_line": 528,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.FrameIterator": {
    "id": "tools.lib.framereader.FrameIterator",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [
      "tools.lib.framereader.GOPReader",
      "tools.lib.framereader.FrameReader",
      "tools.lib.framereader.GOPFrameIterator"
    ],
    "start_line": 531,
    "end_line": 537,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.NumpyFrameReader": {
    "id": "tools.lib.framereader.NumpyFrameReader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 540,
    "end_line": 559,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.NumpyFrameReader.__init__": {
    "id": "tools.lib.framereader.NumpyFrameReader.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 541,
    "end_line": 547,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.NumpyFrameReader.close": {
    "id": "tools.lib.framereader.NumpyFrameReader.close",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 549,
    "end_line": 550,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.framereader.NumpyFrameReader.get": {
    "id": "tools.lib.framereader.NumpyFrameReader.get",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\framereader.py",
    "relative_path": "tools\\lib\\framereader.py",
    "depends_on": [],
    "start_line": 552,
    "end_line": 559,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.github_utils.GithubUtils": {
    "id": "tools.lib.github_utils.GithubUtils",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\github_utils.py",
    "relative_path": "tools\\lib\\github_utils.py",
    "depends_on": [],
    "start_line": 5,
    "end_line": 113,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.github_utils.GithubUtils.__init__": {
    "id": "tools.lib.github_utils.GithubUtils.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\github_utils.py",
    "relative_path": "tools\\lib\\github_utils.py",
    "depends_on": [],
    "start_line": 6,
    "end_line": 11,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.github_utils.GithubUtils.API_ROUTE": {
    "id": "tools.lib.github_utils.GithubUtils.API_ROUTE",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\github_utils.py",
    "relative_path": "tools\\lib\\github_utils.py",
    "depends_on": [],
    "start_line": 14,
    "end_line": 15,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.github_utils.GithubUtils.DATA_ROUTE": {
    "id": "tools.lib.github_utils.GithubUtils.DATA_ROUTE",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\github_utils.py",
    "relative_path": "tools\\lib\\github_utils.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.github_utils.GithubUtils.api_call": {
    "id": "tools.lib.github_utils.GithubUtils.api_call",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\github_utils.py",
    "relative_path": "tools\\lib\\github_utils.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 33,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.github_utils.GithubUtils.upload_file": {
    "id": "tools.lib.github_utils.GithubUtils.upload_file",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\github_utils.py",
    "relative_path": "tools\\lib\\github_utils.py",
    "depends_on": [],
    "start_line": 35,
    "end_line": 49,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.github_utils.GithubUtils.upload_files": {
    "id": "tools.lib.github_utils.GithubUtils.upload_files",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\github_utils.py",
    "relative_path": "tools\\lib\\github_utils.py",
    "depends_on": [],
    "start_line": 51,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.github_utils.GithubUtils.create_bucket": {
    "id": "tools.lib.github_utils.GithubUtils.create_bucket",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\github_utils.py",
    "relative_path": "tools\\lib\\github_utils.py",
    "depends_on": [],
    "start_line": 56,
    "end_line": 62,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.github_utils.GithubUtils.get_bucket_sha": {
    "id": "tools.lib.github_utils.GithubUtils.get_bucket_sha",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\github_utils.py",
    "relative_path": "tools\\lib\\github_utils.py",
    "depends_on": [],
    "start_line": 64,
    "end_line": 67,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.github_utils.GithubUtils.get_file_url": {
    "id": "tools.lib.github_utils.GithubUtils.get_file_url",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\github_utils.py",
    "relative_path": "tools\\lib\\github_utils.py",
    "depends_on": [],
    "start_line": 69,
    "end_line": 72,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.github_utils.GithubUtils.get_file_sha": {
    "id": "tools.lib.github_utils.GithubUtils.get_file_sha",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\github_utils.py",
    "relative_path": "tools\\lib\\github_utils.py",
    "depends_on": [],
    "start_line": 74,
    "end_line": 77,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.github_utils.GithubUtils.get_pr_number": {
    "id": "tools.lib.github_utils.GithubUtils.get_pr_number",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\github_utils.py",
    "relative_path": "tools\\lib\\github_utils.py",
    "depends_on": [],
    "start_line": 79,
    "end_line": 82,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.github_utils.GithubUtils.get_bucket_link": {
    "id": "tools.lib.github_utils.GithubUtils.get_bucket_link",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\github_utils.py",
    "relative_path": "tools\\lib\\github_utils.py",
    "depends_on": [],
    "start_line": 84,
    "end_line": 85,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.github_utils.GithubUtils.comment_on_pr": {
    "id": "tools.lib.github_utils.GithubUtils.comment_on_pr",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\github_utils.py",
    "relative_path": "tools\\lib\\github_utils.py",
    "depends_on": [],
    "start_line": 87,
    "end_line": 99,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.github_utils.GithubUtils.comment_images_on_pr": {
    "id": "tools.lib.github_utils.GithubUtils.comment_images_on_pr",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\github_utils.py",
    "relative_path": "tools\\lib\\github_utils.py",
    "depends_on": [],
    "start_line": 102,
    "end_line": 113,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.helpers.RE": {
    "id": "tools.lib.helpers.RE",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\helpers.py",
    "relative_path": "tools\\lib\\helpers.py",
    "depends_on": [],
    "start_line": 2,
    "end_line": 17,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.kbhit.KBHit": {
    "id": "tools.lib.kbhit.KBHit",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\kbhit.py",
    "relative_path": "tools\\lib\\kbhit.py",
    "depends_on": [],
    "start_line": 8,
    "end_line": 63,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.kbhit.KBHit.__init__": {
    "id": "tools.lib.kbhit.KBHit.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\kbhit.py",
    "relative_path": "tools\\lib\\kbhit.py",
    "depends_on": [],
    "start_line": 9,
    "end_line": 14,
    "has_docstring": true,
    "docstring": " Creates a KBHit object that you can call to do various keyboard things.\n    ",
    "language": "python"
  },
  "tools.lib.kbhit.KBHit.set_kbhit_terminal": {
    "id": "tools.lib.kbhit.KBHit.set_kbhit_terminal",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\kbhit.py",
    "relative_path": "tools\\lib\\kbhit.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 29,
    "has_docstring": true,
    "docstring": " Save old terminal settings for closure, remove ICANON & ECHO flags.\n    ",
    "language": "python"
  },
  "tools.lib.kbhit.KBHit.set_normal_term": {
    "id": "tools.lib.kbhit.KBHit.set_normal_term",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\kbhit.py",
    "relative_path": "tools\\lib\\kbhit.py",
    "depends_on": [],
    "start_line": 31,
    "end_line": 35,
    "has_docstring": true,
    "docstring": " Resets to normal terminal. On Windows this is a no-op.\n    ",
    "language": "python"
  },
  "tools.lib.kbhit.KBHit.getch": {
    "id": "tools.lib.kbhit.KBHit.getch",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\kbhit.py",
    "relative_path": "tools\\lib\\kbhit.py",
    "depends_on": [],
    "start_line": 38,
    "end_line": 42,
    "has_docstring": true,
    "docstring": " Returns a keyboard character after kbhit() has been called.\n      Should not be called in the same program as getarrow().\n    ",
    "language": "python"
  },
  "tools.lib.kbhit.KBHit.getarrow": {
    "id": "tools.lib.kbhit.KBHit.getarrow",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\kbhit.py",
    "relative_path": "tools\\lib\\kbhit.py",
    "depends_on": [],
    "start_line": 45,
    "end_line": 57,
    "has_docstring": true,
    "docstring": " Returns an arrow-key code after kbhit() has been called. Codes are\n    0 : up\n    1 : right\n    2 : down\n    3 : left\n    Should not be called in the same program as getch().\n    ",
    "language": "python"
  },
  "tools.lib.kbhit.KBHit.kbhit": {
    "id": "tools.lib.kbhit.KBHit.kbhit",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\kbhit.py",
    "relative_path": "tools\\lib\\kbhit.py",
    "depends_on": [],
    "start_line": 60,
    "end_line": 63,
    "has_docstring": true,
    "docstring": " Returns True if keyboard character was hit, False otherwise.\n    ",
    "language": "python"
  },
  "tools.lib.live_logreader.raw_live_logreader": {
    "id": "tools.lib.live_logreader.raw_live_logreader",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\live_logreader.py",
    "relative_path": "tools\\lib\\live_logreader.py",
    "depends_on": [],
    "start_line": 10,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.live_logreader.live_logreader": {
    "id": "tools.lib.live_logreader.live_logreader",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\live_logreader.py",
    "relative_path": "tools\\lib\\live_logreader.py",
    "depends_on": [
      "tools.lib.live_logreader.raw_live_logreader"
    ],
    "start_line": 27,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.save_log": {
    "id": "tools.lib.logreader.save_log",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [],
    "start_line": 31,
    "end_line": 40,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.decompress_stream": {
    "id": "tools.lib.logreader.decompress_stream",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [],
    "start_line": 42,
    "end_line": 49,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader._LogFileReader": {
    "id": "tools.lib.logreader._LogFileReader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [
      "tools.lib.logreader.decompress_stream"
    ],
    "start_line": 51,
    "end_line": 93,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader._LogFileReader.__init__": {
    "id": "tools.lib.logreader._LogFileReader.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [
      "tools.lib.logreader.decompress_stream"
    ],
    "start_line": 52,
    "end_line": 82,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader._LogFileReader.__iter__": {
    "id": "tools.lib.logreader._LogFileReader.__iter__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [],
    "start_line": 84,
    "end_line": 93,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.ReadMode": {
    "id": "tools.lib.logreader.ReadMode",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [],
    "start_line": 96,
    "end_line": 101,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.LogsUnavailable": {
    "id": "tools.lib.logreader.LogsUnavailable",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [],
    "start_line": 111,
    "end_line": 112,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.default_valid_file": {
    "id": "tools.lib.logreader.default_valid_file",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [],
    "start_line": 116,
    "end_line": 117,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.auto_strategy": {
    "id": "tools.lib.logreader.auto_strategy",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [],
    "start_line": 120,
    "end_line": 132,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.apply_strategy": {
    "id": "tools.lib.logreader.apply_strategy",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [
      "tools.lib.logreader.ReadMode",
      "tools.lib.logreader.default_valid_file",
      "tools.lib.logreader.auto_strategy"
    ],
    "start_line": 135,
    "end_line": 144,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.comma_api_source": {
    "id": "tools.lib.logreader.comma_api_source",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [
      "tools.lib.logreader.ReadMode",
      "tools.lib.logreader.apply_strategy"
    ],
    "start_line": 147,
    "end_line": 157,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.internal_source": {
    "id": "tools.lib.logreader.internal_source",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [
      "tools.lib.logreader.ReadMode",
      "tools.lib.logreader.apply_strategy"
    ],
    "start_line": 160,
    "end_line": 171,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.internal_source_zst": {
    "id": "tools.lib.logreader.internal_source_zst",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [
      "tools.lib.logreader.ReadMode",
      "tools.lib.logreader.internal_source"
    ],
    "start_line": 174,
    "end_line": 175,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.openpilotci_source": {
    "id": "tools.lib.logreader.openpilotci_source",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [
      "tools.lib.logreader.ReadMode",
      "tools.lib.logreader.apply_strategy"
    ],
    "start_line": 178,
    "end_line": 182,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.openpilotci_source_zst": {
    "id": "tools.lib.logreader.openpilotci_source_zst",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [
      "tools.lib.logreader.ReadMode",
      "tools.lib.logreader.openpilotci_source"
    ],
    "start_line": 185,
    "end_line": 186,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.comma_car_segments_source": {
    "id": "tools.lib.logreader.comma_car_segments_source",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [
      "tools.lib.logreader.ReadMode"
    ],
    "start_line": 189,
    "end_line": 190,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.testing_closet_source": {
    "id": "tools.lib.logreader.testing_closet_source",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [
      "tools.lib.logreader.ReadMode"
    ],
    "start_line": 193,
    "end_line": 196,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.direct_source": {
    "id": "tools.lib.logreader.direct_source",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [],
    "start_line": 199,
    "end_line": 200,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.get_invalid_files": {
    "id": "tools.lib.logreader.get_invalid_files",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [],
    "start_line": 203,
    "end_line": 206,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.check_source": {
    "id": "tools.lib.logreader.check_source",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [
      "tools.lib.logreader.get_invalid_files"
    ],
    "start_line": 209,
    "end_line": 213,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.auto_source": {
    "id": "tools.lib.logreader.auto_source",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [
      "tools.lib.logreader.internal_source_zst",
      "tools.lib.logreader.comma_car_segments_source",
      "tools.lib.logreader.comma_api_source",
      "tools.lib.logreader.openpilotci_source_zst",
      "tools.lib.logreader.ReadMode",
      "tools.lib.logreader.internal_source",
      "tools.lib.logreader.testing_closet_source",
      "tools.lib.logreader.check_source",
      "tools.lib.logreader.openpilotci_source",
      "tools.lib.logreader.LogsUnavailable"
    ],
    "start_line": 216,
    "end_line": 241,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.parse_indirect": {
    "id": "tools.lib.logreader.parse_indirect",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [],
    "start_line": 244,
    "end_line": 248,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.parse_direct": {
    "id": "tools.lib.logreader.parse_direct",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [],
    "start_line": 251,
    "end_line": 254,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.LogReader": {
    "id": "tools.lib.logreader.LogReader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [
      "tools.lib.logreader.direct_source",
      "tools.lib.logreader.auto_source",
      "tools.lib.logreader.parse_direct",
      "tools.lib.logreader.ReadMode",
      "tools.lib.logreader.get_invalid_files",
      "tools.lib.logreader.parse_indirect",
      "tools.lib.logreader._LogFileReader"
    ],
    "start_line": 257,
    "end_line": 328,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.LogReader._parse_identifier": {
    "id": "tools.lib.logreader.LogReader._parse_identifier",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [
      "tools.lib.logreader.direct_source",
      "tools.lib.logreader.parse_direct",
      "tools.lib.logreader.ReadMode",
      "tools.lib.logreader.get_invalid_files",
      "tools.lib.logreader.parse_indirect"
    ],
    "start_line": 258,
    "end_line": 275,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.LogReader.__init__": {
    "id": "tools.lib.logreader.LogReader.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [
      "tools.lib.logreader.ReadMode",
      "tools.lib.logreader.auto_source",
      "tools.lib.logreader._LogFileReader"
    ],
    "start_line": 277,
    "end_line": 289,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.LogReader._get_lr": {
    "id": "tools.lib.logreader.LogReader._get_lr",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [
      "tools.lib.logreader._LogFileReader"
    ],
    "start_line": 291,
    "end_line": 294,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.LogReader.__iter__": {
    "id": "tools.lib.logreader.LogReader.__iter__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [],
    "start_line": 296,
    "end_line": 298,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.LogReader._run_on_segment": {
    "id": "tools.lib.logreader.LogReader._run_on_segment",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [],
    "start_line": 300,
    "end_line": 301,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.LogReader.run_across_segments": {
    "id": "tools.lib.logreader.LogReader.run_across_segments",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [],
    "start_line": 303,
    "end_line": 309,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.LogReader.reset": {
    "id": "tools.lib.logreader.LogReader.reset",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [],
    "start_line": 311,
    "end_line": 314,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.LogReader.from_bytes": {
    "id": "tools.lib.logreader.LogReader.from_bytes",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [
      "tools.lib.logreader._LogFileReader"
    ],
    "start_line": 317,
    "end_line": 318,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.LogReader.filter": {
    "id": "tools.lib.logreader.LogReader.filter",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [],
    "start_line": 320,
    "end_line": 321,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.LogReader.first": {
    "id": "tools.lib.logreader.LogReader.first",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [],
    "start_line": 323,
    "end_line": 324,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.logreader.LogReader.time_series": {
    "id": "tools.lib.logreader.LogReader.time_series",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\logreader.py",
    "relative_path": "tools\\lib\\logreader.py",
    "depends_on": [],
    "start_line": 327,
    "end_line": 328,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.log_time_series.flatten_type_dict": {
    "id": "tools.lib.log_time_series.flatten_type_dict",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\log_time_series.py",
    "relative_path": "tools\\lib\\log_time_series.py",
    "depends_on": [
      "tools.lib.log_time_series.flatten_type_dict"
    ],
    "start_line": 4,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.log_time_series.get_message_dict": {
    "id": "tools.lib.log_time_series.get_message_dict",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\log_time_series.py",
    "relative_path": "tools\\lib\\log_time_series.py",
    "depends_on": [
      "tools.lib.log_time_series.flatten_type_dict"
    ],
    "start_line": 19,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.log_time_series.append_dict": {
    "id": "tools.lib.log_time_series.append_dict",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\log_time_series.py",
    "relative_path": "tools\\lib\\log_time_series.py",
    "depends_on": [],
    "start_line": 33,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.log_time_series.potentially_ragged_array": {
    "id": "tools.lib.log_time_series.potentially_ragged_array",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\log_time_series.py",
    "relative_path": "tools\\lib\\log_time_series.py",
    "depends_on": [],
    "start_line": 48,
    "end_line": 53,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.log_time_series.msgs_to_time_series": {
    "id": "tools.lib.log_time_series.msgs_to_time_series",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\log_time_series.py",
    "relative_path": "tools\\lib\\log_time_series.py",
    "depends_on": [
      "tools.lib.log_time_series.append_dict",
      "tools.lib.log_time_series.get_message_dict",
      "tools.lib.log_time_series.potentially_ragged_array"
    ],
    "start_line": 55,
    "end_line": 76,
    "has_docstring": true,
    "docstring": "\n    Convert an iterable of canonical capnp messages into a dictionary of time series.\n    Each time series has a value with key \"t\" which consists of monotonically increasing timestamps\n    in seconds.\n  ",
    "language": "python"
  },
  "tools.lib.openpilotci.get_url": {
    "id": "tools.lib.openpilotci.get_url",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\openpilotci.py",
    "relative_path": "tools\\lib\\openpilotci.py",
    "depends_on": [],
    "start_line": 3,
    "end_line": 4,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.openpilotci.upload_file": {
    "id": "tools.lib.openpilotci.upload_file",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\openpilotci.py",
    "relative_path": "tools\\lib\\openpilotci.py",
    "depends_on": [],
    "start_line": 6,
    "end_line": 7,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.openpilotci.upload_bytes": {
    "id": "tools.lib.openpilotci.upload_bytes",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\openpilotci.py",
    "relative_path": "tools\\lib\\openpilotci.py",
    "depends_on": [],
    "start_line": 9,
    "end_line": 10,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.Route": {
    "id": "tools.lib.route.Route",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [
      "tools.lib.route.RouteName",
      "tools.lib.route.Segment"
    ],
    "start_line": 20,
    "end_line": 160,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.Route.__init__": {
    "id": "tools.lib.route.Route.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [
      "tools.lib.route.RouteName"
    ],
    "start_line": 21,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.Route.name": {
    "id": "tools.lib.route.Route.name",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 31,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.Route.segments": {
    "id": "tools.lib.route.Route.segments",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 35,
    "end_line": 36,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.Route.log_paths": {
    "id": "tools.lib.route.Route.log_paths",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 38,
    "end_line": 40,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.Route.qlog_paths": {
    "id": "tools.lib.route.Route.qlog_paths",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 42,
    "end_line": 44,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.Route.camera_paths": {
    "id": "tools.lib.route.Route.camera_paths",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 46,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.Route.dcamera_paths": {
    "id": "tools.lib.route.Route.dcamera_paths",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 50,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.Route.ecamera_paths": {
    "id": "tools.lib.route.Route.ecamera_paths",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 54,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.Route.qcamera_paths": {
    "id": "tools.lib.route.Route.qcamera_paths",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 58,
    "end_line": 60,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.Route._get_segments_remote": {
    "id": "tools.lib.route.Route._get_segments_remote",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [
      "tools.lib.route.Segment"
    ],
    "start_line": 63,
    "end_line": 93,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.Route._get_segments_local": {
    "id": "tools.lib.route.Route._get_segments_local",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [
      "tools.lib.route.Segment"
    ],
    "start_line": 95,
    "end_line": 160,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.Segment": {
    "id": "tools.lib.route.Segment",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [
      "tools.lib.route.SegmentName"
    ],
    "start_line": 163,
    "end_line": 175,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.Segment.__init__": {
    "id": "tools.lib.route.Segment.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [
      "tools.lib.route.SegmentName"
    ],
    "start_line": 164,
    "end_line": 171,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.Segment.name": {
    "id": "tools.lib.route.Segment.name",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 174,
    "end_line": 175,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.RouteName": {
    "id": "tools.lib.route.RouteName",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 178,
    "end_line": 197,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.RouteName.__init__": {
    "id": "tools.lib.route.RouteName.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 179,
    "end_line": 186,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.RouteName.canonical_name": {
    "id": "tools.lib.route.RouteName.canonical_name",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 189,
    "end_line": 189,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.RouteName.dongle_id": {
    "id": "tools.lib.route.RouteName.dongle_id",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 192,
    "end_line": 192,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.RouteName.time_str": {
    "id": "tools.lib.route.RouteName.time_str",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 195,
    "end_line": 195,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.RouteName.__str__": {
    "id": "tools.lib.route.RouteName.__str__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 197,
    "end_line": 197,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.SegmentName": {
    "id": "tools.lib.route.SegmentName",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [
      "tools.lib.route.RouteName"
    ],
    "start_line": 200,
    "end_line": 235,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.SegmentName.__init__": {
    "id": "tools.lib.route.SegmentName.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [
      "tools.lib.route.RouteName"
    ],
    "start_line": 203,
    "end_line": 215,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.SegmentName.canonical_name": {
    "id": "tools.lib.route.SegmentName.canonical_name",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 218,
    "end_line": 218,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.SegmentName.dongle_id": {
    "id": "tools.lib.route.SegmentName.dongle_id",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 221,
    "end_line": 221,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.SegmentName.time_str": {
    "id": "tools.lib.route.SegmentName.time_str",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 224,
    "end_line": 224,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.SegmentName.segment_num": {
    "id": "tools.lib.route.SegmentName.segment_num",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 227,
    "end_line": 227,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.SegmentName.route_name": {
    "id": "tools.lib.route.SegmentName.route_name",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [
      "tools.lib.route.RouteName"
    ],
    "start_line": 230,
    "end_line": 230,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.SegmentName.data_dir": {
    "id": "tools.lib.route.SegmentName.data_dir",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 233,
    "end_line": 233,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.SegmentName.__str__": {
    "id": "tools.lib.route.SegmentName.__str__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 235,
    "end_line": 235,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.get_max_seg_number_cached": {
    "id": "tools.lib.route.get_max_seg_number_cached",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 239,
    "end_line": 246,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.SegmentRange": {
    "id": "tools.lib.route.SegmentRange",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [
      "tools.lib.route.get_max_seg_number_cached"
    ],
    "start_line": 249,
    "end_line": 298,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.SegmentRange.__init__": {
    "id": "tools.lib.route.SegmentRange.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 250,
    "end_line": 253,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.SegmentRange.route_name": {
    "id": "tools.lib.route.SegmentRange.route_name",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 256,
    "end_line": 257,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.SegmentRange.dongle_id": {
    "id": "tools.lib.route.SegmentRange.dongle_id",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 260,
    "end_line": 261,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.SegmentRange.log_id": {
    "id": "tools.lib.route.SegmentRange.log_id",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 264,
    "end_line": 265,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.SegmentRange.slice": {
    "id": "tools.lib.route.SegmentRange.slice",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 268,
    "end_line": 269,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.SegmentRange.selector": {
    "id": "tools.lib.route.SegmentRange.selector",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 272,
    "end_line": 273,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.SegmentRange.seg_idxs": {
    "id": "tools.lib.route.SegmentRange.seg_idxs",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [
      "tools.lib.route.get_max_seg_number_cached"
    ],
    "start_line": 276,
    "end_line": 292,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.SegmentRange.__str__": {
    "id": "tools.lib.route.SegmentRange.__str__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 294,
    "end_line": 295,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.route.SegmentRange.__repr__": {
    "id": "tools.lib.route.SegmentRange.__repr__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\route.py",
    "relative_path": "tools\\lib\\route.py",
    "depends_on": [],
    "start_line": 297,
    "end_line": 298,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.sanitizer.sanitize_vin": {
    "id": "tools.lib.sanitizer.sanitize_vin",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\sanitizer.py",
    "relative_path": "tools\\lib\\sanitizer.py",
    "depends_on": [],
    "start_line": 6,
    "end_line": 9,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.sanitizer.sanitize_msg": {
    "id": "tools.lib.sanitizer.sanitize_msg",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\sanitizer.py",
    "relative_path": "tools\\lib\\sanitizer.py",
    "depends_on": [
      "tools.lib.sanitizer.sanitize_vin"
    ],
    "start_line": 12,
    "end_line": 17,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.sanitizer.sanitize": {
    "id": "tools.lib.sanitizer.sanitize",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\sanitizer.py",
    "relative_path": "tools\\lib\\sanitizer.py",
    "depends_on": [
      "tools.lib.sanitizer.sanitize_msg"
    ],
    "start_line": 23,
    "end_line": 26,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.url_file.hash_256": {
    "id": "tools.lib.url_file.hash_256",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\url_file.py",
    "relative_path": "tools\\lib\\url_file.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.url_file.URLFileException": {
    "id": "tools.lib.url_file.URLFileException",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\url_file.py",
    "relative_path": "tools\\lib\\url_file.py",
    "depends_on": [],
    "start_line": 22,
    "end_line": 23,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.url_file.URLFile": {
    "id": "tools.lib.url_file.URLFile",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\url_file.py",
    "relative_path": "tools\\lib\\url_file.py",
    "depends_on": [
      "tools.lib.url_file.URLFile",
      "tools.lib.url_file.hash_256",
      "tools.lib.url_file.URLFileException"
    ],
    "start_line": 26,
    "end_line": 160,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.url_file.URLFile.reset": {
    "id": "tools.lib.url_file.URLFile.reset",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\url_file.py",
    "relative_path": "tools\\lib\\url_file.py",
    "depends_on": [
      "tools.lib.url_file.URLFile"
    ],
    "start_line": 30,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.url_file.URLFile.pool_manager": {
    "id": "tools.lib.url_file.URLFile.pool_manager",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\url_file.py",
    "relative_path": "tools\\lib\\url_file.py",
    "depends_on": [
      "tools.lib.url_file.URLFile"
    ],
    "start_line": 34,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.url_file.URLFile.__init__": {
    "id": "tools.lib.url_file.URLFile.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\url_file.py",
    "relative_path": "tools\\lib\\url_file.py",
    "depends_on": [],
    "start_line": 41,
    "end_line": 53,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.url_file.URLFile.__enter__": {
    "id": "tools.lib.url_file.URLFile.__enter__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\url_file.py",
    "relative_path": "tools\\lib\\url_file.py",
    "depends_on": [],
    "start_line": 55,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.url_file.URLFile.__exit__": {
    "id": "tools.lib.url_file.URLFile.__exit__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\url_file.py",
    "relative_path": "tools\\lib\\url_file.py",
    "depends_on": [],
    "start_line": 58,
    "end_line": 59,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.url_file.URLFile._request": {
    "id": "tools.lib.url_file.URLFile._request",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\url_file.py",
    "relative_path": "tools\\lib\\url_file.py",
    "depends_on": [
      "tools.lib.url_file.URLFile"
    ],
    "start_line": 61,
    "end_line": 62,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.url_file.URLFile.get_length_online": {
    "id": "tools.lib.url_file.URLFile.get_length_online",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\url_file.py",
    "relative_path": "tools\\lib\\url_file.py",
    "depends_on": [],
    "start_line": 64,
    "end_line": 69,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.url_file.URLFile.get_length": {
    "id": "tools.lib.url_file.URLFile.get_length",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\url_file.py",
    "relative_path": "tools\\lib\\url_file.py",
    "depends_on": [
      "tools.lib.url_file.hash_256"
    ],
    "start_line": 71,
    "end_line": 86,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.url_file.URLFile.read": {
    "id": "tools.lib.url_file.URLFile.read",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\url_file.py",
    "relative_path": "tools\\lib\\url_file.py",
    "depends_on": [
      "tools.lib.url_file.hash_256"
    ],
    "start_line": 88,
    "end_line": 118,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.url_file.URLFile.read_aux": {
    "id": "tools.lib.url_file.URLFile.read_aux",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\url_file.py",
    "relative_path": "tools\\lib\\url_file.py",
    "depends_on": [
      "tools.lib.url_file.URLFileException"
    ],
    "start_line": 120,
    "end_line": 153,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.url_file.URLFile.seek": {
    "id": "tools.lib.url_file.URLFile.seek",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\url_file.py",
    "relative_path": "tools\\lib\\url_file.py",
    "depends_on": [],
    "start_line": 155,
    "end_line": 156,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.url_file.URLFile.name": {
    "id": "tools.lib.url_file.URLFile.name",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\url_file.py",
    "relative_path": "tools\\lib\\url_file.py",
    "depends_on": [],
    "start_line": 159,
    "end_line": 160,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.vidindex.HevcNalUnitType": {
    "id": "tools.lib.vidindex.HevcNalUnitType",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\vidindex.py",
    "relative_path": "tools\\lib\\vidindex.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 85,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.vidindex.VideoFileInvalid": {
    "id": "tools.lib.vidindex.VideoFileInvalid",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\vidindex.py",
    "relative_path": "tools\\lib\\vidindex.py",
    "depends_on": [],
    "start_line": 119,
    "end_line": 120,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.vidindex.get_ue": {
    "id": "tools.lib.vidindex.get_ue",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\vidindex.py",
    "relative_path": "tools\\lib\\vidindex.py",
    "depends_on": [
      "tools.lib.vidindex.VideoFileInvalid"
    ],
    "start_line": 122,
    "end_line": 148,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.vidindex.require_nal_unit_start": {
    "id": "tools.lib.vidindex.require_nal_unit_start",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\vidindex.py",
    "relative_path": "tools\\lib\\vidindex.py",
    "depends_on": [
      "tools.lib.vidindex.VideoFileInvalid"
    ],
    "start_line": 150,
    "end_line": 155,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.vidindex.get_hevc_nal_unit_length": {
    "id": "tools.lib.vidindex.get_hevc_nal_unit_length",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\vidindex.py",
    "relative_path": "tools\\lib\\vidindex.py",
    "depends_on": [],
    "start_line": 157,
    "end_line": 167,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.vidindex.get_hevc_nal_unit_type": {
    "id": "tools.lib.vidindex.get_hevc_nal_unit_type",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\vidindex.py",
    "relative_path": "tools\\lib\\vidindex.py",
    "depends_on": [
      "tools.lib.vidindex.HevcNalUnitType",
      "tools.lib.vidindex.VideoFileInvalid"
    ],
    "start_line": 169,
    "end_line": 184,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.vidindex.get_hevc_slice_type": {
    "id": "tools.lib.vidindex.get_hevc_slice_type",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\vidindex.py",
    "relative_path": "tools\\lib\\vidindex.py",
    "depends_on": [
      "tools.lib.vidindex.HevcNalUnitType",
      "tools.lib.vidindex.get_ue",
      "tools.lib.vidindex.VideoFileInvalid"
    ],
    "start_line": 186,
    "end_line": 259,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.vidindex.hevc_index": {
    "id": "tools.lib.vidindex.hevc_index",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\vidindex.py",
    "relative_path": "tools\\lib\\vidindex.py",
    "depends_on": [
      "tools.lib.vidindex.get_hevc_slice_type",
      "tools.lib.vidindex.require_nal_unit_start",
      "tools.lib.vidindex.VideoFileInvalid",
      "tools.lib.vidindex.get_hevc_nal_unit_type",
      "tools.lib.vidindex.get_hevc_nal_unit_length"
    ],
    "start_line": 261,
    "end_line": 292,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.vidindex.main": {
    "id": "tools.lib.vidindex.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\vidindex.py",
    "relative_path": "tools\\lib\\vidindex.py",
    "depends_on": [
      "tools.lib.vidindex.hevc_index"
    ],
    "start_line": 294,
    "end_line": 308,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_caching.CachingTestRequestHandler": {
    "id": "tools.lib.tests.test_caching.CachingTestRequestHandler",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_caching.py",
    "relative_path": "tools\\lib\\tests\\test_caching.py",
    "depends_on": [],
    "start_line": 12,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_caching.CachingTestRequestHandler.do_GET": {
    "id": "tools.lib.tests.test_caching.CachingTestRequestHandler.do_GET",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_caching.py",
    "relative_path": "tools\\lib\\tests\\test_caching.py",
    "depends_on": [],
    "start_line": 15,
    "end_line": 20,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_caching.CachingTestRequestHandler.do_HEAD": {
    "id": "tools.lib.tests.test_caching.CachingTestRequestHandler.do_HEAD",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_caching.py",
    "relative_path": "tools\\lib\\tests\\test_caching.py",
    "depends_on": [],
    "start_line": 22,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_caching.host": {
    "id": "tools.lib.tests.test_caching.host",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_caching.py",
    "relative_path": "tools\\lib\\tests\\test_caching.py",
    "depends_on": [
      "tools.lib.tests.test_caching.host",
      "tools.lib.tests.test_caching.CachingTestRequestHandler"
    ],
    "start_line": 32,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_caching.TestFileDownload": {
    "id": "tools.lib.tests.test_caching.TestFileDownload",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_caching.py",
    "relative_path": "tools\\lib\\tests\\test_caching.py",
    "depends_on": [
      "tools.lib.tests.test_caching.host",
      "tools.lib.tests.test_caching.CachingTestRequestHandler"
    ],
    "start_line": 36,
    "end_line": 130,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_caching.TestFileDownload.test_pipeline_defaults": {
    "id": "tools.lib.tests.test_caching.TestFileDownload.test_pipeline_defaults",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_caching.py",
    "relative_path": "tools\\lib\\tests\\test_caching.py",
    "depends_on": [],
    "start_line": 38,
    "end_line": 63,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_caching.TestFileDownload.compare_loads": {
    "id": "tools.lib.tests.test_caching.TestFileDownload.compare_loads",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_caching.py",
    "relative_path": "tools\\lib\\tests\\test_caching.py",
    "depends_on": [],
    "start_line": 65,
    "end_line": 87,
    "has_docstring": true,
    "docstring": "Compares range between cached and non cached version",
    "language": "python"
  },
  "tools.lib.tests.test_caching.TestFileDownload.test_small_file": {
    "id": "tools.lib.tests.test_caching.TestFileDownload.test_small_file",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_caching.py",
    "relative_path": "tools\\lib\\tests\\test_caching.py",
    "depends_on": [],
    "start_line": 89,
    "end_line": 107,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_caching.TestFileDownload.test_large_file": {
    "id": "tools.lib.tests.test_caching.TestFileDownload.test_large_file",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_caching.py",
    "relative_path": "tools\\lib\\tests\\test_caching.py",
    "depends_on": [],
    "start_line": 109,
    "end_line": 116,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_caching.TestFileDownload.test_recover_from_missing_file": {
    "id": "tools.lib.tests.test_caching.TestFileDownload.test_recover_from_missing_file",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_caching.py",
    "relative_path": "tools\\lib\\tests\\test_caching.py",
    "depends_on": [
      "tools.lib.tests.test_caching.CachingTestRequestHandler"
    ],
    "start_line": 119,
    "end_line": 130,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_comma_car_segments.TestCommaCarSegments": {
    "id": "tools.lib.tests.test_comma_car_segments.TestCommaCarSegments",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_comma_car_segments.py",
    "relative_path": "tools\\lib\\tests\\test_comma_car_segments.py",
    "depends_on": [],
    "start_line": 10,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_comma_car_segments.TestCommaCarSegments.test_database": {
    "id": "tools.lib.tests.test_comma_car_segments.TestCommaCarSegments.test_database",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_comma_car_segments.py",
    "relative_path": "tools\\lib\\tests\\test_comma_car_segments.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_comma_car_segments.TestCommaCarSegments.test_download_segment": {
    "id": "tools.lib.tests.test_comma_car_segments.TestCommaCarSegments.test_download_segment",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_comma_car_segments.py",
    "relative_path": "tools\\lib\\tests\\test_comma_car_segments.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_logreader.noop": {
    "id": "tools.lib.tests.test_logreader.noop",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_logreader.py",
    "relative_path": "tools\\lib\\tests\\test_logreader.py",
    "depends_on": [],
    "start_line": 23,
    "end_line": 24,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_logreader.setup_source_scenario": {
    "id": "tools.lib.tests.test_logreader.setup_source_scenario",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_logreader.py",
    "relative_path": "tools\\lib\\tests\\test_logreader.py",
    "depends_on": [],
    "start_line": 28,
    "end_line": 46,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_logreader.TestLogReader": {
    "id": "tools.lib.tests.test_logreader.TestLogReader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_logreader.py",
    "relative_path": "tools\\lib\\tests\\test_logreader.py",
    "depends_on": [
      "tools.lib.tests.test_logreader.noop",
      "tools.lib.tests.test_logreader.setup_source_scenario"
    ],
    "start_line": 49,
    "end_line": 256,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_logreader.TestLogReader.test_indirect_parsing": {
    "id": "tools.lib.tests.test_logreader.TestLogReader.test_indirect_parsing",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_logreader.py",
    "relative_path": "tools\\lib\\tests\\test_logreader.py",
    "depends_on": [],
    "start_line": 74,
    "end_line": 77,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_logreader.TestLogReader.test_canonical_name": {
    "id": "tools.lib.tests.test_logreader.TestLogReader.test_canonical_name",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_logreader.py",
    "relative_path": "tools\\lib\\tests\\test_logreader.py",
    "depends_on": [],
    "start_line": 87,
    "end_line": 89,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_logreader.TestLogReader.test_direct_parsing": {
    "id": "tools.lib.tests.test_logreader.TestLogReader.test_direct_parsing",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_logreader.py",
    "relative_path": "tools\\lib\\tests\\test_logreader.py",
    "depends_on": [],
    "start_line": 92,
    "end_line": 109,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_logreader.TestLogReader.test_bad_ranges": {
    "id": "tools.lib.tests.test_logreader.TestLogReader.test_bad_ranges",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_logreader.py",
    "relative_path": "tools\\lib\\tests\\test_logreader.py",
    "depends_on": [],
    "start_line": 123,
    "end_line": 125,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_logreader.TestLogReader.test_slicing_api_call": {
    "id": "tools.lib.tests.test_logreader.TestLogReader.test_slicing_api_call",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_logreader.py",
    "relative_path": "tools\\lib\\tests\\test_logreader.py",
    "depends_on": [],
    "start_line": 134,
    "end_line": 138,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_logreader.TestLogReader.test_modes": {
    "id": "tools.lib.tests.test_logreader.TestLogReader.test_modes",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_logreader.py",
    "relative_path": "tools\\lib\\tests\\test_logreader.py",
    "depends_on": [],
    "start_line": 141,
    "end_line": 145,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_logreader.TestLogReader.test_modes_from_name": {
    "id": "tools.lib.tests.test_logreader.TestLogReader.test_modes_from_name",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_logreader.py",
    "relative_path": "tools\\lib\\tests\\test_logreader.py",
    "depends_on": [],
    "start_line": 148,
    "end_line": 152,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_logreader.TestLogReader.test_list": {
    "id": "tools.lib.tests.test_logreader.TestLogReader.test_list",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_logreader.py",
    "relative_path": "tools\\lib\\tests\\test_logreader.py",
    "depends_on": [],
    "start_line": 155,
    "end_line": 159,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_logreader.TestLogReader.test_multiple_iterations": {
    "id": "tools.lib.tests.test_logreader.TestLogReader.test_multiple_iterations",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_logreader.py",
    "relative_path": "tools\\lib\\tests\\test_logreader.py",
    "depends_on": [],
    "start_line": 162,
    "end_line": 171,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_logreader.TestLogReader.test_helpers": {
    "id": "tools.lib.tests.test_logreader.TestLogReader.test_helpers",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_logreader.py",
    "relative_path": "tools\\lib\\tests\\test_logreader.py",
    "depends_on": [],
    "start_line": 174,
    "end_line": 177,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_logreader.TestLogReader.test_run_across_segments": {
    "id": "tools.lib.tests.test_logreader.TestLogReader.test_run_across_segments",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_logreader.py",
    "relative_path": "tools\\lib\\tests\\test_logreader.py",
    "depends_on": [
      "tools.lib.tests.test_logreader.noop"
    ],
    "start_line": 181,
    "end_line": 184,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_logreader.TestLogReader.test_auto_mode": {
    "id": "tools.lib.tests.test_logreader.TestLogReader.test_auto_mode",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_logreader.py",
    "relative_path": "tools\\lib\\tests\\test_logreader.py",
    "depends_on": [],
    "start_line": 187,
    "end_line": 208,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_logreader.TestLogReader.test_auto_source_scenarios": {
    "id": "tools.lib.tests.test_logreader.TestLogReader.test_auto_source_scenarios",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_logreader.py",
    "relative_path": "tools\\lib\\tests\\test_logreader.py",
    "depends_on": [
      "tools.lib.tests.test_logreader.setup_source_scenario"
    ],
    "start_line": 212,
    "end_line": 219,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_logreader.TestLogReader.test_sort_by_time": {
    "id": "tools.lib.tests.test_logreader.TestLogReader.test_sort_by_time",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_logreader.py",
    "relative_path": "tools\\lib\\tests\\test_logreader.py",
    "depends_on": [],
    "start_line": 222,
    "end_line": 227,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_logreader.TestLogReader.test_only_union_types": {
    "id": "tools.lib.tests.test_logreader.TestLogReader.test_only_union_types",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_logreader.py",
    "relative_path": "tools\\lib\\tests\\test_logreader.py",
    "depends_on": [],
    "start_line": 229,
    "end_line": 256,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_readers.TestReaders": {
    "id": "tools.lib.tests.test_readers.TestReaders",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_readers.py",
    "relative_path": "tools\\lib\\tests\\test_readers.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 63,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_readers.TestReaders.test_logreader": {
    "id": "tools.lib.tests.test_readers.TestReaders.test_logreader",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_readers.py",
    "relative_path": "tools\\lib\\tests\\test_readers.py",
    "depends_on": [],
    "start_line": 13,
    "end_line": 31,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_readers.TestReaders.test_framereader": {
    "id": "tools.lib.tests.test_readers.TestReaders.test_framereader",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_readers.py",
    "relative_path": "tools\\lib\\tests\\test_readers.py",
    "depends_on": [],
    "start_line": 34,
    "end_line": 63,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_route_library.TestRouteLibrary": {
    "id": "tools.lib.tests.test_route_library.TestRouteLibrary",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_route_library.py",
    "relative_path": "tools\\lib\\tests\\test_route_library.py",
    "depends_on": [],
    "start_line": 5,
    "end_line": 27,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.lib.tests.test_route_library.TestRouteLibrary.test_segment_name_formats": {
    "id": "tools.lib.tests.test_route_library.TestRouteLibrary.test_segment_name_formats",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\lib\\tests\\test_route_library.py",
    "relative_path": "tools\\lib\\tests\\test_route_library.py",
    "depends_on": [],
    "start_line": 6,
    "end_line": 27,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.longitudinal_maneuvers.generate_report.format_car_params": {
    "id": "tools.longitudinal_maneuvers.generate_report.format_car_params",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\longitudinal_maneuvers\\generate_report.py",
    "relative_path": "tools\\longitudinal_maneuvers\\generate_report.py",
    "depends_on": [],
    "start_line": 18,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.longitudinal_maneuvers.generate_report.report": {
    "id": "tools.longitudinal_maneuvers.generate_report.report",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\longitudinal_maneuvers\\generate_report.py",
    "relative_path": "tools\\longitudinal_maneuvers\\generate_report.py",
    "depends_on": [
      "tools.longitudinal_maneuvers.generate_report.format_car_params"
    ],
    "start_line": 22,
    "end_line": 148,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.longitudinal_maneuvers.maneuversd.Action": {
    "id": "tools.longitudinal_maneuvers.maneuversd.Action",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\longitudinal_maneuvers\\maneuversd.py",
    "relative_path": "tools\\longitudinal_maneuvers\\maneuversd.py",
    "depends_on": [],
    "start_line": 13,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.longitudinal_maneuvers.maneuversd.Action.__post_init__": {
    "id": "tools.longitudinal_maneuvers.maneuversd.Action.__post_init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\longitudinal_maneuvers\\maneuversd.py",
    "relative_path": "tools\\longitudinal_maneuvers\\maneuversd.py",
    "depends_on": [],
    "start_line": 17,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.longitudinal_maneuvers.maneuversd.Maneuver": {
    "id": "tools.longitudinal_maneuvers.maneuversd.Maneuver",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\longitudinal_maneuvers\\maneuversd.py",
    "relative_path": "tools\\longitudinal_maneuvers\\maneuversd.py",
    "depends_on": [
      "tools.longitudinal_maneuvers.maneuversd.Action"
    ],
    "start_line": 22,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.longitudinal_maneuvers.maneuversd.Maneuver.get_accel": {
    "id": "tools.longitudinal_maneuvers.maneuversd.Maneuver.get_accel",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\longitudinal_maneuvers\\maneuversd.py",
    "relative_path": "tools\\longitudinal_maneuvers\\maneuversd.py",
    "depends_on": [],
    "start_line": 35,
    "end_line": 68,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.longitudinal_maneuvers.maneuversd.Maneuver.finished": {
    "id": "tools.longitudinal_maneuvers.maneuversd.Maneuver.finished",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\longitudinal_maneuvers\\maneuversd.py",
    "relative_path": "tools\\longitudinal_maneuvers\\maneuversd.py",
    "depends_on": [],
    "start_line": 71,
    "end_line": 72,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.longitudinal_maneuvers.maneuversd.Maneuver.active": {
    "id": "tools.longitudinal_maneuvers.maneuversd.Maneuver.active",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\longitudinal_maneuvers\\maneuversd.py",
    "relative_path": "tools\\longitudinal_maneuvers\\maneuversd.py",
    "depends_on": [],
    "start_line": 75,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.longitudinal_maneuvers.maneuversd.main": {
    "id": "tools.longitudinal_maneuvers.maneuversd.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\longitudinal_maneuvers\\maneuversd.py",
    "relative_path": "tools\\longitudinal_maneuvers\\maneuversd.py",
    "depends_on": [],
    "start_line": 129,
    "end_line": 185,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.plotjuggler.juggle.install": {
    "id": "tools.plotjuggler.juggle.install",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\plotjuggler\\juggle.py",
    "relative_path": "tools\\plotjuggler\\juggle.py",
    "depends_on": [],
    "start_line": 32,
    "end_line": 50,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.plotjuggler.juggle.get_plotjuggler_version": {
    "id": "tools.plotjuggler.juggle.get_plotjuggler_version",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\plotjuggler\\juggle.py",
    "relative_path": "tools\\plotjuggler\\juggle.py",
    "depends_on": [],
    "start_line": 53,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.plotjuggler.juggle.start_juggler": {
    "id": "tools.plotjuggler.juggle.start_juggler",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\plotjuggler\\juggle.py",
    "relative_path": "tools\\plotjuggler\\juggle.py",
    "depends_on": [],
    "start_line": 59,
    "end_line": 77,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.plotjuggler.juggle.process": {
    "id": "tools.plotjuggler.juggle.process",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\plotjuggler\\juggle.py",
    "relative_path": "tools\\plotjuggler\\juggle.py",
    "depends_on": [],
    "start_line": 80,
    "end_line": 81,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.plotjuggler.juggle.juggle_route": {
    "id": "tools.plotjuggler.juggle.juggle_route",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\plotjuggler\\juggle.py",
    "relative_path": "tools\\plotjuggler\\juggle.py",
    "depends_on": [
      "tools.plotjuggler.juggle.process",
      "tools.plotjuggler.juggle.start_juggler"
    ],
    "start_line": 84,
    "end_line": 104,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.plotjuggler.test_plotjuggler.TestPlotJuggler": {
    "id": "tools.plotjuggler.test_plotjuggler.TestPlotJuggler",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\plotjuggler\\test_plotjuggler.py",
    "relative_path": "tools\\plotjuggler\\test_plotjuggler.py",
    "depends_on": [],
    "start_line": 13,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.plotjuggler.test_plotjuggler.TestPlotJuggler.test_demo": {
    "id": "tools.plotjuggler.test_plotjuggler.TestPlotJuggler.test_demo",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\plotjuggler\\test_plotjuggler.py",
    "relative_path": "tools\\plotjuggler\\test_plotjuggler.py",
    "depends_on": [],
    "start_line": 15,
    "end_line": 32,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.plotjuggler.test_plotjuggler.TestPlotJuggler.test_layouts": {
    "id": "tools.plotjuggler.test_plotjuggler.TestPlotJuggler.test_layouts",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\plotjuggler\\test_plotjuggler.py",
    "relative_path": "tools\\plotjuggler\\test_plotjuggler.py",
    "depends_on": [],
    "start_line": 35,
    "end_line": 48,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.api.base64url_encode": {
    "id": "tools.replay.api.base64url_encode",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\api.cc",
    "relative_path": "tools\\replay\\api.cc",
    "depends_on": [],
    "start_line": 25,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string base64url_encode(const std::string &in) {\n  std::string out;\n  int val = 0, valb = -6;\n  for (unsigned char c : in) {\n    val = (val << 8) + c;\n    valb += 8;\n    while (valb >= 0) {\n      out.push_back(base64url_chars[(val >> valb) & 0x3F]);\n      valb -= 6;\n    }\n  }\n  if (valb > -6) {\n    out.push_back(base64url_chars[((val << 8) >> (valb + 8)) & 0x3F]);\n  }\n\n  return out;\n}\n"
  },
  "tools.replay.api.get_rsa_private_key": {
    "id": "tools.replay.api.get_rsa_private_key",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\api.cc",
    "relative_path": "tools\\replay\\api.cc",
    "depends_on": [],
    "start_line": 43,
    "end_line": 55,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "EVP_PKEY *get_rsa_private_key() {\n  static std::unique_ptr<EVP_PKEY, decltype(&EVP_PKEY_free)> rsa_private(nullptr, EVP_PKEY_free);\n  if (!rsa_private) {\n    FILE *fp = fopen(Path::rsa_file().c_str(), \"rb\");\n    if (!fp) {\n      std::cerr << \"No RSA private key found, please run manager.py or registration.py\" << std::endl;\n      return nullptr;\n    }\n    rsa_private.reset(PEM_read_PrivateKey(fp, NULL, NULL, NULL));\n    fclose(fp);\n  }\n  return rsa_private.get();\n}\n"
  },
  "tools.replay.api.rsa_sign": {
    "id": "tools.replay.api.rsa_sign",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\api.cc",
    "relative_path": "tools\\replay\\api.cc",
    "depends_on": [],
    "start_line": 57,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string rsa_sign(const std::string &data) {\n  EVP_PKEY *private_key = get_rsa_private_key();\n  if (!private_key) return {};\n\n  EVP_MD_CTX *mdctx = EVP_MD_CTX_new();\n  assert(mdctx != nullptr);\n\n  std::vector<uint8_t> sig(EVP_PKEY_size(private_key));\n  uint32_t sig_len;\n\n  EVP_SignInit(mdctx, EVP_sha256());\n  EVP_SignUpdate(mdctx, data.data(), data.size());\n  int ret = EVP_SignFinal(mdctx, sig.data(), &sig_len, private_key);\n\n  EVP_MD_CTX_free(mdctx);\n\n  assert(ret == 1);\n  assert(sig.size() == sig_len);\n  return std::string(sig.begin(), sig.begin() + sig_len);\n}\n"
  },
  "tools.replay.api.create_jwt": {
    "id": "tools.replay.api.create_jwt",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\api.cc",
    "relative_path": "tools\\replay\\api.cc",
    "depends_on": [],
    "start_line": 78,
    "end_line": 105,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string create_jwt(const json11::Json &extra, int exp_time) {\n  int now = std::chrono::seconds(std::time(nullptr)).count();\n  std::string dongle_id = Params().get(\"DongleId\");\n\n  // Create header and payload\n  json11::Json header = json11::Json::object{{\"alg\", \"RS256\"}};\n  auto payload = json11::Json::object{\n      {\"identity\", dongle_id},\n      {\"iat\", now},\n      {\"nbf\", now},\n      {\"exp\", now + exp_time},\n  };\n  // Merge extra payload\n  for (const auto &item : extra.object_items()) {\n    payload[item.first] = item.second;\n  }\n\n  // JWT construction\n  std::string jwt = base64url_encode(header.dump()) + '.' +\n                    base64url_encode(json11::Json(payload).dump());\n\n  // Hash and sign\n  std::string hash(SHA256_DIGEST_LENGTH, '\\0');\n  SHA256((uint8_t *)jwt.data(), jwt.size(), (uint8_t *)hash.data());\n  std::string signature = rsa_sign(hash);\n\n  return jwt + \".\" + base64url_encode(signature);\n}\n"
  },
  "tools.replay.api.create_token": {
    "id": "tools.replay.api.create_token",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\api.cc",
    "relative_path": "tools\\replay\\api.cc",
    "depends_on": [],
    "start_line": 107,
    "end_line": 120,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string create_token(bool use_jwt, const json11::Json &payloads, int expiry) {\n  if (use_jwt) {\n    return create_jwt(payloads, expiry);\n  }\n\n  std::string token_json = util::read_file(util::getenv(\"HOME\") + \"/.comma/auth.json\");\n  std::string err;\n  auto json = json11::Json::parse(token_json, err);\n  if (!err.empty()) {\n    std::cerr << \"Error parsing auth.json \" << err << std::endl;\n    return \"\";\n  }\n  return json[\"access_token\"].string_value();\n}\n"
  },
  "tools.replay.api.httpGet": {
    "id": "tools.replay.api.httpGet",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\api.cc",
    "relative_path": "tools\\replay\\api.cc",
    "depends_on": [],
    "start_line": 122,
    "end_line": 160,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string httpGet(const std::string &url, long *response_code) {\n  CURL *curl = curl_easy_init();\n  assert(curl);\n\n  std::string readBuffer;\n  const std::string token = CommaApi2::create_token(!Hardware::PC());\n\n  // Set up the lambda for the write callback\n  // The '+' makes the lambda non-capturing, allowing it to be used as a C function pointer\n  auto writeCallback = +[](char *contents, size_t size, size_t nmemb, std::string *userp) ->size_t{\n    size_t totalSize = size * nmemb;\n    userp->append((char *)contents, totalSize);\n    return totalSize;\n  };\n\n  curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n  curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeCallback);\n  curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n\n  // Handle headers\n  struct curl_slist *headers = nullptr;\n  headers = curl_slist_append(headers, \"User-Agent: openpilot-\" COMMA_VERSION);\n  if (!token.empty()) {\n    headers = curl_slist_append(headers, (\"Authorization: JWT \" + token).c_str());\n  }\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n\n  CURLcode res = curl_easy_perform(curl);\n\n  if (response_code) {\n    curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, response_code);\n  }\n\n  curl_slist_free_all(headers);\n  curl_easy_cleanup(curl);\n\n  return res == CURLE_OK ? readBuffer : std::string{};\n}\n"
  },
  "tools.replay.camera.get_nv12_info": {
    "id": "tools.replay.camera.get_nv12_info",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\camera.cc",
    "relative_path": "tools\\replay\\camera.cc",
    "depends_on": [],
    "start_line": 13,
    "end_line": 20,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::tuple<size_t, size_t, size_t> get_nv12_info(int width, int height) {\n  int nv12_width = VENUS_Y_STRIDE(COLOR_FMT_NV12, width);\n  int nv12_height = VENUS_Y_SCANLINES(COLOR_FMT_NV12, height);\n  assert(nv12_width == VENUS_UV_STRIDE(COLOR_FMT_NV12, width));\n  assert(nv12_height / 2 == VENUS_UV_SCANLINES(COLOR_FMT_NV12, height));\n  size_t nv12_buffer_size = 2346 * nv12_width;  // comes from v4l2_format.fmt.pix_mp.plane_fmt[0].sizeimage\n  return {nv12_width, nv12_height, nv12_buffer_size};\n}\n"
  },
  "tools.replay.camera.CameraServer": {
    "id": "tools.replay.camera.CameraServer",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\camera.h",
    "relative_path": "tools\\replay\\camera.h",
    "depends_on": [],
    "start_line": 15,
    "end_line": 43,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class CameraServer {\npublic:\n  CameraServer(std::pair<int, int> camera_size[MAX_CAMERAS] = nullptr);\n  ~CameraServer();\n  void pushFrame(CameraType type, FrameReader* fr, const Event *event);\n  void waitForSent();\n\nprotected:\n  struct Camera {\n    CameraType type;\n    VisionStreamType stream_type;\n    int width;\n    int height;\n    std::thread thread;\n    SafeQueue<std::pair<FrameReader*, const Event *>> queue;\n    std::set<VisionBuf *> cached_buf;\n  };\n  void startVipcServer();\n  void cameraThread(Camera &cam);\n  VisionBuf *getFrame(Camera &cam, FrameReader *fr, int32_t segment_id, uint32_t frame_id);\n\n  Camera cameras_[MAX_CAMERAS] = {\n      {.type = RoadCam, .stream_type = VISION_STREAM_ROAD},\n      {.type = DriverCam, .stream_type = VISION_STREAM_DRIVER},\n      {.type = WideRoadCam, .stream_type = VISION_STREAM_WIDE_ROAD},\n  };\n  std::atomic<int> publishing_ = 0;\n  std::unique_ptr<VisionIpcServer> vipc_server_;\n};\n"
  },
  "tools.replay.can_replay.send_thread": {
    "id": "tools.replay.can_replay.send_thread",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\can_replay.py",
    "relative_path": "tools\\replay\\can_replay.py",
    "depends_on": [],
    "start_line": 24,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.can_replay.connect": {
    "id": "tools.replay.can_replay.connect",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\can_replay.py",
    "relative_path": "tools\\replay\\can_replay.py",
    "depends_on": [
      "tools.replay.can_replay.send_thread"
    ],
    "start_line": 60,
    "end_line": 81,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.can_replay.load_route": {
    "id": "tools.replay.can_replay.load_route",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\can_replay.py",
    "relative_path": "tools\\replay\\can_replay.py",
    "depends_on": [],
    "start_line": 84,
    "end_line": 90,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.consoleui.add_str": {
    "id": "tools.replay.consoleui.add_str",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\consoleui.cc",
    "relative_path": "tools\\replay\\consoleui.cc",
    "depends_on": [],
    "start_line": 50,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void add_str(WINDOW *w, const char *str, Color color = Color::Default, bool bold = false) {\n  if (color != Color::Default) wattron(w, COLOR_PAIR(color));\n  if (bold) wattron(w, A_BOLD);\n  waddstr(w, str);\n  if (bold) wattroff(w, A_BOLD);\n  if (color != Color::Default) wattroff(w, COLOR_PAIR(color));\n}\n"
  },
  "tools.replay.consoleui.ConsoleUI": {
    "id": "tools.replay.consoleui.ConsoleUI",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\consoleui.h",
    "relative_path": "tools\\replay\\consoleui.h",
    "depends_on": [],
    "start_line": 10,
    "end_line": 43,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class ConsoleUI {\npublic:\n  ConsoleUI(Replay *replay);\n  ~ConsoleUI();\n  int exec();\n  inline static const std::array speed_array = {0.2f, 0.5f, 1.0f, 2.0f, 4.0f, 8.0f};\n\nprivate:\n  void initWindows();\n  void handleKey(char c);\n  void displayHelp();\n  void displayTimelineDesc();\n  void updateTimeline();\n  void updateSummary();\n  void updateStatus();\n  void pauseReplay(bool pause);\n  void updateSize();\n  void updateProgressBar();\n  void logMessage(ReplyMsgType type, const std::string &msg);\n\n  enum Status { Playing, Paused };\n  enum Win { Title, Stats, Log, LogBorder, DownloadBar, Timeline, TimelineDesc, Help, CarState, Max};\n  std::array<WINDOW*, Win::Max> w{};\n  SubMaster sm;\n  Replay *replay;\n  int max_width, max_height;\n  Status status = Status::Playing;\n\n  std::mutex mutex;\n  std::vector<std::pair<ReplyMsgType, std::string>> logs;\n  uint64_t progress_cur = 0;\n  uint64_t progress_total = 0;\n  bool download_success = false;\n};\n"
  },
  "tools.replay.filereader.cacheFilePath": {
    "id": "tools.replay.filereader.cacheFilePath",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\filereader.cc",
    "relative_path": "tools\\replay\\filereader.cc",
    "depends_on": [],
    "start_line": 9,
    "end_line": 17,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string cacheFilePath(const std::string &url) {\n  static std::string cache_path = [] {\n    const std::string comma_cache = Path::download_cache_root();\n    util::create_directories(comma_cache, 0755);\n    return comma_cache.back() == '/' ? comma_cache : comma_cache + \"/\";\n  }();\n\n  return cache_path + sha256(getUrlWithoutQuery(url));\n}\n"
  },
  "tools.replay.filereader.FileReader": {
    "id": "tools.replay.filereader.FileReader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\filereader.h",
    "relative_path": "tools\\replay\\filereader.h",
    "depends_on": [],
    "start_line": 6,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class FileReader {\npublic:\n  FileReader(bool cache_to_local, size_t chunk_size = 0, int retries = 3)\n      : cache_to_local_(cache_to_local), chunk_size_(chunk_size), max_retries_(retries) {}\n  virtual ~FileReader() {}\n  std::string read(const std::string &file, std::atomic<bool> *abort = nullptr);\n\nprivate:\n  std::string download(const std::string &url, std::atomic<bool> *abort);\n  size_t chunk_size_;\n  int max_retries_;\n  bool cache_to_local_;\n};\n"
  },
  "tools.replay.framereader.get_hw_format": {
    "id": "tools.replay.framereader.get_hw_format",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\framereader.cc",
    "relative_path": "tools\\replay\\framereader.cc",
    "depends_on": [],
    "start_line": 22,
    "end_line": 30,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "enum AVPixelFormat get_hw_format(AVCodecContext *ctx, const enum AVPixelFormat *pix_fmts) {\n  enum AVPixelFormat *hw_pix_fmt = reinterpret_cast<enum AVPixelFormat *>(ctx->opaque);\n  for (const enum AVPixelFormat *p = pix_fmts; *p != -1; p++) {\n    if (*p == *hw_pix_fmt) return *p;\n  }\n  rWarning(\"Please run replay with the --no-hw-decoder flag!\");\n  *hw_pix_fmt = AV_PIX_FMT_NONE;\n  return AV_PIX_FMT_YUV420P;\n}\n"
  },
  "tools.replay.framereader.DecoderManager.acquire": {
    "id": "tools.replay.framereader.DecoderManager.acquire",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\framereader.cc",
    "relative_path": "tools\\replay\\framereader.cc",
    "depends_on": [],
    "start_line": 33,
    "end_line": 46,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  VideoDecoder *acquire(CameraType type, AVCodecParameters *codecpar, bool hw_decoder) {\n    auto key = std::tuple(type, codecpar->width, codecpar->height);\n    std::unique_lock lock(mutex_);\n    if (auto it = decoders_.find(key); it != decoders_.end()) {\n      return it->second.get();\n    }\n\n    auto decoder = std::make_unique<VideoDecoder>();\n    if (!decoder->open(codecpar, hw_decoder)) {\n      decoder.reset(nullptr);\n    }\n    decoders_[key] = std::move(decoder);\n    return decoders_[key].get();\n  }\n"
  },
  "tools.replay.framereader.FrameReader": {
    "id": "tools.replay.framereader.FrameReader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\framereader.h",
    "relative_path": "tools\\replay\\framereader.h",
    "depends_on": [],
    "start_line": 17,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class FrameReader {\npublic:\n  FrameReader();\n  ~FrameReader();\n  bool load(CameraType type, const std::string &url, bool no_hw_decoder = false, std::atomic<bool> *abort = nullptr, bool local_cache = false,\n            int chunk_size = -1, int retries = 0);\n  bool loadFromFile(CameraType type, const std::string &file, bool no_hw_decoder = false, std::atomic<bool> *abort = nullptr);\n  bool get(int idx, VisionBuf *buf);\n  size_t getFrameCount() const { return packets_info.size(); }\n\n  int width = 0, height = 0;\n\n  VideoDecoder *decoder_ = nullptr;\n  AVFormatContext *input_ctx = nullptr;\n  int prev_idx = -1;\n  struct PacketInfo {\n    int flags;\n    int64_t pos;\n  };\n  std::vector<PacketInfo> packets_info;\n};\n"
  },
  "tools.replay.framereader.VideoDecoder": {
    "id": "tools.replay.framereader.VideoDecoder",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\framereader.h",
    "relative_path": "tools\\replay\\framereader.h",
    "depends_on": [],
    "start_line": 40,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class VideoDecoder {\npublic:\n  VideoDecoder();\n  ~VideoDecoder();\n  bool open(AVCodecParameters *codecpar, bool hw_decoder);\n  bool decode(FrameReader *reader, int idx, VisionBuf *buf);\n  int width = 0, height = 0;\n\nprivate:\n  bool initHardwareDecoder(AVHWDeviceType hw_device_type);\n  AVFrame *decodeFrame(AVPacket *pkt);\n  bool copyBuffer(AVFrame *f, VisionBuf *buf);\n\n  AVFrame *av_frame_, *hw_frame_;\n  AVCodecContext *decoder_ctx = nullptr;\n  AVPixelFormat hw_pix_fmt = AV_PIX_FMT_NONE;\n  AVBufferRef *hw_device_ctx = nullptr;\n};\n"
  },
  "tools.replay.logreader.Event": {
    "id": "tools.replay.logreader.Event",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\logreader.h",
    "relative_path": "tools\\replay\\logreader.h",
    "depends_on": [],
    "start_line": 12,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class Event {\npublic:\n  Event(cereal::Event::Which which, uint64_t mono_time, const kj::ArrayPtr<const capnp::word> &data, int eidx_segnum = -1)\n    : which(which), mono_time(mono_time), data(data), eidx_segnum(eidx_segnum) {}\n\n  bool operator<(const Event &other) const {\n    return mono_time < other.mono_time || (mono_time == other.mono_time && which < other.which);\n  }\n\n  uint64_t mono_time;\n  cereal::Event::Which which;\n  kj::ArrayPtr<const capnp::word> data;\n  int32_t eidx_segnum;\n};\n"
  },
  "tools.replay.logreader.Event.operator<": {
    "id": "tools.replay.logreader.Event.operator<",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\logreader.h",
    "relative_path": "tools\\replay\\logreader.h",
    "depends_on": [],
    "start_line": 17,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  bool operator<(const Event &other) const {\n    return mono_time < other.mono_time || (mono_time == other.mono_time && which < other.which);\n  }\n"
  },
  "tools.replay.logreader.LogReader": {
    "id": "tools.replay.logreader.LogReader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\logreader.h",
    "relative_path": "tools\\replay\\logreader.h",
    "depends_on": [],
    "start_line": 27,
    "end_line": 42,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class LogReader {\npublic:\n  LogReader(const std::vector<bool> &filters = {}) { filters_ = filters; }\n  bool load(const std::string &url, std::atomic<bool> *abort = nullptr,\n            bool local_cache = false, int chunk_size = -1, int retries = 0);\n  bool load(const char *data, size_t size, std::atomic<bool> *abort = nullptr);\n  std::vector<Event> events;\n\nprivate:\n  void migrateOldEvents();\n\n  std::string raw_;\n  bool requires_migration = true;\n  std::vector<bool> filters_;\n  MonotonicBuffer buffer_{1024 * 1024};\n};\n"
  },
  "tools.replay.main.parseArgs": {
    "id": "tools.replay.main.parseArgs",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\main.cc",
    "relative_path": "tools\\replay\\main.cc",
    "depends_on": [],
    "start_line": 50,
    "end_line": 122,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "bool parseArgs(int argc, char *argv[], ReplayConfig &config) {\n  const struct option cli_options[] = {\n      {\"allow\", required_argument, nullptr, 'a'},\n      {\"block\", required_argument, nullptr, 'b'},\n      {\"cache\", required_argument, nullptr, 'c'},\n      {\"start\", required_argument, nullptr, 's'},\n      {\"playback\", required_argument, nullptr, 'x'},\n      {\"demo\", no_argument, nullptr, 0},\n      {\"auto\", no_argument, nullptr, 0},\n      {\"data_dir\", required_argument, nullptr, 'd'},\n      {\"prefix\", required_argument, nullptr, 'p'},\n      {\"dcam\", no_argument, nullptr, 0},\n      {\"ecam\", no_argument, nullptr, 0},\n      {\"no-loop\", no_argument, nullptr, 0},\n      {\"no-cache\", no_argument, nullptr, 0},\n      {\"qcam\", no_argument, nullptr, 0},\n      {\"no-hw-decoder\", no_argument, nullptr, 0},\n      {\"no-vipc\", no_argument, nullptr, 0},\n      {\"all\", no_argument, nullptr, 0},\n      {\"help\", no_argument, nullptr, 'h'},\n      {nullptr, 0, nullptr, 0},  // Terminating entry\n  };\n\n  const std::map<std::string, REPLAY_FLAGS> flag_map = {\n      {\"dcam\", REPLAY_FLAG_DCAM},\n      {\"ecam\", REPLAY_FLAG_ECAM},\n      {\"no-loop\", REPLAY_FLAG_NO_LOOP},\n      {\"no-cache\", REPLAY_FLAG_NO_FILE_CACHE},\n      {\"qcam\", REPLAY_FLAG_QCAMERA},\n      {\"no-hw-decoder\", REPLAY_FLAG_NO_HW_DECODER},\n      {\"no-vipc\", REPLAY_FLAG_NO_VIPC},\n      {\"all\", REPLAY_FLAG_ALL_SERVICES},\n  };\n\n  if (argc == 1) {\n    std::cout << helpText;\n    return false;\n  }\n\n  int opt, option_index = 0;\n  while ((opt = getopt_long(argc, argv, \"a:b:c:s:x:d:p:h\", cli_options, &option_index)) != -1) {\n    switch (opt) {\n      case 'a': config.allow = split(optarg, ','); break;\n      case 'b': config.block = split(optarg, ','); break;\n      case 'c': config.cache_segments = std::atoi(optarg); break;\n      case 's': config.start_seconds = std::atoi(optarg); break;\n      case 'x': config.playback_speed = std::atof(optarg); break;\n      case 'd': config.data_dir = optarg; break;\n      case 'p': config.prefix = optarg; break;\n      case 0: {\n        std::string name = cli_options[option_index].name;\n        if (name == \"demo\") config.route = DEMO_ROUTE;\n        else if (name == \"auto\") config.auto_source = true;\n        else config.flags |= flag_map.at(name);\n        break;\n      }\n      case 'h': std::cout << helpText; return false;\n      default: return false;\n    }\n  }\n\n  // Check for a route name (first positional argument)\n  if (config.route.empty() && optind < argc) {\n    config.route = argv[optind];\n  }\n\n  if (config.route.empty()) {\n    std::cerr << \"No route provided. Use --help for usage information.\\n\";\n    return false;\n  }\n\n  return true;\n}\n"
  },
  "tools.replay.main.main": {
    "id": "tools.replay.main.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\main.cc",
    "relative_path": "tools\\replay\\main.cc",
    "depends_on": [],
    "start_line": 124,
    "end_line": 155,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "int main(int argc, char *argv[]) {\n#ifdef __APPLE__\n  // With all sockets opened, we might hit the default limit of 256 on macOS\n  util::set_file_descriptor_limit(1024);\n#endif\n\n  ReplayConfig config;\n\n  if (!parseArgs(argc, argv, config)) {\n    return 1;\n  }\n\n  std::unique_ptr<OpenpilotPrefix> op_prefix;\n  if (!config.prefix.empty()) {\n    op_prefix = std::make_unique<OpenpilotPrefix>(config.prefix);\n  }\n\n  Replay replay(config.route, config.allow, config.block, nullptr, config.flags, config.data_dir, config.auto_source);\n  if (config.cache_segments > 0) {\n    replay.setSegmentCacheLimit(config.cache_segments);\n  }\n  if (config.playback_speed > 0) {\n    replay.setSpeed(std::clamp(config.playback_speed, ConsoleUI::speed_array.front(), ConsoleUI::speed_array.back()));\n  }\n  if (!replay.load()) {\n    return 1;\n  }\n\n  ConsoleUI console_ui(&replay);\n  replay.start(config.start_seconds);\n  return console_ui.exec();\n}\n"
  },
  "tools.replay.replay.Replay": {
    "id": "tools.replay.replay.Replay",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\replay.h",
    "relative_path": "tools\\replay\\replay.h",
    "depends_on": [],
    "start_line": 29,
    "end_line": 110,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class Replay {\npublic:\n  Replay(const std::string &route, std::vector<std::string> allow, std::vector<std::string> block, SubMaster *sm = nullptr,\n         uint32_t flags = REPLAY_FLAG_NONE, const std::string &data_dir = \"\", bool auto_source = false);\n  ~Replay();\n  bool load();\n  RouteLoadError lastRouteError() const { return route().lastError(); }\n  void start(int seconds = 0) { seekTo(min_seconds_ + seconds, false); }\n  void pause(bool pause);\n  void seekToFlag(FindFlag flag);\n  void seekTo(double seconds, bool relative);\n  inline bool isPaused() const { return user_paused_; }\n  inline int segmentCacheLimit() const { return seg_mgr_->segment_cache_limit_; }\n  inline void setSegmentCacheLimit(int n) { seg_mgr_->segment_cache_limit_ = std::max(MIN_SEGMENTS_CACHE, n); }\n  inline bool hasFlag(REPLAY_FLAGS flag) const { return flags_ & flag; }\n  void setLoop(bool loop) { loop ? flags_ &= ~REPLAY_FLAG_NO_LOOP : flags_ |= REPLAY_FLAG_NO_LOOP; }\n  bool loop() const { return !(flags_ & REPLAY_FLAG_NO_LOOP); }\n  const Route &route() const { return seg_mgr_->route_; }\n  inline double currentSeconds() const { return double(cur_mono_time_ - route_start_ts_) / 1e9; }\n  inline std::time_t routeDateTime() const { return route_date_time_; }\n  inline uint64_t routeStartNanos() const { return route_start_ts_; }\n  inline double toSeconds(uint64_t mono_time) const { return (mono_time - route_start_ts_) / 1e9; }\n  inline double minSeconds() const { return min_seconds_; }\n  inline double maxSeconds() const { return max_seconds_; }\n  inline void setSpeed(float speed) { speed_ = speed; }\n  inline float getSpeed() const { return speed_; }\n  inline const std::string &carFingerprint() const { return car_fingerprint_; }\n  inline const std::shared_ptr<std::vector<Timeline::Entry>> getTimeline() const { return timeline_.getEntries(); }\n  inline const std::optional<Timeline::Entry> findAlertAtTime(double sec) const { return timeline_.findAlertAtTime(sec); }\n  const std::shared_ptr<SegmentManager::EventData> getEventData() const { return seg_mgr_->getEventData(); }\n  void installEventFilter(std::function<bool(const Event *)> filter) { event_filter_ = filter; }\n\n  // Event callback functions\n  std::function<void()> onSegmentsMerged = nullptr;\n  std::function<void(double)> onSeeking = nullptr;\n  std::function<void(double)> onSeekedTo = nullptr;\n  std::function<void(std::shared_ptr<LogReader>)> onQLogLoaded = nullptr;\n\nprivate:\n  void setupServices(const std::vector<std::string> &allow, const std::vector<std::string> &block);\n  void setupSegmentManager(bool has_filters);\n  void startStream(const std::shared_ptr<Segment> segment);\n  void streamThread();\n  void handleSegmentMerge();\n  void interruptStream(const std::function<bool()>& update_fn);\n  std::vector<Event>::const_iterator publishEvents(std::vector<Event>::const_iterator first,\n                                                   std::vector<Event>::const_iterator last);\n  void publishMessage(const Event *e);\n  void publishFrame(const Event *e);\n  void checkSeekProgress();\n\n  std::unique_ptr<SegmentManager> seg_mgr_;\n  Timeline timeline_;\n\n  pthread_t stream_thread_id = 0;\n  std::thread stream_thread_;\n  std::mutex stream_lock_;\n  bool user_paused_ = false;\n  std::condition_variable stream_cv_;\n  std::atomic<int> current_segment_ = 0;\n  std::atomic<double> seeking_to_ = -1.0;\n  std::atomic<bool> exit_ = false;\n  std::atomic<bool> interrupt_requested_ = false;\n  bool events_ready_ = false;\n  std::time_t route_date_time_;\n  uint64_t route_start_ts_ = 0;\n  std::atomic<uint64_t> cur_mono_time_ = 0;\n  cereal::Event::Which cur_which_ = cereal::Event::Which::INIT_DATA;\n  double min_seconds_ = 0;\n  double max_seconds_ = 0;\n  SubMaster *sm_ = nullptr;\n  std::unique_ptr<PubMaster> pm_;\n  std::vector<const char*> sockets_;\n  std::unique_ptr<CameraServer> camera_server_;\n  std::atomic<uint32_t> flags_ = REPLAY_FLAG_NONE;\n\n  std::string car_fingerprint_;\n  std::atomic<float> speed_ = 1.0;\n  std::function<bool(const Event *)> event_filter_ = nullptr;\n\n  std::shared_ptr<SegmentManager::EventData> event_data_ = std::make_shared<SegmentManager::EventData>();\n};\n"
  },
  "tools.replay.route.Route": {
    "id": "tools.replay.route.Route",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\route.h",
    "relative_path": "tools\\replay\\route.h",
    "depends_on": [],
    "start_line": 41,
    "end_line": 68,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class Route {\npublic:\n  Route(const std::string &route, const std::string &data_dir = {}, bool auto_source = false);\n  bool load();\n  RouteLoadError lastError() const { return err_; }\n  inline const std::string &name() const { return route_.str; }\n  inline const std::time_t datetime() const { return date_time_; }\n  inline const std::string &dir() const { return data_dir_; }\n  inline const RouteIdentifier &identifier() const { return route_; }\n  inline const std::map<int, SegmentFile> &segments() const { return segments_; }\n  inline const SegmentFile &at(int n) { return segments_.at(n); }\n  static RouteIdentifier parseRoute(const std::string &str);\n\nprotected:\n  bool loadSegments();\n  bool loadFromAutoSource();\n  bool loadFromLocal();\n  bool loadFromServer(int retries = 3);\n  bool loadFromJson(const std::string &json);\n  void addFileToSegment(int seg_num, const std::string &file);\n  RouteIdentifier route_ = {};\n  std::string data_dir_;\n  std::map<int, SegmentFile> segments_;\n  std::time_t date_time_ = 0;\n  RouteLoadError err_ = RouteLoadError::None;\n  bool auto_source_ = false;\n  std::string route_string_;\n};\n"
  },
  "tools.replay.route.Segment": {
    "id": "tools.replay.route.Segment",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\route.h",
    "relative_path": "tools\\replay\\route.h",
    "depends_on": [],
    "start_line": 70,
    "end_line": 94,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class Segment {\npublic:\n  enum class LoadState {Loading, Loaded, Failed};\n\n  Segment(int n, const SegmentFile &files, uint32_t flags, const std::vector<bool> &filters,\n          std::function<void(int, bool)> callback);\n  ~Segment();\n  LoadState getState();\n\n  const int seg_num = 0;\n  std::unique_ptr<LogReader> log;\n  std::unique_ptr<FrameReader> frames[MAX_CAMERAS] = {};\n\nprotected:\n  void loadFile(int id, const std::string file);\n\n  std::atomic<bool> abort_ = false;\n  std::atomic<int> loading_ = 0;\n  std::mutex mutex_;\n  std::vector<std::thread> threads_;\n  std::function<void(int, bool)> on_load_finished_ = nullptr;\n  uint32_t flags;\n  std::vector<bool> filters_;\n  LoadState load_state_  = LoadState::Loading;\n};\n"
  },
  "tools.replay.rp_visualization.visualize": {
    "id": "tools.replay.rp_visualization.visualize",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\rp_visualization.py",
    "relative_path": "tools\\replay\\rp_visualization.py",
    "depends_on": [],
    "start_line": 19,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.rp_visualization.get_arg_parser": {
    "id": "tools.replay.rp_visualization.get_arg_parser",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\rp_visualization.py",
    "relative_path": "tools\\replay\\rp_visualization.py",
    "depends_on": [],
    "start_line": 42,
    "end_line": 50,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.seg_mgr.SegmentManager": {
    "id": "tools.replay.seg_mgr.SegmentManager",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\seg_mgr.h",
    "relative_path": "tools\\replay\\seg_mgr.h",
    "depends_on": [],
    "start_line": 15,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class SegmentManager {\npublic:\n  struct EventData {\n    std::vector<Event> events;  //  Events extracted from the segments\n    SegmentMap segments;        // Associated segments that contributed to these events\n    bool isSegmentLoaded(int n) const { return segments.find(n) != segments.end(); }\n  };\n\n  SegmentManager(const std::string &route_name, uint32_t flags, const std::string &data_dir = \"\", bool auto_source = false)\n      : flags_(flags), route_(route_name, data_dir, auto_source), event_data_(std::make_shared<EventData>()) {}\n  ~SegmentManager();\n\n  bool load();\n  void setCurrentSegment(int seg_num);\n  void setCallback(const std::function<void()> &callback) { onSegmentMergedCallback_ = callback; }\n  void setFilters(const std::vector<bool> &filters) { filters_ = filters; }\n  const std::shared_ptr<EventData> getEventData() const { return std::atomic_load(&event_data_); }\n  bool hasSegment(int n) const { return segments_.find(n) != segments_.end(); }\n\n  Route route_;\n  int segment_cache_limit_ = MIN_SEGMENTS_CACHE;\n\nprivate:\n  void manageSegmentCache();\n  void loadSegmentsInRange(SegmentMap::iterator begin, SegmentMap::iterator cur, SegmentMap::iterator end);\n  bool mergeSegments(const SegmentMap::iterator &begin, const SegmentMap::iterator &end);\n\n  std::vector<bool> filters_;\n  uint32_t flags_;\n\n  std::mutex mutex_;\n  std::condition_variable cv_;\n  std::thread thread_;\n  int cur_seg_num_ = -1;\n  bool needs_update_ = false;\n  bool exit_ = false;\n\n  SegmentMap segments_;\n  std::shared_ptr<EventData> event_data_;\n  std::function<void()> onSegmentMergedCallback_ = nullptr;\n  std::set<int> merged_segments_;\n};\n"
  },
  "tools.replay.timeline.Timeline": {
    "id": "tools.replay.timeline.Timeline",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\timeline.h",
    "relative_path": "tools\\replay\\timeline.h",
    "depends_on": [],
    "start_line": 13,
    "end_line": 46,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class Timeline {\npublic:\n  struct Entry {\n    double start_time;\n    double end_time;\n    TimelineType type;\n    std::string text1;\n    std::string text2;\n  };\n\n  Timeline() : timeline_entries_(std::make_shared<std::vector<Entry>>()) {}\n  ~Timeline();\n\n  void initialize(const Route &route, uint64_t route_start_ts, bool local_cache,\n                  std::function<void(std::shared_ptr<LogReader>)> callback);\n  std::optional<uint64_t> find(double cur_ts, FindFlag flag) const;\n  std::optional<Entry> findAlertAtTime(double target_time) const;\n  const std::shared_ptr<std::vector<Entry>> getEntries() const { return std::atomic_load(&timeline_entries_); }\n\nprivate:\n  void buildTimeline(const Route &route, uint64_t route_start_ts, bool local_cache,\n                     std::function<void(std::shared_ptr<LogReader>)> callback);\n  void updateEngagementStatus(const cereal::SelfdriveState::Reader &cs, std::optional<size_t> &idx, double seconds);\n  void updateAlertStatus(const cereal::SelfdriveState::Reader &cs, std::optional<size_t> &idx, double seconds);\n\n  std::thread thread_;\n  std::atomic<bool> should_exit_ = false;\n\n  // Temporarily holds entries before they are sorted and finalized\n  std::vector<Entry> staging_entries_;\n\n  // Final sorted timeline entries\n  std::shared_ptr<std::vector<Entry>> timeline_entries_;\n};\n"
  },
  "tools.replay.ui.ui_thread": {
    "id": "tools.replay.ui.ui_thread",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\ui.py",
    "relative_path": "tools\\replay\\ui.py",
    "depends_on": [],
    "start_line": 26,
    "end_line": 216,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.ui.get_arg_parser": {
    "id": "tools.replay.ui.get_arg_parser",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\ui.py",
    "relative_path": "tools\\replay\\ui.py",
    "depends_on": [],
    "start_line": 218,
    "end_line": 228,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.unlog_ci_segment.input_ready": {
    "id": "tools.replay.unlog_ci_segment.input_ready",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\unlog_ci_segment.py",
    "relative_path": "tools\\replay\\unlog_ci_segment.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 21,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.unlog_ci_segment.replay": {
    "id": "tools.replay.unlog_ci_segment.replay",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\unlog_ci_segment.py",
    "relative_path": "tools\\replay\\unlog_ci_segment.py",
    "depends_on": [
      "tools.replay.unlog_ci_segment.input_ready"
    ],
    "start_line": 24,
    "end_line": 90,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.util.logMessage": {
    "id": "tools.replay.util.logMessage",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\util.cc",
    "relative_path": "tools\\replay\\util.cc",
    "depends_on": [],
    "start_line": 26,
    "end_line": 52,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void logMessage(ReplyMsgType type, const char *fmt, ...) {\n  static std::mutex lock;\n  std::lock_guard lk(lock);\n\n  char *msg_buf = nullptr;\n  va_list args;\n  va_start(args, fmt);\n  int ret = vasprintf(&msg_buf, fmt, args);\n  va_end(args);\n  if (ret <= 0 || !msg_buf) return;\n\n  if (message_handler) {\n    message_handler(type, msg_buf);\n  } else {\n    if (type == ReplyMsgType::Debug) {\n      std::cout << \"\\033[38;5;248m\" << msg_buf << \"\\033[00m\" << std::endl;\n    } else if (type == ReplyMsgType::Warning) {\n      std::cout << \"\\033[38;5;227m\" << msg_buf << \"\\033[00m\" << std::endl;\n    } else if (type == ReplyMsgType::Critical) {\n      std::cout << \"\\033[38;5;196m\" << msg_buf << \"\\033[00m\" << std::endl;\n    } else {\n      std::cout << msg_buf << std::endl;\n    }\n  }\n\n  free(msg_buf);\n}\n"
  },
  "tools.replay.util.DownloadStats.installDownloadProgressHandler": {
    "id": "tools.replay.util.DownloadStats.installDownloadProgressHandler",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\util.cc",
    "relative_path": "tools\\replay\\util.cc",
    "depends_on": [],
    "start_line": 96,
    "end_line": 99,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  void installDownloadProgressHandler(DownloadProgressHandler handler) {\n    std::lock_guard lk(lock);\n    download_progress_handler = handler;\n  }\n"
  },
  "tools.replay.util.DownloadStats.add": {
    "id": "tools.replay.util.DownloadStats.add",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\util.cc",
    "relative_path": "tools\\replay\\util.cc",
    "depends_on": [],
    "start_line": 101,
    "end_line": 104,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  void add(const std::string &url, uint64_t total_bytes) {\n    std::lock_guard lk(lock);\n    items[url] = {0, total_bytes};\n  }\n"
  },
  "tools.replay.util.DownloadStats.remove": {
    "id": "tools.replay.util.DownloadStats.remove",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\util.cc",
    "relative_path": "tools\\replay\\util.cc",
    "depends_on": [],
    "start_line": 106,
    "end_line": 109,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  void remove(const std::string &url) {\n    std::lock_guard lk(lock);\n    items.erase(url);\n  }\n"
  },
  "tools.replay.util.DownloadStats.update": {
    "id": "tools.replay.util.DownloadStats.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\util.cc",
    "relative_path": "tools\\replay\\util.cc",
    "depends_on": [],
    "start_line": 111,
    "end_line": 123,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "  void update(const std::string &url, uint64_t downloaded, bool success = true) {\n    std::lock_guard lk(lock);\n    items[url].first = downloaded;\n\n    auto stat = std::accumulate(items.begin(), items.end(), std::pair<int, int>{}, [=](auto &a, auto &b){\n      return std::pair{a.first + b.second.first, a.second + b.second.second};\n    });\n    double tm = millis_since_boot();\n    if (download_progress_handler && ((tm - prev_tm) > 500 || !success || stat.first >= stat.second)) {\n      download_progress_handler(stat.first, stat.second, success);\n      prev_tm = tm;\n    }\n  }\n"
  },
  "tools.replay.util.installDownloadProgressHandler": {
    "id": "tools.replay.util.installDownloadProgressHandler",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\util.cc",
    "relative_path": "tools\\replay\\util.cc",
    "depends_on": [],
    "start_line": 135,
    "end_line": 137,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void installDownloadProgressHandler(DownloadProgressHandler handler) {\n  download_stats.installDownloadProgressHandler(handler);\n}\n"
  },
  "tools.replay.util.formattedDataSize": {
    "id": "tools.replay.util.formattedDataSize",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\util.cc",
    "relative_path": "tools\\replay\\util.cc",
    "depends_on": [],
    "start_line": 139,
    "end_line": 147,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string formattedDataSize(size_t size) {\n  if (size < 1024) {\n    return std::to_string(size) + \" B\";\n  } else if (size < 1024 * 1024) {\n    return util::string_format(\"%.2f KB\", (float)size / 1024);\n  } else {\n    return util::string_format(\"%.2f MB\", (float)size / (1024 * 1024));\n  }\n}\n"
  },
  "tools.replay.util.getRemoteFileSize": {
    "id": "tools.replay.util.getRemoteFileSize",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\util.cc",
    "relative_path": "tools\\replay\\util.cc",
    "depends_on": [],
    "start_line": 149,
    "end_line": 175,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "size_t getRemoteFileSize(const std::string &url, std::atomic<bool> *abort) {\n  CURL *curl = curl_easy_init();\n  if (!curl) return -1;\n\n  curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n  curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, dumy_write_cb);\n  curl_easy_setopt(curl, CURLOPT_HEADER, 1);\n  curl_easy_setopt(curl, CURLOPT_NOBODY, 1);\n\n  CURLM *cm = curl_multi_init();\n  curl_multi_add_handle(cm, curl);\n  int still_running = 1;\n  while (still_running > 0 && !(abort && *abort)) {\n    CURLMcode mc = curl_multi_perform(cm, &still_running);\n    if (mc != CURLM_OK) break;\n    if (still_running > 0) {\n      curl_multi_wait(cm, nullptr, 0, 1000, nullptr);\n    }\n  }\n\n  double content_length = -1;\n  curl_easy_getinfo(curl, CURLINFO_CONTENT_LENGTH_DOWNLOAD, &content_length);\n  curl_multi_remove_handle(cm, curl);\n  curl_easy_cleanup(curl);\n  curl_multi_cleanup(cm);\n  return content_length > 0 ? (size_t)content_length : 0;\n}\n"
  },
  "tools.replay.util.getUrlWithoutQuery": {
    "id": "tools.replay.util.getUrlWithoutQuery",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\util.cc",
    "relative_path": "tools\\replay\\util.cc",
    "depends_on": [],
    "start_line": 177,
    "end_line": 180,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string getUrlWithoutQuery(const std::string &url) {\n  size_t idx = url.find(\"?\");\n  return (idx == std::string::npos ? url : url.substr(0, idx));\n}\n"
  },
  "tools.replay.util.httpGet": {
    "id": "tools.replay.util.httpGet",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\util.cc",
    "relative_path": "tools\\replay\\util.cc",
    "depends_on": [],
    "start_line": 264,
    "end_line": 270,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string httpGet(const std::string &url, size_t chunk_size, std::atomic<bool> *abort) {\n  size_t size = getRemoteFileSize(url, abort);\n  if (size == 0) return {};\n\n  std::string result(size, '\\0');\n  return httpDownload(url, result, chunk_size, size, abort) ? result : \"\";\n}\n"
  },
  "tools.replay.util.httpDownload": {
    "id": "tools.replay.util.httpDownload",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\util.cc",
    "relative_path": "tools\\replay\\util.cc",
    "depends_on": [],
    "start_line": 272,
    "end_line": 279,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "bool httpDownload(const std::string &url, const std::string &file, size_t chunk_size, std::atomic<bool> *abort) {\n  size_t size = getRemoteFileSize(url, abort);\n  if (size == 0) return false;\n\n  std::ofstream of(file, std::ios::binary | std::ios::out);\n  of.seekp(size - 1).write(\"\\0\", 1);\n  return httpDownload(url, of, chunk_size, size, abort);\n}\n"
  },
  "tools.replay.util.decompressBZ2": {
    "id": "tools.replay.util.decompressBZ2",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\util.cc",
    "relative_path": "tools\\replay\\util.cc",
    "depends_on": [],
    "start_line": 285,
    "end_line": 320,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string decompressBZ2(const std::byte *in, size_t in_size, std::atomic<bool> *abort) {\n  if (in_size == 0) return {};\n\n  bz_stream strm = {};\n  int bzerror = BZ2_bzDecompressInit(&strm, 0, 0);\n  assert(bzerror == BZ_OK);\n\n  strm.next_in = (char *)in;\n  strm.avail_in = in_size;\n  std::string out(in_size * 5, '\\0');\n  do {\n    strm.next_out = (char *)(&out[strm.total_out_lo32]);\n    strm.avail_out = out.size() - strm.total_out_lo32;\n\n    const char *prev_write_pos = strm.next_out;\n    bzerror = BZ2_bzDecompress(&strm);\n    if (bzerror == BZ_OK && prev_write_pos == strm.next_out) {\n      // content is corrupt\n      bzerror = BZ_STREAM_END;\n      rWarning(\"decompressBZ2 error: content is corrupt\");\n      break;\n    }\n\n    if (bzerror == BZ_OK && strm.avail_in > 0 && strm.avail_out == 0) {\n      out.resize(out.size() * 2);\n    }\n  } while (bzerror == BZ_OK && !(abort && *abort));\n\n  BZ2_bzDecompressEnd(&strm);\n  if (bzerror == BZ_STREAM_END && !(abort && *abort)) {\n    out.resize(strm.total_out_lo32);\n    out.shrink_to_fit();\n    return out;\n  }\n  return {};\n}\n"
  },
  "tools.replay.util.decompressZST": {
    "id": "tools.replay.util.decompressZST",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\util.cc",
    "relative_path": "tools\\replay\\util.cc",
    "depends_on": [],
    "start_line": 326,
    "end_line": 363,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string decompressZST(const std::byte *in, size_t in_size, std::atomic<bool> *abort) {\n  ZSTD_DCtx *dctx = ZSTD_createDCtx();\n  assert(dctx != nullptr);\n\n  // Initialize input and output buffers\n  ZSTD_inBuffer input = {in, in_size, 0};\n\n  // Estimate and reserve memory for decompressed data\n  size_t estimatedDecompressedSize = ZSTD_getFrameContentSize(in, in_size);\n  if (estimatedDecompressedSize == ZSTD_CONTENTSIZE_ERROR || estimatedDecompressedSize == ZSTD_CONTENTSIZE_UNKNOWN) {\n    estimatedDecompressedSize = in_size * 2;  // Use a fallback size\n  }\n\n  std::string decompressedData;\n  decompressedData.reserve(estimatedDecompressedSize);\n\n  const size_t bufferSize = ZSTD_DStreamOutSize();  // Recommended output buffer size\n  std::string outputBuffer(bufferSize, '\\0');\n\n  while (input.pos < input.size && !(abort && *abort)) {\n    ZSTD_outBuffer output = {outputBuffer.data(), bufferSize, 0};\n\n    size_t result = ZSTD_decompressStream(dctx, &output, &input);\n    if (ZSTD_isError(result)) {\n      rWarning(\"decompressZST error: content is corrupt\");\n      break;\n    }\n\n    decompressedData.append(outputBuffer.data(), output.pos);\n  }\n\n  ZSTD_freeDCtx(dctx);\n  if (!(abort && *abort)) {\n    decompressedData.shrink_to_fit();\n    return decompressedData;\n  }\n  return {};\n}\n"
  },
  "tools.replay.util.precise_nano_sleep": {
    "id": "tools.replay.util.precise_nano_sleep",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\util.cc",
    "relative_path": "tools\\replay\\util.cc",
    "depends_on": [],
    "start_line": 365,
    "end_line": 382,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "void precise_nano_sleep(int64_t nanoseconds, std::atomic<bool> &interrupt_requested) {\n  struct timespec req, rem;\n  req.tv_sec = nanoseconds / 1000000000;\n  req.tv_nsec = nanoseconds % 1000000000;\n  while (!interrupt_requested) {\n#ifdef __APPLE__\n    int ret = nanosleep(&req, &rem);\n    if (ret == 0 || errno != EINTR)\n      break;\n#else\n    int ret = clock_nanosleep(CLOCK_MONOTONIC, 0, &req, &rem);\n    if (ret == 0 || ret != EINTR)\n      break;\n#endif\n    // Retry sleep if interrupted by a signal\n    req = rem;\n  }\n}\n"
  },
  "tools.replay.util.sha256": {
    "id": "tools.replay.util.sha256",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\util.cc",
    "relative_path": "tools\\replay\\util.cc",
    "depends_on": [],
    "start_line": 384,
    "end_line": 391,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string sha256(const std::string &str) {\n  unsigned char hash[SHA256_DIGEST_LENGTH];\n  SHA256_CTX sha256;\n  SHA256_Init(&sha256);\n  SHA256_Update(&sha256, str.c_str(), str.size());\n  SHA256_Final(hash, &sha256);\n  return util::hexdump(hash, SHA256_DIGEST_LENGTH);\n}\n"
  },
  "tools.replay.util.split": {
    "id": "tools.replay.util.split",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\util.cc",
    "relative_path": "tools\\replay\\util.cc",
    "depends_on": [],
    "start_line": 393,
    "end_line": 404,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::vector<std::string> split(std::string_view source, char delimiter) {\n  std::vector<std::string> fields;\n  size_t last = 0;\n  for (size_t i = 0; i < source.length(); ++i) {\n    if (source[i] == delimiter) {\n      fields.emplace_back(source.substr(last, i - last));\n      last = i + 1;\n    }\n  }\n  fields.emplace_back(source.substr(last));\n  return fields;\n}\n"
  },
  "tools.replay.util.extractFileName": {
    "id": "tools.replay.util.extractFileName",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\util.cc",
    "relative_path": "tools\\replay\\util.cc",
    "depends_on": [],
    "start_line": 406,
    "end_line": 411,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "std::string extractFileName(const std::string &file) {\n  size_t queryPos = file.find_first_of(\"?\");\n  std::string path = (queryPos != std::string::npos) ? file.substr(0, queryPos) : file;\n  size_t lastSlash = path.find_last_of(\"/\\\\\");\n  return (lastSlash != std::string::npos) ? path.substr(lastSlash + 1) : path;\n}\n"
  },
  "tools.replay.util.MonotonicBuffer": {
    "id": "tools.replay.util.MonotonicBuffer",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\util.h",
    "relative_path": "tools\\replay\\util.h",
    "depends_on": [],
    "start_line": 34,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "cpp",
    "source_code": "class MonotonicBuffer {\npublic:\n  MonotonicBuffer(size_t initial_size) : next_buffer_size(initial_size) {}\n  ~MonotonicBuffer();\n  void *allocate(size_t bytes, size_t alignment = 16ul);\n  void deallocate(void *p) {}\n\nprivate:\n  void *current_buf = nullptr;\n  size_t next_buffer_size = 0;\n  size_t available = 0;\n  std::deque<void *> buffers;\n  static constexpr float growth_factor = 1.5;\n};\n"
  },
  "tools.replay.lib.rp_helpers.UIParams": {
    "id": "tools.replay.lib.rp_helpers.UIParams",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\lib\\rp_helpers.py",
    "relative_path": "tools\\replay\\lib\\rp_helpers.py",
    "depends_on": [],
    "start_line": 15,
    "end_line": 21,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.lib.rp_helpers.to_topdown_pt": {
    "id": "tools.replay.lib.rp_helpers.to_topdown_pt",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\lib\\rp_helpers.py",
    "relative_path": "tools\\replay\\lib\\rp_helpers.py",
    "depends_on": [],
    "start_line": 25,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.lib.rp_helpers.draw_path": {
    "id": "tools.replay.lib.rp_helpers.draw_path",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\lib\\rp_helpers.py",
    "relative_path": "tools\\replay\\lib\\rp_helpers.py",
    "depends_on": [
      "tools.replay.lib.rp_helpers.to_topdown_pt"
    ],
    "start_line": 32,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.lib.rp_helpers.plot_model": {
    "id": "tools.replay.lib.rp_helpers.plot_model",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\lib\\rp_helpers.py",
    "relative_path": "tools\\replay\\lib\\rp_helpers.py",
    "depends_on": [
      "tools.replay.lib.rp_helpers.draw_path",
      "tools.replay.lib.rp_helpers.to_topdown_pt"
    ],
    "start_line": 42,
    "end_line": 59,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.lib.rp_helpers.plot_lead": {
    "id": "tools.replay.lib.rp_helpers.plot_lead",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\lib\\rp_helpers.py",
    "relative_path": "tools\\replay\\lib\\rp_helpers.py",
    "depends_on": [
      "tools.replay.lib.rp_helpers.to_topdown_pt"
    ],
    "start_line": 62,
    "end_line": 69,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.lib.rp_helpers.update_radar_points": {
    "id": "tools.replay.lib.rp_helpers.update_radar_points",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\lib\\rp_helpers.py",
    "relative_path": "tools\\replay\\lib\\rp_helpers.py",
    "depends_on": [
      "tools.replay.lib.rp_helpers.to_topdown_pt"
    ],
    "start_line": 72,
    "end_line": 91,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.lib.rp_helpers.get_blank_lid_overlay": {
    "id": "tools.replay.lib.rp_helpers.get_blank_lid_overlay",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\lib\\rp_helpers.py",
    "relative_path": "tools\\replay\\lib\\rp_helpers.py",
    "depends_on": [],
    "start_line": 94,
    "end_line": 109,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.lib.ui_helpers.UIParams": {
    "id": "tools.replay.lib.ui_helpers.UIParams",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\lib\\ui_helpers.py",
    "relative_path": "tools\\replay\\lib\\ui_helpers.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 27,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.lib.ui_helpers.Calibration": {
    "id": "tools.replay.lib.ui_helpers.Calibration",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\lib\\ui_helpers.py",
    "relative_path": "tools\\replay\\lib\\ui_helpers.py",
    "depends_on": [],
    "start_line": 32,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.lib.ui_helpers.Calibration.__init__": {
    "id": "tools.replay.lib.ui_helpers.Calibration.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\lib\\ui_helpers.py",
    "relative_path": "tools\\replay\\lib\\ui_helpers.py",
    "depends_on": [],
    "start_line": 33,
    "end_line": 36,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.lib.ui_helpers.Calibration.car_space_to_ff": {
    "id": "tools.replay.lib.ui_helpers.Calibration.car_space_to_ff",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\lib\\ui_helpers.py",
    "relative_path": "tools\\replay\\lib\\ui_helpers.py",
    "depends_on": [],
    "start_line": 38,
    "end_line": 43,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.lib.ui_helpers.Calibration.car_space_to_bb": {
    "id": "tools.replay.lib.ui_helpers.Calibration.car_space_to_bb",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\lib\\ui_helpers.py",
    "relative_path": "tools\\replay\\lib\\ui_helpers.py",
    "depends_on": [],
    "start_line": 45,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.lib.ui_helpers.find_color": {
    "id": "tools.replay.lib.ui_helpers.find_color",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\lib\\ui_helpers.py",
    "relative_path": "tools\\replay\\lib\\ui_helpers.py",
    "depends_on": [],
    "start_line": 51,
    "end_line": 62,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.lib.ui_helpers.to_topdown_pt": {
    "id": "tools.replay.lib.ui_helpers.to_topdown_pt",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\lib\\ui_helpers.py",
    "relative_path": "tools\\replay\\lib\\ui_helpers.py",
    "depends_on": [],
    "start_line": 65,
    "end_line": 69,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.lib.ui_helpers.draw_path": {
    "id": "tools.replay.lib.ui_helpers.draw_path",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\lib\\ui_helpers.py",
    "relative_path": "tools\\replay\\lib\\ui_helpers.py",
    "depends_on": [
      "tools.replay.lib.ui_helpers.find_color",
      "tools.replay.lib.ui_helpers.to_topdown_pt"
    ],
    "start_line": 72,
    "end_line": 90,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.lib.ui_helpers.init_plots": {
    "id": "tools.replay.lib.ui_helpers.init_plots",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\lib\\ui_helpers.py",
    "relative_path": "tools\\replay\\lib\\ui_helpers.py",
    "depends_on": [],
    "start_line": 93,
    "end_line": 148,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.lib.ui_helpers.pygame_modules_have_loaded": {
    "id": "tools.replay.lib.ui_helpers.pygame_modules_have_loaded",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\lib\\ui_helpers.py",
    "relative_path": "tools\\replay\\lib\\ui_helpers.py",
    "depends_on": [],
    "start_line": 151,
    "end_line": 152,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.lib.ui_helpers.plot_model": {
    "id": "tools.replay.lib.ui_helpers.plot_model",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\lib\\ui_helpers.py",
    "relative_path": "tools\\replay\\lib\\ui_helpers.py",
    "depends_on": [
      "tools.replay.lib.ui_helpers.draw_path",
      "tools.replay.lib.ui_helpers.find_color",
      "tools.replay.lib.ui_helpers.to_topdown_pt"
    ],
    "start_line": 155,
    "end_line": 181,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.lib.ui_helpers.plot_lead": {
    "id": "tools.replay.lib.ui_helpers.plot_lead",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\lib\\ui_helpers.py",
    "relative_path": "tools\\replay\\lib\\ui_helpers.py",
    "depends_on": [
      "tools.replay.lib.ui_helpers.find_color",
      "tools.replay.lib.ui_helpers.to_topdown_pt"
    ],
    "start_line": 184,
    "end_line": 192,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.lib.ui_helpers.maybe_update_radar_points": {
    "id": "tools.replay.lib.ui_helpers.maybe_update_radar_points",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\lib\\ui_helpers.py",
    "relative_path": "tools\\replay\\lib\\ui_helpers.py",
    "depends_on": [
      "tools.replay.lib.ui_helpers.to_topdown_pt"
    ],
    "start_line": 195,
    "end_line": 209,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.replay.lib.ui_helpers.get_blank_lid_overlay": {
    "id": "tools.replay.lib.ui_helpers.get_blank_lid_overlay",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\replay\\lib\\ui_helpers.py",
    "relative_path": "tools\\replay\\lib\\ui_helpers.py",
    "depends_on": [],
    "start_line": 211,
    "end_line": 226,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.rerun.camera_reader.CameraType": {
    "id": "tools.rerun.camera_reader.CameraType",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\rerun\\camera_reader.py",
    "relative_path": "tools\\rerun\\camera_reader.py",
    "depends_on": [],
    "start_line": 12,
    "end_line": 16,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.rerun.camera_reader.probe_packet_info": {
    "id": "tools.rerun.camera_reader.probe_packet_info",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\rerun\\camera_reader.py",
    "relative_path": "tools\\rerun\\camera_reader.py",
    "depends_on": [],
    "start_line": 19,
    "end_line": 23,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.rerun.camera_reader._FrameReader": {
    "id": "tools.rerun.camera_reader._FrameReader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\rerun\\camera_reader.py",
    "relative_path": "tools\\rerun\\camera_reader.py",
    "depends_on": [
      "tools.rerun.camera_reader.probe_packet_info"
    ],
    "start_line": 26,
    "end_line": 65,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.rerun.camera_reader._FrameReader.__init__": {
    "id": "tools.rerun.camera_reader._FrameReader.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\rerun\\camera_reader.py",
    "relative_path": "tools\\rerun\\camera_reader.py",
    "depends_on": [],
    "start_line": 27,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.rerun.camera_reader._FrameReader._read_stream_nv12": {
    "id": "tools.rerun.camera_reader._FrameReader._read_stream_nv12",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\rerun\\camera_reader.py",
    "relative_path": "tools\\rerun\\camera_reader.py",
    "depends_on": [],
    "start_line": 36,
    "end_line": 51,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.rerun.camera_reader._FrameReader._get_ts": {
    "id": "tools.rerun.camera_reader._FrameReader._get_ts",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\rerun\\camera_reader.py",
    "relative_path": "tools\\rerun\\camera_reader.py",
    "depends_on": [
      "tools.rerun.camera_reader.probe_packet_info"
    ],
    "start_line": 53,
    "end_line": 61,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.rerun.camera_reader._FrameReader.__iter__": {
    "id": "tools.rerun.camera_reader._FrameReader.__iter__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\rerun\\camera_reader.py",
    "relative_path": "tools\\rerun\\camera_reader.py",
    "depends_on": [],
    "start_line": 63,
    "end_line": 65,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.rerun.camera_reader.CameraReader": {
    "id": "tools.rerun.camera_reader.CameraReader",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\rerun\\camera_reader.py",
    "relative_path": "tools\\rerun\\camera_reader.py",
    "depends_on": [
      "tools.rerun.camera_reader._FrameReader"
    ],
    "start_line": 68,
    "end_line": 92,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.rerun.camera_reader.CameraReader.__init__": {
    "id": "tools.rerun.camera_reader.CameraReader.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\rerun\\camera_reader.py",
    "relative_path": "tools\\rerun\\camera_reader.py",
    "depends_on": [],
    "start_line": 69,
    "end_line": 78,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.rerun.camera_reader.CameraReader._get_fr": {
    "id": "tools.rerun.camera_reader.CameraReader._get_fr",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\rerun\\camera_reader.py",
    "relative_path": "tools\\rerun\\camera_reader.py",
    "depends_on": [
      "tools.rerun.camera_reader._FrameReader"
    ],
    "start_line": 80,
    "end_line": 83,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.rerun.camera_reader.CameraReader._run_on_segment": {
    "id": "tools.rerun.camera_reader.CameraReader._run_on_segment",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\rerun\\camera_reader.py",
    "relative_path": "tools\\rerun\\camera_reader.py",
    "depends_on": [],
    "start_line": 85,
    "end_line": 86,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.rerun.camera_reader.CameraReader.run_across_segments": {
    "id": "tools.rerun.camera_reader.CameraReader.run_across_segments",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\rerun\\camera_reader.py",
    "relative_path": "tools\\rerun\\camera_reader.py",
    "depends_on": [],
    "start_line": 88,
    "end_line": 92,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.rerun.run.Rerunner": {
    "id": "tools.rerun.run.Rerunner",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\rerun\\run.py",
    "relative_path": "tools\\rerun\\run.py",
    "depends_on": [
      "tools.rerun.run.Rerunner"
    ],
    "start_line": 28,
    "end_line": 145,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.rerun.run.Rerunner.__init__": {
    "id": "tools.rerun.run.Rerunner.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\rerun\\run.py",
    "relative_path": "tools\\rerun\\run.py",
    "depends_on": [],
    "start_line": 29,
    "end_line": 49,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.rerun.run.Rerunner._create_blueprint": {
    "id": "tools.rerun.run.Rerunner._create_blueprint",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\rerun\\run.py",
    "relative_path": "tools\\rerun\\run.py",
    "depends_on": [],
    "start_line": 51,
    "end_line": 71,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.rerun.run.Rerunner._parse_msg": {
    "id": "tools.rerun.run.Rerunner._parse_msg",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\rerun\\run.py",
    "relative_path": "tools\\rerun\\run.py",
    "depends_on": [],
    "start_line": 74,
    "end_line": 97,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.rerun.run.Rerunner._process_log_msgs": {
    "id": "tools.rerun.run.Rerunner._process_log_msgs",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\rerun\\run.py",
    "relative_path": "tools\\rerun\\run.py",
    "depends_on": [
      "tools.rerun.run.Rerunner"
    ],
    "start_line": 101,
    "end_line": 124,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.rerun.run.Rerunner._process_cam_readers": {
    "id": "tools.rerun.run.Rerunner._process_cam_readers",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\rerun\\run.py",
    "relative_path": "tools\\rerun\\run.py",
    "depends_on": [],
    "start_line": 128,
    "end_line": 135,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.rerun.run.Rerunner.load_data": {
    "id": "tools.rerun.run.Rerunner.load_data",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\rerun\\run.py",
    "relative_path": "tools\\rerun\\run.py",
    "depends_on": [],
    "start_line": 137,
    "end_line": 145,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.scripts.save_ubloxraw_stream.get_arg_parser": {
    "id": "tools.scripts.save_ubloxraw_stream.get_arg_parser",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\scripts\\save_ubloxraw_stream.py",
    "relative_path": "tools\\scripts\\save_ubloxraw_stream.py",
    "depends_on": [],
    "start_line": 11,
    "end_line": 20,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.scripts.save_ubloxraw_stream.main": {
    "id": "tools.scripts.save_ubloxraw_stream.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\scripts\\save_ubloxraw_stream.py",
    "relative_path": "tools\\scripts\\save_ubloxraw_stream.py",
    "depends_on": [
      "tools.scripts.save_ubloxraw_stream.get_arg_parser"
    ],
    "start_line": 23,
    "end_line": 43,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.run_bridge.create_bridge": {
    "id": "tools.sim.run_bridge.create_bridge",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\run_bridge.py",
    "relative_path": "tools\\sim\\run_bridge.py",
    "depends_on": [],
    "start_line": 9,
    "end_line": 15,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.run_bridge.main": {
    "id": "tools.sim.run_bridge.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\run_bridge.py",
    "relative_path": "tools\\sim\\run_bridge.py",
    "depends_on": [
      "tools.sim.run_bridge.create_bridge"
    ],
    "start_line": 17,
    "end_line": 19,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.run_bridge.parse_args": {
    "id": "tools.sim.run_bridge.parse_args",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\run_bridge.py",
    "relative_path": "tools\\sim\\run_bridge.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 27,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.common.QueueMessageType": {
    "id": "tools.sim.bridge.common.QueueMessageType",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\common.py",
    "relative_path": "tools\\sim\\bridge\\common.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 25,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.common.control_cmd_gen": {
    "id": "tools.sim.bridge.common.control_cmd_gen",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\common.py",
    "relative_path": "tools\\sim\\bridge\\common.py",
    "depends_on": [
      "tools.sim.bridge.common.QueueMessageType"
    ],
    "start_line": 27,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.common.rk_loop": {
    "id": "tools.sim.bridge.common.rk_loop",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\common.py",
    "relative_path": "tools\\sim\\bridge\\common.py",
    "depends_on": [],
    "start_line": 30,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.common.SimulatorBridge": {
    "id": "tools.sim.bridge.common.SimulatorBridge",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\common.py",
    "relative_path": "tools\\sim\\bridge\\common.py",
    "depends_on": [
      "tools.sim.bridge.common.rk_loop",
      "tools.sim.bridge.common.QueueMessageType"
    ],
    "start_line": 37,
    "end_line": 206,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.common.SimulatorBridge.__init__": {
    "id": "tools.sim.bridge.common.SimulatorBridge.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\common.py",
    "relative_path": "tools\\sim\\bridge\\common.py",
    "depends_on": [],
    "start_line": 40,
    "end_line": 62,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.common.SimulatorBridge._on_shutdown": {
    "id": "tools.sim.bridge.common.SimulatorBridge._on_shutdown",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\common.py",
    "relative_path": "tools\\sim\\bridge\\common.py",
    "depends_on": [],
    "start_line": 64,
    "end_line": 65,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.common.SimulatorBridge.shutdown": {
    "id": "tools.sim.bridge.common.SimulatorBridge.shutdown",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\common.py",
    "relative_path": "tools\\sim\\bridge\\common.py",
    "depends_on": [],
    "start_line": 67,
    "end_line": 68,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.common.SimulatorBridge.bridge_keep_alive": {
    "id": "tools.sim.bridge.common.SimulatorBridge.bridge_keep_alive",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\common.py",
    "relative_path": "tools\\sim\\bridge\\common.py",
    "depends_on": [],
    "start_line": 70,
    "end_line": 74,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.common.SimulatorBridge.close": {
    "id": "tools.sim.bridge.common.SimulatorBridge.close",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\common.py",
    "relative_path": "tools\\sim\\bridge\\common.py",
    "depends_on": [],
    "start_line": 76,
    "end_line": 83,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.common.SimulatorBridge.run": {
    "id": "tools.sim.bridge.common.SimulatorBridge.run",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\common.py",
    "relative_path": "tools\\sim\\bridge\\common.py",
    "depends_on": [],
    "start_line": 85,
    "end_line": 88,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.common.SimulatorBridge.print_status": {
    "id": "tools.sim.bridge.common.SimulatorBridge.print_status",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\common.py",
    "relative_path": "tools\\sim\\bridge\\common.py",
    "depends_on": [],
    "start_line": 90,
    "end_line": 95,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.common.SimulatorBridge.spawn_world": {
    "id": "tools.sim.bridge.common.SimulatorBridge.spawn_world",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\common.py",
    "relative_path": "tools\\sim\\bridge\\common.py",
    "depends_on": [],
    "start_line": 98,
    "end_line": 99,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.common.SimulatorBridge._run": {
    "id": "tools.sim.bridge.common.SimulatorBridge._run",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\common.py",
    "relative_path": "tools\\sim\\bridge\\common.py",
    "depends_on": [
      "tools.sim.bridge.common.rk_loop",
      "tools.sim.bridge.common.QueueMessageType"
    ],
    "start_line": 101,
    "end_line": 206,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.metadrive.metadrive_bridge.straight_block": {
    "id": "tools.sim.bridge.metadrive.metadrive_bridge.straight_block",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\metadrive\\metadrive_bridge.py",
    "relative_path": "tools\\sim\\bridge\\metadrive\\metadrive_bridge.py",
    "depends_on": [],
    "start_line": 13,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.metadrive.metadrive_bridge.curve_block": {
    "id": "tools.sim.bridge.metadrive.metadrive_bridge.curve_block",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\metadrive\\metadrive_bridge.py",
    "relative_path": "tools\\sim\\bridge\\metadrive\\metadrive_bridge.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.metadrive.metadrive_bridge.create_map": {
    "id": "tools.sim.bridge.metadrive.metadrive_bridge.create_map",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\metadrive\\metadrive_bridge.py",
    "relative_path": "tools\\sim\\bridge\\metadrive\\metadrive_bridge.py",
    "depends_on": [
      "tools.sim.bridge.metadrive.metadrive_bridge.straight_block",
      "tools.sim.bridge.metadrive.metadrive_bridge.curve_block"
    ],
    "start_line": 30,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.metadrive.metadrive_bridge.MetaDriveBridge": {
    "id": "tools.sim.bridge.metadrive.metadrive_bridge.MetaDriveBridge",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\metadrive\\metadrive_bridge.py",
    "relative_path": "tools\\sim\\bridge\\metadrive\\metadrive_bridge.py",
    "depends_on": [
      "tools.sim.bridge.metadrive.metadrive_bridge.create_map"
    ],
    "start_line": 50,
    "end_line": 93,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.metadrive.metadrive_bridge.MetaDriveBridge.__init__": {
    "id": "tools.sim.bridge.metadrive.metadrive_bridge.MetaDriveBridge.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\metadrive\\metadrive_bridge.py",
    "relative_path": "tools\\sim\\bridge\\metadrive\\metadrive_bridge.py",
    "depends_on": [],
    "start_line": 53,
    "end_line": 58,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.metadrive.metadrive_bridge.MetaDriveBridge.spawn_world": {
    "id": "tools.sim.bridge.metadrive.metadrive_bridge.MetaDriveBridge.spawn_world",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\metadrive\\metadrive_bridge.py",
    "relative_path": "tools\\sim\\bridge\\metadrive\\metadrive_bridge.py",
    "depends_on": [
      "tools.sim.bridge.metadrive.metadrive_bridge.create_map"
    ],
    "start_line": 60,
    "end_line": 93,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.metadrive.metadrive_common.CopyRamRGBCamera": {
    "id": "tools.sim.bridge.metadrive.metadrive_common.CopyRamRGBCamera",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\metadrive\\metadrive_common.py",
    "relative_path": "tools\\sim\\bridge\\metadrive\\metadrive_common.py",
    "depends_on": [],
    "start_line": 7,
    "end_line": 21,
    "has_docstring": true,
    "docstring": "Camera which copies its content into RAM during the render process, for faster image grabbing.",
    "language": "python"
  },
  "tools.sim.bridge.metadrive.metadrive_common.CopyRamRGBCamera.__init__": {
    "id": "tools.sim.bridge.metadrive.metadrive_common.CopyRamRGBCamera.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\metadrive\\metadrive_common.py",
    "relative_path": "tools\\sim\\bridge\\metadrive\\metadrive_common.py",
    "depends_on": [],
    "start_line": 9,
    "end_line": 12,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.metadrive.metadrive_common.CopyRamRGBCamera.get_rgb_array_cpu": {
    "id": "tools.sim.bridge.metadrive.metadrive_common.CopyRamRGBCamera.get_rgb_array_cpu",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\metadrive\\metadrive_common.py",
    "relative_path": "tools\\sim\\bridge\\metadrive\\metadrive_common.py",
    "depends_on": [],
    "start_line": 14,
    "end_line": 21,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.metadrive.metadrive_common.RGBCameraWide": {
    "id": "tools.sim.bridge.metadrive.metadrive_common.RGBCameraWide",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\metadrive\\metadrive_common.py",
    "relative_path": "tools\\sim\\bridge\\metadrive\\metadrive_common.py",
    "depends_on": [
      "tools.sim.bridge.metadrive.metadrive_common.CopyRamRGBCamera"
    ],
    "start_line": 24,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.metadrive.metadrive_common.RGBCameraWide.__init__": {
    "id": "tools.sim.bridge.metadrive.metadrive_common.RGBCameraWide.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\metadrive\\metadrive_common.py",
    "relative_path": "tools\\sim\\bridge\\metadrive\\metadrive_common.py",
    "depends_on": [],
    "start_line": 25,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.metadrive.metadrive_common.RGBCameraRoad": {
    "id": "tools.sim.bridge.metadrive.metadrive_common.RGBCameraRoad",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\metadrive\\metadrive_common.py",
    "relative_path": "tools\\sim\\bridge\\metadrive\\metadrive_common.py",
    "depends_on": [
      "tools.sim.bridge.metadrive.metadrive_common.CopyRamRGBCamera"
    ],
    "start_line": 32,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.metadrive.metadrive_common.RGBCameraRoad.__init__": {
    "id": "tools.sim.bridge.metadrive.metadrive_common.RGBCameraRoad.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\metadrive\\metadrive_common.py",
    "relative_path": "tools\\sim\\bridge\\metadrive\\metadrive_common.py",
    "depends_on": [],
    "start_line": 33,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.metadrive.metadrive_process.apply_metadrive_patches": {
    "id": "tools.sim.bridge.metadrive.metadrive_process.apply_metadrive_patches",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\metadrive\\metadrive_process.py",
    "relative_path": "tools\\sim\\bridge\\metadrive\\metadrive_process.py",
    "depends_on": [],
    "start_line": 26,
    "end_line": 49,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.metadrive.metadrive_process.metadrive_process": {
    "id": "tools.sim.bridge.metadrive.metadrive_process.metadrive_process",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\metadrive\\metadrive_process.py",
    "relative_path": "tools\\sim\\bridge\\metadrive\\metadrive_process.py",
    "depends_on": [
      "tools.sim.bridge.metadrive.metadrive_process.apply_metadrive_patches"
    ],
    "start_line": 51,
    "end_line": 154,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.metadrive.metadrive_world.MetaDriveWorld": {
    "id": "tools.sim.bridge.metadrive.metadrive_world.MetaDriveWorld",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\metadrive\\metadrive_world.py",
    "relative_path": "tools\\sim\\bridge\\metadrive\\metadrive_world.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 132,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.metadrive.metadrive_world.MetaDriveWorld.__init__": {
    "id": "tools.sim.bridge.metadrive.metadrive_world.MetaDriveWorld.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\metadrive\\metadrive_world.py",
    "relative_path": "tools\\sim\\bridge\\metadrive\\metadrive_world.py",
    "depends_on": [],
    "start_line": 17,
    "end_line": 59,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.metadrive.metadrive_world.MetaDriveWorld.apply_controls": {
    "id": "tools.sim.bridge.metadrive.metadrive_world.MetaDriveWorld.apply_controls",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\metadrive\\metadrive_world.py",
    "relative_path": "tools\\sim\\bridge\\metadrive\\metadrive_world.py",
    "depends_on": [],
    "start_line": 61,
    "end_line": 74,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.metadrive.metadrive_world.MetaDriveWorld.read_state": {
    "id": "tools.sim.bridge.metadrive.metadrive_world.MetaDriveWorld.read_state",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\metadrive\\metadrive_world.py",
    "relative_path": "tools\\sim\\bridge\\metadrive\\metadrive_world.py",
    "depends_on": [],
    "start_line": 76,
    "end_line": 81,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.metadrive.metadrive_world.MetaDriveWorld.read_sensors": {
    "id": "tools.sim.bridge.metadrive.metadrive_world.MetaDriveWorld.read_sensors",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\metadrive\\metadrive_world.py",
    "relative_path": "tools\\sim\\bridge\\metadrive\\metadrive_world.py",
    "depends_on": [],
    "start_line": 83,
    "end_line": 118,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.metadrive.metadrive_world.MetaDriveWorld.read_cameras": {
    "id": "tools.sim.bridge.metadrive.metadrive_world.MetaDriveWorld.read_cameras",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\metadrive\\metadrive_world.py",
    "relative_path": "tools\\sim\\bridge\\metadrive\\metadrive_world.py",
    "depends_on": [],
    "start_line": 120,
    "end_line": 121,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.metadrive.metadrive_world.MetaDriveWorld.tick": {
    "id": "tools.sim.bridge.metadrive.metadrive_world.MetaDriveWorld.tick",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\metadrive\\metadrive_world.py",
    "relative_path": "tools\\sim\\bridge\\metadrive\\metadrive_world.py",
    "depends_on": [],
    "start_line": 123,
    "end_line": 124,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.metadrive.metadrive_world.MetaDriveWorld.reset": {
    "id": "tools.sim.bridge.metadrive.metadrive_world.MetaDriveWorld.reset",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\metadrive\\metadrive_world.py",
    "relative_path": "tools\\sim\\bridge\\metadrive\\metadrive_world.py",
    "depends_on": [],
    "start_line": 126,
    "end_line": 127,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.bridge.metadrive.metadrive_world.MetaDriveWorld.close": {
    "id": "tools.sim.bridge.metadrive.metadrive_world.MetaDriveWorld.close",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\bridge\\metadrive\\metadrive_world.py",
    "relative_path": "tools\\sim\\bridge\\metadrive\\metadrive_world.py",
    "depends_on": [],
    "start_line": 129,
    "end_line": 132,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.camerad.Camerad": {
    "id": "tools.sim.lib.camerad.Camerad",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\camerad.py",
    "relative_path": "tools\\sim\\lib\\camerad.py",
    "depends_on": [],
    "start_line": 12,
    "end_line": 70,
    "has_docstring": true,
    "docstring": "Simulates the camerad daemon",
    "language": "python"
  },
  "tools.sim.lib.camerad.Camerad.__init__": {
    "id": "tools.sim.lib.camerad.Camerad.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\camerad.py",
    "relative_path": "tools\\sim\\lib\\camerad.py",
    "depends_on": [],
    "start_line": 14,
    "end_line": 37,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.camerad.Camerad.cam_send_yuv_road": {
    "id": "tools.sim.lib.camerad.Camerad.cam_send_yuv_road",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\camerad.py",
    "relative_path": "tools\\sim\\lib\\camerad.py",
    "depends_on": [],
    "start_line": 39,
    "end_line": 41,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.camerad.Camerad.cam_send_yuv_wide_road": {
    "id": "tools.sim.lib.camerad.Camerad.cam_send_yuv_wide_road",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\camerad.py",
    "relative_path": "tools\\sim\\lib\\camerad.py",
    "depends_on": [],
    "start_line": 43,
    "end_line": 45,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.camerad.Camerad.rgb_to_yuv": {
    "id": "tools.sim.lib.camerad.Camerad.rgb_to_yuv",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\camerad.py",
    "relative_path": "tools\\sim\\lib\\camerad.py",
    "depends_on": [],
    "start_line": 48,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.camerad.Camerad._send_yuv": {
    "id": "tools.sim.lib.camerad.Camerad._send_yuv",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\camerad.py",
    "relative_path": "tools\\sim\\lib\\camerad.py",
    "depends_on": [],
    "start_line": 58,
    "end_line": 70,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.common.GPSState": {
    "id": "tools.sim.lib.common.GPSState",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\common.py",
    "relative_path": "tools\\sim\\lib\\common.py",
    "depends_on": [],
    "start_line": 13,
    "end_line": 27,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.common.GPSState.__init__": {
    "id": "tools.sim.lib.common.GPSState.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\common.py",
    "relative_path": "tools\\sim\\lib\\common.py",
    "depends_on": [],
    "start_line": 14,
    "end_line": 17,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.common.GPSState.from_xy": {
    "id": "tools.sim.lib.common.GPSState.from_xy",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\common.py",
    "relative_path": "tools\\sim\\lib\\common.py",
    "depends_on": [],
    "start_line": 19,
    "end_line": 27,
    "has_docstring": true,
    "docstring": "Simulates a lat/lon from an xy coordinate on a plane, for simple simulation. TODO: proper global projection?",
    "language": "python"
  },
  "tools.sim.lib.common.IMUState": {
    "id": "tools.sim.lib.common.IMUState",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\common.py",
    "relative_path": "tools\\sim\\lib\\common.py",
    "depends_on": [],
    "start_line": 30,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.common.IMUState.__init__": {
    "id": "tools.sim.lib.common.IMUState.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\common.py",
    "relative_path": "tools\\sim\\lib\\common.py",
    "depends_on": [],
    "start_line": 31,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.common.SimulatorState": {
    "id": "tools.sim.lib.common.SimulatorState",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\common.py",
    "relative_path": "tools\\sim\\lib\\common.py",
    "depends_on": [
      "tools.sim.lib.common.GPSState",
      "tools.sim.lib.common.IMUState"
    ],
    "start_line": 37,
    "end_line": 61,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.common.SimulatorState.__init__": {
    "id": "tools.sim.lib.common.SimulatorState.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\common.py",
    "relative_path": "tools\\sim\\lib\\common.py",
    "depends_on": [
      "tools.sim.lib.common.GPSState",
      "tools.sim.lib.common.IMUState"
    ],
    "start_line": 38,
    "end_line": 57,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.common.SimulatorState.speed": {
    "id": "tools.sim.lib.common.SimulatorState.speed",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\common.py",
    "relative_path": "tools\\sim\\lib\\common.py",
    "depends_on": [],
    "start_line": 60,
    "end_line": 61,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.common.World": {
    "id": "tools.sim.lib.common.World",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\common.py",
    "relative_path": "tools\\sim\\lib\\common.py",
    "depends_on": [
      "tools.sim.lib.common.SimulatorState"
    ],
    "start_line": 64,
    "end_line": 100,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.common.World.__init__": {
    "id": "tools.sim.lib.common.World.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\common.py",
    "relative_path": "tools\\sim\\lib\\common.py",
    "depends_on": [],
    "start_line": 65,
    "end_line": 72,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.common.World.apply_controls": {
    "id": "tools.sim.lib.common.World.apply_controls",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\common.py",
    "relative_path": "tools\\sim\\lib\\common.py",
    "depends_on": [],
    "start_line": 75,
    "end_line": 76,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.common.World.tick": {
    "id": "tools.sim.lib.common.World.tick",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\common.py",
    "relative_path": "tools\\sim\\lib\\common.py",
    "depends_on": [],
    "start_line": 79,
    "end_line": 80,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.common.World.read_state": {
    "id": "tools.sim.lib.common.World.read_state",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\common.py",
    "relative_path": "tools\\sim\\lib\\common.py",
    "depends_on": [],
    "start_line": 83,
    "end_line": 84,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.common.World.read_sensors": {
    "id": "tools.sim.lib.common.World.read_sensors",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\common.py",
    "relative_path": "tools\\sim\\lib\\common.py",
    "depends_on": [
      "tools.sim.lib.common.SimulatorState"
    ],
    "start_line": 87,
    "end_line": 88,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.common.World.read_cameras": {
    "id": "tools.sim.lib.common.World.read_cameras",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\common.py",
    "relative_path": "tools\\sim\\lib\\common.py",
    "depends_on": [],
    "start_line": 91,
    "end_line": 92,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.common.World.close": {
    "id": "tools.sim.lib.common.World.close",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\common.py",
    "relative_path": "tools\\sim\\lib\\common.py",
    "depends_on": [],
    "start_line": 95,
    "end_line": 96,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.common.World.reset": {
    "id": "tools.sim.lib.common.World.reset",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\common.py",
    "relative_path": "tools\\sim\\lib\\common.py",
    "depends_on": [],
    "start_line": 99,
    "end_line": 100,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.keyboard_ctrl.getch": {
    "id": "tools.sim.lib.keyboard_ctrl.getch",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\keyboard_ctrl.py",
    "relative_path": "tools\\sim\\lib\\keyboard_ctrl.py",
    "depends_on": [],
    "start_line": 35,
    "end_line": 53,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.keyboard_ctrl.print_keyboard_help": {
    "id": "tools.sim.lib.keyboard_ctrl.print_keyboard_help",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\keyboard_ctrl.py",
    "relative_path": "tools\\sim\\lib\\keyboard_ctrl.py",
    "depends_on": [],
    "start_line": 55,
    "end_line": 56,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.keyboard_ctrl.keyboard_poll_thread": {
    "id": "tools.sim.lib.keyboard_ctrl.keyboard_poll_thread",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\keyboard_ctrl.py",
    "relative_path": "tools\\sim\\lib\\keyboard_ctrl.py",
    "depends_on": [
      "tools.sim.lib.keyboard_ctrl.getch",
      "tools.sim.lib.keyboard_ctrl.print_keyboard_help"
    ],
    "start_line": 58,
    "end_line": 89,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.keyboard_ctrl.test": {
    "id": "tools.sim.lib.keyboard_ctrl.test",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\keyboard_ctrl.py",
    "relative_path": "tools\\sim\\lib\\keyboard_ctrl.py",
    "depends_on": [],
    "start_line": 91,
    "end_line": 94,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.manual_ctrl.wheel_poll_thread": {
    "id": "tools.sim.lib.manual_ctrl.wheel_poll_thread",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\manual_ctrl.py",
    "relative_path": "tools\\sim\\lib\\manual_ctrl.py",
    "depends_on": [],
    "start_line": 96,
    "end_line": 184,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.simulated_car.SimulatedCar": {
    "id": "tools.sim.lib.simulated_car.SimulatedCar",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\simulated_car.py",
    "relative_path": "tools\\sim\\lib\\simulated_car.py",
    "depends_on": [],
    "start_line": 12,
    "end_line": 112,
    "has_docstring": true,
    "docstring": "Simulates a honda civic 2022 (panda state + can messages) to OpenPilot",
    "language": "python"
  },
  "tools.sim.lib.simulated_car.SimulatedCar.__init__": {
    "id": "tools.sim.lib.simulated_car.SimulatedCar.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\simulated_car.py",
    "relative_path": "tools\\sim\\lib\\simulated_car.py",
    "depends_on": [],
    "start_line": 16,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.simulated_car.SimulatedCar.get_car_can_parser": {
    "id": "tools.sim.lib.simulated_car.SimulatedCar.get_car_can_parser",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\simulated_car.py",
    "relative_path": "tools\\sim\\lib\\simulated_car.py",
    "depends_on": [],
    "start_line": 25,
    "end_line": 28,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.simulated_car.SimulatedCar.send_can_messages": {
    "id": "tools.sim.lib.simulated_car.SimulatedCar.send_can_messages",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\simulated_car.py",
    "relative_path": "tools\\sim\\lib\\simulated_car.py",
    "depends_on": [],
    "start_line": 30,
    "end_line": 81,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.simulated_car.SimulatedCar.send_panda_state": {
    "id": "tools.sim.lib.simulated_car.SimulatedCar.send_panda_state",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\simulated_car.py",
    "relative_path": "tools\\sim\\lib\\simulated_car.py",
    "depends_on": [],
    "start_line": 83,
    "end_line": 100,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.simulated_car.SimulatedCar.update": {
    "id": "tools.sim.lib.simulated_car.SimulatedCar.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\simulated_car.py",
    "relative_path": "tools\\sim\\lib\\simulated_car.py",
    "depends_on": [],
    "start_line": 102,
    "end_line": 112,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.simulated_sensors.SimulatedSensors": {
    "id": "tools.sim.lib.simulated_sensors.SimulatedSensors",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\simulated_sensors.py",
    "relative_path": "tools\\sim\\lib\\simulated_sensors.py",
    "depends_on": [],
    "start_line": 14,
    "end_line": 122,
    "has_docstring": true,
    "docstring": "Simulates the C3 sensors (acc, gyro, gps, peripherals, dm state, cameras) to OpenPilot",
    "language": "python"
  },
  "tools.sim.lib.simulated_sensors.SimulatedSensors.__init__": {
    "id": "tools.sim.lib.simulated_sensors.SimulatedSensors.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\simulated_sensors.py",
    "relative_path": "tools\\sim\\lib\\simulated_sensors.py",
    "depends_on": [],
    "start_line": 17,
    "end_line": 21,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.simulated_sensors.SimulatedSensors.send_imu_message": {
    "id": "tools.sim.lib.simulated_sensors.SimulatedSensors.send_imu_message",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\simulated_sensors.py",
    "relative_path": "tools\\sim\\lib\\simulated_sensors.py",
    "depends_on": [],
    "start_line": 23,
    "end_line": 40,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.simulated_sensors.SimulatedSensors.send_gps_message": {
    "id": "tools.sim.lib.simulated_sensors.SimulatedSensors.send_gps_message",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\simulated_sensors.py",
    "relative_path": "tools\\sim\\lib\\simulated_sensors.py",
    "depends_on": [],
    "start_line": 42,
    "end_line": 71,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.simulated_sensors.SimulatedSensors.send_peripheral_state": {
    "id": "tools.sim.lib.simulated_sensors.SimulatedSensors.send_peripheral_state",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\simulated_sensors.py",
    "relative_path": "tools\\sim\\lib\\simulated_sensors.py",
    "depends_on": [],
    "start_line": 73,
    "end_line": 82,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.simulated_sensors.SimulatedSensors.send_fake_driver_monitoring": {
    "id": "tools.sim.lib.simulated_sensors.SimulatedSensors.send_fake_driver_monitoring",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\simulated_sensors.py",
    "relative_path": "tools\\sim\\lib\\simulated_sensors.py",
    "depends_on": [],
    "start_line": 84,
    "end_line": 100,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.simulated_sensors.SimulatedSensors.send_camera_images": {
    "id": "tools.sim.lib.simulated_sensors.SimulatedSensors.send_camera_images",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\simulated_sensors.py",
    "relative_path": "tools\\sim\\lib\\simulated_sensors.py",
    "depends_on": [],
    "start_line": 102,
    "end_line": 109,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.lib.simulated_sensors.SimulatedSensors.update": {
    "id": "tools.sim.lib.simulated_sensors.SimulatedSensors.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\lib\\simulated_sensors.py",
    "relative_path": "tools\\sim\\lib\\simulated_sensors.py",
    "depends_on": [],
    "start_line": 111,
    "end_line": 122,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.tests.conftest.pytest_addoption": {
    "id": "tools.sim.tests.conftest.pytest_addoption",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\tests\\conftest.py",
    "relative_path": "tools\\sim\\tests\\conftest.py",
    "depends_on": [],
    "start_line": 3,
    "end_line": 4,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.tests.conftest.test_duration": {
    "id": "tools.sim.tests.conftest.test_duration",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\tests\\conftest.py",
    "relative_path": "tools\\sim\\tests\\conftest.py",
    "depends_on": [],
    "start_line": 7,
    "end_line": 8,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.tests.test_metadrive_bridge.TestMetaDriveBridge": {
    "id": "tools.sim.tests.test_metadrive_bridge.TestMetaDriveBridge",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\tests\\test_metadrive_bridge.py",
    "relative_path": "tools\\sim\\tests\\test_metadrive_bridge.py",
    "depends_on": [],
    "start_line": 12,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.tests.test_metadrive_bridge.TestMetaDriveBridge.setup_create_bridge": {
    "id": "tools.sim.tests.test_metadrive_bridge.TestMetaDriveBridge.setup_create_bridge",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\tests\\test_metadrive_bridge.py",
    "relative_path": "tools\\sim\\tests\\test_metadrive_bridge.py",
    "depends_on": [],
    "start_line": 14,
    "end_line": 15,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.tests.test_metadrive_bridge.TestMetaDriveBridge.create_bridge": {
    "id": "tools.sim.tests.test_metadrive_bridge.TestMetaDriveBridge.create_bridge",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\tests\\test_metadrive_bridge.py",
    "relative_path": "tools\\sim\\tests\\test_metadrive_bridge.py",
    "depends_on": [],
    "start_line": 17,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.tests.test_sim_bridge.TestSimBridgeBase": {
    "id": "tools.sim.tests.test_sim_bridge.TestSimBridgeBase",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\tests\\test_sim_bridge.py",
    "relative_path": "tools\\sim\\tests\\test_sim_bridge.py",
    "depends_on": [
      "tools.sim.tests.test_sim_bridge.TestSimBridgeBase"
    ],
    "start_line": 14,
    "end_line": 92,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.tests.test_sim_bridge.TestSimBridgeBase.setup_class": {
    "id": "tools.sim.tests.test_sim_bridge.TestSimBridgeBase.setup_class",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\tests\\test_sim_bridge.py",
    "relative_path": "tools\\sim\\tests\\test_sim_bridge.py",
    "depends_on": [
      "tools.sim.tests.test_sim_bridge.TestSimBridgeBase"
    ],
    "start_line": 16,
    "end_line": 18,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.tests.test_sim_bridge.TestSimBridgeBase.setup_method": {
    "id": "tools.sim.tests.test_sim_bridge.TestSimBridgeBase.setup_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\tests\\test_sim_bridge.py",
    "relative_path": "tools\\sim\\tests\\test_sim_bridge.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 21,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.tests.test_sim_bridge.TestSimBridgeBase.test_driving": {
    "id": "tools.sim.tests.test_sim_bridge.TestSimBridgeBase.test_driving",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\tests\\test_sim_bridge.py",
    "relative_path": "tools\\sim\\tests\\test_sim_bridge.py",
    "depends_on": [],
    "start_line": 23,
    "end_line": 84,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.sim.tests.test_sim_bridge.TestSimBridgeBase.teardown_method": {
    "id": "tools.sim.tests.test_sim_bridge.TestSimBridgeBase.teardown_method",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\sim\\tests\\test_sim_bridge.py",
    "relative_path": "tools\\sim\\tests\\test_sim_bridge.py",
    "depends_on": [],
    "start_line": 86,
    "end_line": 92,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.tuning.measure_steering_accuracy.sigint_handler": {
    "id": "tools.tuning.measure_steering_accuracy.sigint_handler",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\tuning\\measure_steering_accuracy.py",
    "relative_path": "tools\\tuning\\measure_steering_accuracy.py",
    "depends_on": [],
    "start_line": 13,
    "end_line": 14,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.tuning.measure_steering_accuracy.SteeringAccuracyTool": {
    "id": "tools.tuning.measure_steering_accuracy.SteeringAccuracyTool",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\tuning\\measure_steering_accuracy.py",
    "relative_path": "tools\\tuning\\measure_steering_accuracy.py",
    "depends_on": [],
    "start_line": 17,
    "end_line": 112,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.tuning.measure_steering_accuracy.SteeringAccuracyTool.__init__": {
    "id": "tools.tuning.measure_steering_accuracy.SteeringAccuracyTool.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\tuning\\measure_steering_accuracy.py",
    "relative_path": "tools\\tuning\\measure_steering_accuracy.py",
    "depends_on": [],
    "start_line": 25,
    "end_line": 39,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.tuning.measure_steering_accuracy.SteeringAccuracyTool.update": {
    "id": "tools.tuning.measure_steering_accuracy.SteeringAccuracyTool.update",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\tuning\\measure_steering_accuracy.py",
    "relative_path": "tools\\tuning\\measure_steering_accuracy.py",
    "depends_on": [],
    "start_line": 41,
    "end_line": 112,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.webcam.camera.Camera": {
    "id": "tools.webcam.camera.Camera",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\webcam\\camera.py",
    "relative_path": "tools\\webcam\\camera.py",
    "depends_on": [
      "tools.webcam.camera.Camera"
    ],
    "start_line": 3,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.webcam.camera.Camera.__init__": {
    "id": "tools.webcam.camera.Camera.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\webcam\\camera.py",
    "relative_path": "tools\\webcam\\camera.py",
    "depends_on": [],
    "start_line": 4,
    "end_line": 17,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.webcam.camera.Camera.bgr2nv12": {
    "id": "tools.webcam.camera.Camera.bgr2nv12",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\webcam\\camera.py",
    "relative_path": "tools\\webcam\\camera.py",
    "depends_on": [],
    "start_line": 20,
    "end_line": 22,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.webcam.camera.Camera.read_frames": {
    "id": "tools.webcam.camera.Camera.read_frames",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\webcam\\camera.py",
    "relative_path": "tools\\webcam\\camera.py",
    "depends_on": [
      "tools.webcam.camera.Camera"
    ],
    "start_line": 24,
    "end_line": 29,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.webcam.camerad.Camerad": {
    "id": "tools.webcam.camerad.Camerad",
    "component_type": "class",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\webcam\\camerad.py",
    "relative_path": "tools\\webcam\\camerad.py",
    "depends_on": [],
    "start_line": 21,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.webcam.camerad.Camerad.__init__": {
    "id": "tools.webcam.camerad.Camerad.__init__",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\webcam\\camerad.py",
    "relative_path": "tools\\webcam\\camerad.py",
    "depends_on": [],
    "start_line": 22,
    "end_line": 34,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.webcam.camerad.Camerad._send_yuv": {
    "id": "tools.webcam.camerad.Camerad._send_yuv",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\webcam\\camerad.py",
    "relative_path": "tools\\webcam\\camerad.py",
    "depends_on": [],
    "start_line": 36,
    "end_line": 47,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.webcam.camerad.Camerad.camera_runner": {
    "id": "tools.webcam.camerad.Camerad.camera_runner",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\webcam\\camerad.py",
    "relative_path": "tools\\webcam\\camerad.py",
    "depends_on": [],
    "start_line": 49,
    "end_line": 54,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.webcam.camerad.Camerad.run": {
    "id": "tools.webcam.camerad.Camerad.run",
    "component_type": "method",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\webcam\\camerad.py",
    "relative_path": "tools\\webcam\\camerad.py",
    "depends_on": [],
    "start_line": 56,
    "end_line": 64,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  },
  "tools.webcam.camerad.main": {
    "id": "tools.webcam.camerad.main",
    "component_type": "function",
    "file_path": "D:\\DocAgent1 - Copy - Copy\\DocAgent\\data\\openpilot\\tools\\webcam\\camerad.py",
    "relative_path": "tools\\webcam\\camerad.py",
    "depends_on": [
      "tools.webcam.camerad.Camerad"
    ],
    "start_line": 67,
    "end_line": 69,
    "has_docstring": false,
    "docstring": "",
    "language": "python"
  }
}